{"version":3,"file":"lightning.es5.js","sources":["../src/tree/StageUtils.mjs","../src/tree/Utils.mjs","../src/tree/Base.mjs","../src/flex/layout/SpacingCalculator.mjs","../src/flex/layout/ContentAligner.mjs","../src/flex/FlexUtils.mjs","../src/flex/layout/line/SizeShrinker.mjs","../src/flex/layout/line/SizeGrower.mjs","../src/flex/layout/line/ItemPositioner.mjs","../src/flex/layout/line/ItemAligner.mjs","../src/flex/layout/line/LineLayout.mjs","../src/flex/layout/LineLayouter.mjs","../src/flex/layout/ItemCoordinatesUpdater.mjs","../src/flex/layout/FlexLayout.mjs","../src/flex/FlexContainer.mjs","../src/flex/FlexItem.mjs","../src/flex/FlexTarget.mjs","../src/tree/TextureSource.mjs","../src/tree/core/ElementTexturizer.mjs","../src/tree/core/ElementCore.mjs","../src/EventEmitter.mjs","../src/tree/Shader.mjs","../src/tree/Texture.mjs","../src/textures/ImageTexture.mjs","../src/textures/TextTextureRendererUtils.mts","../src/textures/TextTextureRenderer.mjs","../src/textures/TextTextureRendererAdvanced.mjs","../src/textures/TextTexture.mjs","../src/textures/SourceTexture.mjs","../src/animation/Transition.mjs","../src/tree/ObjectList.mjs","../src/tree/ElementChildList.mjs","../src/tree/Element.mjs","../src/application/StateMachine.mjs","../src/application/Component.mjs","../src/tree/core/CoreQuadList.mjs","../src/renderer/webgl/WebGLCoreQuadList.mjs","../src/tree/core/CoreQuadOperation.mjs","../src/renderer/webgl/WebGLCoreQuadOperation.mjs","../src/tree/core/CoreRenderExecutor.mjs","../src/renderer/webgl/WebGLCoreRenderExecutor.mjs","../src/tree/core/CoreRenderState.mjs","../src/renderer/webgl/WebGLShaderProgram.mjs","../src/renderer/webgl/WebGLShader.mjs","../src/renderer/webgl/shaders/DefaultShader.mjs","../src/renderer/Renderer.mjs","../src/renderer/webgl/WebGLRenderer.mjs","../src/renderer/c2d/C2dCoreQuadList.mjs","../src/renderer/c2d/C2dCoreQuadOperation.mjs","../src/renderer/c2d/C2dCoreRenderExecutor.mjs","../src/renderer/c2d/C2dShader.mjs","../src/renderer/c2d/shaders/DefaultShader.mjs","../src/renderer/c2d/C2dTextureTintManager.mjs","../src/renderer/c2d/C2dRenderer.mjs","../src/renderer/spark/shaders/SparkShader.mjs","../src/renderer/spark/SparkRenderer.mjs","../src/platforms/browser/ImageWorker.mjs","../src/platforms/browser/WebPlatform.mjs","../src/platforms/PlatformLoader.mjs","../src/tools/WebGLStateManager.mjs","../src/tree/TextureManager.mjs","../src/tree/TextureThrottler.mjs","../src/tree/core/CoreContext.mjs","../src/animation/TransitionSettings.mjs","../src/animation/TransitionManager.mjs","../src/tools/MultiSpline.mjs","../src/animation/AnimationActionSettings.mjs","../src/animation/AnimationSettings.mjs","../src/animation/Animation.mjs","../src/animation/AnimationManager.mjs","../src/textures/RectangleTexture.mjs","../src/tree/Stage.mjs","../src/application/Application.mjs","../src/textures/StaticCanvasTexture.mjs","../src/tools/Tools.mjs","../src/tools/ObjMerger.mjs","../src/tools/ObjectListProxy.mjs","../src/tools/ObjectListWrapper.mjs","../src/textures/NoiseTexture.mjs","../src/textures/HtmlTexture.mjs","../src/textures/StaticTexture.mjs","../src/components/ListComponent.mjs","../src/renderer/webgl/shaders/LinearBlurShader.mjs","../src/renderer/webgl/shaders/BoxBlurShader.mjs","../src/renderer/c2d/shaders/BlurShader.mjs","../src/components/FastBlurComponent.mjs","../src/components/BloomComponent.mjs","../src/components/SmoothScaleComponent.mjs","../src/components/BorderComponent.mjs","../src/renderer/common/shaders/GrayscaleShader.mjs","../src/renderer/webgl/shaders/DitheringShader.mjs","../src/renderer/webgl/shaders/CircularPushShader.mjs","../src/renderer/webgl/shaders/InversionShader.mjs","../src/renderer/webgl/shaders/OutlineShader.mjs","../src/renderer/webgl/shaders/PixelateShader.mjs","../src/renderer/webgl/shaders/RadialFilterShader.mjs","../src/renderer/webgl/shaders/RoundedRectangleShader.mjs","../src/renderer/webgl/shaders/FadeOutShader.mjs","../src/renderer/webgl/shaders/VignetteShader.mjs","../src/renderer/webgl/shaders/SpinnerShader.mjs","../src/renderer/webgl/shaders/HoleShader.mjs","../src/renderer/webgl/shaders/RadialGradientShader.mjs","../src/renderer/webgl/shaders/Light3dShader.mjs","../src/renderer/webgl/shaders/PerspectiveShader.mjs","../src/renderer/webgl/shaders/MagnifierShader.mjs","../src/renderer/webgl/shaders/SpinnerShader2.mjs","../src/lightning.mjs"],"sourcesContent":["/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class StageUtils {\n\n    static mergeNumbers(v1, v2, p) {\n        return v1 * p + v2 * (1 - p);\n    };\n\n    static rgb(r, g, b) {\n        return (r << 16) + (g << 8) + b + (255 * 16777216);\n    };\n\n    static rgba(r, g, b, a) {\n        return (r << 16) + (g << 8) + b + (((a * 255) | 0) * 16777216);\n    };\n\n    static getRgbString(color) {\n        let r = ((color / 65536) | 0) % 256;\n        let g = ((color / 256) | 0) % 256;\n        let b = color % 256;\n        return 'rgb(' + r + ',' + g + ',' + b + ')';\n    };\n\n    static getRgbaString(color) {\n        let r = ((color / 65536) | 0) % 256;\n        let g = ((color / 256) | 0) % 256;\n        let b = color % 256;\n        let a = ((color / 16777216) | 0) / 255;\n        return 'rgba(' + r + ',' + g + ',' + b + ',' + a.toFixed(4) + ')';\n    };\n\n    static getRgbaStringFromArray(color) {\n        let r = Math.floor(color[0] * 255);\n        let g = Math.floor(color[1] * 255);\n        let b = Math.floor(color[2] * 255);\n        let a = Math.floor(color[3] * 255) / 255;\n        return 'rgba(' + r + ',' + g + ',' + b + ',' + a.toFixed(4) + ')';\n    };\n\n    static getRgbaComponentsNormalized(argb) {\n        let r = ((argb / 65536) | 0) % 256;\n        let g = ((argb / 256) | 0) % 256;\n        let b = argb % 256;\n        let a = ((argb / 16777216) | 0);\n        return [r / 255, g / 255, b / 255, a / 255];\n    };\n\n    static getRgbComponentsNormalized(argb) {\n        let r = ((argb / 65536) | 0) % 256;\n        let g = ((argb / 256) | 0) % 256;\n        let b = argb % 256;\n        return [r / 255, g / 255, b / 255];\n    };\n\n    static getRgbaComponents(argb) {\n        let r = ((argb / 65536) | 0) % 256;\n        let g = ((argb / 256) | 0) % 256;\n        let b = argb % 256;\n        let a = ((argb / 16777216) | 0);\n        return [r, g, b, a];\n    };\n\n    static getArgbNumber(rgba) {\n        rgba[0] = Math.max(0, Math.min(255, rgba[0]));\n        rgba[1] = Math.max(0, Math.min(255, rgba[1]));\n        rgba[2] = Math.max(0, Math.min(255, rgba[2]));\n        rgba[3] = Math.max(0, Math.min(255, rgba[3]));\n        let v = ((rgba[3] | 0) << 24) + ((rgba[0] | 0) << 16) + ((rgba[1] | 0) << 8) + (rgba[2] | 0);\n        if (v < 0) {\n            v = 0xFFFFFFFF + v + 1;\n        }\n        return v;\n    };\n\n    static mergeColors(c1, c2, p) {\n        let r1 = ((c1 / 65536) | 0) % 256;\n        let g1 = ((c1 / 256) | 0) % 256;\n        let b1 = c1 % 256;\n        let a1 = ((c1 / 16777216) | 0);\n\n        let r2 = ((c2 / 65536) | 0) % 256;\n        let g2 = ((c2 / 256) | 0) % 256;\n        let b2 = c2 % 256;\n        let a2 = ((c2 / 16777216) | 0);\n\n        let r = r1 * p + r2 * (1 - p);\n        let g = g1 * p + g2 * (1 - p);\n        let b = b1 * p + b2 * (1 - p);\n        let a = a1 * p + a2 * (1 - p);\n\n        return Math.round(a) * 16777216 + Math.round(r) * 65536 + Math.round(g) * 256 + Math.round(b);\n    };\n\n    static mergeMultiColors(c, p) {\n        let r = 0, g = 0, b = 0, a = 0, t = 0;\n        let n = c.length;\n        for (let i = 0; i < n; i++) {\n            let r1 = ((c[i] / 65536) | 0) % 256;\n            let g1 = ((c[i] / 256) | 0) % 256;\n            let b1 = c[i] % 256;\n            let a1 = ((c[i] / 16777216) | 0);\n            r += r1 * p[i];\n            g += g1 * p[i];\n            b += b1 * p[i];\n            a += a1 * p[i];\n            t += p[i];\n        }\n\n        t = 1 / t;\n        return Math.round(a * t) * 16777216 + Math.round(r * t) * 65536 + Math.round(g * t) * 256 + Math.round(b * t);\n    };\n\n    static mergeMultiColorsEqual(c) {\n        let r = 0, g = 0, b = 0, a = 0, t = 0;\n        let n = c.length;\n        for (let i = 0; i < n; i++) {\n            let r1 = ((c[i] / 65536) | 0) % 256;\n            let g1 = ((c[i] / 256) | 0) % 256;\n            let b1 = c[i] % 256;\n            let a1 = ((c[i] / 16777216) | 0);\n            r += r1;\n            g += g1;\n            b += b1;\n            a += a1;\n            t += 1.0;\n        }\n\n        t = 1 / t;\n        return Math.round(a * t) * 16777216 + Math.round(r * t) * 65536 + Math.round(g * t) * 256 + Math.round(b * t);\n    };\n\n    static mergeColorAlpha(c, alpha) {\n        let a = ((c / 16777216 | 0) * alpha) | 0;\n        return (((((c >> 16) & 0xff) * a) / 255) & 0xff) +\n            ((((c & 0xff00) * a) / 255) & 0xff00) +\n            (((((c & 0xff) << 16) * a) / 255) & 0xff0000) +\n            (a << 24);\n    };\n\n    static rad(deg) {\n        return deg * (Math.PI / 180);\n    };\n\n    static getTimingBezier(a, b, c, d) {\n        let xc = 3.0 * a;\n        let xb = 3.0 * (c - a) - xc;\n        let xa = 1.0 - xc - xb;\n        let yc = 3.0 * b;\n        let yb = 3.0 * (d - b) - yc;\n        let ya = 1.0 - yc - yb;\n\n        return function (time) {\n            if (time >= 1.0) {\n                return 1;\n            }\n            if (time <= 0) {\n                return 0;\n            }\n\n            let t = 0.5, cbx, cbxd, dx;\n\n            for (let it = 0; it < 20; it++) {\n                cbx = t * (t * (t * xa + xb) + xc);\n                dx = time - cbx;\n                if (dx > -1e-8 && dx < 1e-8) {\n                    return t * (t * (t * ya + yb) + yc);\n                }\n\n                // Cubic bezier derivative.\n                cbxd = t * (t * (3 * xa) + 2 * xb) + xc;\n\n                if (cbxd > 1e-10 && cbxd < 1e-10) {\n                    // Problematic. Fall back to binary search method.\n                    break;\n                }\n\n                t += dx / cbxd;\n            }\n\n            // Fallback: binary search method. This is more reliable when there are near-0 slopes.\n            let minT = 0;\n            let maxT = 1;\n            for (let it = 0; it < 20; it++) {\n                t = 0.5 * (minT + maxT);\n\n                cbx = t * (t * (t * xa + xb) + xc);\n\n                dx = time - cbx;\n                if (dx > -1e-8 && dx < 1e-8) {\n                    // Solution found!\n                    return t * (t * (t * ya + yb) + yc);\n                }\n\n                if (dx < 0) {\n                    maxT = t;\n                } else {\n                    minT = t;\n                }\n            }\n\n        };\n    };\n\n    static getTimingFunction(str) {\n        switch (str) {\n            case \"linear\":\n                return function (time) {\n                    return time\n                };\n            case \"ease\":\n                return StageUtils.getTimingBezier(0.25, 0.1, 0.25, 1.0);\n            case \"ease-in\":\n                return StageUtils.getTimingBezier(0.42, 0, 1.0, 1.0);\n            case \"ease-out\":\n                return StageUtils.getTimingBezier(0, 0, 0.58, 1.0);\n            case \"ease-in-out\":\n                return StageUtils.getTimingBezier(0.42, 0, 0.58, 1.0);\n            case \"step-start\":\n                return function () {\n                    return 1\n                };\n            case \"step-end\":\n                return function (time) {\n                    return time === 1 ? 1 : 0;\n                };\n            default:\n                let s = \"cubic-bezier(\";\n                if (str && str.indexOf(s) === 0) {\n                    let parts = str.substr(s.length, str.length - s.length - 1).split(\",\");\n                    if (parts.length !== 4) {\n                        console.warn(\"[Lightning] Unknown timing function: \" + str);\n\n                        // Fallback: use linear.\n                        return function (time) {\n                            return time\n                        };\n                    }\n                    let a = parseFloat(parts[0]);\n                    let b = parseFloat(parts[1]);\n                    let c = parseFloat(parts[2]);\n                    let d = parseFloat(parts[3]);\n                    if (isNaN(a) || isNaN(b) || isNaN(c) || isNaN(d)) {\n                        console.warn(\"[Lightning] Unknown timing function: \" + str);\n                        // Fallback: use linear.\n                        return function (time) {\n                            return time\n                        };\n                    }\n\n                    return StageUtils.getTimingBezier(a, b, c, d);\n                } else {\n                    console.warn(\"[Lightning] Unknown timing function: \" + str);\n                    // Fallback: use linear.\n                    return function (time) {\n                        return time\n                    };\n                }\n        }\n    };\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class Utils {\n\n    static isFunction(value) {\n        return typeof value === 'function';\n    }\n\n    static isNumber(value) {\n        return typeof value === 'number';\n    }\n\n    static isInteger(value) {\n        return (typeof value === 'number' && (value % 1) === 0);\n    }\n\n    static isBoolean(value) {\n        return value === true || value === false;\n    }\n\n    static isString(value) {\n        return typeof value === 'string';\n    }\n\n    static clone(v) {\n        if (Utils.isObjectLiteral(v) || Array.isArray(v)) {\n            return Utils.getDeepClone(v);\n        } else {\n            // Copy by value.\n            return v;\n        }\n    }\n\n    static cloneObjShallow(obj) {\n        let keys = Object.keys(obj);\n        let clone = {}\n        for (let i = 0; i < keys.length; i++) {\n            clone[keys[i]] = obj[keys[i]];\n        }\n        return clone;\n    }\n\n    static merge(obj1, obj2) {\n        let keys = Object.keys(obj2);\n        for (let i = 0; i < keys.length; i++) {\n            obj1[keys[i]] = obj2[keys[i]];\n        }\n        return obj1;\n    }\n\n    static isObject(value) {\n        let type = typeof value;\n        return !!value && (type === 'object' || type === 'function');\n    }\n\n    static isPlainObject(value) {\n        let type = typeof value;\n        return !!value && (type === 'object');\n    }\n\n    static isObjectLiteral(value){\n        return typeof value === 'object' && value && value.constructor === Object;\n    }\n\n    static getArrayIndex(index, arr) {\n        return Utils.getModuloIndex(index, arr.length);\n    }\n\n    static getModuloIndex(index, len) {\n        if (len === 0) return index;\n        while (index < 0) {\n            index += Math.ceil(-index / len) * len;\n        }\n        index = index % len;\n        return index;\n    }\n\n    static getDeepClone(obj) {\n        let i, c;\n        if (Utils.isFunction(obj)) {\n            // Copy functions by reference.\n            return obj;\n        }\n        if (Array.isArray(obj)) {\n            c = [];\n            let keys = Object.keys(obj);\n            for (i = 0; i < keys.length; i++) {\n                c[keys[i]] = Utils.getDeepClone(obj[keys[i]]);\n            }\n            return c;\n        } else if (Utils.isObject(obj)) {\n            c = {}\n            let keys = Object.keys(obj);\n            for (i = 0; i < keys.length; i++) {\n                c[keys[i]] = Utils.getDeepClone(obj[keys[i]]);\n            }\n            return c;\n        } else {\n            return obj;\n        }\n    }\n\n    static equalValues(v1, v2) {\n        if ((typeof v1) !== (typeof v2)) return false;\n        if (Utils.isObjectLiteral(v1)) {\n            return Utils.isObjectLiteral(v2) && Utils.equalObjectLiterals(v1, v2);\n        } else if (Array.isArray(v1)) {\n            return Array.isArray(v2) && Utils.equalArrays(v1, v2);\n        } else {\n            return v1 === v2;\n        }\n    }\n\n    static equalObjectLiterals(obj1, obj2) {\n        let keys1 = Object.keys(obj1);\n        let keys2 = Object.keys(obj2);\n        if (keys1.length !== keys2.length) {\n            return false;\n        }\n\n        for (let i = 0, n = keys1.length; i < n; i++) {\n            const k1 = keys1[i];\n            const k2 = keys2[i];\n            if (k1 !== k2) {\n                return false;\n            }\n\n            const v1 = obj1[k1];\n            const v2 = obj2[k2];\n\n            if (!Utils.equalValues(v1, v2)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    static equalArrays(v1, v2) {\n        if (v1.length !== v2.length) {\n            return false;\n        }\n        for (let i = 0, n = v1.length; i < n; i++) {\n            if (!this.equalValues(v1[i], v2[i])) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    static setToArray(s) {\n        let result = [];\n        s.forEach(function (value) {\n            result.push(value);\n        });\n        return result;\n    }\n\n    static iteratorToArray(iterator) {\n        let result = [];\n        let iteratorResult = iterator.next();\n        while (!iteratorResult.done) {\n            result.push(iteratorResult.value);\n            iteratorResult = iterator.next();\n        }\n        return result;\n    }\n\n    static isUcChar(charcode) {\n        return charcode >= 65 && charcode <= 90;\n    }\n\n}\n\nUtils.isWeb = (typeof window !== \"undefined\") && (typeof sparkscene === \"undefined\");\nUtils.isWPE = Utils.isWeb && (navigator.userAgent.indexOf(\"WPE\") !== -1);\nUtils.isSpark = (typeof sparkscene !== \"undefined\");\nUtils.isNode = (typeof window === \"undefined\") || Utils.isSpark;\nUtils.isPS4 = Utils.isWeb && (navigator.userAgent.indexOf(\"PlayStation 4\") !== -1);\nUtils.isZiggo = Utils.isWeb && (navigator.userAgent.indexOf(\"EOSSTB\") !== -1 || navigator.userAgent.indexOf(\"HZNSTB\") !== -1);\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class Base {\n\n    static defaultSetter(obj, name, value) {\n        obj[name] = value;\n    }\n\n    static patchObject(obj, settings) {\n        if (!Utils.isObjectLiteral(settings)) {\n            console.error(\"[Lightning] Settings must be object literal\");\n        } else {\n            let names = Object.keys(settings);\n            for (let i = 0, n = names.length; i < n; i++) {\n                let name = names[i];\n\n                this.patchObjectProperty(obj, name, settings[name]);\n            }\n        }\n    }\n\n    static patchObjectProperty(obj, name, value) {\n        let setter = obj.setSetting || Base.defaultSetter;\n\n        if (name.charAt(0) === \"_\") {\n            // Disallow patching private variables.\n            if (name !== \"__create\") {\n                console.error(\"[Lightning] Patch of private property '\" + name + \"' is not allowed\");\n            }\n        } else if (name !== \"type\") {\n            // Type is a reserved keyword to specify the class type on creation.\n            if (Utils.isFunction(value) && value.__local) {\n                // Local function (Base.local(s => s.something))\n                value = value.__local(obj);\n            }\n\n            setter(obj, name, value);\n        }\n    }\n\n    static local(func) {\n        // This function can be used as an object setting, which is called with the target object.\n        func.__local = true;\n    }\n\n\n}\n\nimport Utils from \"./Utils.mjs\";\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class SpacingCalculator {\n\n    static getSpacing(mode, numberOfItems, remainingSpace) {\n        const itemGaps = (numberOfItems - 1);\n        let spacePerGap;\n\n        let spacingBefore, spacingBetween;\n\n        switch(mode) {\n            case \"flex-start\":\n                spacingBefore = 0;\n                spacingBetween = 0;\n                break;\n            case \"flex-end\":\n                spacingBefore = remainingSpace;\n                spacingBetween = 0;\n                break;\n            case \"center\":\n                spacingBefore = remainingSpace / 2;\n                spacingBetween = 0;\n                break;\n            case \"space-between\":\n                spacingBefore = 0;\n                spacingBetween = Math.max(0, remainingSpace) / itemGaps;\n                break;\n            case \"space-around\":\n                if (remainingSpace < 0) {\n                    return this.getSpacing(\"center\", numberOfItems, remainingSpace);\n                } else {\n                    spacePerGap = remainingSpace / (itemGaps + 1);\n                    spacingBefore = 0.5 * spacePerGap;\n                    spacingBetween = spacePerGap;\n                }\n                break;\n            case \"space-evenly\":\n                if (remainingSpace < 0) {\n                    return this.getSpacing(\"center\", numberOfItems, remainingSpace);\n                } else {\n                    spacePerGap = remainingSpace / (itemGaps + 2);\n                    spacingBefore = spacePerGap;\n                    spacingBetween = spacePerGap;\n                }\n                break;\n            case \"stretch\":\n                spacingBefore = 0;\n                spacingBetween = 0;\n                break;\n            default:\n                throw new Error(\"Unknown mode: \" + mode);\n        }\n\n        return {spacingBefore, spacingBetween}\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport SpacingCalculator from \"./SpacingCalculator.mjs\";\n\nexport default class ContentAligner {\n\n    constructor(layout) {\n        this._layout = layout;\n        this._totalCrossAxisSize = 0;\n    }\n\n    get _lines() {\n        return this._layout._lines;\n    }\n\n    init() {\n        this._totalCrossAxisSize = this._getTotalCrossAxisSize();\n    }\n\n    align() {\n        const crossAxisSize = this._layout.crossAxisSize;\n        const remainingSpace = crossAxisSize - this._totalCrossAxisSize;\n\n        const {spacingBefore, spacingBetween} = this._getSpacing(remainingSpace);\n\n        const lines = this._lines;\n\n        const mode = this._layout._flexContainer.alignContent;\n        let growSize = 0;\n        if (mode === \"stretch\" && lines.length && (remainingSpace > 0)) {\n            growSize = remainingSpace / lines.length;\n        }\n\n        let currentPos = spacingBefore;\n        for (let i = 0, n = lines.length; i < n; i++) {\n            const crossAxisLayoutOffset = currentPos;\n            const aligner = lines[i].createItemAligner();\n\n            let finalCrossAxisLayoutSize = lines[i].crossAxisLayoutSize + growSize;\n\n            aligner.setCrossAxisLayoutSize(finalCrossAxisLayoutSize);\n            aligner.setCrossAxisLayoutOffset(crossAxisLayoutOffset);\n\n            aligner.align();\n\n            if (aligner.recursiveResizeOccured) {\n                lines[i].setItemPositions();\n            }\n\n            currentPos += finalCrossAxisLayoutSize;\n            currentPos += spacingBetween;\n        }\n    }\n\n    get totalCrossAxisSize() {\n        return this._totalCrossAxisSize;\n    }\n\n    _getTotalCrossAxisSize() {\n        const lines = this._lines;\n        let total = 0;\n        for (let i = 0, n = lines.length; i < n; i++) {\n            const line = lines[i];\n            total += line.crossAxisLayoutSize;\n        }\n        return total;\n    }\n\n    _getSpacing(remainingSpace) {\n        const mode = this._layout._flexContainer.alignContent;\n        const numberOfItems = this._lines.length;\n        return SpacingCalculator.getSpacing(mode, numberOfItems, remainingSpace);\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class FlexUtils {\n\n    static getParentAxisSizeWithPadding(item, horizontal) {\n        const target = item.target;\n        const parent = target.getParent();\n        if (!parent) {\n            return 0;\n        } else {\n            const flexParent = item.flexParent;\n            if (flexParent) {\n                // Use pending layout size.\n                return this.getAxisLayoutSize(flexParent, horizontal) + this.getTotalPadding(flexParent, horizontal);\n            } else {\n                // Use 'absolute' size.\n                return horizontal ? parent.w : parent.h;\n            }\n        }\n    }\n\n    static getRelAxisSize(item, horizontal) {\n        if (horizontal) {\n            if (item.funcW) {\n                if (this._allowRelAxisSizeFunction(item, true)) {\n                    return item.funcW(this.getParentAxisSizeWithPadding(item, true));\n                } else {\n                    return 0;\n                }\n            } else {\n                return item.originalWidth;\n            }\n        } else {\n            if (item.funcH) {\n                if (this._allowRelAxisSizeFunction(item, false)) {\n                    return item.funcH(this.getParentAxisSizeWithPadding(item, false));\n                } else {\n                    return 0;\n                }\n            } else {\n                return item.originalHeight;\n            }\n        }\n    }\n\n    static _allowRelAxisSizeFunction(item, horizontal) {\n        const flexParent = item.flexParent;\n        if (flexParent && flexParent._flex._layout.isAxisFitToContents(horizontal)) {\n            // We don't allow relative width on fit-to-contents because it leads to conflicts.\n            return false;\n        }\n        return true;\n    }\n\n    static isZeroAxisSize(item, horizontal) {\n        if (horizontal) {\n            return !item.originalWidth && !item.funcW;\n        } else {\n            return !item.originalHeight && !item.funcH;\n        }\n    }\n\n    static getAxisLayoutPos(item, horizontal) {\n        return horizontal ? item.x : item.y;\n    }\n\n    static getAxisLayoutSize(item, horizontal) {\n        return horizontal ? item.w : item.h;\n    }\n\n    static setAxisLayoutPos(item, horizontal, pos) {\n        if (horizontal) {\n            item.x = pos;\n        } else {\n            item.y = pos;\n        }\n    }\n\n    static setAxisLayoutSize(item, horizontal, size) {\n        if (horizontal) {\n            item.w = size;\n        } else {\n            item.h = size;\n        }\n    }\n\n    static getAxisMinSize(item, horizontal) {\n        let minSize = this.getPlainAxisMinSize(item, horizontal);\n\n        let flexItemMinSize = 0;\n        if (item.isFlexItemEnabled()) {\n            flexItemMinSize = item._flexItem._getMinSizeSetting(horizontal);\n        }\n\n        const hasLimitedMinSize = (flexItemMinSize > 0);\n        if (hasLimitedMinSize) {\n            minSize = Math.max(minSize, flexItemMinSize);\n        }\n        return minSize;\n    }\n\n    static getPlainAxisMinSize(item, horizontal) {\n        if (item.isFlexEnabled()) {\n            return item._flex._layout.getAxisMinSize(horizontal);\n        } else {\n            const isShrinkable = (item.flexItem.shrink !== 0);\n            if (isShrinkable) {\n                return 0;\n            } else {\n                return this.getRelAxisSize(item, horizontal);\n            }\n        }\n    }\n\n    static resizeAxis(item, horizontal, size) {\n        if (item.isFlexEnabled()) {\n            const isMainAxis = (item._flex._horizontal === horizontal);\n            if (isMainAxis) {\n                item._flex._layout.resizeMainAxis(size);\n            } else {\n                item._flex._layout.resizeCrossAxis(size);\n            }\n        } else {\n            this.setAxisLayoutSize(item, horizontal, size);\n        }\n    }\n\n\n    static getPaddingOffset(item, horizontal) {\n        if (item.isFlexEnabled()) {\n            const flex = item._flex;\n            if (horizontal) {\n                return flex.paddingLeft;\n            } else {\n                return flex.paddingTop;\n            }\n        } else {\n            return 0;\n        }\n    }\n\n    static getTotalPadding(item, horizontal) {\n        if (item.isFlexEnabled()) {\n            const flex = item._flex;\n            if (horizontal) {\n                return flex.paddingRight + flex.paddingLeft;\n            } else {\n                return flex.paddingTop + flex.paddingBottom;\n            }\n        } else {\n            return 0;\n        }\n    }\n\n    static getMarginOffset(item, horizontal) {\n        const flexItem = item.flexItem;\n        if (flexItem) {\n            if (horizontal) {\n                return flexItem.marginLeft;\n            } else {\n                return flexItem.marginTop;\n            }\n        } else {\n            return 0;\n        }\n    }\n\n    static getTotalMargin(item, horizontal) {\n        const flexItem = item.flexItem;\n        if (flexItem) {\n            if (horizontal) {\n                return flexItem.marginRight + flexItem.marginLeft;\n            } else {\n                return flexItem.marginTop + flexItem.marginBottom;\n            }\n        } else {\n            return 0;\n        }\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class SizeShrinker {\n\n    constructor(line) {\n        this._line = line;\n        this._amountRemaining = 0;\n        this._shrunkSize = 0;\n    }\n\n    shrink(amount) {\n        this._shrunkSize = 0;\n\n        this._amountRemaining = amount;\n        let totalShrinkAmount = this._getTotalShrinkAmount();\n        if (totalShrinkAmount) {\n            const items = this._line.items;\n            do {\n                let amountPerShrink = this._amountRemaining / totalShrinkAmount;\n                for (let i = this._line.startIndex; i <= this._line.endIndex; i++) {\n                    const item = items[i];\n                    const flexItem = item.flexItem;\n                    const shrinkAmount = flexItem.shrink;\n                    const isShrinkableItem = (shrinkAmount > 0);\n                    if (isShrinkableItem) {\n                        let shrink = shrinkAmount * amountPerShrink;\n                        const minSize = flexItem._getMainAxisMinSize();\n                        const size = flexItem._getMainAxisLayoutSize();\n                        if (size > minSize) {\n                            const maxShrink = size - minSize;\n                            const isFullyShrunk = (shrink >= maxShrink);\n                            if (isFullyShrunk) {\n                                shrink = maxShrink;\n\n                                // Destribute remaining amount over the other flex items.\n                                totalShrinkAmount -= shrinkAmount;\n                            }\n\n                            const finalSize = size - shrink;\n                            flexItem._resizeMainAxis(finalSize);\n\n                            this._shrunkSize += shrink;\n                            this._amountRemaining -= shrink;\n\n                            if (Math.abs(this._amountRemaining) < 10e-6) {\n                                return;\n                            }\n                        }\n                    }\n                }\n            } while(totalShrinkAmount && (Math.abs(this._amountRemaining) > 10e-6));\n        }\n    }\n\n    _getTotalShrinkAmount() {\n        let total = 0;\n        const items = this._line.items;\n        for (let i = this._line.startIndex; i <= this._line.endIndex; i++) {\n            const item = items[i];\n            const flexItem = item.flexItem;\n\n            if (flexItem.shrink) {\n                const minSize = flexItem._getMainAxisMinSize();\n                const size = flexItem._getMainAxisLayoutSize();\n\n                // Exclude those already fully shrunk.\n                if (size > minSize) {\n                    total += flexItem.shrink;\n                }\n            }\n        }\n        return total;\n    }\n\n    getShrunkSize() {\n        return this._shrunkSize;\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class SizeGrower {\n\n    constructor(line) {\n        this._line = line;\n        this._amountRemaining = 0;\n        this._grownSize = 0;\n    }\n\n    grow(amount) {\n        this._grownSize = 0;\n\n        this._amountRemaining = amount;\n        let totalGrowAmount = this._getTotalGrowAmount();\n        if (totalGrowAmount) {\n            const items = this._line.items;\n            do {\n                let amountPerGrow = this._amountRemaining / totalGrowAmount;\n                for (let i = this._line.startIndex; i <= this._line.endIndex; i++) {\n                    const item = items[i];\n                    const flexItem = item.flexItem;\n                    const growAmount = flexItem.grow;\n                    const isGrowableItem = (growAmount > 0);\n                    if (isGrowableItem) {\n                        let grow = growAmount * amountPerGrow;\n                        const maxSize = flexItem._getMainAxisMaxSizeSetting();\n                        const size = flexItem._getMainAxisLayoutSize();\n                        if (maxSize > 0) {\n                            if (size >= maxSize) {\n                                // Already fully grown.\n                                grow = 0;\n                            } else {\n                                const maxGrow = maxSize - size;\n                                const isFullyGrown = (grow >= maxGrow);\n                                if (isFullyGrown) {\n                                    grow = maxGrow;\n\n                                    // Destribute remaining amount over the other flex items.\n                                    totalGrowAmount -= growAmount;\n                                }\n                            }\n                        }\n\n                        if (grow > 0) {\n                            const finalSize = size + grow;\n                            flexItem._resizeMainAxis(finalSize);\n\n                            this._grownSize += grow;\n                            this._amountRemaining -= grow;\n\n                            if (Math.abs(this._amountRemaining) < 10e-6) {\n                                return;\n                            }\n                        }\n                    }\n                }\n            } while(totalGrowAmount && (Math.abs(this._amountRemaining) > 10e-6));\n        }\n    }\n\n    _getTotalGrowAmount() {\n        let total = 0;\n        const items = this._line.items;\n        for (let i = this._line.startIndex; i <= this._line.endIndex; i++) {\n            const item = items[i];\n            const flexItem = item.flexItem;\n\n            if (flexItem.grow) {\n                const maxSize = flexItem._getMainAxisMaxSizeSetting();\n                const size = flexItem._getMainAxisLayoutSize();\n\n                // Exclude those already fully grown.\n                if (maxSize === 0 || size < maxSize) {\n                    total += flexItem.grow;\n                }\n            }\n        }\n        return total;\n    }\n\n    getGrownSize() {\n        return this._grownSize;\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport SpacingCalculator from \"../SpacingCalculator.mjs\";\n\nexport default class ItemPositioner {\n\n    constructor(lineLayout) {\n        this._line = lineLayout;\n    }\n\n    get _layout() {\n        return this._line._layout;\n    }\n\n    position() {\n        const {spacingBefore, spacingBetween} = this._getSpacing();\n\n        let currentPos = spacingBefore;\n\n        const items = this._line.items;\n        for (let i = this._line.startIndex; i <= this._line.endIndex; i++) {\n            const item = items[i];\n\n            item.flexItem._setMainAxisLayoutPos(currentPos);\n            currentPos += item.flexItem._getMainAxisLayoutSizeWithPaddingAndMargin();\n            currentPos += spacingBetween;\n        }\n    }\n\n    _getSpacing() {\n        const remainingSpace = this._line._availableSpace;\n        let mode = this._layout._flexContainer.justifyContent;\n        const numberOfItems = this._line.numberOfItems;\n\n        return SpacingCalculator.getSpacing(mode, numberOfItems, remainingSpace);\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class ItemAligner {\n\n    constructor(line) {\n        this._line = line;\n        this._crossAxisLayoutSize = 0;\n        this._crossAxisLayoutOffset = 0;\n        this._alignItemsSetting = null;\n        this._recursiveResizeOccured = false;\n        this._isCrossAxisFitToContents = false;\n    }\n\n    get _layout() {\n        return this._line._layout;\n    }\n\n    get _flexContainer() {\n        return this._layout._flexContainer;\n    }\n\n    setCrossAxisLayoutSize(size) {\n        this._crossAxisLayoutSize = size;\n    }\n\n    setCrossAxisLayoutOffset(offset) {\n        this._crossAxisLayoutOffset = offset;\n    }\n\n    align() {\n        this._alignItemsSetting = this._flexContainer.alignItems;\n\n        this._isCrossAxisFitToContents = this._layout.isAxisFitToContents(!this._flexContainer._horizontal);\n\n        this._recursiveResizeOccured = false;\n        const items = this._line.items;\n        for (let i = this._line.startIndex; i <= this._line.endIndex; i++) {\n            const item = items[i];\n            this._alignItem(item);\n        }\n    }\n\n    get recursiveResizeOccured() {\n        return this._recursiveResizeOccured;\n    }\n\n    _alignItem(item) {\n        const flexItem = item.flexItem;\n        let align = flexItem.alignSelf || this._alignItemsSetting;\n\n        if (align === \"stretch\" && this._preventStretch(flexItem)) {\n            align = \"flex-start\";\n        }\n\n        if (align !== \"stretch\" && !this._isCrossAxisFitToContents) {\n            if (flexItem._hasRelCrossAxisSize()) {\n                // As cross axis size might have changed, we need to recalc the relative flex item's size.\n                flexItem._resetCrossAxisLayoutSize();\n            }\n        }\n\n        switch(align) {\n            case \"flex-start\":\n                this._alignItemFlexStart(flexItem);\n                break;\n            case \"flex-end\":\n                this._alignItemFlexEnd(flexItem);\n                break;\n            case \"center\":\n                this._alignItemFlexCenter(flexItem);\n                break;\n            case \"stretch\":\n                this._alignItemStretch(flexItem);\n                break;\n        }\n    }\n\n    _alignItemFlexStart(flexItem) {\n        flexItem._setCrossAxisLayoutPos(this._crossAxisLayoutOffset);\n    }\n\n    _alignItemFlexEnd(flexItem) {\n        const itemCrossAxisSize = flexItem._getCrossAxisLayoutSizeWithPaddingAndMargin();\n        flexItem._setCrossAxisLayoutPos(this._crossAxisLayoutOffset + (this._crossAxisLayoutSize - itemCrossAxisSize));\n    }\n\n    _alignItemFlexCenter(flexItem) {\n        const itemCrossAxisSize = flexItem._getCrossAxisLayoutSizeWithPaddingAndMargin();\n        const center = (this._crossAxisLayoutSize - itemCrossAxisSize) / 2;\n        flexItem._setCrossAxisLayoutPos(this._crossAxisLayoutOffset + center);\n    }\n\n    _alignItemStretch(flexItem) {\n        flexItem._setCrossAxisLayoutPos(this._crossAxisLayoutOffset);\n\n        const mainAxisLayoutSizeBeforeResize = flexItem._getMainAxisLayoutSize();\n        let size = this._crossAxisLayoutSize - flexItem._getCrossAxisMargin() - flexItem._getCrossAxisPadding();\n\n        const crossAxisMinSizeSetting = flexItem._getCrossAxisMinSizeSetting();\n        if (crossAxisMinSizeSetting > 0) {\n            size = Math.max(size, crossAxisMinSizeSetting);\n        }\n\n        const crossAxisMaxSizeSetting = flexItem._getCrossAxisMaxSizeSetting();\n        const crossAxisMaxSizeSettingEnabled = (crossAxisMaxSizeSetting > 0);\n        if (crossAxisMaxSizeSettingEnabled) {\n            size = Math.min(size, crossAxisMaxSizeSetting);\n        }\n\n        flexItem._resizeCrossAxis(size);\n        const mainAxisLayoutSizeAfterResize = flexItem._getMainAxisLayoutSize();\n\n        const recursiveResize = (mainAxisLayoutSizeAfterResize !== mainAxisLayoutSizeBeforeResize);\n        if (recursiveResize) {\n            // Recursive resize can happen when this flex item has the opposite direction than the container\n            // and is wrapping and auto-sizing. Due to item/content stretching the main axis size of the flex\n            // item may decrease. If it does so, we must re-justify-content the complete line.\n            // Notice that we don't account for changes to the (if autosized) main axis size caused by recursive\n            // resize, which may cause the container's main axis to not shrink to the contents properly.\n            // This is by design, because if we had re-run the main axis layout, we could run into issues such\n            // as slow layout or endless loops.\n            this._recursiveResizeOccured = true;\n        }\n    }\n\n    _preventStretch(flexItem) {\n        const hasFixedCrossAxisSize = flexItem._hasFixedCrossAxisSize();\n        const forceStretch = (flexItem.alignSelf === \"stretch\");\n        return hasFixedCrossAxisSize && !forceStretch;\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport SizeShrinker from \"./SizeShrinker.mjs\";\nimport SizeGrower from \"./SizeGrower.mjs\";\nimport ItemPositioner from \"./ItemPositioner.mjs\";\nimport ItemAligner from \"./ItemAligner.mjs\";\n\nexport default class LineLayout {\n\n    constructor(layout, startIndex, endIndex, availableSpace) {\n        this._layout = layout;\n        this.items = layout.items;\n        this.startIndex = startIndex;\n        this.endIndex = endIndex;\n        this._availableSpace = availableSpace;\n    }\n\n    performLayout() {\n        this._setItemSizes();\n        this.setItemPositions();\n        this._calcLayoutInfo();\n    }\n\n    _setItemSizes() {\n        if (this._availableSpace > 0) {\n            this._growItemSizes(this._availableSpace);\n        } else if (this._availableSpace < 0) {\n            this._shrinkItemSizes(-this._availableSpace);\n        }\n    }\n\n    _growItemSizes(amount) {\n        const grower = new SizeGrower(this);\n        grower.grow(amount);\n        this._availableSpace -= grower.getGrownSize();\n    }\n\n    _shrinkItemSizes(amount) {\n        const shrinker = new SizeShrinker(this);\n        shrinker.shrink(amount);\n        this._availableSpace += shrinker.getShrunkSize();\n    }\n\n    setItemPositions() {\n        const positioner = new ItemPositioner(this);\n        positioner.position();\n    }\n\n    createItemAligner() {\n        return new ItemAligner(this);\n    }\n\n    _calcLayoutInfo() {\n        this._calcCrossAxisMaxLayoutSize();\n    }\n\n    getMainAxisMinSize() {\n        let mainAxisMinSize = 0;\n        for (let i = this.startIndex; i <= this.endIndex; i++) {\n            const item = this.items[i];\n            mainAxisMinSize += item.flexItem._getMainAxisMinSizeWithPaddingAndMargin();\n        }\n        return mainAxisMinSize;\n    }\n    \n    get numberOfItems() {\n        return this.endIndex - this.startIndex + 1;\n    }\n\n    get crossAxisLayoutSize() {\n        const noSpecifiedCrossAxisSize = (this._layout.isCrossAxisFitToContents() && !this._layout.resizingCrossAxis);\n        const shouldFitToContents = (this._layout.isWrapping() || noSpecifiedCrossAxisSize);\n        if (shouldFitToContents) {\n            return this._crossAxisMaxLayoutSize;\n        } else {\n            return this._layout.crossAxisSize;\n        }\n    }\n\n    _calcCrossAxisMaxLayoutSize() {\n        this._crossAxisMaxLayoutSize = this._getCrossAxisMaxLayoutSize();\n    }\n\n    _getCrossAxisMaxLayoutSize() {\n        let crossAxisMaxSize = 0;\n        for (let i = this.startIndex; i <= this.endIndex; i++) {\n            const item = this.items[i];\n            crossAxisMaxSize = Math.max(crossAxisMaxSize, item.flexItem._getCrossAxisLayoutSizeWithPaddingAndMargin());\n        }\n        return crossAxisMaxSize;\n    }\n\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport LineLayout from \"./line/LineLayout.mjs\";\n\n/**\n * Distributes items over layout lines.\n */\nexport default class LineLayouter {\n\n    constructor(layout) {\n        this._layout = layout;\n        this._mainAxisMinSize = -1;\n        this._crossAxisMinSize = -1;\n        this._mainAxisContentSize = 0;\n    }\n\n    get lines() {\n        return this._lines;\n    }\n\n    get mainAxisMinSize() {\n        if (this._mainAxisMinSize === -1) {\n            this._mainAxisMinSize = this._getMainAxisMinSize();\n        }\n        return this._mainAxisMinSize;\n    }\n\n    get crossAxisMinSize() {\n        if (this._crossAxisMinSize === -1) {\n            this._crossAxisMinSize = this._getCrossAxisMinSize();\n        }\n        return this._crossAxisMinSize;\n    }\n\n    get mainAxisContentSize() {\n        return this._mainAxisContentSize;\n    }\n\n    layoutLines() {\n        this._setup();\n        const items = this._layout.items;\n        const wrap = this._layout.isWrapping();\n\n        let startIndex = 0;\n        let i;\n        const n = items.length;\n        for (i = 0; i < n; i++) {\n            const item = items[i];\n\n            this._layoutFlexItem(item);\n\n            // Get predicted main axis size.\n            const itemMainAxisSize = item.flexItem._getMainAxisLayoutSizeWithPaddingAndMargin();\n\n            if (wrap && (i > startIndex)) {\n                const isOverflowing = (this._curMainAxisPos + itemMainAxisSize > this._mainAxisSize);\n                if (isOverflowing) {\n                    this._layoutLine(startIndex, i - 1);\n                    this._curMainAxisPos = 0;\n                    startIndex = i;\n                }\n            }\n\n            this._addToMainAxisPos(itemMainAxisSize);\n        }\n\n        if (startIndex < i) {\n            this._layoutLine(startIndex, i - 1);\n        }\n    }\n\n    _layoutFlexItem(item) {\n        if (item.isFlexEnabled()) {\n            item.flexLayout.updateTreeLayout();\n        } else {\n            item.flexItem._resetLayoutSize();\n        }\n    }\n\n    _setup() {\n        this._mainAxisSize = this._layout.mainAxisSize;\n        this._curMainAxisPos = 0;\n        this._maxMainAxisPos = 0;\n        this._lines = [];\n\n        this._mainAxisMinSize = -1;\n        this._crossAxisMinSize = -1;\n        this._mainAxisContentSize = 0;\n    }\n\n    _addToMainAxisPos(itemMainAxisSize) {\n        this._curMainAxisPos += itemMainAxisSize;\n        if (this._curMainAxisPos > this._maxMainAxisPos) {\n            this._maxMainAxisPos = this._curMainAxisPos;\n        }\n    }\n\n    _layoutLine(startIndex, endIndex) {\n        const availableSpace = this._getAvailableMainAxisLayoutSpace();\n        const line = new LineLayout(this._layout, startIndex, endIndex, availableSpace);\n        line.performLayout();\n        this._lines.push(line);\n\n        if (this._mainAxisContentSize === 0 || (this._curMainAxisPos > this._mainAxisContentSize)) {\n            this._mainAxisContentSize = this._curMainAxisPos;\n        }\n    }\n\n    _getAvailableMainAxisLayoutSpace() {\n        if (!this._layout.resizingMainAxis && this._layout.isMainAxisFitToContents()) {\n            return 0;\n        } else {\n            return this._mainAxisSize - this._curMainAxisPos;\n        }\n    }\n\n    _getCrossAxisMinSize() {\n        let crossAxisMinSize = 0;\n        const items = this._layout.items;\n        for (let i = 0, n = items.length; i < n; i++) {\n            const item = items[i];\n            const itemCrossAxisMinSize = item.flexItem._getCrossAxisMinSizeWithPaddingAndMargin();\n            crossAxisMinSize = Math.max(crossAxisMinSize, itemCrossAxisMinSize);\n        }\n        return crossAxisMinSize;\n    }\n\n    _getMainAxisMinSize() {\n        if (this._lines.length === 1) {\n            return this._lines[0].getMainAxisMinSize();\n        } else {\n            // Wrapping lines: specified width is used as min width (in accordance to W3C flexbox).\n            return this._layout.mainAxisSize;\n        }\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport FlexUtils from \"../FlexUtils.mjs\";\n\nexport default class ItemCoordinatesUpdater {\n\n    constructor(layout) {\n        this._layout = layout;\n        this._isReverse = this._flexContainer._reverse;\n        this._horizontalPaddingOffset = this._layout._getHorizontalPaddingOffset();\n        this._verticalPaddingOffset = this._layout._getVerticalPaddingOffset();\n    }\n\n    get _flexContainer() {\n        return this._layout._flexContainer;\n    }\n\n    finalize() {\n        const parentFlex = this._layout.getParentFlexContainer();\n        if (parentFlex) {\n            // We must update it from the parent to set padding offsets and reverse position.\n            const updater = new ItemCoordinatesUpdater(parentFlex._layout);\n            updater._finalizeItemAndChildren(this._flexContainer.item);\n        } else {\n            this._finalizeRoot();\n            this._finalizeItems();\n        }\n    }\n\n    _finalizeRoot() {\n        const item = this._flexContainer.item;\n        let x = FlexUtils.getAxisLayoutPos(item, true);\n        let y = FlexUtils.getAxisLayoutPos(item, false);\n        let w = FlexUtils.getAxisLayoutSize(item, true);\n        let h = FlexUtils.getAxisLayoutSize(item, false);\n\n        w += this._layout._getHorizontalPadding();\n        h += this._layout._getVerticalPadding();\n\n        item.clearRecalcFlag();\n\n        item.setLayout(x, y, w, h);\n    }\n\n    _finalizeItems() {\n        const items = this._layout.items;\n        for (let i = 0, n = items.length; i < n; i++) {\n            const item = items[i];\n            const validCache = this._validateItemCache(item);\n\n            // Notice that we must also finalize a cached items, as it's coordinates may have changed.\n            this._finalizeItem(item);\n\n            if (!validCache) {\n                this._finalizeItemChildren(item);\n            }\n        }\n    }\n\n    _validateItemCache(item) {\n        if (item.recalc === 0) {\n            if (item.isFlexEnabled()) {\n                const layout = item._flex._layout;\n\n                const dimensionsMatchPreviousResult = (item.w === item.target.w && item.h === item.target.h);\n                if (dimensionsMatchPreviousResult) {\n                    // Cache is valid.\n                    return true;\n                } else {\n                    const crossAxisSize = layout.crossAxisSize;\n                    layout.performResizeMainAxis(layout.mainAxisSize);\n                    layout.performResizeCrossAxis(crossAxisSize);\n                }\n            }\n        }\n        return false;\n    }\n\n    _finalizeItemAndChildren(item) {\n        this._finalizeItem(item);\n        this._finalizeItemChildren(item);\n    }\n\n    _finalizeItem(item) {\n        if (this._isReverse) {\n            this._reverseMainAxisLayoutPos(item);\n        }\n\n        let x = FlexUtils.getAxisLayoutPos(item, true);\n        let y = FlexUtils.getAxisLayoutPos(item, false);\n        let w = FlexUtils.getAxisLayoutSize(item, true);\n        let h = FlexUtils.getAxisLayoutSize(item, false);\n\n        x += this._horizontalPaddingOffset;\n        y += this._verticalPaddingOffset;\n\n        const flex = item.flex;\n        if (flex) {\n            w += item._flex._layout._getHorizontalPadding();\n            h += item._flex._layout._getVerticalPadding();\n        }\n\n        const flexItem = item.flexItem;\n        if (flexItem) {\n            x += flexItem._getHorizontalMarginOffset();\n            y += flexItem._getVerticalMarginOffset();\n        }\n\n        item.clearRecalcFlag();\n        item.setLayout(x, y, w, h);\n    }\n\n    _finalizeItemChildren(item) {\n        const flex = item._flex;\n        if (flex) {\n            const updater = new ItemCoordinatesUpdater(flex._layout);\n            updater._finalizeItems();\n        }\n    }\n\n    _reverseMainAxisLayoutPos(item) {\n        if (item._reversed && item._recalc == 0) {\n            item._reversed = false;\n        }\n        if (!item._reversed) {\n            const endPos = (item.flexItem._getMainAxisLayoutPos() + item.flexItem._getMainAxisLayoutSizeWithPaddingAndMargin());\n            const reversedPos = this._layout.mainAxisSize - endPos;\n            item.flexItem._setMainAxisLayoutPos(reversedPos);\n            if (item._recalc != 0) {\n                item._reversed = true;\n            }\n        }\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport ContentAligner from \"./ContentAligner.mjs\";\nimport FlexUtils from \"../FlexUtils.mjs\";\nimport LineLayouter from \"./LineLayouter.mjs\";\nimport ItemCoordinatesUpdater from \"./ItemCoordinatesUpdater.mjs\";\n\n/**\n * Layouts a flex container (and descendants).\n */\nexport default class FlexLayout {\n\n    constructor(flexContainer) {\n        this._flexContainer = flexContainer;\n\n        this._lineLayouter = new LineLayouter(this);\n\n        this._resizingMainAxis = false;\n        this._resizingCrossAxis = false;\n\n        this._cachedMainAxisSizeAfterLayout = 0;\n        this._cachedCrossAxisSizeAfterLayout = 0;\n\n        this._shrunk = false;\n    }\n\n    get shrunk() {\n        return this._shrunk;\n    }\n\n    get recalc() {\n        return this.item.recalc;\n    }\n\n    layoutTree() {\n        const isSubTree = (this.item.flexParent !== null);\n        if (isSubTree) {\n            // Use the dimensions set by the parent flex tree.\n            this._updateSubTreeLayout();\n        } else {\n            this.updateTreeLayout();\n        }\n        this.updateItemCoords();\n    }\n\n    updateTreeLayout() {\n        if (this.recalc) {\n            this._performUpdateLayoutTree();\n        } else {\n            this._performUpdateLayoutTreeFromCache();\n        }\n    }\n\n    _performUpdateLayoutTree() {\n        this._setInitialAxisSizes();\n        this._layoutAxes();\n        this._refreshLayoutCache();\n    }\n\n    _refreshLayoutCache() {\n        this._cachedMainAxisSizeAfterLayout = this.mainAxisSize;\n        this._cachedCrossAxisSizeAfterLayout = this.crossAxisSize;\n    }\n\n    _performUpdateLayoutTreeFromCache() {\n        const sizeMightHaveChanged = (this.item.funcW || this.item.funcH);\n        if (sizeMightHaveChanged) {\n            // Update after all.\n            this.item.enableLocalRecalcFlag();\n            this._performUpdateLayoutTree();\n        } else {\n            this.mainAxisSize = this._cachedMainAxisSizeAfterLayout;\n            this.crossAxisSize = this._cachedCrossAxisSizeAfterLayout;\n        }\n    }\n\n    updateItemCoords() {\n        const updater = new ItemCoordinatesUpdater(this);\n        updater.finalize();\n    }\n\n    _updateSubTreeLayout() {\n        // The dimensions of this container are guaranteed not to have changed.\n        // That's why we can safely 'reuse' those and re-layout the contents.\n        const crossAxisSize = this.crossAxisSize;\n        this._layoutMainAxis();\n        this.performResizeCrossAxis(crossAxisSize);\n    }\n\n    _setInitialAxisSizes() {\n        if (this.item.isFlexItemEnabled()) {\n            this.item.flexItem._resetLayoutSize();\n        } else {\n            this.mainAxisSize = this._getMainAxisBasis();\n            this.crossAxisSize = this._getCrossAxisBasis();\n        }\n        this._resizingMainAxis = false;\n        this._resizingCrossAxis = false;\n        this._shrunk = false;\n    }\n\n    _layoutAxes() {\n        this._layoutMainAxis();\n        this._layoutCrossAxis();\n    }\n\n    /**\n     * @pre mainAxisSize should exclude padding.\n     */\n    _layoutMainAxis() {\n        this._layoutLines();\n        this._fitMainAxisSizeToContents();\n    }\n\n    _layoutLines() {\n        this._lineLayouter.layoutLines();\n    }\n\n    get _lines() {\n        return this._lineLayouter.lines;\n    }\n\n    _fitMainAxisSizeToContents() {\n        if (!this._resizingMainAxis) {\n            if (this.isMainAxisFitToContents()) {\n                this.mainAxisSize = this._lineLayouter.mainAxisContentSize;\n            }\n        }\n    }\n\n    /**\n     * @pre crossAxisSize should exclude padding.\n     */\n    _layoutCrossAxis() {\n        const aligner = new ContentAligner(this);\n        aligner.init();\n        this._totalCrossAxisSize = aligner.totalCrossAxisSize;\n        this._fitCrossAxisSizeToContents();\n        aligner.align();\n    }\n\n    _fitCrossAxisSizeToContents() {\n        if (!this._resizingCrossAxis) {\n            if (this.isCrossAxisFitToContents()) {\n                this.crossAxisSize = this._totalCrossAxisSize;\n            }\n        }\n    }\n\n    isWrapping() {\n        return this._flexContainer.wrap;\n    }\n\n    isAxisFitToContents(horizontal) {\n        if (this._horizontal === horizontal) {\n            return this.isMainAxisFitToContents();\n        } else {\n            return this.isCrossAxisFitToContents();\n        }\n    }\n\n    isMainAxisFitToContents() {\n        return !this.isWrapping() && !this._hasFixedMainAxisBasis();\n    }\n\n    isCrossAxisFitToContents() {\n        return !this._hasFixedCrossAxisBasis();\n    }\n\n    _hasFixedMainAxisBasis() {\n        return !FlexUtils.isZeroAxisSize(this.item, this._horizontal);\n    }\n\n    _hasFixedCrossAxisBasis() {\n        return !FlexUtils.isZeroAxisSize(this.item, !this._horizontal);\n    }\n\n    getAxisMinSize(horizontal) {\n        if (this._horizontal === horizontal) {\n            return this._getMainAxisMinSize();\n        } else {\n            return this._getCrossAxisMinSize();\n        }\n    }\n\n    _getMainAxisMinSize() {\n        return this._lineLayouter.mainAxisMinSize;\n    }\n\n    _getCrossAxisMinSize() {\n        return this._lineLayouter.crossAxisMinSize;\n    }\n\n    resizeMainAxis(size) {\n        if (this.mainAxisSize !== size) {\n            if (this.recalc > 0) {\n                this.performResizeMainAxis(size);\n            } else {\n                if (this._checkValidCacheMainAxisResize()) {\n                    this.mainAxisSize = size;\n                    this._fitCrossAxisSizeToContents();\n                } else {\n                    // Cache miss.\n                    this.item.enableLocalRecalcFlag();\n                    this.performResizeMainAxis(size);\n                }\n            }\n        }\n    }\n\n    _checkValidCacheMainAxisResize(size) {\n        const isFinalMainAxisSize = (size === this.targetMainAxisSize);\n        if (isFinalMainAxisSize) {\n            return true;\n        }\n        const canIgnoreCacheMiss = !this.isCrossAxisFitToContents();\n        if (canIgnoreCacheMiss) {\n            // Allow other main axis resizes and check if final resize matches the target main axis size\n            //  (ItemCoordinatesUpdater).\n            return true;\n        }\n        return false;\n    }\n\n    performResizeMainAxis(size) {\n        const isShrinking = (size < this.mainAxisSize);\n        this._shrunk = isShrinking;\n\n        this.mainAxisSize = size;\n\n        this._resizingMainAxis = true;\n        this._layoutAxes();\n        this._resizingMainAxis = false;\n    }\n\n    resizeCrossAxis(size) {\n        if (this.crossAxisSize !== size) {\n            if (this.recalc > 0) {\n                this.performResizeCrossAxis(size);\n            } else {\n                this.crossAxisSize = size;\n            }\n        }\n    }\n\n    performResizeCrossAxis(size) {\n        this.crossAxisSize = size;\n\n        this._resizingCrossAxis = true;\n        this._layoutCrossAxis();\n        this._resizingCrossAxis = false;\n    }\n\n    get targetMainAxisSize() {\n        return this._horizontal ? this.item.target.w : this.item.target.h;\n    }\n\n    get targetCrossAxisSize() {\n        return this._horizontal ? this.item.target.h : this.item.target.w;\n    }\n\n    getParentFlexContainer() {\n        return this.item.isFlexItemEnabled() ? this.item.flexItem.ctr : null;\n    }\n\n    _getHorizontalPadding() {\n        return FlexUtils.getTotalPadding(this.item, true);\n    }\n\n    _getVerticalPadding() {\n        return FlexUtils.getTotalPadding(this.item, false);\n    }\n\n    _getHorizontalPaddingOffset() {\n        return FlexUtils.getPaddingOffset(this.item, true);\n    }\n\n    _getVerticalPaddingOffset() {\n        return FlexUtils.getPaddingOffset(this.item, false);\n    }\n\n    _getMainAxisBasis() {\n        return FlexUtils.getRelAxisSize(this.item, this._horizontal);\n    }\n\n    _getCrossAxisBasis() {\n        return FlexUtils.getRelAxisSize(this.item, !this._horizontal);\n    }\n\n    get _horizontal() {\n        return this._flexContainer._horizontal;\n    }\n\n    get _reverse() {\n        return this._flexContainer._reverse;\n    }\n\n    get item() {\n        return this._flexContainer.item;\n    }\n\n    get items() {\n        return this.item.items;\n    }\n\n    get resizingMainAxis() {\n        return this._resizingMainAxis;\n    }\n\n    get resizingCrossAxis() {\n        return this._resizingCrossAxis;\n    }\n\n    get numberOfItems() {\n        return this.items.length;\n    }\n\n    get mainAxisSize() {\n        return FlexUtils.getAxisLayoutSize(this.item, this._horizontal);\n    }\n\n    get crossAxisSize() {\n        return FlexUtils.getAxisLayoutSize(this.item, !this._horizontal);\n    }\n\n    set mainAxisSize(v) {\n        FlexUtils.setAxisLayoutSize(this.item, this._horizontal, v);\n    }\n\n    set crossAxisSize(v) {\n        FlexUtils.setAxisLayoutSize(this.item, !this._horizontal, v);\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Base from \"../tree/Base.mjs\";\nimport Layout from \"./layout/FlexLayout.mjs\";\n\nexport default class FlexContainer {\n\n\n    constructor(item) {\n        this._item = item;\n\n        this._layout = new Layout(this);\n        this._horizontal = true;\n        this._reverse = false;\n        this._wrap = false;\n        this._alignItems = 'stretch';\n        this._justifyContent = 'flex-start';\n        this._alignContent = 'flex-start';\n\n        this._paddingLeft = 0;\n        this._paddingTop = 0;\n        this._paddingRight = 0;\n        this._paddingBottom = 0;\n    }\n\n    get item() {\n        return this._item;\n    }\n\n    _changedDimensions() {\n        this._item.changedDimensions();\n    }\n\n    _changedContents() {\n        this._item.changedContents();\n    }\n\n    get direction() {\n        return (this._horizontal ? \"row\" : \"column\") + (this._reverse ? \"-reverse\" : \"\");\n    }\n\n    set direction(f) {\n        if (this.direction === f) return;\n\n        this._horizontal = (f === 'row' || f === 'row-reverse');\n        this._reverse = (f === 'row-reverse' || f === 'column-reverse');\n\n        this._changedContents();\n    }\n\n    set wrap(v) {\n        this._wrap = v;\n        this._changedContents();\n    }\n\n    get wrap() {\n        return this._wrap;\n    }\n\n    get alignItems() {\n        return this._alignItems;\n    }\n\n    set alignItems(v) {\n        if (this._alignItems === v) return;\n        if (FlexContainer.ALIGN_ITEMS.indexOf(v) === -1) {\n            throw new Error(\"Unknown alignItems, options: \" + FlexContainer.ALIGN_ITEMS.join(\",\"));\n        }\n        this._alignItems = v;\n\n        this._changedContents();\n    }\n\n    get alignContent() {\n        return this._alignContent;\n    }\n\n    set alignContent(v) {\n        if (this._alignContent === v) return;\n        if (FlexContainer.ALIGN_CONTENT.indexOf(v) === -1) {\n            throw new Error(\"Unknown alignContent, options: \" + FlexContainer.ALIGN_CONTENT.join(\",\"));\n        }\n        this._alignContent = v;\n\n        this._changedContents();\n    }\n\n    get justifyContent() {\n        return this._justifyContent;\n    }\n\n    set justifyContent(v) {\n        if (this._justifyContent === v) return;\n\n        if (FlexContainer.JUSTIFY_CONTENT.indexOf(v) === -1) {\n            throw new Error(\"Unknown justifyContent, options: \" + FlexContainer.JUSTIFY_CONTENT.join(\",\"));\n        }\n        this._justifyContent = v;\n\n        this._changedContents();\n    }\n\n    set padding(v) {\n        this.paddingLeft = v;\n        this.paddingTop = v;\n        this.paddingRight = v;\n        this.paddingBottom = v;\n    }\n\n    get padding() {\n        return this.paddingLeft;\n    }\n    \n    set paddingLeft(v) {\n        this._paddingLeft = v;\n        this._changedDimensions();\n    }\n    \n    get paddingLeft() {\n        return this._paddingLeft;\n    }\n\n    set paddingTop(v) {\n        this._paddingTop = v;\n        this._changedDimensions();\n    }\n\n    get paddingTop() {\n        return this._paddingTop;\n    }\n\n    set paddingRight(v) {\n        this._paddingRight = v;\n        this._changedDimensions();\n    }\n\n    get paddingRight() {\n        return this._paddingRight;\n    }\n\n    set paddingBottom(v) {\n        this._paddingBottom = v;\n        this._changedDimensions();\n    }\n\n    get paddingBottom() {\n        return this._paddingBottom;\n    }\n\n    patch(settings) {\n        Base.patchObject(this, settings);\n    }\n\n}\n\nFlexContainer.ALIGN_ITEMS = [\"flex-start\", \"flex-end\", \"center\", \"stretch\"];\nFlexContainer.ALIGN_CONTENT = [\"flex-start\", \"flex-end\", \"center\", \"space-between\", \"space-around\", \"space-evenly\", \"stretch\"];\nFlexContainer.JUSTIFY_CONTENT = [\"flex-start\", \"flex-end\", \"center\", \"space-between\", \"space-around\", \"space-evenly\"];\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Base from \"../tree/Base.mjs\";\nimport FlexUtils from \"./FlexUtils.mjs\";\nimport FlexContainer from \"./FlexContainer.mjs\";\n\nexport default class FlexItem {\n\n    constructor(item) {\n        this._ctr = null;\n        this._item = item;\n        this._grow = 0;\n        this._shrink = FlexItem.SHRINK_AUTO;\n        this._alignSelf = undefined;\n        this._minWidth = 0;\n        this._minHeight = 0;\n        this._maxWidth = 0;\n        this._maxHeight = 0;\n\n        this._marginLeft = 0;\n        this._marginTop = 0;\n        this._marginRight = 0;\n        this._marginBottom = 0;\n        this._reversed = false;\n    }\n\n    get item() {\n        return this._item;\n    }\n\n    get grow() {\n        return this._grow;\n    }\n\n    set grow(v) {\n        if (this._grow === v) return;\n\n        this._grow = parseInt(v) || 0;\n\n        this._changed();\n    }\n\n    get shrink() {\n        if (this._shrink === FlexItem.SHRINK_AUTO) {\n            return this._getDefaultShrink();\n        }\n        return this._shrink;\n    }\n\n    _getDefaultShrink() {\n        if (this.item.isFlexEnabled()) {\n            return 1;\n        } else {\n            // All non-flex containers are absolutely positioned items with fixed dimensions, and by default not shrinkable.\n            return 0;\n        }\n    }\n\n    set shrink(v) {\n        if (this._shrink === v) return;\n\n        this._shrink = parseInt(v) || 0;\n\n        this._changed();\n    }\n\n    get alignSelf() {\n        return this._alignSelf;\n    }\n\n    set alignSelf(v) {\n        if (this._alignSelf === v) return;\n\n        if (v === undefined) {\n            this._alignSelf = undefined;\n        } else {\n            if (FlexContainer.ALIGN_ITEMS.indexOf(v) === -1) {\n                throw new Error(\"Unknown alignSelf, options: \" + FlexContainer.ALIGN_ITEMS.join(\",\"));\n            }\n            this._alignSelf = v;\n        }\n\n        this._changed();\n    }\n\n    get minWidth() {\n        return this._minWidth;\n    }\n\n    set minWidth(v) {\n        this._minWidth = Math.max(0, v);\n        this._item.changedDimensions(true, false);\n    }\n\n    get minHeight() {\n        return this._minHeight;\n    }\n\n    set minHeight(v) {\n        this._minHeight = Math.max(0, v);\n        this._item.changedDimensions(false, true);\n    }\n\n    get maxWidth() {\n        return this._maxWidth;\n    }\n\n    set maxWidth(v) {\n        this._maxWidth = Math.max(0, v);\n        this._item.changedDimensions(true, false);\n    }\n\n    get maxHeight() {\n        return this._maxHeight;\n    }\n\n    set maxHeight(v) {\n        this._maxHeight = Math.max(0, v);\n        this._item.changedDimensions(false, true);\n    }\n\n    /**\n     * @note margins behave slightly different than in HTML with regard to shrinking.\n     * In HTML, (outer) margins can be removed when shrinking. In this engine, they will not shrink at all.\n     */\n    set margin(v) {\n        this.marginLeft = v;\n        this.marginTop = v;\n        this.marginRight = v;\n        this.marginBottom = v;\n    }\n\n    get margin() {\n        return this.marginLeft;\n    }\n\n    set marginLeft(v) {\n        this._marginLeft = v;\n        this._changed();\n    }\n\n    get marginLeft() {\n        return this._marginLeft;\n    }\n\n    set marginTop(v) {\n        this._marginTop = v;\n        this._changed();\n    }\n\n    get marginTop() {\n        return this._marginTop;\n    }\n\n    set marginRight(v) {\n        this._marginRight = v;\n        this._changed();\n    }\n\n    get marginRight() {\n        return this._marginRight;\n    }\n\n    set marginBottom(v) {\n        this._marginBottom = v;\n        this._changed();\n    }\n\n    get marginBottom() {\n        return this._marginBottom;\n    }\n    \n    _changed() {\n        if (this.ctr) this.ctr._changedContents();\n    }\n\n    set ctr(v) {\n        this._ctr = v;\n    }\n\n    get ctr() {\n        return this._ctr;\n    }\n\n    patch(settings) {\n        Base.patchObject(this, settings);\n    }\n\n    _resetLayoutSize() {\n        this._resetHorizontalAxisLayoutSize();\n        this._resetVerticalAxisLayoutSize();\n    }\n\n    _resetCrossAxisLayoutSize() {\n        if (this.ctr._horizontal) {\n            this._resetVerticalAxisLayoutSize();\n        } else {\n            this._resetHorizontalAxisLayoutSize();\n        }\n    }\n\n    _resetHorizontalAxisLayoutSize() {\n        let w = FlexUtils.getRelAxisSize(this.item, true);\n        if (this._minWidth) {\n            w = Math.max(this._minWidth, w);\n        }\n        if (this._maxWidth) {\n            w = Math.min(this._maxWidth, w);\n        }\n        FlexUtils.setAxisLayoutSize(this.item, true, w);\n    }\n\n    _resetVerticalAxisLayoutSize() {\n        let h = FlexUtils.getRelAxisSize(this.item, false);\n        if (this._minHeight) {\n            h = Math.max(this._minHeight, h);\n        }\n        if (this._maxHeight) {\n            h = Math.min(this._maxHeight, h);\n        }\n        FlexUtils.setAxisLayoutSize(this.item, false, h);\n    }\n\n    _getCrossAxisMinSizeSetting() {\n        return this._getMinSizeSetting(!this.ctr._horizontal);\n    }\n\n    _getCrossAxisMaxSizeSetting() {\n        return this._getMaxSizeSetting(!this.ctr._horizontal);\n    }\n\n    _getMainAxisMaxSizeSetting() {\n        return this._getMaxSizeSetting(this.ctr._horizontal);\n    }\n\n    _getMinSizeSetting(horizontal) {\n        if (horizontal) {\n            return this._minWidth;\n        } else {\n            return this._minHeight;\n        }\n    }\n\n    _getMaxSizeSetting(horizontal) {\n        if (horizontal) {\n            return this._maxWidth;\n        } else {\n            return this._maxHeight;\n        }\n    }\n\n    _getMainAxisMinSize() {\n        return FlexUtils.getAxisMinSize(this.item, this.ctr._horizontal);\n    }\n\n    _getCrossAxisMinSize() {\n        return FlexUtils.getAxisMinSize(this.item, !this.ctr._horizontal);\n    }\n\n    _getMainAxisLayoutSize() {\n        return FlexUtils.getAxisLayoutSize(this.item, this.ctr._horizontal);\n    }\n\n    _getMainAxisLayoutPos() {\n        return FlexUtils.getAxisLayoutPos(this.item, this.ctr._horizontal);\n    }\n\n    _setMainAxisLayoutPos(pos) {\n        return FlexUtils.setAxisLayoutPos(this.item, this.ctr._horizontal, pos);\n    }\n\n    _setCrossAxisLayoutPos(pos) {\n        return FlexUtils.setAxisLayoutPos(this.item, !this.ctr._horizontal, pos);\n    }\n\n    _getCrossAxisLayoutSize() {\n        return FlexUtils.getAxisLayoutSize(this.item, !this.ctr._horizontal);\n    }\n\n    _resizeCrossAxis(size) {\n        return FlexUtils.resizeAxis(this.item, !this.ctr._horizontal, size);\n    }\n\n    _resizeMainAxis(size) {\n        return FlexUtils.resizeAxis(this.item, this.ctr._horizontal, size);\n    }\n\n    _getMainAxisPadding() {\n        return FlexUtils.getTotalPadding(this.item, this.ctr._horizontal);\n    }\n\n    _getCrossAxisPadding() {\n        return FlexUtils.getTotalPadding(this.item, !this.ctr._horizontal);\n    }\n\n    _getMainAxisMargin() {\n        return FlexUtils.getTotalMargin(this.item, this.ctr._horizontal);\n    }\n\n    _getCrossAxisMargin() {\n        return FlexUtils.getTotalMargin(this.item, !this.ctr._horizontal);\n    }\n\n    _getHorizontalMarginOffset() {\n        return FlexUtils.getMarginOffset(this.item, true);\n    }\n\n    _getVerticalMarginOffset() {\n        return FlexUtils.getMarginOffset(this.item, false);\n    }\n\n    _getMainAxisMinSizeWithPaddingAndMargin() {\n        return this._getMainAxisMinSize() + this._getMainAxisPadding() + this._getMainAxisMargin();\n    }\n\n    _getCrossAxisMinSizeWithPaddingAndMargin() {\n        return this._getCrossAxisMinSize() + this._getCrossAxisPadding() + this._getCrossAxisMargin();\n    }\n\n    _getMainAxisLayoutSizeWithPaddingAndMargin() {\n        return this._getMainAxisLayoutSize() + this._getMainAxisPadding() + this._getMainAxisMargin();\n    }\n\n    _getCrossAxisLayoutSizeWithPaddingAndMargin() {\n        return this._getCrossAxisLayoutSize() + this._getCrossAxisPadding() + this._getCrossAxisMargin();\n    }\n\n    _hasFixedCrossAxisSize() {\n        return !FlexUtils.isZeroAxisSize(this.item, !this.ctr._horizontal);\n    }\n\n    _hasRelCrossAxisSize() {\n        return !!(this.ctr._horizontal ? this.item.funcH : this.item.funcW);\n    }\n\n}\n\n\nFlexItem.SHRINK_AUTO = -1;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport FlexContainer from \"./FlexContainer.mjs\";\nimport FlexItem from \"./FlexItem.mjs\";\nimport FlexUtils from \"./FlexUtils.mjs\";\n\n/**\n * This is the connection between the render tree with the layout tree of this flex container/item.\n */\nexport default class FlexTarget {\n\n    constructor(target) {\n        this._target = target;\n\n        /**\n         * Possible values (only in case of container):\n         * bit 0: has changed or contains items with changes\n         * bit 1: width changed\n         * bit 2: height changed\n         */\n        this._recalc = 0;\n        \n        this._enabled = false;\n\n        this.x = 0;\n        this.y = 0;\n        this.w = 0;\n        this.h = 0;\n\n        this._originalX = 0;\n        this._originalY = 0;\n        this._originalWidth = 0;\n        this._originalHeight = 0;\n\n        this._flex = null;\n        this._flexItem = null;\n        this._flexItemDisabled = false;\n\n        this._items = null;\n    }\n\n    get flexLayout() {\n        return this.flex ? this.flex._layout : null;\n    }\n\n    layoutFlexTree() {\n        if (this.isFlexEnabled() && this.isChanged()) {\n            this.flexLayout.layoutTree();\n        }\n    }\n\n    get target() {\n        return this._target;\n    }\n\n    get flex() {\n        return this._flex;\n    }\n\n    set flex(v) {\n        if (!v) {\n            if (this.isFlexEnabled()) {\n                this._disableFlex();\n            }\n        } else {\n            if (!this.isFlexEnabled()) {\n                this._enableFlex();\n            }\n            this._flex.patch(v);\n        }\n    }\n\n    get flexItem() {\n        if (this._flexItemDisabled) {\n            return false;\n        }\n        this._ensureFlexItem();\n        return this._flexItem;\n    }\n\n    set flexItem(v) {\n        if (v === false) {\n            if (!this._flexItemDisabled) {\n                const parent = this.flexParent;\n                this._flexItemDisabled = true;\n                this._checkEnabled();\n                if (parent) {\n                    parent._clearFlexItemsCache();\n                    parent.changedContents();\n                }\n            }\n        } else {\n            this._ensureFlexItem();\n\n            this._flexItem.patch(v);\n\n            if (this._flexItemDisabled) {\n                this._flexItemDisabled = false;\n                this._checkEnabled();\n                const parent = this.flexParent;\n                if (parent) {\n                    parent._clearFlexItemsCache();\n                    parent.changedContents();\n                }\n            }\n        }\n    }\n\n    _enableFlex() {\n        this._flex = new FlexContainer(this);\n        this._checkEnabled();\n        this.changedDimensions();\n        this._enableChildrenAsFlexItems();\n    }\n\n    _disableFlex() {\n        this.changedDimensions();\n        this._flex = null;\n        this._checkEnabled();\n        this._disableChildrenAsFlexItems();\n    }\n\n    _enableChildrenAsFlexItems() {\n        const children = this._target._children;\n        if (children) {\n            for (let i = 0, n = children.length; i < n; i++) {\n                const child = children[i];\n                child.layout._enableFlexItem();\n            }\n        }\n    }\n\n    _disableChildrenAsFlexItems() {\n        const children = this._target._children;\n        if (children) {\n            for (let i = 0, n = children.length; i < n; i++) {\n                const child = children[i];\n                child.layout._disableFlexItem();\n            }\n        }\n    }\n\n    _enableFlexItem() {\n        this._ensureFlexItem();\n        const flexParent = this._target._parent._layout;\n        this._flexItem.ctr = flexParent._flex;\n        flexParent.changedContents();\n        this._checkEnabled();\n    }\n\n    _disableFlexItem() {\n        if (this._flexItem) {\n            this._flexItem.ctr = null;\n        }\n\n        // We keep the flexItem object because it may contain custom settings.\n        this._checkEnabled();\n\n        // Offsets have been changed. We can't recover them, so we'll just clear them instead.\n        this._resetOffsets();\n    }\n\n    _resetOffsets() {\n        this.x = 0;\n        this.y = 0;\n    }\n\n    _ensureFlexItem() {\n        if (!this._flexItem) {\n            this._flexItem = new FlexItem(this);\n        }\n    }\n\n    _checkEnabled() {\n        const enabled = this.isEnabled();\n        if (this._enabled !== enabled) {\n            if (enabled) {\n                this._enable();\n            } else {\n                this._disable();\n            }\n            this._enabled = enabled;\n        }\n    }\n    \n    _enable() {\n        this._setupTargetForFlex();\n        this._target.enableFlexLayout();\n    }\n\n    _disable() {\n        this._restoreTargetToNonFlex();\n        this._target.disableFlexLayout();\n    }\n\n    isEnabled() {\n        return this.isFlexEnabled() || this.isFlexItemEnabled();\n    }\n\n    isFlexEnabled() {\n        return this._flex !== null;\n    }\n\n    isFlexItemEnabled() {\n        return this.flexParent !== null;\n    }\n\n    _restoreTargetToNonFlex() {\n        const target = this._target;\n        target.x = this._originalX;\n        target.y = this._originalY;\n        target.setDimensions(this._originalWidth, this._originalHeight);\n    }\n\n    _setupTargetForFlex() {\n        const target = this._target;\n        this._originalX = target._x;\n        this._originalY = target._y;\n        this._originalWidth = target._w;\n        this._originalHeight = target._h;\n    }\n    \n    setParent(from, to) {\n        if (from && from.isFlexContainer()) {\n            from._layout._changedChildren();\n        }\n\n        if (to && to.isFlexContainer()) {\n            this._enableFlexItem();\n            to._layout._changedChildren();\n        }\n        this._checkEnabled();\n    }\n\n    get flexParent() {\n        if (this._flexItemDisabled) {\n            return null;\n        }\n\n        const parent = this._target._parent;\n        if (parent && parent.isFlexContainer()) {\n            return parent._layout;\n        }\n        return null;\n    }\n\n    setVisible(v) {\n        const parent = this.flexParent;\n        if (parent) {\n            parent._changedChildren();\n        }\n    }\n\n    get items() {\n        if (!this._items) {\n            this._items = this._getFlexItems();\n        }\n        return this._items;\n    }\n\n    _getFlexItems() {\n        const items = [];\n        const children = this._target._children;\n        if (children) {\n            for (let i = 0, n = children.length; i < n; i++) {\n                const item = children[i];\n                if (item.visible) {\n                    if (item.isFlexItem()) {\n                        items.push(item.layout);\n                    }\n                }\n            }\n        }\n        return items;\n    }\n\n    _changedChildren() {\n        this._clearFlexItemsCache();\n        this.changedContents();\n    }\n\n    _clearFlexItemsCache() {\n        this._items = null;\n    }\n\n    setLayout(x, y, w, h) {\n        let originalX = this._originalX;\n        let originalY = this._originalY;\n        if (this.funcX) {\n            originalX = this.funcX(FlexUtils.getParentAxisSizeWithPadding(this, true));\n        }\n        if (this.funcY) {\n            originalY = this.funcY(FlexUtils.getParentAxisSizeWithPadding(this, false));\n        }\n\n        if (this.isFlexItemEnabled()) {\n            this.target.setLayout(x + originalX, y + originalY, w, h);\n        } else {\n            // Reuse the x,y 'settings'.\n            this.target.setLayout(originalX, originalY, w, h);\n        }\n    }\n\n    changedDimensions(changeWidth = true, changeHeight = true) {\n        this._updateRecalc(changeWidth, changeHeight);\n    }\n\n    changedContents() {\n        this._updateRecalc();\n    }\n\n    forceLayout() {\n        this._updateRecalc();\n    }\n\n    isChanged() {\n        return this._recalc > 0;\n    }\n\n    _updateRecalc(changeExternalWidth = false, changeExternalHeight = false) {\n        if (this.isFlexEnabled()) {\n            const layout = this._flex._layout;\n\n            // When something internal changes, it can have effect on the external dimensions.\n            changeExternalWidth = changeExternalWidth || layout.isAxisFitToContents(true);\n            changeExternalHeight = changeExternalHeight || layout.isAxisFitToContents(false);\n        }\n\n        const recalc = 1 + (changeExternalWidth ? 2 : 0) + (changeExternalHeight ? 4 : 0);\n        const newRecalcFlags = this.getNewRecalcFlags(recalc);\n        this._recalc |= recalc;\n        if (newRecalcFlags > 1) {\n            if (this.flexParent) {\n                this.flexParent._updateRecalcBottomUp(recalc);\n            } else {\n                this._target.triggerLayout();\n            }\n        } else {\n            this._target.triggerLayout();\n        }\n    }\n\n    getNewRecalcFlags(flags) {\n        return (7 - this._recalc) & flags;\n    }\n\n    _updateRecalcBottomUp(childRecalc) {\n        const newRecalc = this._getRecalcFromChangedChildRecalc(childRecalc);\n        const newRecalcFlags = this.getNewRecalcFlags(newRecalc);\n        this._recalc |= newRecalc;\n        if (newRecalcFlags > 1) {\n            const flexParent = this.flexParent;\n            if (flexParent) {\n                flexParent._updateRecalcBottomUp(newRecalc);\n            } else {\n                this._target.triggerLayout();\n            }\n        } else {\n            this._target.triggerLayout();\n        }\n    }\n\n    _getRecalcFromChangedChildRecalc(childRecalc) {\n        const layout = this._flex._layout;\n\n        const mainAxisRecalcFlag = layout._horizontal ? 1 : 2;\n        const crossAxisRecalcFlag = layout._horizontal ? 2 : 1;\n\n        const crossAxisDimensionsChangedInChild = (childRecalc & crossAxisRecalcFlag);\n        if (!crossAxisDimensionsChangedInChild) {\n            const mainAxisDimensionsChangedInChild = (childRecalc & mainAxisRecalcFlag);\n            if (mainAxisDimensionsChangedInChild) {\n                const mainAxisIsWrapping = layout.isWrapping();\n                if (mainAxisIsWrapping) {\n                    const crossAxisIsFitToContents = layout.isCrossAxisFitToContents();\n                    if (crossAxisIsFitToContents) {\n                        // Special case: due to wrapping, the cross axis size may be changed.\n                        childRecalc += crossAxisRecalcFlag;\n                    }\n                }\n            }\n        }\n\n        let isWidthDynamic = layout.isAxisFitToContents(true);\n        let isHeightDynamic = layout.isAxisFitToContents(false);\n\n        if (layout.shrunk) {\n            // If during previous layout this container was 'shrunk', any changes may change the 'min axis size' of the\n            // contents, leading to a different axis size on this container even when it was not 'fit to contents'.\n            if (layout._horizontal) {\n                isWidthDynamic = true;\n            } else {\n                isHeightDynamic = true;\n            }\n        }\n\n        const localRecalc = 1 + (isWidthDynamic ? 2 : 0) + (isHeightDynamic ? 4 : 0);\n\n        const combinedRecalc = childRecalc & localRecalc;\n        return combinedRecalc;\n    }\n\n    get recalc() {\n        return this._recalc;\n    }\n\n    clearRecalcFlag() {\n        this._recalc = 0;\n    }\n\n    enableLocalRecalcFlag() {\n        this._recalc = 1;\n    }\n\n    get originalX() {\n        return this._originalX;\n    }\n\n    setOriginalXWithoutUpdatingLayout(v) {\n        this._originalX = v;\n    }\n\n    get originalY() {\n        return this._originalY;\n    }\n\n    setOriginalYWithoutUpdatingLayout(v) {\n        this._originalY = v;\n    }\n\n    get originalWidth() {\n        return this._originalWidth;\n    }\n\n    set originalWidth(v) {\n        if (this._originalWidth !== v) {\n            this._originalWidth = v;\n            this.changedDimensions(true, false);\n        }\n    }\n\n    get originalHeight() {\n        return this._originalHeight;\n    }\n\n    set originalHeight(v) {\n        if (this._originalHeight !== v) {\n            this._originalHeight = v;\n            this.changedDimensions(false, true);\n        }\n    }\n\n    get funcX() {\n        return this._target.funcX;\n    }\n\n    get funcY() {\n        return this._target.funcY;\n    }\n\n    get funcW() {\n        return this._target.funcW;\n    }\n\n    get funcH() {\n        return this._target.funcH;\n    }\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class TextureSource {\n\n    constructor(manager, loader = null) {\n        this.id = TextureSource.id++;\n\n        this.manager = manager;\n\n        this.stage = manager.stage;\n\n        /**\n         * All enabled textures (textures that are used by visible elements).\n         * @type {Set<Texture>}\n         */\n        this.textures = new Set();\n\n        /**\n         * The number of active textures (textures that have at least one active element).\n         * @type {number}\n         * @private\n         */\n        this._activeTextureCount = 0;\n\n        /**\n         * The factory for the source of this texture.\n         * @type {Function}\n         */\n        this.loader = loader;\n\n        /**\n         * Identifier for reuse.\n         * @type {String}\n         */\n        this.lookupId = null;\n\n        /**\n         * If set, this.is called when the texture source is no longer displayed (this.components.size becomes 0).\n         * @type {Function}\n         */\n        this._cancelCb = null;\n\n        /**\n         * Loading since timestamp in millis.\n         * @type {number}\n         */\n        this.loadingSince = 0;\n\n        this.w = 0;\n        this.h = 0;\n\n        this._nativeTexture = null;\n\n        /**\n         * If true, then this.texture source is never freed from memory during garbage collection.\n         * @type {boolean}\n         */\n        this.permanent = false;\n\n        /**\n         * Sub-object with texture-specific rendering information.\n         * For images, contains the src property, for texts, contains handy rendering information.\n         * @type {Object}\n         */\n        this.renderInfo = null;\n\n        /**\n         * Generated for 'renderToTexture'.\n         * @type {boolean}\n         * @private\n         */\n        this._isResultTexture = !this.loader;\n\n        /**\n         * Contains the load error, if the texture source could previously not be loaded.\n         * @type {object}\n         * @private\n         */\n        this._loadError = null;\n\n        /**\n         *  Hold a reference to the javascript variable which contains the texture, this is not required for WebGL in WebBrowsers but is required for Spark runtime.\n         * @type {object}\n         * @private\n         */\n        this._imageRef = null;\n\n\n        /**\n         * Track whether or not there is an alpha channel in this source\n         * @type {boolean}\n         * @private\n         */\n         this._hasAlpha = false;\n    }\n\n    get hasAlpha() {\n        return this._hasAlpha;\n    }\n\n    get loadError() {\n        return this._loadError;\n    }\n\n    addTexture(v) {\n        if (!this.textures.has(v)) {\n            this.textures.add(v);\n        }\n    }\n\n    removeTexture(v) {\n        this.textures.delete(v);\n    }\n\n    incActiveTextureCount() {\n        this._activeTextureCount++;\n        if (this._activeTextureCount === 1) {\n            this.becomesUsed();\n        }\n    }\n\n    decActiveTextureCount() {\n        this._activeTextureCount--;\n        if (this._activeTextureCount === 0) {\n            this.becomesUnused();\n        }\n    }\n\n    get isResultTexture() {\n        return this._isResultTexture;\n    }\n\n    set isResultTexture(v) {\n        this._isResultTexture = v;\n    }\n\n    forEachEnabledElement(cb) {\n        this.textures.forEach(texture => {\n            texture.elements.forEach(cb);\n        });\n    }\n\n    hasEnabledElements() {\n        return this.textures.size > 0;\n    }\n\n    forEachActiveElement(cb) {\n        this.textures.forEach(texture => {\n            texture.elements.forEach(element => {\n                if (element.active) {\n                    cb(element);\n                }\n            });\n        });\n    }\n\n    getRenderWidth() {\n        return this.w;\n    }\n\n    getRenderHeight() {\n        return this.h;\n    }\n\n    allowCleanup() {\n        return !this.permanent && !this.isUsed();\n    }\n\n    becomesUsed() {\n        // Even while the texture is being loaded, make sure it is on the lookup map so that others can reuse it.\n        this.load();\n    }\n\n    becomesUnused() {\n        this.cancel();\n    }\n\n    cancel() {\n        if (this.isLoading()) {\n            if (this._cancelCb) {\n                this._cancelCb(this);\n\n                // Clear callback to avoid memory leaks.\n                this._cancelCb = null;\n            }\n            this.loadingSince = 0;\n        }\n    }\n\n    isLoaded() {\n        return !!this._nativeTexture;\n    }\n\n    isLoading() {\n        return (this.loadingSince > 0);\n    }\n\n    isError() {\n        return !!this._loadError;\n    }\n\n    reload() {\n        this.free();\n        if (this.isUsed()) {\n            this.load();\n        }\n    }\n\n    load(forceSync = false) {\n        // From the moment of loading (when a texture source becomes used by active elements)\n        if (this.isResultTexture) {\n            // Element result texture source, for which the loading is managed by the core.\n            return;\n        }\n\n        if (!this._nativeTexture && !this.isLoading()) {\n            this.loadingSince = (new Date()).getTime();\n            this._cancelCb = this.loader((err, options) => {\n                // Ignore loads that come in after a cancel.\n                if (this.isLoading()) {\n                    // Clear callback to avoid memory leaks.\n                    this._cancelCb = null;\n\n                    if (this.manager.stage.destroyed) {\n                        // Ignore async load when stage is destroyed.\n                        return;\n                    }\n                    if (err) {\n                        // Emit txError.\n                        this.onError(err);\n                    } else if (options && options.source) {\n                        if (!this.stage.isUpdatingFrame() && !forceSync && (options.throttle !== false)) {\n                            const textureThrottler = this.stage.textureThrottler;\n                            this._cancelCb = textureThrottler.genericCancelCb;\n                            textureThrottler.add(this, options);\n                        } else {\n                            this.processLoadedSource(options);\n                        }\n                    }\n                }\n            }, this);\n        }\n    }\n\n    processLoadedSource(options) {\n        this.loadingSince = 0;\n        this.setSource(options);\n    }\n\n    setSource(options) {\n        const source = options.source;\n\n        this._hasAlpha = (options ? (options.hasAlpha || false) : false);\n        this.w = source.width || (options && options.w) || 0;\n        this.h = source.height || (options && options.h) || 0;\n\n        if (options && options.renderInfo) {\n            // Assign to id in cache so that it can be reused.\n            this.renderInfo = options.renderInfo;\n        }\n\n        this.permanent = !!options.permanent;\n\n        if (options && options.imageRef)\n            this._imageRef = options.imageRef;\n        if (options && options.flipTextureY) {\n            this._flipTextureY = options.flipTextureY;\n        } else {\n            this._flipTextureY = false;\n        }\n\n        if (this._isNativeTexture(source)) {\n            // Texture managed by caller.\n            this._nativeTexture = source;\n\n            this.w = this.w || source.w;\n            this.h = this.h || source.h;\n\n            // WebGLTexture objects are by default;\n            this.permanent = options.hasOwnProperty('permanent') ? options.permanent : true;\n        } else {\n            this.manager.uploadTextureSource(this, options);\n        }\n\n        // Must be cleared when reload is succesful.\n        this._loadError = null;\n\n        this.onLoad();\n    }\n\n    isUsed() {\n        return this._activeTextureCount > 0;\n    }\n\n    onLoad() {\n        if (this.isUsed()) {\n            this.textures.forEach(texture => {\n                texture.onLoad();\n            });\n        }\n    }\n\n    forceRenderUpdate() {\n        // Userland should call this method after changing the nativeTexture manually outside of the framework\n        //  (using tex[Sub]Image2d for example).\n\n        if (this._nativeTexture) {\n            // Change 'update' flag. This is currently not used by the framework but is handy in userland.\n            this._nativeTexture.update = this.stage.frameCounter;\n        }\n\n        this.forEachActiveElement(function (element) {\n            element.forceRenderUpdate();\n        });\n\n    }\n\n    forceUpdateRenderCoords() {\n        this.forEachActiveElement(function (element) {\n            element._updateTextureCoords();\n        });\n    }\n\n    get nativeTexture() {\n        return this._nativeTexture;\n    }\n\n    clearNativeTexture() {\n        this._nativeTexture = null;\n        //also clear the reference to the texture variable.\n        this._imageRef = null;\n    }\n\n    /**\n     * Used for result textures.\n     */\n    replaceNativeTexture(newNativeTexture, w, h) {\n        let prevNativeTexture = this._nativeTexture;\n        // Loaded by core.\n        this._nativeTexture = newNativeTexture;\n        this.w = w;\n        this.h = h;\n\n        if (!prevNativeTexture && this._nativeTexture) {\n            this.forEachActiveElement(element => element.onTextureSourceLoaded());\n        }\n\n        if (!this._nativeTexture) {\n            this.forEachActiveElement(element => element._setDisplayedTexture(null));\n        }\n\n        // Dimensions must be updated also on enabled elements, as it may force it to go within bounds.\n        this.forEachEnabledElement(element => element._updateDimensions());\n\n        // Notice that the sprite map must never contain render textures.\n    }\n\n    onError(e) {\n        this._loadError = e;\n        this.loadingSince = 0;\n        console.error('[Lightning] texture load error', e, this.lookupId);\n        this.forEachActiveElement(element => element.onTextureSourceLoadError(e));\n    }\n\n    free() {\n        if (this.isLoaded()) {\n            this.manager.freeTextureSource(this);\n        }\n    }\n\n    _isNativeTexture(source) {\n        if (Utils.isNode) {\n            return source.constructor.name === \"WebGLTexture\";\n        }\n\n        if ('WebGLTexture' in window) {\n            return source instanceof WebGLTexture;\n        }\n\n        return false;\n    }\n\n}\n\nTextureSource.prototype.isTextureSource = true;\n\nTextureSource.id = 1;\n\nimport Utils from \"./Utils.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport TextureSource from '../TextureSource.mjs';\n\nexport default class ElementTexturizer {\n\n    constructor(elementCore) {\n\n        this._element = elementCore.element;\n        this._core = elementCore;\n\n        this.ctx = this._core.ctx;\n\n        this._enabled = false;\n        this.lazy = false;\n        this._colorize = false;\n\n        this._renderTexture = null;\n\n        this._renderTextureReused = false;\n\n        this._resultTextureSource = null;\n\n        this._renderOffscreen = false;\n\n        this.empty = false;\n    }\n\n    get enabled() {\n        return this._enabled;\n    }\n\n    set enabled(v) {\n        this._enabled = v;\n        this._core.updateRenderToTextureEnabled();\n    }\n\n    get renderOffscreen() {\n        return this._renderOffscreen;\n    }\n\n    set renderOffscreen(v) {\n        this._renderOffscreen = v;\n        this._core.setHasRenderUpdates(1);\n\n        // This enforces rechecking the 'within bounds'.\n        this._core._setRecalc(6);\n    }\n\n    get colorize() {\n        return this._colorize;\n    }\n\n    set colorize(v) {\n        if (this._colorize !== v) {\n            this._colorize = v;\n\n            // Only affects the finally drawn quad.\n            this._core.setHasRenderUpdates(1);\n        }\n    }\n\n    _getTextureSource() {\n        if (!this._resultTextureSource) {\n            this._resultTextureSource = new TextureSource(this._element.stage.textureManager);\n            this.updateResultTexture();\n        }\n        return this._resultTextureSource;\n    }\n\n    hasResultTexture() {\n        return !!this._resultTextureSource;\n    }\n\n    resultTextureInUse() {\n        return this._resultTextureSource && this._resultTextureSource.hasEnabledElements();\n    }\n\n    updateResultTexture() {\n        let resultTexture = this.getResultTexture();\n        if (this._resultTextureSource) {\n            if (this._resultTextureSource.nativeTexture !== resultTexture) {\n                let w = resultTexture ? resultTexture.w : 0;\n                let h = resultTexture ? resultTexture.h : 0;\n                this._resultTextureSource.replaceNativeTexture(resultTexture, w, h);\n            }\n\n            // Texture will be updated: all elements using the source need to be updated as well.\n            this._resultTextureSource.forEachEnabledElement(element => {\n                element._updateDimensions();\n                element.core.setHasRenderUpdates(3);\n            });\n        }\n    }\n\n    mustRenderToTexture() {\n        // Check if we must really render as texture.\n        if (this._enabled && !this.lazy) {\n            return true;\n        } else if (this._enabled && this.lazy && this._core._hasRenderUpdates < 3) {\n            // Static-only: if renderToTexture did not need to update during last drawn frame, generate it as a cache.\n            return true;\n        }\n        return false;\n    }\n\n    deactivate() {\n        this.release();\n    }\n\n    get renderTextureReused() {\n        return this._renderTextureReused;\n    }\n\n    release() {\n        this.releaseRenderTexture();\n    }\n\n    releaseRenderTexture() {\n        if (this._renderTexture) {\n            if (!this._renderTextureReused) {\n                this.ctx.releaseRenderTexture(this._renderTexture);\n            }\n            this._renderTexture = null;\n            this._renderTextureReused = false;\n            this.updateResultTexture();\n        }\n    }\n\n    // Reuses the specified texture as the render texture (in ancestor).\n    reuseTextureAsRenderTexture(nativeTexture) {\n        if (this._renderTexture !== nativeTexture) {\n            this.releaseRenderTexture();\n            this._renderTexture = nativeTexture;\n            this._renderTextureReused = true;\n        }\n    }\n\n    hasRenderTexture() {\n        return !!this._renderTexture;\n    }\n\n    getRenderTexture() {\n        if (!this._renderTexture) {\n            this._renderTexture = this.ctx.allocateRenderTexture(this._core._w, this._core._h);\n            this._renderTextureReused = false;\n        }\n        return this._renderTexture;\n    }\n\n    getResultTexture() {\n        return this._renderTexture;\n    }\n\n}\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport FlexTarget from \"../../flex/FlexTarget.mjs\";\n\nexport default class ElementCore {\n\n    constructor(element) {\n        this._element = element;\n\n        this.ctx = element.stage.ctx;\n\n        // The memory layout of the internal variables is affected by their position in the constructor.\n        // It boosts performance to order them by usage of cpu-heavy functions (renderSimple and update).\n\n        this._recalc = 0;\n\n        this._parent = null;\n\n        this._onUpdate = null;\n\n        this._pRecalc = 0;\n\n        this._worldContext = new ElementCoreContext();\n\n        this._hasUpdates = false;\n\n        this._localAlpha = 1;\n\n        this._onAfterCalcs = null;\n\n        this._onAfterUpdate = null;\n\n        \n        this._localPx = 0;\n        this._localPy = 0;\n\n        this._localTa = 1;\n        this._localTb = 0;\n        this._localTc = 0;\n        this._localTd = 1;\n\n        this._isComplex = false;\n\n        this._dimsUnknown = false;\n\n        this._clipping = false;\n\n        // Used by both update and render.\n        this._zSort = false;\n\n        this._outOfBounds = 0;\n\n        /**\n         * The texture source to be displayed.\n         * @type {TextureSource}\n         */\n        this._displayedTextureSource = null;\n\n        this._zContextUsage = 0;\n\n        this._children = null;\n\n        this._hasRenderUpdates = 0;\n\n        this._zIndexedChildren = null;\n\n        this._renderContext = this._worldContext;\n\n        this.renderState = this.ctx.renderState;\n\n        this._scissor = null;\n\n        // The ancestor ElementCore that owns the inherited shader. Null if none is active (default shader).\n        this._shaderOwner = null;\n\n\n        this._updateTreeOrder = 0;\n\n        this._colorUl = this._colorUr = this._colorBl = this._colorBr = 0xFFFFFFFF;\n\n        this._x = 0;\n        this._y = 0;\n        this._w = 0;\n        this._h = 0;\n\n        this._optFlags = 0;\n        this._funcX = null;\n        this._funcY = null;\n        this._funcW = null;\n        this._funcH = null;\n\n        this._scaleX = 1;\n        this._scaleY = 1;\n        this._pivotX = 0.5;\n        this._pivotY = 0.5;\n        this._mountX = 0;\n        this._mountY = 0;\n        this._rotation = 0;\n\n        this._alpha = 1;\n        this._visible = true;\n\n        this._ulx = 0;\n        this._uly = 0;\n        this._brx = 1;\n        this._bry = 1;\n\n        this._zIndex = 0;\n        this._forceZIndexContext = false;\n        this._zParent = null;\n\n        this._isRoot = false;\n\n        /**\n         * Iff true, during zSort, this element should be 're-sorted' because either:\n         * - zIndex did chang\n         * - zParent did change\n         * - element was moved in the render tree\n         * @type {boolean}\n         */\n        this._zIndexResort = false;\n\n        this._shader = null;\n\n        // Element is rendered on another texture.\n        this._renderToTextureEnabled = false;\n\n        this._texturizer = null;\n\n        this._useRenderToTexture = false;\n\n        this._boundsMargin = null;\n\n        this._recBoundsMargin = null;\n\n        this._withinBoundsMargin = false;\n\n        this._viewport = null;\n\n        this._clipbox = true;\n\n        this.render = this._renderSimple;\n\n        this._layout = null;\n    }\n\n    get offsetX() {\n        if (this._funcX) {\n            return this._funcX;\n        } else {\n            if (this.hasFlexLayout()) {\n                return this._layout.originalX;\n            } else {\n                return this._x;\n            }\n        }\n    }\n\n    set offsetX(v) {\n        if (Utils.isFunction(v)) {\n            this.funcX = v;\n        } else {\n            this._disableFuncX();\n            if (this.hasFlexLayout()) {\n                this.x += (v - this._layout.originalX);\n                this._layout.setOriginalXWithoutUpdatingLayout(v);\n            } else {\n                this.x = v;\n            }\n        }\n    }\n\n    get x() {\n        return this._x;\n    }\n\n    set x(v) {\n        if (v !== this._x) {\n            this._updateLocalTranslateDelta(v - this._x, 0);\n            this._x = v;\n        }\n    }\n\n    get funcX() {\n        return (this._optFlags & 1 ? this._funcX : null);\n    }\n\n    set funcX(v) {\n        if (this._funcX !== v) {\n            this._optFlags |= 1;\n            this._funcX = v;\n            if (this.hasFlexLayout()) {\n                this._layout.setOriginalXWithoutUpdatingLayout(0);\n                this.layout.forceLayout();\n            } else {\n                this._x = 0;\n                this._triggerRecalcTranslate();\n            }\n        }\n    }\n\n    _disableFuncX() {\n        this._optFlags = this._optFlags & (0xFFFF - 1);\n        this._funcX = null;\n    }\n\n    get offsetY() {\n        if (this._funcY) {\n            return this._funcY;\n        } else {\n            if (this.hasFlexLayout()) {\n                return this._layout.originalY;\n            } else {\n                return this._y;\n            }\n        }\n    }\n\n    set offsetY(v) {\n        if (Utils.isFunction(v)) {\n            this.funcY = v;\n        } else {\n            this._disableFuncY();\n            if (this.hasFlexLayout()) {\n                this.y += (v - this._layout.originalY);\n                this._layout.setOriginalYWithoutUpdatingLayout(v);\n            } else {\n                this.y = v;\n            }\n        }\n    }\n\n    get y() {\n        return this._y;\n    }\n\n    set y(v) {\n        if (v !== this._y) {\n            this._updateLocalTranslateDelta(0, v - this._y);\n            this._y = v;\n        }\n    }\n\n    get funcY() {\n        return (this._optFlags & 2 ? this._funcY : null);\n    }\n\n    set funcY(v) {\n        if (this._funcY !== v) {\n            this._optFlags |= 2;\n            this._funcY = v;\n            if (this.hasFlexLayout()) {\n                this._layout.setOriginalYWithoutUpdatingLayout(0);\n                this.layout.forceLayout();\n            } else {\n                this._y = 0;\n                this._triggerRecalcTranslate();\n            }\n        }\n    }\n\n    _disableFuncY() {\n        this._optFlags = this._optFlags & (0xFFFF - 2);\n        this._funcY = null;\n    }\n\n    get funcW() {\n        return (this._optFlags & 4 ? this._funcW : null);\n    }\n\n    set funcW(v) {\n        if (this._funcW !== v) {\n            this._optFlags |= 4;\n            this._funcW = v;\n            if (this.hasFlexLayout()) {\n                this._layout._originalWidth = 0;\n                this.layout.changedDimensions(true, false);\n            } else {\n                this._w = 0;\n                this._triggerRecalcTranslate();\n            }\n        }\n    }\n\n    disableFuncW() {\n        this._optFlags = this._optFlags & (0xFFFF - 4);\n        this._funcW = null;\n    }\n\n    get funcH() {\n        return (this._optFlags & 8 ? this._funcH : null);\n    }\n\n    set funcH(v) {\n        if (this._funcH !== v) {\n            this._optFlags |= 8;\n            this._funcH = v;\n            if (this.hasFlexLayout()) {\n                this._layout._originalHeight = 0;\n                this.layout.changedDimensions(false, true);\n            } else {\n                this._h = 0;\n                this._triggerRecalcTranslate();\n            }\n        }\n    }\n\n    disableFuncH() {\n        this._optFlags = this._optFlags & (0xFFFF - 8);\n        this._funcH = null;\n    }\n\n    get w() {\n        return this._w;\n    }\n\n    getRenderWidth() {\n        if (this.hasFlexLayout()) {\n            return this._layout.originalWidth;\n        } else {\n            return this._w;\n        }\n    }\n\n    get h() {\n        return this._h;\n    }\n\n    getRenderHeight() {\n        if (this.hasFlexLayout()) {\n            return this._layout.originalHeight;\n        } else {\n            return this._h;\n        }\n    }\n\n    get scaleX() {\n        return this._scaleX;\n    }\n\n    set scaleX(v) {\n        if (this._scaleX !== v) {\n            this._scaleX = v;\n            this._updateLocalTransform();\n        }\n    }\n\n    get scaleY() {\n        return this._scaleY;\n    }\n\n    set scaleY(v) {\n        if (this._scaleY !== v) {\n            this._scaleY = v;\n            this._updateLocalTransform();\n        }\n    }\n\n    get scale() {\n        return this.scaleX;\n    }\n\n    set scale(v) {\n        if (this._scaleX !== v || this._scaleY !== v) {\n            this._scaleX = v;\n            this._scaleY = v;\n            this._updateLocalTransform();\n        }\n    }\n\n    get pivotX() {\n        return this._pivotX;\n    }\n\n    set pivotX(v) {\n        if (this._pivotX !== v) {\n            this._pivotX = v;\n            this._updateLocalTranslate();\n        }\n    }\n\n    get pivotY() {\n        return this._pivotY;\n    }\n\n    set pivotY(v) {\n        if (this._pivotY !== v) {\n            this._pivotY = v;\n            this._updateLocalTranslate();\n        }\n    }\n\n    get pivot() {\n        return this._pivotX;\n    }\n\n    set pivot(v) {\n        if (this._pivotX !== v || this._pivotY !== v) {\n            this._pivotX = v;\n            this._pivotY = v;\n            this._updateLocalTranslate();\n        }\n    }\n\n    get mountX() {\n        return this._mountX;\n    }\n\n    set mountX(v) {\n        if (this._mountX !== v) {\n            this._mountX = v;\n            this._updateLocalTranslate();\n        }\n    }\n\n    get mountY() {\n        return this._mountY;\n    }\n\n    set mountY(v) {\n        if (this._mountY !== v) {\n            this._mountY = v;\n            this._updateLocalTranslate();\n        }\n    }\n\n    get mount() {\n        return this._mountX;\n    }\n\n    set mount(v) {\n        if (this._mountX !== v || this._mountY !== v) {\n            this._mountX = v;\n            this._mountY = v;\n            this._updateLocalTranslate();\n        }\n    }\n\n    get rotation() {\n        return this._rotation;\n    }\n\n    set rotation(v) {\n        if (this._rotation !== v) {\n            this._rotation = v;\n            this._updateLocalTransform();\n        }\n    }\n\n    get alpha() {\n        return this._alpha;\n    }\n\n    set alpha(v) {\n        // Account for rounding errors.\n        v = (v > 1 ? 1 : (v < 1e-14 ? 0 : v));\n        if (this._alpha !== v) {\n            let prev = this._alpha;\n            this._alpha = v;\n            this._updateLocalAlpha();\n            if ((prev === 0) !== (v === 0)) {\n                this._element._updateEnabledFlag();\n            }\n        }\n    }\n\n    get visible() {\n        return this._visible;\n    }\n\n    set visible(v) {\n        if (this._visible !== v) {\n            this._visible = v;\n            this._updateLocalAlpha();\n            this._element._updateEnabledFlag();\n\n            if (this.hasFlexLayout()) {\n                this.layout.setVisible(v);\n            }\n        }\n    }\n\n    _updateLocalTransform() {\n        if (this._rotation !== 0 && this._rotation % (2 * Math.PI)) {\n            // check to see if the rotation is the same as the previous render. This means we only need to use sin and cos when rotation actually changes\n            let _sr = Math.sin(this._rotation);\n            let _cr = Math.cos(this._rotation);\n\n            this._setLocalTransform(\n                _cr * this._scaleX,\n                -_sr * this._scaleY,\n                _sr * this._scaleX,\n                _cr * this._scaleY\n            );\n        } else {\n            this._setLocalTransform(\n                this._scaleX,\n                0,\n                0,\n                this._scaleY\n            );\n        }\n        this._updateLocalTranslate();\n    };\n\n    _updateLocalTranslate() {\n        this._recalcLocalTranslate();\n        this._triggerRecalcTranslate();\n    };\n\n    _recalcLocalTranslate() {\n        let pivotXMul = this._pivotX * this._w;\n        let pivotYMul = this._pivotY * this._h;\n        let px;\n        if (window.isRTL) {\n            px = this._x + (pivotXMul * this._localTa + pivotYMul * this._localTb) - pivotXMul;\n        } else {\n            px = this._x - (pivotXMul * this._localTa + pivotYMul * this._localTb) + pivotXMul;\n        }\n\n        let py = this._y - (pivotXMul * this._localTc + pivotYMul * this._localTd) + pivotYMul;\n        px -= this._mountX * this._w;\n        py -= this._mountY * this._h;\n        this._localPx = px;\n        this._localPy = py;\n    }\n\n    _updateLocalTranslateDelta(dx, dy) {\n        this._addLocalTranslate(dx, dy);\n    };\n\n    _updateLocalAlpha() {\n        this._setLocalAlpha(this._visible ? this._alpha : 0);\n    };\n\n    /**\n     * @param {number} type\n     * 0: no updates\n     * 1: re-invoke shader\n     * 3: re-create render texture and re-invoke shader\n     */\n    setHasRenderUpdates(type) {\n        if (this._worldContext.alpha) {\n            // Ignore if 'world invisible'. Render updates will be reset to 3 for every element that becomes visible.\n            let p = this;\n            p._hasRenderUpdates = Math.max(type, p._hasRenderUpdates);\n            while ((p = p._parent) && (p._hasRenderUpdates !== 3)) {\n                p._hasRenderUpdates = 3;\n            }\n        }\n    }\n\n    /**\n     * @param {Number} type\n     *   1: alpha\n     *   2: translate\n     *   4: transform\n     * 128: becomes visible\n     * 256: flex layout updated\n     */\n    _setRecalc(type) {\n        this._recalc |= type;\n\n        this._setHasUpdates();\n\n        // Any changes in descendants should trigger texture updates.\n        if (this._parent) {\n            this._parent.setHasRenderUpdates(3);\n        }\n    }\n\n    _setHasUpdates() {\n        let p = this;\n        while (p && !p._hasUpdates) {\n            p._hasUpdates = true;\n            p = p._parent;\n        }\n    }\n\n    getParent() {\n        return this._parent;\n    }\n\n    setParent(parent) {\n        if (parent !== this._parent) {\n            let prevIsZContext = this.isZContext();\n            let prevParent = this._parent;\n            this._parent = parent;\n\n            // Notify flex layout engine.\n            if (this._layout || (parent && parent.isFlexContainer())) {\n                this.layout.setParent(prevParent, parent);\n            }\n\n            if (prevParent) {\n                // When elements are deleted, the render texture must be re-rendered.\n                prevParent.setHasRenderUpdates(3);\n            }\n\n            this._setRecalc(1 + 2 + 4);\n\n            if (this._parent) {\n                // Force parent to propagate hasUpdates flag.\n                this._parent._setHasUpdates();\n            }\n\n            if (this._zIndex === 0) {\n                this.setZParent(parent);\n            } else {\n                this.setZParent(parent ? parent.findZContext() : null);\n            }\n\n            if (prevIsZContext !== this.isZContext()) {\n                if (!this.isZContext()) {\n                    this.disableZContext();\n                } else {\n                    this.enableZContext(prevParent.findZContext());\n                }\n            }\n\n            // Tree order did change: even if zParent stays the same, we must resort.\n            this._zIndexResort = true;\n            if (this._zParent) {\n                this._zParent.enableZSort();\n            }\n\n            if (!this._shader) {\n                let newShaderOwner = parent && !parent._renderToTextureEnabled ? parent._shaderOwner : null;\n                if (newShaderOwner !== this._shaderOwner) {\n                    this.setHasRenderUpdates(1);\n                    this._setShaderOwnerRecursive(newShaderOwner);\n                }\n            }\n        }\n    };\n\n    enableZSort(force = false) {\n        if (!this._zSort && this._zContextUsage > 0) {\n            this._zSort = true;\n            if (force) {\n                // ZSort must be done, even if this element is invisible.\n                // This is done to prevent memory leaks when removing element from inactive render branches.\n                this.ctx.forceZSort(this);\n            }\n        }\n    }\n\n    addChildAt(index, child) {\n        if (!this._children) this._children = [];\n        this._children.splice(index, 0, child);\n        child.setParent(this);\n    };\n\n    setChildAt(index, child) {\n        if (!this._children) this._children = [];\n        this._children[index].setParent(null);\n        this._children[index] = child;\n        child.setParent(this);\n    }\n\n    removeChildAt(index) {\n        let child = this._children[index];\n        this._children.splice(index, 1);\n        child.setParent(null);\n    };\n\n    removeChildren() {\n        if (this._children) {\n            for (let i = 0, n = this._children.length; i < n; i++) {\n                this._children[i].setParent(null);\n            }\n\n            this._children.splice(0);\n\n            if (this._zIndexedChildren) {\n                this._zIndexedChildren.splice(0);\n            }\n        }\n    };\n\n    syncChildren(removed, added, order) {\n        this._children = order;\n        for (let i = 0, n = removed.length; i < n; i++) {\n            removed[i].setParent(null);\n        }\n        for (let i = 0, n = added.length; i < n; i++) {\n            added[i].setParent(this);\n        }\n    }\n\n    moveChild(fromIndex, toIndex) {\n        let c = this._children[fromIndex];\n        this._children.splice(fromIndex, 1);\n        this._children.splice(toIndex, 0, c);\n\n        // Tree order changed: must resort!;\n        this._zIndexResort = true;\n        if (this._zParent) {\n            this._zParent.enableZSort();\n        }\n    }\n\n    _setLocalTransform(a, b, c, d) {\n        this._setRecalc(4);\n        this._localTa = a;\n        this._localTb = b;\n        this._localTc = c;\n        this._localTd = d;\n\n        // We also regard negative scaling as a complex case, so that we can optimize the non-complex case better.\n        this._isComplex = (b !== 0) || (c !== 0) || (a < 0) || (d < 0);\n    };\n\n    _addLocalTranslate(dx, dy) {\n        this._localPx += dx;\n        this._localPy += dy;\n        this._triggerRecalcTranslate();\n    }\n\n    _setLocalAlpha(a) {\n        if (!this._worldContext.alpha && ((this._parent && this._parent._worldContext.alpha) && a)) {\n            // Element is becoming visible. We need to force update.\n            this._setRecalc(1 + 128);\n        } else {\n            this._setRecalc(1);\n        }\n\n        if (a < 1e-14) {\n            // Tiny rounding errors may cause failing visibility tests.\n            a = 0;\n        }\n\n        this._localAlpha = a;\n    };\n\n    setDimensions(w, h, isEstimate = this._dimsUnknown) {\n        // In case of an estimation, the update loop should perform different bound checks.\n        this._dimsUnknown = isEstimate;\n\n        if (this.hasFlexLayout()) {\n            this._layout.originalWidth = w;\n            this._layout.originalHeight = h;\n        } else {\n            if (this._w !== w || this._h !== h) {\n                this._updateDimensions(w, h);\n                return true;\n            }\n        }\n        return false;\n    };\n\n    _updateDimensions(w, h) {\n        if (this._w !== w || this._h !== h) {\n            this._w = w;\n            this._h = h;\n\n            this._triggerRecalcTranslate();\n\n            if (this._texturizer) {\n                this._texturizer.releaseRenderTexture();\n                this._texturizer.updateResultTexture();\n            }\n            // Due to width/height change: update the translation vector.\n            this._updateLocalTranslate();\n        }\n    }\n\n    setTextureCoords(ulx, uly, brx, bry) {\n        this.setHasRenderUpdates(3);\n\n        this._ulx = ulx;\n        this._uly = uly;\n        this._brx = brx;\n        this._bry = bry;\n    };\n\n    get displayedTextureSource() {\n        return this._displayedTextureSource;\n    }\n\n    setDisplayedTextureSource(textureSource) {\n        this.setHasRenderUpdates(3);\n        this._displayedTextureSource = textureSource;\n    };\n\n    get isRoot() {\n        return this._isRoot;\n    }\n\n    setAsRoot() {\n        // Use parent dummy.\n        this._parent = new ElementCore(this._element);\n\n        // After setting root, make sure it's updated.\n        this._parent._hasRenderUpdates = 3;\n        this._parent._hasUpdates = true;\n\n        // Root is, and will always be, the primary zContext.\n        this._isRoot = true;\n\n        this.ctx.root = this;\n\n        // Set scissor area of 'fake parent' to stage's viewport.\n        this._parent._viewport = [0, 0, this.ctx.stage.coordsWidth, this.ctx.stage.coordsHeight];\n        this._parent._scissor = this._parent._viewport;\n\n        // When recBoundsMargin is null, the defaults are used (100 for all sides).\n        this._parent._recBoundsMargin = null;\n\n        this._setRecalc(1 + 2 + 4);\n    };\n\n    isAncestorOf(c) {\n        let p = c;\n        while (p = p._parent) {\n            if (this === p) {\n                return true;\n            }\n        }\n        return false;\n    };\n\n    isZContext() {\n        return (this._forceZIndexContext || this._renderToTextureEnabled || this._zIndex !== 0 || this._isRoot || !this._parent);\n    };\n\n    findZContext() {\n        if (this.isZContext()) {\n            return this;\n        } else {\n            return this._parent.findZContext();\n        }\n    };\n\n    setZParent(newZParent) {\n        if (this._zParent !== newZParent) {\n            if (this._zParent !== null) {\n                if (this._zIndex !== 0) {\n                    this._zParent.decZContextUsage();\n                }\n\n                // We must filter out this item upon the next resort.\n                this._zParent.enableZSort();\n            }\n\n            if (newZParent !== null) {\n                let hadZContextUsage = (newZParent._zContextUsage > 0);\n\n                // @pre: new parent's children array has already been modified.\n                if (this._zIndex !== 0) {\n                    newZParent.incZContextUsage();\n                }\n\n                if (newZParent._zContextUsage > 0) {\n                    if (!hadZContextUsage && (this._parent === newZParent)) {\n                        // This child was already in the children list.\n                        // Do not add double.\n                    } else {\n                        // Add new child to array.\n                        newZParent._zIndexedChildren.push(this);\n                    }\n\n                    // Order should be checked.\n                    newZParent.enableZSort();\n                }\n            }\n\n            this._zParent = newZParent;\n\n            // Newly added element must be marked for resort.\n            this._zIndexResort = true;\n        }\n    };\n\n    incZContextUsage() {\n        this._zContextUsage++;\n        if (this._zContextUsage === 1) {\n            if (!this._zIndexedChildren) {\n                this._zIndexedChildren = [];\n            }\n            if (this._children) {\n                // Copy.\n                for (let i = 0, n = this._children.length; i < n; i++) {\n                    this._zIndexedChildren.push(this._children[i]);\n                }\n                // Initially, children are already sorted properly (tree order).\n                this._zSort = false;\n            }\n        }\n    };\n\n    decZContextUsage() {\n        this._zContextUsage--;\n        if (this._zContextUsage === 0) {\n            this._zSort = false;\n            this._zIndexedChildren.splice(0);\n        }\n    };\n\n    get zIndex() {\n        return this._zIndex;\n    }\n\n    set zIndex(zIndex) {\n        if (this._zIndex !== zIndex) {\n            this.setHasRenderUpdates(1);\n\n            let newZParent = this._zParent;\n\n            let prevIsZContext = this.isZContext();\n            if (zIndex === 0 && this._zIndex !== 0) {\n                if (this._parent === this._zParent) {\n                    if (this._zParent) {\n                        this._zParent.decZContextUsage();\n                    }\n                } else {\n                    newZParent = this._parent;\n                }\n            } else if (zIndex !== 0 && this._zIndex === 0) {\n                newZParent = this._parent ? this._parent.findZContext() : null;\n                if (newZParent === this._zParent) {\n                    if (this._zParent) {\n                        this._zParent.incZContextUsage();\n                        this._zParent.enableZSort();\n                    }\n                }\n            } else if (zIndex !== this._zIndex) {\n                if (this._zParent && this._zParent._zContextUsage) {\n                    this._zParent.enableZSort();\n                }\n            }\n\n            if (newZParent !== this._zParent) {\n                this.setZParent(null);\n            }\n\n            this._zIndex = zIndex;\n\n            if (newZParent !== this._zParent) {\n                this.setZParent(newZParent);\n            }\n\n            if (prevIsZContext !== this.isZContext()) {\n                if (!this.isZContext()) {\n                    this.disableZContext();\n                } else {\n                    this.enableZContext(this._parent.findZContext());\n                }\n            }\n\n            // Make sure that resort is done.\n            this._zIndexResort = true;\n            if (this._zParent) {\n                this._zParent.enableZSort();\n            }\n        }\n    };\n\n    get forceZIndexContext() {\n        return this._forceZIndexContext;\n    }\n\n    set forceZIndexContext(v) {\n        this.setHasRenderUpdates(1);\n\n        let prevIsZContext = this.isZContext();\n        this._forceZIndexContext = v;\n\n        if (prevIsZContext !== this.isZContext()) {\n            if (!this.isZContext()) {\n                this.disableZContext();\n            } else {\n                this.enableZContext(this._parent.findZContext());\n            }\n        }\n    };\n\n    enableZContext(prevZContext) {\n        if (prevZContext && prevZContext._zContextUsage > 0) {\n            // Transfer from upper z context to this z context.\n            const results = this._getZIndexedDescs();\n            results.forEach((c) => {\n                if (this.isAncestorOf(c) && c._zIndex !== 0) {\n                    c.setZParent(this);\n                }\n            });\n        }\n    }\n\n    _getZIndexedDescs() {\n        const results = [];\n        if (this._children) {\n            for (let i = 0, n = this._children.length; i < n; i++) {\n                this._children[i]._getZIndexedDescsRec(results);\n            }\n        }\n        return results;\n    }\n\n    _getZIndexedDescsRec(results) {\n        if (this._zIndex) {\n            results.push(this);\n        } else if (this._children && !this.isZContext()) {\n            for (let i = 0, n = this._children.length; i < n; i++) {\n                this._children[i]._getZIndexedDescsRec(results);\n            }\n        }\n    }\n\n    disableZContext() {\n        // Transfer from this z context to upper z context.\n        if (this._zContextUsage > 0) {\n            let newZParent = this._parent.findZContext();\n\n            // Make sure that z-indexed children are up to date (old ones removed).\n            if (this._zSort) {\n                this.sortZIndexedChildren();\n            }\n\n            this._zIndexedChildren.slice().forEach(function (c) {\n                if (c._zIndex !== 0) {\n                    c.setZParent(newZParent);\n                }\n            });\n        }\n    };\n\n    get colorUl() {\n        return this._colorUl;\n    }\n\n    set colorUl(color) {\n        if (this._colorUl !== color) {\n            this.setHasRenderUpdates(this._displayedTextureSource ? 3 : 1);\n            this._colorUl = color;\n        }\n    }\n\n    get colorUr() {\n        return this._colorUr;\n    }\n\n    set colorUr(color) {\n        if (this._colorUr !== color) {\n            this.setHasRenderUpdates(this._displayedTextureSource ? 3 : 1);\n            this._colorUr = color;\n        }\n    };\n\n    get colorBl() {\n        return this._colorBl;\n    }\n\n    set colorBl(color) {\n        if (this._colorBl !== color) {\n            this.setHasRenderUpdates(this._displayedTextureSource ? 3 : 1);\n            this._colorBl = color;\n        }\n    };\n\n    get colorBr() {\n        return this._colorBr;\n    }\n\n    set colorBr(color) {\n        if (this._colorBr !== color) {\n            this.setHasRenderUpdates(this._displayedTextureSource ? 3 : 1);\n            this._colorBr = color;\n        }\n    };\n\n\n    set onUpdate(f) {\n        this._onUpdate = f;\n        this._setRecalc(7);\n    }\n\n    set onAfterUpdate(f) {\n        this._onAfterUpdate = f;\n        this._setRecalc(7);\n    }\n\n    set onAfterCalcs(f) {\n        this._onAfterCalcs = f;\n        this._setRecalc(7);\n    }\n\n    get shader() {\n        return this._shader;\n    }\n\n    set shader(v) {\n        this.setHasRenderUpdates(1);\n\n        let prevShader = this._shader;\n        this._shader = v;\n        if (!v && prevShader) {\n            // Disabled shader.\n            let newShaderOwner = (this._parent && !this._parent._renderToTextureEnabled ? this._parent._shaderOwner : null);\n            this._setShaderOwnerRecursive(newShaderOwner);\n        } else if (v) {\n            // Enabled shader.\n            this._setShaderOwnerRecursive(this);\n        }\n    }\n\n    get activeShader() {\n        return this._shaderOwner ? this._shaderOwner.shader : this.renderState.defaultShader;\n    }\n\n    get activeShaderOwner() {\n        return this._shaderOwner;\n    }\n\n    get clipping() {\n        return this._clipping;\n    }\n\n    set clipping(v) {\n        if (this._clipping !== v) {\n            this._clipping = v;\n\n            // Force update of scissor by updating translate.\n            // Alpha must also be updated because the scissor area may have been empty.\n            this._setRecalc(1 + 2);\n        }\n    }\n\n    get clipbox() {\n        return this._clipbox;\n    }\n\n    set clipbox(v) {\n        // In case of out-of-bounds element, all children will also be ignored.\n        // It will save us from executing the update/render loops for those.\n        // The optimization will be used immediately during the next frame.\n        this._clipbox = v;\n    }\n\n    _setShaderOwnerRecursive(elementCore) {\n        this._shaderOwner = elementCore;\n\n        if (this._children && !this._renderToTextureEnabled) {\n            for (let i = 0, n = this._children.length; i < n; i++) {\n                let c = this._children[i];\n                if (!c._shader) {\n                    c._setShaderOwnerRecursive(elementCore);\n                    c._hasRenderUpdates = 3;\n                }\n            }\n        }\n    };\n\n    _setShaderOwnerChildrenRecursive(elementCore) {\n        if (this._children) {\n            for (let i = 0, n = this._children.length; i < n; i++) {\n                let c = this._children[i];\n                if (!c._shader) {\n                    c._setShaderOwnerRecursive(elementCore);\n                    c._hasRenderUpdates = 3;\n                }\n            }\n        }\n    };\n\n    _hasRenderContext() {\n        return this._renderContext !== this._worldContext;\n    }\n\n    get renderContext() {\n        return this._renderContext;\n    }\n\n    updateRenderToTextureEnabled() {\n        // Enforce texturizer initialisation.\n        let v = this.texturizer._enabled;\n\n        if (v) {\n            this._enableRenderToTexture();\n        } else {\n            this._disableRenderToTexture();\n            this._texturizer.releaseRenderTexture();\n        }\n    }\n\n    _enableRenderToTexture() {\n        if (!this._renderToTextureEnabled) {\n            let prevIsZContext = this.isZContext();\n\n            this._renderToTextureEnabled = true;\n\n            this._renderContext = new ElementCoreContext();\n\n            // If render to texture is active, a new shader context is started.\n            this._setShaderOwnerChildrenRecursive(null);\n\n            if (!prevIsZContext) {\n                // Render context forces z context.\n                this.enableZContext(this._parent ? this._parent.findZContext() : null);\n            }\n\n            this.setHasRenderUpdates(3);\n\n            // Make sure that the render coordinates get updated.\n            this._setRecalc(7);\n\n            this.render = this._renderAdvanced;\n        }\n    }\n\n    _disableRenderToTexture() {\n        if (this._renderToTextureEnabled) {\n            this._renderToTextureEnabled = false;\n\n            this._setShaderOwnerChildrenRecursive(this._shaderOwner);\n\n            this._renderContext = this._worldContext;\n\n            if (!this.isZContext()) {\n                this.disableZContext();\n            }\n\n            // Make sure that the render coordinates get updated.\n            this._setRecalc(7);\n\n            this.setHasRenderUpdates(3);\n\n            this.render = this._renderSimple;\n        }\n    }\n\n    isWhite() {\n        return (this._colorUl === 0xFFFFFFFF) && (this._colorUr === 0xFFFFFFFF) && (this._colorBl === 0xFFFFFFFF) && (this._colorBr === 0xFFFFFFFF);\n    }\n\n    hasSimpleTexCoords() {\n        return (this._ulx === 0) && (this._uly === 0) && (this._brx === 1) && (this._bry === 1);\n    }\n\n    _stashTexCoords() {\n        this._stashedTexCoords = [this._ulx, this._uly, this._brx, this._bry];\n        this._ulx = 0;\n        this._uly = 0;\n        this._brx = 1;\n        this._bry = 1;\n    }\n\n    _unstashTexCoords() {\n        this._ulx = this._stashedTexCoords[0];\n        this._uly = this._stashedTexCoords[1];\n        this._brx = this._stashedTexCoords[2];\n        this._bry = this._stashedTexCoords[3];\n        this._stashedTexCoords = null;\n    }\n\n    _stashColors() {\n        this._stashedColors = [this._colorUl, this._colorUr, this._colorBr, this._colorBl];\n        this._colorUl = 0xFFFFFFFF;\n        this._colorUr = 0xFFFFFFFF;\n        this._colorBr = 0xFFFFFFFF;\n        this._colorBl = 0xFFFFFFFF;\n    }\n\n    _unstashColors() {\n        this._colorUl = this._stashedColors[0];\n        this._colorUr = this._stashedColors[1];\n        this._colorBr = this._stashedColors[2];\n        this._colorBl = this._stashedColors[3];\n        this._stashedColors = null;\n    }\n\n    isVisible() {\n        return (this._localAlpha > 1e-14);\n    };\n\n    get outOfBounds() {\n        return this._outOfBounds;\n    }\n\n    set boundsMargin(v) {\n\n        /**\n         *  null: inherit from parent.\n         *  number[4]: specific margins: left, top, right, bottom.\n         */\n        this._boundsMargin = v ? v.slice() : null;\n\n        // We force recalc in order to set all boundsMargin recursively during the next update.\n        this._triggerRecalcTranslate();\n    }\n\n    get boundsMargin() {\n        return this._boundsMargin;\n    }\n\n    update() {\n        this._recalc |= this._parent._pRecalc;\n\n        if (this._layout && this._layout.isEnabled()) {\n            if (this._recalc & 256) {\n                this._layout.layoutFlexTree();\n            }\n        } else if ((this._recalc & 2) && this._optFlags) {\n            this._applyRelativeDimFuncs();\n        }\n\n        if (this._onUpdate) {\n            // Block all 'upwards' updates when changing things in this branch.\n            this._hasUpdates = true;\n            this._onUpdate(this.element, this);\n        }\n\n        const pw = this._parent._worldContext;\n        let w = this._worldContext;\n        const visible = (pw.alpha && this._localAlpha);\n\n        /**\n         * We must update if:\n         * - branch contains updates (even when invisible because it may contain z-indexed descendants)\n         * - there are (inherited) updates and this branch is visible\n         * - this branch becomes invisible (descs may be z-indexed so we must update all alpha values)\n         */\n        if (this._hasUpdates || (this._recalc && visible) || (w.alpha && !visible)) {\n            let recalc = this._recalc;\n\n            // Update world coords/alpha.\n            if (recalc & 1) {\n                if (!w.alpha && visible) {\n                    // Becomes visible.\n                    this._hasRenderUpdates = 3;\n                }\n                w.alpha = pw.alpha * this._localAlpha;\n\n                if (w.alpha < 1e-14) {\n                    // Tiny rounding errors may cause failing visibility tests.\n                    w.alpha = 0;\n                }\n            }\n\n            if (recalc & 6) {\n                let calculatedX = this._localPx;\n                if (window.isRTL) {\n                    const parentW = this._element.__parent ? this._parent.w || 0 : this.ctx.stage.getOption('w');\n                    calculatedX = parentW - (this._w || 0) - this._localPx;\n                }\n\n                w.px = pw.px + calculatedX * pw.ta;\n                w.py = pw.py + this._localPy * pw.td;\n                if (pw.tb !== 0) w.px += this._localPy * pw.tb;\n                if (pw.tc !== 0) w.py += calculatedX * pw.tc;\n            }\n\n            if (recalc & 4) {\n                w.ta = this._localTa * pw.ta;\n                w.tb = this._localTd * pw.tb;\n                w.tc = this._localTa * pw.tc;\n                w.td = this._localTd * pw.td;\n\n                if (this._isComplex) {\n                    w.ta += this._localTc * pw.tb;\n                    w.tb += this._localTb * pw.ta;\n                    w.tc += this._localTc * pw.td;\n                    w.td += this._localTb * pw.tc;\n                }\n            }\n\n            // Update render coords/alpha.\n            const pr = this._parent._renderContext;\n            if (this._parent._hasRenderContext()) {\n                const init = this._renderContext === this._worldContext;\n                if (init) {\n                    // First render context build: make sure that it is fully initialized correctly.\n                    // Otherwise, if we get into bounds later, the render context would not be initialized correctly.\n                    this._renderContext = new ElementCoreContext();\n                }\n\n                const r = this._renderContext;\n\n                // Update world coords/alpha.\n                if (init || (recalc & 1)) {\n                    r.alpha = pr.alpha * this._localAlpha;\n\n                    if (r.alpha < 1e-14) {\n                        r.alpha = 0;\n                    }\n                }\n\n                if (init || (recalc & 6)) {\n                    let calculatedX = this._localPx;\n                    if (window.isRTL) {\n                      const parentW = this._element.__parent\n                        ? this._parent.w || 0\n                        : this.ctx.stage.getOption(\"w\");\n                      calculatedX = parentW - (this._w || 0) - this._localPx;\n                    }\n                    \n                    r.px = pr.px + calculatedX * pr.ta;\n                    r.py = pr.py + this._localPy * pr.td;\n                    if (pr.tb !== 0) r.px += this._localPy * pr.tb;\n                    if (pr.tc !== 0) r.py += calculatedX * pr.tc;\n                }\n\n                if (init) {\n                    // We set the recalc toggle, because we must make sure that the scissor is updated.\n                    recalc |= 2;\n                }\n\n                if (init || (recalc & 4)) {\n                    r.ta = this._localTa * pr.ta;\n                    r.tb = this._localTd * pr.tb;\n                    r.tc = this._localTa * pr.tc;\n                    r.td = this._localTd * pr.td;\n\n                    if (this._isComplex) {\n                        r.ta += this._localTc * pr.tb;\n                        r.tb += this._localTb * pr.ta;\n                        r.tc += this._localTc * pr.td;\n                        r.td += this._localTb * pr.tc;\n                    }\n                }\n            } else {\n                this._renderContext = this._worldContext;\n            }\n\n            if (this.ctx.updateTreeOrder === -1) {\n                this.ctx.updateTreeOrder = this._updateTreeOrder + 1;\n            } else {\n                this._updateTreeOrder = this.ctx.updateTreeOrder++;\n            }\n\n            // Determine whether we must use a 'renderTexture'.\n            const useRenderToTexture = this._renderToTextureEnabled && this._texturizer.mustRenderToTexture();\n            if (this._useRenderToTexture !== useRenderToTexture) {\n                // Coords must be changed.\n                this._recalc |= 2 + 4;\n\n                // Scissor may change: force update.\n                recalc |= 2;\n\n                if (!this._useRenderToTexture) {\n                    // We must release the texture.\n                    this._texturizer.release();\n                }\n            }\n            this._useRenderToTexture = useRenderToTexture;\n\n            const r = this._renderContext;\n\n            const bboxW = this._dimsUnknown ? 2048 : this._w;\n            const bboxH = this._dimsUnknown ? 2048 : this._h;\n\n            // Calculate a bbox for this element.\n            let sx, sy, ex, ey;\n            const rComplex = (r.tb !== 0) || (r.tc !== 0) || (r.ta < 0) || (r.td < 0);\n            if (rComplex) {\n                sx = Math.min(0, bboxW * r.ta, bboxW * r.ta + bboxH * r.tb, bboxH * r.tb) + r.px;\n                ex = Math.max(0, bboxW * r.ta, bboxW * r.ta + bboxH * r.tb, bboxH * r.tb) + r.px;\n                sy = Math.min(0, bboxW * r.tc, bboxW * r.tc + bboxH * r.td, bboxH * r.td) + r.py;\n                ey = Math.max(0, bboxW * r.tc, bboxW * r.tc + bboxH * r.td, bboxH * r.td) + r.py;\n            } else {\n                sx = r.px;\n                ex = r.px + r.ta * bboxW;\n                sy = r.py;\n                ey = r.py + r.td * bboxH;\n            }\n\n            if (this._dimsUnknown && (rComplex || this._localTa < 1 || this._localTb < 1)) {\n                // If we are dealing with a non-identity matrix, we must extend the bbox so that withinBounds and\n                //  scissors will include the complete range of (positive) dimensions up to ,lh.\n                const nx = this._x * pr.ta + this._y * pr.tb + pr.px;\n                const ny = this._x * pr.tc + this._y * pr.td + pr.py;\n                if (nx < sx) sx = nx;\n                if (ny < sy) sy = ny;\n                if (nx > ex) ex = nx;\n                if (ny > ey) ey = ny;\n            }\n\n            if (recalc & 6 || !this._scissor /* initial */) {\n                // Determine whether we must 'clip'.\n                if (this._clipping && r.isSquare()) {\n                    // If the parent renders to a texture, it's scissor should be ignored;\n                    const area = this._parent._useRenderToTexture ? this._parent._viewport : this._parent._scissor;\n                    if (area) {\n                        // Merge scissor areas.\n                        const lx = Math.max(area[0], sx);\n                        const ly = Math.max(area[1], sy);\n                        this._scissor = [\n                            lx,\n                            ly,\n                            Math.min(area[2] + area[0], ex) - lx,\n                            Math.min(area[3] + area[1], ey) - ly\n                        ];\n                    } else {\n                        this._scissor = [sx, sy, ex - sx, ey - sy];\n                    }\n                } else {\n                    // No clipping: reuse parent scissor.\n                    this._scissor = this._parent._useRenderToTexture ? this._parent._viewport : this._parent._scissor;\n                }\n            }\n\n            // Calculate the outOfBounds margin.\n            if (this._boundsMargin) {\n                this._recBoundsMargin = this._boundsMargin;\n            } else {\n                this._recBoundsMargin = this._parent._recBoundsMargin;\n            }\n\n            if (this._onAfterCalcs) {\n                // After calcs may change render coords, scissor and/or recBoundsMargin.\n                if (this._onAfterCalcs(this.element)) {\n                    // Recalculate bbox.\n                    if (rComplex) {\n                        sx = Math.min(0, bboxW * r.ta, bboxW * r.ta + bboxH * r.tb, bboxH * r.tb) + r.px;\n                        ex = Math.max(0, bboxW * r.ta, bboxW * r.ta + bboxH * r.tb, bboxH * r.tb) + r.px;\n                        sy = Math.min(0, bboxW * r.tc, bboxW * r.tc + bboxH * r.td, bboxH * r.td) + r.py;\n                        ey = Math.max(0, bboxW * r.tc, bboxW * r.tc + bboxH * r.td, bboxH * r.td) + r.py;\n                    } else {\n                        sx = r.px;\n                        ex = r.px + r.ta * bboxW;\n                        sy = r.py;\n                        ey = r.py + r.td * bboxH;\n                    }\n\n                    if (this._dimsUnknown && (rComplex || this._localTa < 1 || this._localTb < 1)) {\n                        const nx = this._x * pr.ta + this._y * pr.tb + pr.px;\n                        const ny = this._x * pr.tc + this._y * pr.td + pr.py;\n                        if (nx < sx) sx = nx;\n                        if (ny < sy) sy = ny;\n                        if (nx > ex) ex = nx;\n                        if (ny > ey) ey = ny;\n                    }\n                }\n            }\n\n            if (this._parent._outOfBounds === 2) {\n                // Inherit parent out of boundsness.\n                this._outOfBounds = 2;\n\n                if (this._withinBoundsMargin) {\n                    this._withinBoundsMargin = false;\n                    this.element._disableWithinBoundsMargin();\n                }\n            } else {\n                if (recalc & 6) {\n                    // Recheck if element is out-of-bounds (all settings that affect this should enable recalc bit 2 or 4).\n                    this._outOfBounds = 0;\n                    let withinMargin = true;\n\n                    // Offscreens are always rendered as long as the parent is within bounds.\n                    if (!this._renderToTextureEnabled || !this._texturizer || !this._texturizer.renderOffscreen) {\n                        if (this._scissor && (this._scissor[2] <= 0 || this._scissor[3] <= 0)) {\n                            // Empty scissor area.\n                            this._outOfBounds = 2;\n                        } else {\n                            // Use bbox to check out-of-boundness.\n                            if ((this._scissor[0] > ex) ||\n                                (this._scissor[1] > ey) ||\n                                (sx > (this._scissor[0] + this._scissor[2])) ||\n                                (sy > (this._scissor[1] + this._scissor[3]))\n                            ) {\n                                this._outOfBounds = 1;\n                            }\n\n                            if (this._outOfBounds) {\n                                if (this._clipping || this._useRenderToTexture || (this._clipbox && (bboxW && bboxH))) {\n                                    this._outOfBounds = 2;\n                                }\n                            }\n                        }\n\n                        withinMargin = (this._outOfBounds === 0);\n                        if (!withinMargin) {\n                            // Re-test, now with margins.\n                            if (this._recBoundsMargin) {\n                                withinMargin = !((ex < this._scissor[0] - this._recBoundsMargin[2]) ||\n                                    (ey < this._scissor[1] - this._recBoundsMargin[3]) ||\n                                    (sx > this._scissor[0] + this._scissor[2] + this._recBoundsMargin[0]) ||\n                                    (sy > this._scissor[1] + this._scissor[3] + this._recBoundsMargin[1]));\n                            } else {\n                                withinMargin = !((ex < this._scissor[0] - 100) ||\n                                    (ey < this._scissor[1] - 100) ||\n                                    (sx > this._scissor[0] + this._scissor[2] + 100) ||\n                                    (sy > this._scissor[1] + this._scissor[3] + 100));\n                            }\n                            if (withinMargin && this._outOfBounds === 2) {\n                                // Children must be visited because they may contain elements that are within margin, so must be visible.\n                                this._outOfBounds = 1;\n                            }\n                        }\n                    }\n\n                    if (this._withinBoundsMargin !== withinMargin) {\n                        this._withinBoundsMargin = withinMargin;\n\n                        if (this._withinBoundsMargin) {\n                            // This may update things (txLoaded events) in the element itself, but also in descendants and ancestors.\n\n                            // Changes in ancestors should be executed during the next call of the stage update. But we must\n                            // take care that the _recalc and _hasUpdates flags are properly registered. That's why we clear\n                            // both before entering the children, and use _pRecalc to transfer inherited updates instead of\n                            // _recalc directly.\n\n                            // Changes in descendants are automatically executed within the current update loop, though we must\n                            // take care to not update the hasUpdates flag unnecessarily in ancestors. We achieve this by making\n                            // sure that the hasUpdates flag of this element is turned on, which blocks it for ancestors.\n                            this._hasUpdates = true;\n\n                            const recalc = this._recalc;\n                            this._recalc = 0;\n                            this.element._enableWithinBoundsMargin();\n\n                            if (this._recalc) {\n                                // This element needs to be re-updated now, because we want the dimensions (and other changes) to be updated.\n                                return this.update();\n                            }\n\n                            this._recalc = recalc;\n                        } else {\n                            this.element._disableWithinBoundsMargin();\n                        }\n                    }\n                }\n            }\n\n            if (this._useRenderToTexture) {\n                // Set viewport necessary for children scissor calculation.\n                if (this._viewport) {\n                    this._viewport[2] = bboxW;\n                    this._viewport[3] = bboxH;\n                } else {\n                    this._viewport = [0, 0, bboxW, bboxH];\n                }\n            }\n\n            // Filter out bits that should not be copied to the children (currently all are).\n            this._pRecalc = (this._recalc & 135);\n\n            // Clear flags so that future updates are properly detected.\n            this._recalc = 0;\n            this._hasUpdates = false;\n\n            if (this._outOfBounds < 2) {\n                if (this._useRenderToTexture) {\n                    if (this._worldContext.isIdentity()) {\n                        // Optimization.\n                        // The world context is already identity: use the world context as render context to prevents the\n                        // ancestors from having to update the render context.\n                        this._renderContext = this._worldContext;\n                    } else {\n                        // Temporarily replace the render coord attribs by the identity matrix.\n                        // This allows the children to calculate the render context.\n                        this._renderContext = ElementCoreContext.IDENTITY;\n                    }\n                }\n\n                if (this._children) {\n                    for (let i = 0, n = this._children.length; i < n; i++) {\n                        this._children[i].update();\n                    }\n                }\n\n                if (this._useRenderToTexture) {\n                    this._renderContext = r;\n                }\n            } else {\n                if (this._children) {\n                    for (let i = 0, n = this._children.length; i < n; i++) {\n                        if (this._children[i]._hasUpdates) {\n                            this._children[i].update();\n                        } else {\n                            // Make sure we don't lose the 'inherited' updates.\n                            this._children[i]._recalc |= this._pRecalc;\n                            this._children[i].updateOutOfBounds();\n                        }\n                    }\n                }\n            }\n\n            if (this._onAfterUpdate) {\n                this._onAfterUpdate(this.element);\n            }\n        } else {\n            if (this.ctx.updateTreeOrder === -1 || this._updateTreeOrder >= this.ctx.updateTreeOrder) {\n                // If new tree order does not interfere with the current (gaps allowed) there's no need to traverse the branch.\n                this.ctx.updateTreeOrder = -1;\n            } else {\n                this.updateTreeOrder();\n            }\n        }\n    }\n\n    _applyRelativeDimFuncs() {\n        if (this._optFlags & 1) {\n            const x = this._funcX(this._parent.w);\n            if (x !== this._x) {\n                this._localPx += (x - this._x);\n                this._x = x;\n            }\n        }\n        if (this._optFlags & 2) {\n            const y = this._funcY(this._parent.h);\n            if (y !== this._y) {\n                this._localPy += (y - this._y);\n                this._y = y;\n            }\n        }\n\n        let changedDims = false;\n        if (this._optFlags & 4) {\n            const w = this._funcW(this._parent.w);\n            if (w !== this._w) {\n                this._w = w;\n                changedDims = true;\n            }\n        }\n        if (this._optFlags & 8) {\n            const h = this._funcH(this._parent.h);\n            if (h !== this._h) {\n                this._h = h;\n                changedDims = true;\n            }\n        }\n\n        if (changedDims) {\n            // Recalc mount, scale position.\n            this._recalcLocalTranslate();\n\n            this.element.onDimensionsChanged(this._w, this._h);\n        }\n    }\n\n    updateOutOfBounds() {\n        // Propagate outOfBounds flag to descendants (necessary because of z-indexing).\n        // Invisible elements are not drawn anyway. When alpha is updated, so will _outOfBounds.\n        if (this._outOfBounds !== 2 && this._renderContext.alpha > 0) {\n\n            // Inherit parent out of boundsness.\n            this._outOfBounds = 2;\n\n            if (this._withinBoundsMargin) {\n                this._withinBoundsMargin = false;\n                this.element._disableWithinBoundsMargin();\n            }\n\n            if (this._children) {\n                for (let i = 0, n = this._children.length; i < n; i++) {\n                    this._children[i].updateOutOfBounds();\n                }\n            }\n        }\n    }\n\n    updateTreeOrder() {\n        if (this._localAlpha && (this._outOfBounds !== 2)) {\n            this._updateTreeOrder = this.ctx.updateTreeOrder++;\n\n            if (this._children) {\n                for (let i = 0, n = this._children.length; i < n; i++) {\n                    this._children[i].updateTreeOrder();\n                }\n            }\n        }\n    }\n\n    _renderSimple() {\n        this._hasRenderUpdates = 0;\n\n        if (this._zSort) {\n            this.sortZIndexedChildren();\n        }\n\n        if (this._outOfBounds < 2 && this._renderContext.alpha) {\n            let renderState = this.renderState;\n\n            if ((this._outOfBounds === 0) && this._displayedTextureSource) {\n                renderState.setShader(this.activeShader, this._shaderOwner);\n                renderState.setScissor(this._scissor);\n                this.renderState.addQuad(this);\n            }\n\n            // Also add children to the VBO.\n            if (this._children) {\n                if (this._zContextUsage) {\n                    for (let i = 0, n = this._zIndexedChildren.length; i < n; i++) {\n                        this._zIndexedChildren[i].render();\n                    }\n                } else {\n                    for (let i = 0, n = this._children.length; i < n; i++) {\n                        if (this._children[i]._zIndex === 0) {\n                            // If zIndex is set, this item already belongs to a zIndexedChildren array in one of the ancestors.\n                            this._children[i].render();\n                        }\n\n                    }\n                }\n            }\n        }\n    }\n\n    _renderAdvanced() {\n        const hasRenderUpdates = this._hasRenderUpdates;\n\n        // We must clear the hasRenderUpdates flag before rendering, because updating result textures in combination\n        // with z-indexing may trigger render updates on a render branch that is 'half done'.\n        // We need to ensure that the full render branch is marked for render updates, not only half (leading to freeze).\n        this._hasRenderUpdates = 0;\n\n        if (this._zSort) {\n            this.sortZIndexedChildren();\n        }\n\n        if (this._outOfBounds < 2 && this._renderContext.alpha) {\n            let renderState = this.renderState;\n\n            let mustRenderChildren = true;\n            let renderTextureInfo;\n            let prevRenderTextureInfo;\n            if (this._useRenderToTexture) {\n                if (this._w === 0 || this._h === 0) {\n                    // Ignore this branch and don't draw anything.\n                    return;\n                } else if (!this._texturizer.hasRenderTexture() || (hasRenderUpdates >= 3)) {\n                    // Tell the renderer we're rendering a renderToTexture element in this frame\n                    this.ctx.renderToTextureCount++;\n                    // Switch to default shader for building up the render texture.\n                    renderState.setShader(renderState.defaultShader, this);\n\n                    prevRenderTextureInfo = renderState.renderTextureInfo;\n\n                    renderTextureInfo = {\n                        nativeTexture: null,\n                        offset: 0,  // Set by CoreRenderState.\n                        w: this._w,\n                        h: this._h,\n                        empty: true,\n                        cleared: false,\n                        ignore: false,\n                        cache: false\n                    };\n\n                    if (this._texturizer.hasResultTexture() || (!renderState.isCachingTexturizer && (hasRenderUpdates < 3))) {\n                        /**\n                         * We don't always cache render textures.\n                         *\n                         * The rule is, that caching for a specific render texture is only enabled if:\n                         * - There is a result texture to be updated.\n                         * - There were no render updates -within the contents- since last frame (ElementCore.hasRenderUpdates < 3)\n                         * - AND there are no ancestors that are being cached during this frame (CoreRenderState.isCachingTexturizer)\n                         *   If an ancestor is cached anyway, it's probably not necessary to keep deeper caches. If the top level is to\n                         *   change while a lower one is not, that lower level will be cached instead.\n                         *\n                         * In case of the fast blur element, this prevents having to cache all blur levels and stages, saving a huge amount\n                         * of GPU memory!\n                         *\n                         * Especially when using multiple stacked layers of the same dimensions that are RTT this will have a very\n                         * noticable effect on performance as less render textures need to be allocated.\n                         */\n                        renderTextureInfo.cache = true;\n                        renderState.isCachingTexturizer = true;\n                    }\n\n                    if (!this._texturizer.hasResultTexture()) {\n                        // We can already release the current texture to the pool, as it will be rebuild anyway.\n                        // In case of multiple layers of 'filtering', this may save us from having to create one\n                        //  render-to-texture layer.\n                        // Notice that we don't do this when there is a result texture, as any other element may rely on\n                        //  that result texture being filled.\n                        this._texturizer.releaseRenderTexture();\n                    }\n\n                    renderState.setRenderTextureInfo(renderTextureInfo);\n                    renderState.setScissor(null);\n\n                    if (this._displayedTextureSource) {\n                        let r = this._renderContext;\n\n                        // Use an identity context for drawing the displayed texture to the render texture.\n                        this._renderContext = ElementCoreContext.IDENTITY;\n\n                        // Add displayed texture source in local coordinates.\n                        this.renderState.addQuad(this);\n\n                        this._renderContext = r;\n                    }\n                } else {\n                    mustRenderChildren = false;\n                }\n            } else {\n                if ((this._outOfBounds === 0) && this._displayedTextureSource) {\n                    renderState.setShader(this.activeShader, this._shaderOwner);\n                    renderState.setScissor(this._scissor);\n                    this.renderState.addQuad(this);\n                }\n            }\n\n            // Also add children to the VBO.\n            if (mustRenderChildren && this._children) {\n                if (this._zContextUsage) {\n                    for (let i = 0, n = this._zIndexedChildren.length; i < n; i++) {\n                        this._zIndexedChildren[i].render();\n                    }\n                } else {\n                    for (let i = 0, n = this._children.length; i < n; i++) {\n                        if (this._children[i]._zIndex === 0) {\n                            // If zIndex is set, this item already belongs to a zIndexedChildren array in one of the ancestors.\n                            this._children[i].render();\n                        }\n                    }\n                }\n            }\n\n            if (this._useRenderToTexture) {\n                let updateResultTexture = false;\n                if (mustRenderChildren) {\n                    // Finished refreshing renderTexture.\n                    renderState.finishedRenderTexture();\n\n                    // If nothing was rendered, we store a flag in the texturizer and prevent unnecessary\n                    //  render-to-texture and filtering.\n                    this._texturizer.empty = renderTextureInfo.empty;\n\n                    if (renderTextureInfo.empty) {\n                        // We ignore empty render textures and do not draw the final quad.\n\n                        // The following cleans up memory and enforces that the result texture is also cleared.\n                        this._texturizer.releaseRenderTexture();\n                    } else if (renderTextureInfo.nativeTexture) {\n                        // If nativeTexture is set, we can reuse that directly instead of creating a new render texture.\n                        this._texturizer.reuseTextureAsRenderTexture(renderTextureInfo.nativeTexture);\n\n                        renderTextureInfo.ignore = true;\n                    } else {\n                        if (this._texturizer.renderTextureReused) {\n                            // Quad operations must be written to a render texture actually owned.\n                            this._texturizer.releaseRenderTexture();\n                        }\n                        // Just create the render texture.\n                        renderTextureInfo.nativeTexture = this._texturizer.getRenderTexture();\n                    }\n\n                    // Restore the parent's render texture.\n                    renderState.setRenderTextureInfo(prevRenderTextureInfo);\n\n                    updateResultTexture = true;\n                }\n\n                if (!this._texturizer.empty) {\n                    let resultTexture = this._texturizer.getResultTexture();\n                    if (updateResultTexture) {\n                        if (resultTexture) {\n                            // Logging the update frame can be handy for userland.\n                            resultTexture.update = renderState.stage.frameCounter;\n                        }\n                        this._texturizer.updateResultTexture();\n                    }\n\n                    if (!this._texturizer.renderOffscreen) {\n                        // Render result texture to the actual render target.\n                        renderState.setShader(this.activeShader, this._shaderOwner);\n                        renderState.setScissor(this._scissor);\n\n                        // If no render texture info is set, the cache can be reused.\n                        const cache = !renderTextureInfo || renderTextureInfo.cache;\n\n                        renderState.setTexturizer(this._texturizer, cache);\n                        this._stashTexCoords();\n                        if (!this._texturizer.colorize) this._stashColors();\n                        this.renderState.addQuad(this, true);\n                        if (!this._texturizer.colorize) this._unstashColors();\n                        this._unstashTexCoords();\n                        renderState.setTexturizer(null);\n                    }\n                }\n            }\n\n            if (renderTextureInfo && renderTextureInfo.cache) {\n                // Allow siblings to cache.\n                renderState.isCachingTexturizer = false;\n            }\n        }\n    }\n\n    get zSort() {\n        return this._zSort;\n    }\n\n    sortZIndexedChildren() {\n        /**\n         * We want to avoid resorting everything. Instead, we do a single pass of the full array:\n         * - filtering out elements with a different zParent than this (were removed)\n         * - filtering out, but also gathering (in a temporary array) the elements that have zIndexResort flag\n         * - then, finally, we merge-sort both the new array and the 'old' one\n         * - element may have been added 'double', so when merge-sorting also check for doubles.\n         * - if the old one is larger (in size) than it should be, splice off the end of the array.\n         */\n\n        const n = this._zIndexedChildren.length;\n        let ptr = 0;\n        const a = this._zIndexedChildren;\n\n        // Notice that items may occur multiple times due to z-index changing.\n        const b = [];\n        for (let i = 0; i < n; i++) {\n            if (a[i]._zParent === this) {\n                if (a[i]._zIndexResort) {\n                    b.push(a[i]);\n                } else {\n                    if (ptr !== i) {\n                        a[ptr] = a[i];\n                    }\n                    ptr++;\n                }\n            }\n        }\n\n        const m = b.length;\n        if (m) {\n            for (let j = 0; j < m; j++) {\n                b[j]._zIndexResort = false;\n            }\n\n            b.sort(ElementCore.sortZIndexedChildren);\n            const n = ptr;\n            if (!n) {\n                ptr = 0;\n                let j = 0;\n                do {\n                    a[ptr++] = b[j++];\n                } while (j < m);\n\n                if (a.length > ptr) {\n                    // Slice old (unnecessary) part off array.\n                    a.splice(ptr);\n                }\n            } else {\n                a.splice(n); // Remove items that were sorted in b array, so that we can sort a\n+               // Beware that the function passed here to Array.sort must be stable\n+               a.sort(ElementCore.sortZIndexedChildren); // Needed because items with same _zIndex may not be ordered by _updateTreeOrder\n                // Merge-sort arrays;\n                ptr = 0;\n                let i = 0;\n                let j = 0;\n                const mergeResult = [];\n                do {\n                    const v = (a[i]._zIndex === b[j]._zIndex ? a[i]._updateTreeOrder - b[j]._updateTreeOrder : a[i]._zIndex - b[j]._zIndex);\n\n                    const add = v > 0 ? b[j++] : a[i++];\n\n                    if (ptr === 0 || (mergeResult[ptr - 1] !== add)) {\n                        mergeResult[ptr++] = add;\n                    }\n\n                    if (i >= n) {\n                        do {\n                            const add = b[j++];\n                            if (ptr === 0 || (mergeResult[ptr - 1] !== add)) {\n                                mergeResult[ptr++] = add;\n                            }\n                        } while (j < m);\n                        break;\n                    } else if (j >= m) {\n                        do {\n                            const add = a[i++];\n                            if (ptr === 0 || (mergeResult[ptr - 1] !== add)) {\n                                mergeResult[ptr++] = add;\n                            }\n                        } while (i < n);\n                        break;\n                    }\n                } while (true);\n\n                this._zIndexedChildren = mergeResult;\n            }\n        } else {\n            if (a.length > ptr) {\n                // Slice old (unnecessary) part off array.\n                a.splice(ptr);\n            }\n        }\n\n        this._zSort = false;\n    };\n\n    get localTa() {\n        return this._localTa;\n    };\n\n    get localTb() {\n        return this._localTb;\n    };\n\n    get localTc() {\n        return this._localTc;\n    };\n\n    get localTd() {\n        return this._localTd;\n    };\n\n    get element() {\n        return this._element;\n    }\n\n    get renderUpdates() {\n        return this._hasRenderUpdates;\n    }\n\n    get texturizer() {\n        if (!this._texturizer) {\n            this._texturizer = new ElementTexturizer(this);\n        }\n        return this._texturizer;\n    }\n\n    getCornerPoints() {\n        let w = this._worldContext;\n\n        return [\n            w.px,\n            w.py,\n            w.px + this._w * w.ta,\n            w.py + this._w * w.tc,\n            w.px + this._w * w.ta + this._h * w.tb,\n            w.py + this._w * w.tc + this._h * w.td,\n            w.px + this._h * w.tb,\n            w.py + this._h * w.td\n        ];\n    };\n\n    getRenderTextureCoords(relX, relY) {\n        let r = this._renderContext;\n        return [\n            r.px + r.ta * relX + r.tb * relY,\n            r.py + r.tc * relX + r.td * relY\n        ];\n    }\n\n    getAbsoluteCoords(relX, relY) {\n        let w = this._renderContext;\n        return [\n            w.px + w.ta * relX + w.tb * relY,\n            w.py + w.tc * relX + w.td * relY\n        ];\n    }\n\n    collectAtCoord(x, y, children) {\n        // return when branch is hidden\n        if (this._renderContext.alpha === 0) {\n            return;\n        }\n\n        if (this.inBound(x, y)) {\n            if (this._scissor) {\n                if (this.inScissor()) {\n                    children.push(this);\n                }\n            } else {\n                children.push(this);\n            }\n        }\n\n        if (this._children) {\n            const j = this._children.length;\n            for (let i = 0; i < j; i++) {\n                this._children[i].collectAtCoord(x, y, children);\n            }\n        }\n\n        return children.sort(ElementCore.sortZIndexedChildren);\n    }\n\n    inBound(tx, ty) {\n        const c = this.getCornerPoints();\n        return tx > c[0] && tx < c[2] && ty > c[1] && ty < c[7];\n    }\n\n    inScissor() {\n        const sc = this._scissor;\n        const c = this.getCornerPoints();\n\n        return c[2] >= sc[0] && c[0] <= sc[0] + sc[2] && c[7] >= sc[1] && c[1] <= sc[1] + sc[3];\n    }\n\n    get layout() {\n        this._ensureLayout();\n        return this._layout;\n    }\n\n    get flex() {\n        return this._layout ? this._layout.flex : null;\n    }\n\n    set flex(v) {\n        this.layout.flex = v;\n    }\n\n    get flexItem() {\n        return this._layout ? this._layout.flexItem : null;\n    }\n\n    set flexItem(v) {\n        this.layout.flexItem = v;\n    }\n\n    isFlexItem() {\n        return !!this._layout && this._layout.isFlexItemEnabled();\n    }\n\n    isFlexContainer() {\n        return !!this._layout && this._layout.isFlexEnabled();\n    }\n\n    enableFlexLayout() {\n        this._ensureLayout();\n    }\n\n    _ensureLayout() {\n        if (!this._layout) {\n            this._layout = new FlexTarget(this);\n        }\n    }\n\n    disableFlexLayout() {\n        this._triggerRecalcTranslate();\n    }\n\n    hasFlexLayout() {\n        return (this._layout && this._layout.isEnabled());\n    }\n\n    setLayout(x, y, w, h) {\n        this.x = x;\n        this.y = y;\n        this._updateDimensions(w, h);\n    }\n\n    triggerLayout() {\n        this._setRecalc(256);\n    }\n\n    _triggerRecalcTranslate() {\n        this._setRecalc(2);\n    }\n\n}\n\nclass ElementCoreContext {\n\n    constructor() {\n        this.alpha = 1;\n\n        this.px = 0;\n        this.py = 0;\n\n        this.ta = 1;\n        this.tb = 0;\n        this.tc = 0;\n        this.td = 1;\n    }\n\n    isIdentity() {\n        return this.alpha === 1 &&\n            this.px === 0 &&\n            this.py === 0 &&\n            this.ta === 1 &&\n            this.tb === 0 &&\n            this.tc === 0 &&\n            this.td === 1;\n    }\n\n    isSquare() {\n        return this.tb === 0 && this.tc === 0;\n    }\n\n}\n\nElementCoreContext.IDENTITY = new ElementCoreContext();\nElementCore.sortZIndexedChildren = function (a, b) {\n    return (a._zIndex === b._zIndex ? a._updateTreeOrder - b._updateTreeOrder : a._zIndex - b._zIndex);\n};\n\nimport ElementTexturizer from \"./ElementTexturizer.mjs\";\nimport Utils from \"../Utils.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * This is a partial (and more efficient) implementation of the event emitter.\n * It attempts to maintain a one-to-one mapping between events and listeners, skipping an array lookup.\n * Only if there are multiple listeners, they are combined in an array.\n */\nexport default class EventEmitter {\n\n    constructor() {\n        // This is set (and kept) to true when events are used at all.\n        this._hasEventListeners = false;\n    }\n\n    on(name, listener) {\n        if (!this._hasEventListeners) {\n            this._eventFunction = {}\n            this._eventListeners = {}\n            this._hasEventListeners = true;\n        }\n\n        const current = this._eventFunction[name];\n        if (!current) {\n            this._eventFunction[name] = listener;\n        } else {\n            if (this._eventFunction[name] !== EventEmitter.combiner) {\n                this._eventListeners[name] = [this._eventFunction[name], listener];\n                this._eventFunction[name] = EventEmitter.combiner;\n            } else {\n                this._eventListeners[name].push(listener);\n            }\n        }\n    }\n\n    once(name, listener) {\n        const wrapper = (arg1, arg2, arg3) => {\n            listener(arg1, arg2, arg3);\n            this.off(name, wrapper);\n        }\n        wrapper.__originalFunc = listener;\n        this.on(name, wrapper);\n    }\n\n    has(name, listener) {\n        if (this._hasEventListeners) {\n            const current = this._eventFunction[name];\n            if (current) {\n                if (current === EventEmitter.combiner) {\n                    const listeners = this._eventListeners[name];\n                    for (const l of listeners) {\n                        if (l === listener || l.__originalFunc == listener) {\n                            return true;\n                        }\n                    }\n                } else if (this._eventFunction[name] === listener || this._eventFunction[name].__originalFunc === listener) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    off(name, listener) {\n        if (this._hasEventListeners) {\n            const current = this._eventFunction[name];\n            if (current) {\n                if (current === EventEmitter.combiner) {\n                    const listeners = this._eventListeners[name];\n                    let index = listeners.indexOf(listener);\n                    if (index >= 0) {\n                        listeners.splice(index, 1);\n                    }\n                    index = listeners.map((l) => l.__originalFunc).indexOf(listener);\n                    if (index >= 0) {\n                        listeners.splice(index, 1);\n                    }\n                    if (listeners.length === 1) {\n                        this._eventFunction[name] = listeners[0];\n                        this._eventListeners[name] = undefined;\n                    }\n                } else if (this._eventFunction[name] === listener || this._eventFunction[name].__originalFunc === listener) {\n                    this._eventFunction[name] = undefined;\n                }\n            }\n        }\n    }\n\n    removeListener(name, listener) {\n        this.off(name, listener);\n    }\n\n    emit(name, arg1, arg2, arg3) {\n        if (this._hasEventListeners) {\n            const func = this._eventFunction[name];\n            if (func) {\n                if (func === EventEmitter.combiner) {\n                    func(this, name, arg1, arg2, arg3);\n                } else {\n                    func(arg1, arg2, arg3);\n                }\n            }\n        }\n    }\n\n    listenerCount(name) {\n        if (this._hasEventListeners) {\n            const func = this._eventFunction[name];\n            if (func) {\n                if (func === EventEmitter.combiner) {\n                    return this._eventListeners[name].length;\n                } else {\n                    return 1;\n                }\n            }\n        }\n        return 0;\n    }\n\n    removeAllListeners(name) {\n        if (this._hasEventListeners) {\n            delete this._eventFunction[name];\n            delete this._eventListeners[name];\n        }\n    }\n\n}\n\nEventEmitter.combiner = function(object, name, arg1, arg2, arg3) {\n    const listeners = object._eventListeners[name];\n    if (listeners) {\n        /* Because listener may detach itself while being invoked and therefore invalidate the iterator,\n           we need to create a copy to loop over it */\n        for (const listener of [...listeners]) {\n            listener(arg1, arg2, arg3);\n        }\n    }\n}\n\nEventEmitter.addAsMixin = function(cls) {\n    cls.prototype.on = EventEmitter.prototype.on;\n    cls.prototype.once = EventEmitter.prototype.once;\n    cls.prototype.has = EventEmitter.prototype.has;\n    cls.prototype.off = EventEmitter.prototype.off;\n    cls.prototype.removeListener = EventEmitter.prototype.removeListener;\n    cls.prototype.emit = EventEmitter.prototype.emit;\n    cls.prototype.listenerCount = EventEmitter.prototype.listenerCount;\n    cls.prototype.removeAllListeners = EventEmitter.prototype.removeAllListeners;\n}\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Utils from \"./Utils.mjs\";\nimport Base from \"./Base.mjs\";\n\nexport default class Shader {\n\n    constructor(coreContext) {\n        this._initialized = false;\n\n        this.ctx = coreContext;\n\n        /**\n         * The (enabled) elements that use this shader.\n         * @type {Set<ElementCore>}\n         */\n        this._elements = new Set();\n    }\n\n    static create(stage, v) {\n        let shader;\n        if (Utils.isObjectLiteral(v)) {\n            if (v.type) {\n                shader = stage.renderer.createShader(stage.ctx, v);\n            } else {\n                shader = this.shader;\n            }\n\n            if (shader) {\n                Base.patchObject(shader, v);\n            }\n        } else if (v === null) {\n            shader = stage.ctx.renderState.defaultShader;\n        } else if (v === undefined) {\n            shader = null;\n        } else {\n            if (v.isShader) {\n                if (!stage.renderer.isValidShaderType(v.constructor)) {\n                    console.error(\"[Lightning] Invalid shader type\");\n                    v = null;\n                }\n                shader = v;\n            } else {\n                console.error(\"[Lightning] Please specify a shader type.\");\n                return;\n            }\n        }\n\n        return shader;\n    }\n\n    static getWebGL() {\n        return undefined;\n    }\n\n    static getC2d() {\n        return undefined;\n    }\n\n    addElement(elementCore) {\n        this._elements.add(elementCore);\n    }\n\n    removeElement(elementCore) {\n        this._elements.delete(elementCore);\n        if (!this._elements) {\n            this.cleanup();\n        }\n    }\n\n    redraw() {\n        this._elements.forEach(elementCore => {\n            elementCore.setHasRenderUpdates(2);\n        });\n    }\n\n    patch(settings) {\n        Base.patchObject(this, settings);\n    }\n\n    useDefault() {\n        // Should return true if this shader is configured (using it's properties) to not have any effect.\n        // This may allow the render engine to avoid unnecessary shader program switches or even texture copies.\n        return false;\n    }\n\n    addEmpty() {\n        // Draws this shader even if there are no quads to be added.\n        // This is handy for custom shaders.\n        return false;\n    }\n\n    cleanup() {\n        // Called when no more enabled elements have this shader.\n    }\n\n    get isShader() {\n        return true;\n    }\n}\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class Texture {\n\n    /**\n     * @param {Stage} stage\n     */\n    constructor(stage) {\n        this.stage = stage;\n\n        this.manager = this.stage.textureManager;\n\n        this.id = Texture.id++;\n\n        /**\n         * All enabled elements that use this texture object (either as texture or displayedTexture).\n         * @type {Set<Element>}\n         */\n        this.elements = new Set();\n\n        /**\n         * The number of enabled elements that are active.\n         * @type {number}\n         */\n        this._activeCount = 0;\n\n        /**\n         * The associated texture source.\n         * Should not be changed.\n         * @type {TextureSource}\n         */\n        this._source = null;\n\n        /**\n         * A resize mode can be set to cover or contain a certain area.\n         * It will reset the texture clipping settings.\n         * When manual texture clipping is performed, the resizeMode is reset.\n         * @type {{type: string, width: number, height: number}}\n         * @private\n         */\n        this._resizeMode = null;\n\n        /**\n         * The texture clipping x-offset.\n         * @type {number}\n         */\n        this._x = 0;\n\n        /**\n         * The texture clipping y-offset.\n         * @type {number}\n         */\n        this._y = 0;\n\n        /**\n         * The texture clipping width. If 0 then full width.\n         * @type {number}\n         */\n        this._w = 0;\n\n        /**\n         * The texture clipping height. If 0 then full height.\n         * @type {number}\n         */\n        this._h = 0;\n\n        /**\n         * Render precision (0.5 = fuzzy, 1 = normal, 2 = sharp even when scaled twice, etc.).\n         * @type {number}\n         * @private\n         */\n        this._precision = 1;\n\n        /**\n         * The (maximum) expected texture source width. Used for within bounds determination while texture is not yet loaded.\n         * If not set, 2048 is used by ElementCore.update.\n         * @type {number}\n         */\n        this.mw = 0;\n\n        /**\n         * The (maximum) expected texture source height. Used for within bounds determination while texture is not yet loaded.\n         * If not set, 2048 is used by ElementCore.update.\n         * @type {number}\n         */\n        this.mh = 0;\n\n        /**\n         * Indicates if Texture.prototype.texture uses clipping.\n         * @type {boolean}\n         */\n        this.clipping = false;\n\n        /**\n         * Indicates whether this texture must update (when it becomes used again).\n         * @type {boolean}\n         * @private\n         */\n        this._mustUpdate = true;\n\n    }\n\n    get source() {\n        if (this._mustUpdate || this.stage.hasUpdateSourceTexture(this)) {\n            this._performUpdateSource(true);\n            this.stage.removeUpdateSourceTexture(this);\n        }\n        return this._source;\n    }\n\n    addElement(v) {\n        if (!this.elements.has(v)) {\n            this.elements.add(v);\n\n            if (this.elements.size === 1) {\n                if (this._source) {\n                    this._source.addTexture(this);\n                }\n            }\n\n            if (v.active) {\n                this.incActiveCount();\n            }\n        }\n    }\n\n    removeElement(v) {\n        if (this.elements.delete(v)) {\n            if (this.elements.size === 0) {\n                if (this._source) {\n                    this._source.removeTexture(this);\n                }\n            }\n\n            if (v.active) {\n                this.decActiveCount();\n            }\n        }\n    }\n\n    incActiveCount() {\n        // Ensure that texture source's activeCount has transferred ownership.\n        const source = this.source;\n\n        if (source) {\n            this._checkForNewerReusableTextureSource();\n        }\n\n        this._activeCount++;\n        if (this._activeCount === 1) {\n            this.becomesUsed();\n        }\n    }\n\n    decActiveCount() {\n        const source = this.source; // Force updating the source.\n        this._activeCount--;\n        if (!this._activeCount) {\n            this.becomesUnused();\n        }\n    }\n\n    becomesUsed() {\n        if (this.source) {\n            this.source.incActiveTextureCount();\n        }\n    }\n\n    onLoad() {\n        if (this._resizeMode) {\n            this._applyResizeMode();\n        }\n\n        this.elements.forEach(element => {\n            if (element.active) {\n                element.onTextureSourceLoaded();\n            }\n        });\n    }\n\n    _checkForNewerReusableTextureSource() {\n        // When this source became unused and cleaned up, it may have disappeared from the reusable texture map.\n        // In the meantime another texture may have been generated loaded with the same lookup id.\n        // If this is the case, use that one instead to make sure only one active texture source per lookup id exists.\n        const source = this.source;\n        if (!source.isLoaded()) {\n            const reusable = this._getReusableTextureSource();\n            if (reusable && reusable.isLoaded() && (reusable !== source)) {\n                this._replaceTextureSource(reusable);\n            }\n        } else {\n            if (this._resizeMode) {\n                this._applyResizeMode();\n            }\n        }\n    }\n\n    becomesUnused() {\n        if (this.source) {\n            this.source.decActiveTextureCount();\n        }\n    }\n\n    isUsed() {\n        return this._activeCount > 0;\n    }\n\n    /**\n     * Returns the lookup id for the current texture settings, to be able to reuse it.\n     * @returns {string|null}\n     */\n    _getLookupId() {\n        // Default: do not reuse texture.\n        return null;\n    }\n\n    /**\n     * Generates a loader function that is able to generate the texture for the current settings of this texture.\n     * It should return a function that receives a single callback argument.\n     * That callback should be called with the following arguments:\n     *   - err\n     *   - options: object\n     *     - source: ArrayBuffer|WebGlTexture|ImageData|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|ImageBitmap\n     *     - w: Number\n     *     - h: Number\n     *     - permanent: Boolean\n     *     - hasAlpha: boolean\n     *     - permultiplyAlpha: boolean\n     *     - flipBlueRed: boolean\n     *     - renderInfo: object\n     * The loader itself may return a Function that is called when loading of the texture is cancelled. This can be used\n     * to stop fetching an image when it is no longer in element, for example.\n     */\n    _getSourceLoader() {\n        throw new Error(\"Texture.generate must be implemented.\");\n    }\n\n    get isValid() {\n        return this._getIsValid();\n    }\n\n    /**\n     * If texture is not 'valid', no source can be created for it.\n     * @returns {boolean}\n     */\n    _getIsValid() {\n        return true;\n    }\n\n    /**\n     * This must be called when the texture source must be re-generated.\n     */\n    _changed() {\n        // If no element is actively using this texture, ignore it altogether.\n        if (this.isUsed()) {\n            this._updateSource();\n        } else {\n            this._mustUpdate = true;\n        }\n    }\n\n    _updateSource() {\n        // We delay all updateSource calls to the next drawFrame, so that we can bundle them.\n        // Otherwise we may reload a texture more often than necessary, when, for example, patching multiple text\n        // properties.\n        this.stage.addUpdateSourceTexture(this);\n    }\n\n    _performUpdateSource(force = false) {\n        // If, in the meantime, the texture was no longer used, just remember that it must update until it becomes used\n        // again.\n        if (force || this.isUsed()) {\n            this._mustUpdate = false;\n            let source = this._getTextureSource();\n            this._replaceTextureSource(source);\n        }\n    }\n\n    _getTextureSource() {\n        let source = null;\n        if (this._getIsValid()) {\n            const lookupId = this._getLookupId();\n            source = this._getReusableTextureSource(lookupId);\n            if (!source) {\n                source = this.manager.getTextureSource(this._getSourceLoader(), lookupId);\n            }\n        }\n        return source;\n    }\n\n    _getReusableTextureSource(lookupId = this._getLookupId()) {\n        if (this._getIsValid()) {\n            if (lookupId) {\n                return this.manager.getReusableTextureSource(lookupId);\n            }\n        }\n        return null;\n    }\n\n    _replaceTextureSource(newSource = null) {\n        let oldSource = this._source;\n\n        this._source = newSource;\n\n        if (this.elements.size) {\n            if (oldSource) {\n                if (this._activeCount) {\n                    oldSource.decActiveTextureCount();\n                }\n\n                oldSource.removeTexture(this);\n\n                // free up unused TextTextures immediately as they are not reused anyway\n                if(this['text'] && !oldSource.isUsed()) {\n                    this.manager.freeTextureSource(oldSource);\n                }\n            }\n\n            if (newSource) {\n                // Must happen before setDisplayedTexture to ensure sprite map texcoords are used.\n                newSource.addTexture(this);\n                if (this._activeCount) {\n                    newSource.incActiveTextureCount();\n                }\n            }\n        }\n\n        if (this.isUsed()) {\n            if (newSource) {\n                if (newSource.isLoaded()) {\n\n                    // Apply resizeMode\n                    if (this._resizeMode) {\n                        this._applyResizeMode();\n                    }\n\n                    this.elements.forEach(element => {\n                        if (element.active) {\n                            element._setDisplayedTexture(this);\n                        }\n                    });\n                } else {\n                    const loadError = newSource.loadError;\n                    if (loadError) {\n                        this.elements.forEach(element => {\n                            if (element.active) {\n                                element.onTextureSourceLoadError(loadError);\n                            }\n                        });\n                    }\n                }\n            } else {\n                this.elements.forEach(element => {\n                    if (element.active) {\n                        element._setDisplayedTexture(null);\n                    }\n                });\n            }\n        }\n    }\n\n    load() {\n        // Make sure that source is up to date.\n        if (this.source) {\n            if (!this.isLoaded()) {\n                this.source.load(true);\n            }\n        }\n    }\n\n    isLoaded() {\n        return this._source && this._source.isLoaded();\n    }\n\n    get loadError() {\n        return this._source && this._source.loadError;\n    }\n\n    free() {\n        if (this._source) {\n            this._source.free();\n        }\n    }\n\n    set resizeMode({type = \"cover\", w = 0, h = 0, clipX = 0.5, clipY = 0.5}) {\n        this._resizeMode = {type, w, h, clipX, clipY};\n        if (this.isLoaded()) {\n            this._applyResizeMode();\n        }\n    }\n\n    get resizeMode() {\n        return this._resizeMode;\n    }\n\n    _clearResizeMode() {\n        this._resizeMode = null;\n    }\n\n    _applyResizeMode() {\n        if (this._resizeMode.type === \"cover\") {\n            this._applyResizeCover();\n        } else if (this._resizeMode.type === \"contain\") {\n            this._applyResizeContain();\n        }\n        this._updatePrecision();\n        this._updateClipping();\n    }\n\n    _applyResizeCover() {\n        const scaleX = this._resizeMode.w / this._source.w;\n        const scaleY = this._resizeMode.h / this._source.h;\n        let scale = Math.max(scaleX, scaleY);\n        if (!scale) return;\n        this._precision = 1/scale;\n        if (scaleX && scaleX < scale) {\n            const desiredSize = this._precision * this._resizeMode.w;\n            const choppedOffPixels = this._source.w - desiredSize;\n            this._x = choppedOffPixels * this._resizeMode.clipX;\n            this._w = this._source.w - choppedOffPixels;\n        }\n        if (scaleY && scaleY < scale) {\n            const desiredSize = this._precision * this._resizeMode.h;\n            const choppedOffPixels = this._source.h - desiredSize;\n            this._y = choppedOffPixels * this._resizeMode.clipY;\n            this._h = this._source.h - choppedOffPixels;\n        }\n    }\n\n    _applyResizeContain() {\n        const scaleX = this._resizeMode.w / this._source.w;\n        const scaleY = this._resizeMode.h / this._source.h;\n        let scale = scaleX;\n        if (!scale || scaleY < scale) {\n            scale = scaleY;\n        }\n        if (!scale) return;\n        this._precision = 1/scale;\n    }\n\n    enableClipping(x, y, w, h) {\n        this._clearResizeMode();\n\n        x *= this._precision;\n        y *= this._precision;\n        w *= this._precision;\n        h *= this._precision;\n        if (this._x !== x || this._y !== y || this._w !== w || this._h !== h) {\n            this._x = x;\n            this._y = y;\n            this._w = w;\n            this._h = h;\n\n            this._updateClipping(true);\n        }\n    }\n\n    disableClipping() {\n        this._clearResizeMode();\n\n        if (this._x || this._y || this._w || this._h) {\n            this._x = 0;\n            this._y = 0;\n            this._w = 0;\n            this._h = 0;\n\n            this._updateClipping();\n        }\n    }\n\n    _updateClipping() {\n        this.clipping = !!(this._x || this._y || this._w || this._h);\n\n        let self = this;\n        this.elements.forEach(function(element) {\n            // Ignore if not the currently displayed texture.\n            if (element.displayedTexture === self) {\n                element.onDisplayedTextureClippingChanged();\n            }\n        });\n    }\n\n    _updatePrecision() {\n        let self = this;\n        this.elements.forEach(function(element) {\n            // Ignore if not the currently displayed texture.\n            if (element.displayedTexture === self) {\n                element.onPrecisionChanged();\n            }\n        });\n    }\n\n    getNonDefaults() {\n        let nonDefaults = {};\n        nonDefaults['type'] = this.constructor.name;\n        if (this.x !== 0) nonDefaults['x'] = this.x;\n        if (this.y !== 0) nonDefaults['y'] = this.y;\n        if (this.w !== 0) nonDefaults['w'] = this.w;\n        if (this.h !== 0) nonDefaults['h'] = this.h;\n        if (this.precision !== 1) nonDefaults['precision'] = this.precision;\n        return nonDefaults;\n    }\n\n    get px() {\n        return this._x;\n    }\n\n    get py() {\n        return this._y;\n    }\n\n    get pw() {\n        return this._w;\n    }\n\n    get ph() {\n        return this._h;\n    }\n\n    get x() {\n        return this._x / this._precision;\n    }\n    set x(v) {\n        this._clearResizeMode();\n        v = v * this._precision;\n        if (this._x !== v) {\n            this._x = v;\n            this._updateClipping();\n        }\n    }\n\n    get y() {\n        return this._y / this._precision;\n    }\n    set y(v) {\n        this._clearResizeMode();\n        v = v * this._precision;\n        if (this._y !== v) {\n            this._y = v;\n            this._updateClipping();\n        }\n    }\n\n    get w() {\n        return this._w / this._precision;\n    }\n\n    set w(v) {\n        this._clearResizeMode();\n        v = v * this._precision;\n        if (this._w !== v) {\n            this._w = v;\n            this._updateClipping();\n        }\n    }\n\n    get h() {\n        return this._h / this._precision;\n    }\n\n    set h(v) {\n        this._clearResizeMode();\n        v = v * this._precision;\n        if (this._h !== v) {\n            this._h = v;\n            this._updateClipping();\n        }\n    }\n\n    get precision() {\n        return this._precision;\n    }\n\n    set precision(v) {\n        this._clearResizeMode();\n        if (this._precision !== v) {\n            this._precision = v;\n            this._updatePrecision();\n        }\n    }\n\n    isAutosizeTexture() {\n        return true;\n    }\n\n    getRenderWidth() {\n        if (!this.isAutosizeTexture()) {\n            // In case of the rectangle texture, we'd prefer to not cause a 1x1 w,h as it would interfere with flex layout fit-to-contents.\n            return 0;\n        }\n\n        // If dimensions are unknown (texture not yet loaded), use maximum width as a fallback as render width to allow proper bounds checking.\n        return (this._w || (this._source ? this._source.getRenderWidth() - this._x : 0)) / this._precision;\n    }\n\n    getRenderHeight() {\n        if (!this.isAutosizeTexture()) {\n            // In case of the rectangle texture, we'd prefer to not cause a 1x1 w,h as it would interfere with flex layout fit-to-contents.\n            return 0;\n        }\n\n        return (this._h || (this._source ? this._source.getRenderHeight() - this._y : 0)) / this._precision;\n    }\n\n    patch(settings) {\n        Base.patchObject(this, settings);\n    }\n\n}\n\nTexture.prototype.isTexture = true;\n\nTexture.id = 0;\n\nimport Base from \"./Base.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Texture from \"../tree/Texture.mjs\";\n\nexport default class ImageTexture extends Texture {\n\n    constructor(stage) {\n        super(stage);\n\n        this._src = undefined;\n        this._hasAlpha = false;\n    }\n\n    get src() {\n        return this._src;\n    }\n\n    set src(v) {\n        if (this._src !== v) {\n            this._src = v;\n            this._changed();\n        }\n    }\n\n    get hasAlpha() {\n        return this._hasAlpha;\n    }\n\n    set hasAlpha(v) {\n        if (this._hasAlpha !== v) {\n            this._hasAlpha = v;\n            this._changed();\n        }\n    }\n\n    _getIsValid() {\n        return !!this._src;\n    }\n\n    _getLookupId() {\n        return this._src;\n    }\n\n    _getSourceLoader() {\n        let src = this._src;\n        let hasAlpha = this._hasAlpha;\n        if (this.stage.getOption('srcBasePath')) {\n            var fc = src.charCodeAt(0);\n            if ((src.indexOf(\"//\") === -1) && ((fc >= 65 && fc <= 90) || (fc >= 97 && fc <= 122) || fc == 46)) {\n                // Alphabetical or dot: prepend base path.\n                src = this.stage.getOption('srcBasePath') + src;\n            }\n        }\n\n        return (cb) => {\n            return this.stage.platform.loadSrcTexture({src: src, hasAlpha: hasAlpha}, cb);\n        }\n    }\n\n    getNonDefaults() {\n        const obj = super.getNonDefaults();\n        if (this._src) {\n            obj.src = this._src;\n        }\n        return obj;\n    }\n\n}\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns CSS font setting string for use in canvas context.\n *\n * @param fontFace\n * @param fontStyle\n * @param fontSize\n * @param precision\n * @param defaultFontFace\n * @returns\n */\nexport function getFontSetting(\n    fontFace: string | string[],\n    fontStyle: string,\n    fontSize: number,\n    precision: number,\n    defaultFontFace: string\n): string {\n    let ff = fontFace;\n\n    if (!Array.isArray(ff)) {\n        ff = [ff];\n    }\n\n    let ffs = [];\n    for (let i = 0, n = ff.length; i < n; i++) {\n        let curFf = ff[i];\n        // Replace the default font face `null` with the actual default font face set\n        // on the stage.\n        if (curFf === null) {\n            curFf = defaultFontFace;\n        }\n        if (curFf === \"serif\" || curFf === \"sans-serif\") {\n            ffs.push(curFf);\n        } else {\n            ffs.push(`\"${curFf}\"`);\n        }\n    }\n\n    return `${fontStyle} ${fontSize * precision}px ${ffs.join(\",\")}`\n}\n\n/**\n * Returns true if the given character is a zero-width space.\n *\n * @param space\n */\nexport function isZeroWidthSpace(space: string): boolean {\n    return space === '' || space === '\\u200B';\n}\n\n/**\n * Returns true if the given character is a zero-width space or a regular space.\n *\n * @param space\n */\nexport function isSpace(space: string): boolean {\n    return isZeroWidthSpace(space) || space === ' ';\n}\n\n/**\n * Converts a string into an array of tokens and the words between them.\n *\n * @param tokenRegex\n * @param text\n */\nexport function tokenizeString(tokenRegex: RegExp, text: string): string[] {\n    const delimeters = text.match(tokenRegex) || [];\n    const words = text.split(tokenRegex) || [];\n\n    let final: string[] = [];\n    for (let i = 0; i < words.length; i++) {\n        final.push(words[i]!, delimeters[i]!)\n    }\n    final.pop()\n    return final.filter((word) => word != '');\n}\n\n/**\n * Measure the width of a string accounting for letter spacing.\n *\n * @param context\n * @param word\n * @param space\n */\nexport function measureText(context: CanvasRenderingContext2D, word: string, space: number = 0): number {\n    if (!space) {\n        return context.measureText(word).width;\n    }\n    return word.split('').reduce((acc, char) => {\n        // Zero-width spaces should not include letter spacing.\n        // And since we know the width of a zero-width space is 0, we can skip\n        // measuring it.\n        if (isZeroWidthSpace(char)) {\n            return acc;\n        }\n        return acc + context.measureText(char).width + space;\n    }, 0);\n}\n\nexport interface WrapTextResult {\n    l: string[];\n    n: number[];\n}\n\n/**\n * Applies newlines to a string to have it optimally fit into the horizontal\n * bounds set by the Text object's wordWrapWidth property.\n *\n * @param context\n * @param text\n * @param wordWrapWidth\n * @param letterSpacing\n * @param indent\n */\nexport function wrapText(\n    context: CanvasRenderingContext2D,\n    text: string,\n    wordWrapWidth: number,\n    letterSpacing: number,\n    indent: number\n): WrapTextResult {\n    // Greedy wrapping algorithm that will wrap words as the line grows longer.\n    // than its horizontal bounds.\n    const spaceRegex = / |\\u200B/g;\n    let lines = text.split(/\\r?\\n/g);\n    let allLines: string[] = [];\n    let realNewlines: number[] = [];\n    for (let i = 0; i < lines.length; i++) {\n        let resultLines: string[] = [];\n        let result = '';\n        let spaceLeft = wordWrapWidth - indent;\n        let words = lines[i]!.split(spaceRegex);\n        let spaces = lines[i]!.match(spaceRegex) || [];\n        for (let j = 0; j < words.length; j++) {\n            const space = spaces[j - 1] || '';\n            const word = words[j]!;\n            const wordWidth = measureText(context, word, letterSpacing);\n            const wordWidthWithSpace = wordWidth + measureText(context, space, letterSpacing);\n            if (j === 0 || wordWidthWithSpace > spaceLeft) {\n                // Skip printing the newline if it's the first word of the line that is.\n                // greater than the word wrap width.\n                if (j > 0) {\n                    resultLines.push(result);\n                    result = '';\n                }\n                result += word;\n                spaceLeft = wordWrapWidth - wordWidth - (j === 0 ? indent : 0);\n            }\n            else {\n                spaceLeft -= wordWidthWithSpace;\n                result += space + word;\n            }\n        }\n\n        resultLines.push(result);\n        result = '';\n\n        allLines = allLines.concat(resultLines);\n\n        if (i < lines.length - 1) {\n            realNewlines.push(allLines.length);\n        }\n    }\n\n    return {l: allLines, n: realNewlines};\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport StageUtils from \"../tree/StageUtils.mjs\";\nimport Utils from \"../tree/Utils.mjs\";\nimport { getFontSetting, measureText, wrapText } from \"./TextTextureRendererUtils.mjs\";\n\nexport default class TextTextureRenderer {\n\n    constructor(stage, canvas, settings) {\n        this._stage = stage;\n        this._canvas = canvas;\n        this._context = this._canvas.getContext('2d');\n        this._settings = settings;\n    }\n\n    getPrecision() {\n        return this._settings.precision;\n    };\n\n    setFontProperties() {\n        this._context.font = getFontSetting(\n            this._settings.fontFace,\n            this._settings.fontStyle,\n            this._settings.fontSize,\n            this.getPrecision(),\n            this._stage.getOption('defaultFontFace'),\n            this._settings.fontWeight,\n        );\n        this._context.textBaseline = this._settings.textBaseline;\n    };\n\n    _load() {\n        if (Utils.isWeb && document.fonts) {\n            const fontSetting = getFontSetting(\n                this._settings.fontFace,\n                this._settings.fontStyle,\n                this._settings.fontSize,\n                this.getPrecision(),\n                this._stage.getOption('defaultFontFace'),\n                this._settings.fontWeight,\n            );\n            try {\n                if (!document.fonts.check(fontSetting, this._settings.text)) {\n                    // Use a promise that waits for loading.\n                    return document.fonts.load(fontSetting, this._settings.text).catch(err => {\n                        // Just load the fallback font.\n                        console.warn('[Lightning] Font load error', err, fontSetting);\n                    }).then(() => {\n                        if (!document.fonts.check(fontSetting, this._settings.text)) {\n                            console.warn('[Lightning] Font not found', fontSetting);\n                        }\n                    });\n                }\n            } catch(e) {\n                console.warn(\"[Lightning] Can't check font loading for \" + fontSetting);\n            }\n        }\n    }\n\n    draw() {\n        // We do not use a promise so that loading is performed syncronous when possible.\n        const loadPromise = this._load();\n        if (!loadPromise) {\n            return Utils.isSpark ? this._stage.platform.drawText(this) : this._draw();\n        } else {\n            return loadPromise.then(() => {\n                return Utils.isSpark ? this._stage.platform.drawText(this) : this._draw();\n            });\n        }\n    }\n\n    _calculateRenderInfo() {\n        let renderInfo = {};\n\n        const precision = this.getPrecision();\n\n        const paddingLeft = this._settings.paddingLeft * precision;\n        const paddingRight = this._settings.paddingRight * precision;\n        const fontSize = this._settings.fontSize * precision;\n        let offsetY = this._settings.offsetY === null ? null : (this._settings.offsetY * precision);\n        let lineHeight = this._settings.lineHeight * precision;\n        const w = this._settings.w * precision;\n        const h = this._settings.h * precision;\n        let wordWrapWidth = this._settings.wordWrapWidth * precision;\n        const cutSx = this._settings.cutSx * precision;\n        const cutEx = this._settings.cutEx * precision;\n        const cutSy = this._settings.cutSy * precision;\n        const cutEy = this._settings.cutEy * precision;\n        const letterSpacing = (this._settings.letterSpacing || 0) * precision;\n        const textIndent = this._settings.textIndent * precision;\n\n        // Set font properties.\n        this.setFontProperties();\n\n        // Total width.\n        let width = w || this._stage.getOption('w');\n\n        // Inner width.\n        let innerWidth = width - (paddingLeft);\n        if (innerWidth < 10) {\n            width += (10 - innerWidth);\n            innerWidth = 10;\n        }\n\n        if (!wordWrapWidth) {\n            wordWrapWidth = innerWidth\n        }\n\n        // Text overflow\n        if (this._settings.textOverflow && !this._settings.wordWrap) {\n            let suffix;\n            switch (this._settings.textOverflow) {\n                case 'clip':\n                    suffix = '';\n                    break;\n                case 'ellipsis':\n                    suffix = this._settings.maxLinesSuffix;\n                    break;\n                default:\n                    suffix = this._settings.textOverflow;\n            }\n            this._settings.text = this.wrapWord(this._settings.text, wordWrapWidth - textIndent, suffix)\n        }\n\n        // word wrap\n        // preserve original text\n        let linesInfo;\n        if (this._settings.wordWrap) {\n            linesInfo = this.wrapText(this._settings.text, wordWrapWidth, letterSpacing, textIndent);\n        } else {\n            linesInfo = {l: this._settings.text.split(/(?:\\r\\n|\\r|\\n)/), n: []};\n            let i, n = linesInfo.l.length;\n            for (let i = 0; i < n - 1; i++) {\n                linesInfo.n.push(i);\n            }\n        }\n        let lines = linesInfo.l;\n\n        if (this._settings.maxLines && lines.length > this._settings.maxLines) {\n            let usedLines = lines.slice(0, this._settings.maxLines);\n\n            let otherLines = null;\n            if (this._settings.maxLinesSuffix) {\n                // Wrap again with max lines suffix enabled.\n                let w = this._settings.maxLinesSuffix ? this.measureText(this._settings.maxLinesSuffix) : 0;\n                let al = this.wrapText(usedLines[usedLines.length - 1], wordWrapWidth - w, letterSpacing, textIndent);\n                usedLines[usedLines.length - 1] = al.l[0] + this._settings.maxLinesSuffix;\n                otherLines = [al.l.length > 1 ? al.l[1] : ''];\n            } else {\n                otherLines = [''];\n            }\n\n            // Re-assemble the remaining text.\n            let i, n = lines.length;\n            let j = 0;\n            let m = linesInfo.n.length;\n            for (i = this._settings.maxLines; i < n; i++) {\n                otherLines[j] += (otherLines[j] ? \" \" : \"\") + lines[i];\n                if (i + 1 < m && linesInfo.n[i + 1]) {\n                    j++;\n                }\n            }\n\n            renderInfo.remainingText = otherLines.join(\"\\n\");\n\n            renderInfo.moreTextLines = true;\n\n            lines = usedLines;\n        } else {\n            renderInfo.moreTextLines = false;\n            renderInfo.remainingText = \"\";\n        }\n\n        // calculate text width\n        let maxLineWidth = 0;\n        let lineWidths = [];\n        for (let i = 0; i < lines.length; i++) {\n            let lineWidth = this.measureText(lines[i], letterSpacing) + (i === 0 ? textIndent : 0);\n            lineWidths.push(lineWidth);\n            maxLineWidth = Math.max(maxLineWidth, lineWidth);\n        }\n\n        renderInfo.lineWidths = lineWidths;\n\n        if (!w) {\n            // Auto-set width to max text length.\n            width = maxLineWidth + paddingLeft + paddingRight;\n            innerWidth = maxLineWidth;\n        }\n\n        // calculate text height\n        lineHeight = lineHeight || fontSize;\n\n        let height;\n        if (h) {\n            height = h;\n        } else {\n            const baselineOffset = (this._settings.textBaseline != 'bottom') ? 0.5 * fontSize : 0;\n            height = lineHeight * (lines.length - 1) + baselineOffset + Math.max(lineHeight, fontSize) + offsetY;\n        }\n\n        if (offsetY === null) {\n            offsetY = fontSize;\n        }\n\n        renderInfo.w = width;\n        renderInfo.h = height;\n        renderInfo.lines = lines;\n        renderInfo.precision = precision;\n\n        if (!width) {\n            // To prevent canvas errors.\n            width = 1;\n        }\n\n        if (!height) {\n            // To prevent canvas errors.\n            height = 1;\n        }\n\n        if (cutSx || cutEx) {\n            width = Math.min(width, cutEx - cutSx);\n        }\n\n        if (cutSy || cutEy) {\n            height = Math.min(height, cutEy - cutSy);\n        }\n\n        renderInfo.width = width;\n        renderInfo.innerWidth = innerWidth;\n        renderInfo.height = height;\n        renderInfo.fontSize = fontSize;\n        renderInfo.cutSx = cutSx;\n        renderInfo.cutSy = cutSy;\n        renderInfo.cutEx = cutEx;\n        renderInfo.cutEy = cutEy;\n        renderInfo.lineHeight = lineHeight;\n        renderInfo.lineWidths = lineWidths;\n        renderInfo.offsetY = offsetY;\n        renderInfo.paddingLeft = paddingLeft;\n        renderInfo.paddingRight = paddingRight;\n        renderInfo.letterSpacing = letterSpacing;\n        renderInfo.textIndent = textIndent;\n\n        return renderInfo;\n    }\n\n    _draw() {\n        const renderInfo = this._calculateRenderInfo();\n        const precision = this.getPrecision();\n\n        // Add extra margin to prevent issue with clipped text when scaling.\n        this._canvas.width = Math.ceil(renderInfo.width + this._stage.getOption('textRenderIssueMargin'));\n        this._canvas.height = Math.ceil(renderInfo.height);\n\n        // Canvas context has been reset.\n        this.setFontProperties();\n        if (window.isRTL) {\n            this._context.direction = 'rtl';\n            this._context.textAlign = 'left';\n        }\n\n        if (renderInfo.fontSize >= 128) {\n            // WpeWebKit bug: must force compositing because cairo-traps-compositor will not work with text first.\n            this._context.globalAlpha = 0.01;\n            this._context.fillRect(0, 0, 0.01, 0.01);\n            this._context.globalAlpha = 1.0;\n        }\n\n        if (renderInfo.cutSx || renderInfo.cutSy) {\n            this._context.translate(-renderInfo.cutSx, -renderInfo.cutSy);\n        }\n\n        let linePositionX;\n        let linePositionY;\n\n        let drawLines = [];\n\n        // Draw lines line by line.\n        for (let i = 0, n = renderInfo.lines.length; i < n; i++) {\n            linePositionX = i === 0 ? renderInfo.textIndent : 0;\n\n            // By default, text is aligned to top\n            linePositionY = (i * renderInfo.lineHeight) + renderInfo.offsetY;\n\n            if (this._settings.verticalAlign == 'middle') {\n                linePositionY += (renderInfo.lineHeight - renderInfo.fontSize) / 2;\n            } else if (this._settings.verticalAlign == 'bottom') {\n                linePositionY += renderInfo.lineHeight - renderInfo.fontSize;\n            }\n\n            if (this._settings.textAlign === 'right') {\n                linePositionX += (renderInfo.innerWidth - renderInfo.lineWidths[i]);\n            } else if (this._settings.textAlign === 'center') {\n                linePositionX += ((renderInfo.innerWidth - renderInfo.lineWidths[i]) / 2);\n            }\n            linePositionX += renderInfo.paddingLeft;\n\n            drawLines.push({text: renderInfo.lines[i], x: linePositionX, y: linePositionY, w: renderInfo.lineWidths[i]});\n        }\n\n        // Highlight.\n        if (this._settings.highlight) {\n            let color = this._settings.highlightColor || 0x00000000;\n\n            let hlHeight = (this._settings.highlightHeight * precision || renderInfo.fontSize * 1.5);\n            const offset = this._settings.highlightOffset * precision;\n            const hlPaddingLeft = (this._settings.highlightPaddingLeft !== null ? this._settings.highlightPaddingLeft * precision : renderInfo.paddingLeft);\n            const hlPaddingRight = (this._settings.highlightPaddingRight !== null ? this._settings.highlightPaddingRight * precision : renderInfo.paddingRight);\n\n            this._context.fillStyle = StageUtils.getRgbaString(color);\n            for (let i = 0; i < drawLines.length; i++) {\n                let drawLine = drawLines[i];\n                this._context.fillRect((drawLine.x - hlPaddingLeft), (drawLine.y - renderInfo.offsetY + offset), (drawLine.w + hlPaddingRight + hlPaddingLeft), hlHeight);\n            }\n        }\n\n        // Text shadow.\n        let prevShadowSettings = null;\n        if (this._settings.shadow) {\n            prevShadowSettings = [this._context.shadowColor, this._context.shadowOffsetX, this._context.shadowOffsetY, this._context.shadowBlur];\n\n            this._context.shadowColor = StageUtils.getRgbaString(this._settings.shadowColor);\n            this._context.shadowOffsetX = this._settings.shadowOffsetX * precision;\n            this._context.shadowOffsetY = this._settings.shadowOffsetY * precision;\n            this._context.shadowBlur = this._settings.shadowBlur * precision;\n        }\n\n        this._context.fillStyle = StageUtils.getRgbaString(this._settings.textColor);\n        for (let i = 0, n = drawLines.length; i < n; i++) {\n            let drawLine = drawLines[i];\n\n            if (renderInfo.letterSpacing === 0) {\n                this._context.fillText(drawLine.text, drawLine.x, drawLine.y);\n            } else {\n                const textSplit = drawLine.text.split('');\n                let x = drawLine.x;\n                for (let i = 0, j = textSplit.length; i < j; i++) {\n                    this._context.fillText(textSplit[i], x, drawLine.y);\n                    x += this.measureText(textSplit[i], renderInfo.letterSpacing);\n                }\n            }\n        }\n\n        if (prevShadowSettings) {\n            this._context.shadowColor = prevShadowSettings[0];\n            this._context.shadowOffsetX = prevShadowSettings[1];\n            this._context.shadowOffsetY = prevShadowSettings[2];\n            this._context.shadowBlur = prevShadowSettings[3];\n        }\n\n        if (renderInfo.cutSx || renderInfo.cutSy) {\n            this._context.translate(renderInfo.cutSx, renderInfo.cutSy);\n        }\n\n        this.renderInfo = renderInfo;\n    };\n\n    wrapWord(word, wordWrapWidth, suffix) {\n        const suffixWidth = this.measureText(suffix);\n        const wordLen = word.length\n        const wordWidth = this.measureText(word);\n\n        /* If word fits wrapWidth, do nothing */\n        if (wordWidth <= wordWrapWidth) {\n            return word;\n        }\n\n        /* Make initial guess for text cuttoff */\n        let cutoffIndex = Math.floor((wordWrapWidth * wordLen) / wordWidth);\n        let truncWordWidth = this.measureText(word.substring(0, cutoffIndex)) + suffixWidth;\n\n        /* In case guess was overestimated, shrink it letter by letter. */\n        if (truncWordWidth > wordWrapWidth) {\n            while (cutoffIndex > 0) {\n                truncWordWidth = this.measureText(word.substring(0, cutoffIndex)) + suffixWidth;\n                if (truncWordWidth > wordWrapWidth) {\n                    cutoffIndex -= 1;\n                } else {\n                    break;\n                }\n            }\n\n        /* In case guess was underestimated, extend it letter by letter. */\n        } else {\n            while (cutoffIndex < wordLen) {\n                truncWordWidth = this.measureText(word.substring(0, cutoffIndex)) + suffixWidth;\n                if (truncWordWidth < wordWrapWidth) {\n                    cutoffIndex += 1;\n                } else {\n                    // Finally, when bound is crossed, retract last letter.\n                    cutoffIndex -=1;\n                    break;\n                }\n            }\n        }\n\n        /* If wrapWidth is too short to even contain suffix alone, return empty string */\n        return word.substring(0, cutoffIndex) + (wordWrapWidth >= suffixWidth ? suffix : '');\n    }\n\n    /**\n     * See {@link wrapText}\n     *\n     * @param {string} text\n     * @param {number} wordWrapWidth\n     * @param {number} letterSpacing\n     * @param {number} indent\n     * @returns\n     */\n    wrapText(text, wordWrapWidth, letterSpacing, indent = 0) {\n        return wrapText(this._context, text, wordWrapWidth, letterSpacing, indent);\n    };\n\n    /**\n     * See {@link measureText}\n     *\n     * @param {string} word\n     * @param {number} space\n     * @returns {number}\n     */\n    measureText(word, space = 0) {\n        return measureText(this._context, word, space);\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport StageUtils from \"../tree/StageUtils.mjs\";\nimport Utils from \"../tree/Utils.mjs\";\nimport { getFontSetting, isSpace, measureText, tokenizeString } from \"./TextTextureRendererUtils.mjs\";\n\nexport default class TextTextureRendererAdvanced {\n\n    constructor(stage, canvas, settings) {\n        this._stage = stage;\n        this._canvas = canvas;\n        this._context = this._canvas.getContext('2d');\n        this._settings = settings;\n    }\n\n    getPrecision() {\n        return this._settings.precision;\n    };\n\n    setFontProperties() {\n        const font = getFontSetting(\n            this._settings.fontFace,\n            this._settings.fontStyle,\n            this._settings.fontSize,\n            this.getPrecision(),\n            this._stage.getOption('defaultFontFace'),\n            this._settings.fontWeight,\n        );\n        this._context.font = font;\n        this._context.textBaseline = this._settings.textBaseline;\n        return font;\n    };\n\n    _load() {\n        if (Utils.isWeb && document.fonts) {\n            const fontSetting = getFontSetting(\n                this._settings.fontFace,\n                this._settings.fontStyle,\n                this._settings.fontSize,\n                this.getPrecision(),\n                this._stage.getOption('defaultFontFace'),\n                this._settings.fontWeight,\n            );\n            try {\n                if (!document.fonts.check(fontSetting, this._settings.text)) {\n                    // Use a promise that waits for loading.\n                    return document.fonts.load(fontSetting, this._settings.text).catch(err => {\n                        // Just load the fallback font.\n                        console.warn('Font load error', err, fontSetting);\n                    }).then(() => {\n                        if (!document.fonts.check(fontSetting, this._settings.text)) {\n                            console.warn('Font not found', fontSetting);\n                        }\n                    });\n                }\n            } catch(e) {\n                console.warn(\"Can't check font loading for \" + fontSetting);\n            }\n        }\n    }\n\n    draw() {\n        // We do not use a promise so that loading is performed syncronous when possible.\n        const loadPromise = this._load();\n        if (!loadPromise) {\n            return Utils.isSpark ? this._stage.platform.drawText(this) : this._draw();\n        } else {\n            return loadPromise.then(() => {\n                return Utils.isSpark ? this._stage.platform.drawText(this) : this._draw();\n            });\n        }\n    }\n\n    _calculateRenderInfo() {\n        let renderInfo = {};\n\n        const precision = this.getPrecision();\n\n        const paddingLeft = this._settings.paddingLeft * precision;\n        const paddingRight = this._settings.paddingRight * precision;\n        const fontSize = this._settings.fontSize * precision;\n        // const offsetY = this._settings.offsetY === null ? null : (this._settings.offsetY * precision);\n        const lineHeight = this._settings.lineHeight * precision || fontSize;\n        const w = this._settings.w != 0 ? this._settings.w * precision : this._stage.getOption('w');\n        // const h = this._settings.h * precision;\n        const wordWrapWidth = this._settings.wordWrapWidth * precision;\n        const cutSx = this._settings.cutSx * precision;\n        const cutEx = this._settings.cutEx * precision;\n        const cutSy = this._settings.cutSy * precision;\n        const cutEy = this._settings.cutEy * precision;\n        const letterSpacing = this._settings.letterSpacing || 0;\n\n        // Set font properties.\n        renderInfo.baseFont = this.setFontProperties();\n\n        renderInfo.w = w;\n        renderInfo.width = w;\n        renderInfo.text = this._settings.text;\n        renderInfo.precision = precision;\n        renderInfo.fontSize = fontSize;\n        renderInfo.fontBaselineRatio = this._settings.fontBaselineRatio;\n        renderInfo.lineHeight = lineHeight;\n        renderInfo.letterSpacing = letterSpacing;\n        renderInfo.textAlign = this._settings.textAlign;\n        renderInfo.textColor = this._settings.textColor;\n        renderInfo.verticalAlign = this._settings.verticalAlign;\n        renderInfo.highlight = this._settings.highlight;\n        renderInfo.highlightColor = this._settings.highlightColor;\n        renderInfo.highlightHeight = this._settings.highlightHeight;\n        renderInfo.highlightPaddingLeft = this._settings.highlightPaddingLeft;\n        renderInfo.highlightPaddingRight = this._settings.highlightPaddingRight;\n        renderInfo.highlightOffset = this._settings.highlightOffset;\n        renderInfo.paddingLeft = this._settings.paddingLeft;\n        renderInfo.paddingRight = this._settings.paddingRight;\n        renderInfo.maxLines = this._settings.maxLines;\n        renderInfo.maxLinesSuffix = this._settings.maxLinesSuffix;\n        renderInfo.textOverflow = this._settings.textOverflow;\n        renderInfo.wordWrap = this._settings.wordWrap;\n        renderInfo.wordWrapWidth = wordWrapWidth;\n        renderInfo.shadow = this._settings.shadow;\n        renderInfo.shadowColor = this._settings.shadowColor;\n        renderInfo.shadowOffsetX = this._settings.shadowOffsetX;\n        renderInfo.shadowOffsetY = this._settings.shadowOffsetY;\n        renderInfo.shadowBlur = this._settings.shadowBlur;\n        renderInfo.cutSx = cutSx;\n        renderInfo.cutEx = cutEx;\n        renderInfo.cutSy = cutSy;\n        renderInfo.cutEy = cutEy;\n        renderInfo.textIndent = this._settings.textIndent * precision;\n        renderInfo.wordBreak = this._settings.wordBreak;\n\n        let text = renderInfo.text;\n        let wrapWidth = renderInfo.wordWrap ? (renderInfo.wordWrapWidth || renderInfo.width) : renderInfo.width;\n\n        // Text overflow\n        if (renderInfo.textOverflow && !renderInfo.wordWrap) {\n            let suffix;\n            switch (this._settings.textOverflow) {\n                case 'clip':\n                    suffix = '';\n                    break;\n                case 'ellipsis':\n                    suffix = this._settings.maxLinesSuffix;\n                    break;\n                default:\n                    suffix = this._settings.textOverflow;\n            }\n            text = this.wrapWord(text, wordWrapWidth || renderInfo.w, suffix);\n        }\n\n        text = this.tokenize(text);\n        text = this.parse(text);\n        text = this.measure(text, letterSpacing, renderInfo.baseFont);\n\n        if (renderInfo.textIndent) {\n            text = this.indent(text, renderInfo.textIndent);\n        }\n\n        if (renderInfo.wordBreak) {\n            text = text.reduce((acc, t) => acc.concat(this.wordBreak(t, wrapWidth, renderInfo.baseFont)), [])\n            this.resetFontStyle()\n        }\n\n        // Calculate detailed drawing information\n        let x = paddingLeft;\n        let lineNo = 0;\n\n        for (const t of text) {\n            // Wrap text\n            if (renderInfo.wordWrap && x + t.width > wrapWidth || t.text == '\\n') {\n                x = paddingLeft;\n                lineNo += 1;\n            }\n            t.lineNo = lineNo;\n\n            if (t.text == '\\n') {\n                continue;\n            }\n\n            t.x = x;\n            x += t.width;\n        }\n        renderInfo.lineNum = lineNo + 1;\n\n        if (this._settings.h) {\n            renderInfo.h = this._settings.h;\n        } else if (renderInfo.maxLines && renderInfo.maxLines < renderInfo.lineNum) {\n            renderInfo.h = renderInfo.maxLines * renderInfo.lineHeight + fontSize / 2;\n        } else {\n            renderInfo.h = renderInfo.lineNum * renderInfo.lineHeight + fontSize / 2;\n        }\n\n        // This calculates the baseline offset in pixels from the font size.\n        // To retrieve this ratio, you would do this calculation:\n        //     (FontUnitsPerEm − hhea.Ascender − hhea.Descender) / (2 × FontUnitsPerEm)\n        //\n        // This give you the ratio for the baseline, which is then used to figure out\n        // where the baseline is relative to the bottom of the text bounding box.\n        const baselineOffsetInPx = renderInfo.fontBaselineRatio * renderInfo.fontSize;\n\n        // Vertical align\n        let vaOffset = 0;\n        if (renderInfo.verticalAlign == 'top' && this._context.textBaseline == 'alphabetic') {\n            vaOffset = -baselineOffsetInPx;\n        } else if (renderInfo.verticalAlign == 'middle') {\n            vaOffset = (renderInfo.lineHeight - renderInfo.fontSize - baselineOffsetInPx) / 2;\n        } else if (this._settings.verticalAlign == 'bottom') {\n            vaOffset = renderInfo.lineHeight - renderInfo.fontSize;\n        }\n\n        // Calculate lines information\n        renderInfo.lines = []\n        for (let i = 0; i < renderInfo.lineNum; i++) {\n            renderInfo.lines[i] = {\n                width: 0,\n                x: 0,\n                y: renderInfo.lineHeight * i + vaOffset,\n                text: [],\n            }\n        }\n\n        for (let t of text) {\n            renderInfo.lines[t.lineNo].text.push(t);\n        }\n\n        // Filter out white spaces at beginning and end of each line\n        for (const l of renderInfo.lines) {\n            if (l.text.length == 0) {\n                continue;\n            }\n\n            const firstWord = l.text[0].text;\n            const lastWord = l.text[l.text.length - 1].text;\n\n            if (firstWord == '\\n') {\n                l.text.shift();\n            }\n            if (isSpace(lastWord) || lastWord == '\\n') {\n                l.text.pop();\n            }\n        }\n\n\n        // Calculate line width\n        for (let l of renderInfo.lines) {\n            l.width = l.text.reduce((acc, t) => acc + t.width, 0);\n        }\n\n        renderInfo.width = this._settings.w != 0 ? this._settings.w * precision : Math.max(...renderInfo.lines.map((l) => l.width)) + paddingRight;\n        renderInfo.w = renderInfo.width;\n\n        // Apply maxLinesSuffix\n        if (renderInfo.maxLines && renderInfo.lineNum > renderInfo.maxLines && renderInfo.maxLinesSuffix) {\n            const index = renderInfo.maxLines - 1;\n            let lastLineText = text.filter((t) => t.lineNo == index)\n            let suffix = renderInfo.maxLinesSuffix;\n            suffix = this.tokenize(suffix);\n            suffix = this.parse(suffix);\n            suffix = this.measure(suffix, renderInfo.letterSpacing, renderInfo.baseFont);\n            for (const s of suffix) {\n                s.lineNo = index;\n                s.x = 0;\n                lastLineText.push(s)\n            }\n\n            const spl = suffix.length + 1\n            let _w = lastLineText.reduce((acc, t) => acc + t.width, 0);\n            while (_w > renderInfo.width || isSpace(lastLineText[lastLineText.length - spl].text)) {\n                lastLineText.splice(lastLineText.length - spl, 1);\n                _w = lastLineText.reduce((acc, t) => acc + t.width, 0);\n                if (lastLineText.length < spl) {\n                    break;\n                }\n            }\n            this.alignLine(lastLineText, lastLineText[0].x)\n\n            renderInfo.lines[index].text = lastLineText;\n            renderInfo.lines[index].width = _w;\n        }\n\n        // Horizontal alignment offset\n        if (renderInfo.textAlign == 'center') {\n            for (let l of renderInfo.lines) {\n                l.x = (renderInfo.width - l.width - paddingLeft) / 2;\n            }\n        } else if (renderInfo.textAlign == 'right') {\n            for (let l of renderInfo.lines) {\n                l.x = renderInfo.width - l.width - paddingLeft;\n            }\n        }\n\n        return renderInfo;\n    }\n\n    _draw() {\n        const renderInfo = this._calculateRenderInfo();\n        const precision = this.getPrecision();\n        const paddingLeft = renderInfo.paddingLeft * precision;\n\n        // Set canvas dimensions\n        let canvasWidth = renderInfo.w || renderInfo.width;\n        if (renderInfo.cutSx || renderInfo.cutEx) {\n            canvasWidth = Math.min(renderInfo.w, renderInfo.cutEx - renderInfo.cutSx);\n        }\n\n        let canvasHeight = renderInfo.h;\n        if (renderInfo.cutSy || renderInfo.cutEy) {\n            canvasHeight = Math.min(renderInfo.h, renderInfo.cutEy - renderInfo.cutSy);\n        }\n\n        this._canvas.width = Math.ceil(canvasWidth + this._stage.getOption('textRenderIssueMargin'));\n        this._canvas.height = Math.ceil(canvasHeight);\n\n        // Canvas context has been reset.\n        this.setFontProperties();\n\n        if (renderInfo.fontSize >= 128) {\n            // WpeWebKit bug: must force compositing because cairo-traps-compositor will not work with text first.\n            this._context.globalAlpha = 0.01;\n            this._context.fillRect(0, 0, 0.01, 0.01);\n            this._context.globalAlpha = 1.0;\n        }\n\n        // Cut\n        if (renderInfo.cutSx || renderInfo.cutSy) {\n            this._context.translate(-renderInfo.cutSx, -renderInfo.cutSy);\n        }\n\n        // Highlight\n        if (renderInfo.highlight) {\n            const hlColor = renderInfo.highlightColor || 0x00000000;\n            const hlHeight = renderInfo.highlightHeight ? renderInfo.highlightHeight * precision :  renderInfo.fontSize * 1.5;\n            const hlOffset = renderInfo.highlightOffset ? renderInfo.highlightOffset * precision : 0;\n            const hlPaddingLeft = (renderInfo.highlightPaddingLeft !== null ? renderInfo.highlightPaddingLeft * precision : renderInfo.paddingLeft);\n            const hlPaddingRight = (renderInfo.highlightPaddingRight !== null ? renderInfo.highlightPaddingRight * precision : renderInfo.paddingRight);\n\n            this._context.fillStyle = StageUtils.getRgbaString(hlColor);\n            const lineNum = renderInfo.maxLines ? Math.min(renderInfo.maxLines, renderInfo.lineNum) : renderInfo.lineNum;\n            for (let i = 0; i < lineNum; i++) {\n                const l = renderInfo.lines[i];\n                this._context.fillRect(l.x - hlPaddingLeft + paddingLeft, l.y + hlOffset, l.width + hlPaddingLeft + hlPaddingRight, hlHeight);\n            }\n        }\n\n        // Text shadow.\n        let prevShadowSettings = null;\n        if (this._settings.shadow) {\n            prevShadowSettings = [this._context.shadowColor, this._context.shadowOffsetX, this._context.shadowOffsetY, this._context.shadowBlur];\n\n            this._context.shadowColor = StageUtils.getRgbaString(this._settings.shadowColor);\n            this._context.shadowOffsetX = this._settings.shadowOffsetX * precision;\n            this._context.shadowOffsetY = this._settings.shadowOffsetY * precision;\n            this._context.shadowBlur = this._settings.shadowBlur * precision;\n        }\n\n        // Draw text\n        const defaultColor = StageUtils.getRgbaString(this._settings.textColor);\n        let currentColor = defaultColor;\n        this._context.fillStyle = defaultColor;\n        for (const line of renderInfo.lines) {\n            for (const t of line.text) {\n                let lx = 0;\n\n                if (t.text == '\\n') {\n                    continue;\n                }\n\n                if (renderInfo.maxLines && t.lineNo >= renderInfo.maxLines) {\n                    continue;\n                }\n\n                if (t.color != currentColor) {\n                    currentColor = t.color;\n                    this._context.fillStyle = currentColor;\n                }\n\n                this._context.font = t.fontStyle;\n\n                // Draw with letter spacing\n                if (t.letters) {\n                    for (let l of t.letters) {\n                        const _x = renderInfo.lines[t.lineNo].x + t.x + lx;\n                        this._context.fillText(l.text, _x, renderInfo.lines[t.lineNo].y + renderInfo.fontSize);\n                        lx += l.width;\n                    }\n                // Standard drawing\n                } else {\n                    const _x = renderInfo.lines[t.lineNo].x + t.x;\n                    this._context.fillText(t.text, _x, renderInfo.lines[t.lineNo].y + renderInfo.fontSize);\n                }\n            }\n        }\n\n        // Reset text shadow\n        if (prevShadowSettings) {\n            this._context.shadowColor = prevShadowSettings[0];\n            this._context.shadowOffsetX = prevShadowSettings[1];\n            this._context.shadowOffsetY = prevShadowSettings[2];\n            this._context.shadowBlur = prevShadowSettings[3];\n        }\n\n        // Reset cut translation\n        if (renderInfo.cutSx || renderInfo.cutSy) {\n            this._context.translate(renderInfo.cutSx, renderInfo.cutSy);\n        }\n\n        // Postprocess renderInfo.lines to be compatible with standard version\n        renderInfo.lines = renderInfo.lines.map((l) => l.text.reduce((acc, v) => acc + v.text, ''));\n        if (renderInfo.maxLines) {\n            renderInfo.lines = renderInfo.lines.slice(0, renderInfo.maxLines);\n        }\n\n\n        this.renderInfo = renderInfo;\n\n    };\n\n    /**\n     * See {@link measureText}\n     *\n     * @param {string} word\n     * @param {number} space\n     * @returns {number}\n     */\n    measureText(word, space = 0) {\n        return measureText(this._context, word, space);\n    }\n\n    tokenize(text) {\n        return tokenizeString(/ |\\u200B|\\n|<i>|<\\/i>|<b>|<\\/b>|<color=0[xX][0-9a-fA-F]{8}>|<\\/color>/g, text);\n    }\n\n    parse(tokens) {\n        let italic = 0;\n        let bold = 0;\n        let colorStack = [StageUtils.getRgbaString(this._settings.textColor)];\n        let color = 0;\n\n        const colorRegexp = /<color=(0[xX][0-9a-fA-F]{8})>/;\n\n        return tokens.map((t) => {\n            if (t == '<i>') {\n                italic += 1;\n                t = '';\n            } else if (t == '</i>' && italic > 0) {\n                italic -= 1;\n                t = '';\n            } else if (t == '<b>') {\n                bold += 1;\n                t = '';\n            } else if (t == '</b>' && bold > 0) {\n                bold -= 1;\n                t = '';\n            } else if (t == '</color>') {\n                if (colorStack.length > 1) {\n                    color -= 1;\n                    colorStack.pop();\n                }\n                t = '';\n            } else if (colorRegexp.test(t)) {\n                const matched = colorRegexp.exec(t);\n                colorStack.push(\n                    StageUtils.getRgbaString(parseInt(matched[1]))\n                );\n                color += 1;\n                t = '';\n\n            }\n\n            return {\n                text: t,\n                italic: italic,\n                bold: bold,\n                color: colorStack[color],\n            }\n        })\n        .filter((o) => o.text != '');\n    }\n\n    applyFontStyle(word, baseFont) {\n        let font = baseFont;\n        if (word.bold) {\n            font = 'bold ' + font;\n        }\n        if (word.italic) {\n            font = 'italic ' + font;\n        }\n        this._context.font = font\n        word.fontStyle = font;\n    }\n\n    resetFontStyle(baseFont) {\n        this._context.font = baseFont;\n    }\n\n    measure(parsed, letterSpacing = 0, baseFont) {\n        for (const p of parsed) {\n            this.applyFontStyle(p, baseFont);\n            p.width = this.measureText(p.text, letterSpacing);\n\n            // Letter by letter detail for letter spacing\n            if (letterSpacing > 0) {\n                p.letters = p.text.split('').map((l) => {return {text: l}});\n                for (let l of p.letters) {\n                    l.width = this.measureText(l.text, letterSpacing);\n                }\n            }\n\n        }\n        this.resetFontStyle(baseFont);\n        return parsed;\n    }\n\n    indent(parsed, textIndent) {\n        parsed.splice(0, 0, {text: \"\", width: textIndent});\n        return parsed;\n    }\n\n    wrapWord(word, wordWrapWidth, suffix) {\n        const suffixWidth = this.measureText(suffix);\n        const wordLen = word.length\n        const wordWidth = this.measureText(word);\n\n        /* If word fits wrapWidth, do nothing */\n        if (wordWidth <= wordWrapWidth) {\n            return word;\n        }\n\n        /* Make initial guess for text cuttoff */\n        let cutoffIndex = Math.floor((wordWrapWidth * wordLen) / wordWidth);\n        let truncWordWidth = this.measureText(word.substring(0, cutoffIndex)) + suffixWidth;\n\n        /* In case guess was overestimated, shrink it letter by letter. */\n        if (truncWordWidth > wordWrapWidth) {\n            while (cutoffIndex > 0) {\n                truncWordWidth = this.measureText(word.substring(0, cutoffIndex)) + suffixWidth;\n                if (truncWordWidth > wordWrapWidth) {\n                    cutoffIndex -= 1;\n                } else {\n                    break;\n                }\n            }\n\n        /* In case guess was underestimated, extend it letter by letter. */\n        } else {\n            while (cutoffIndex < wordLen) {\n                truncWordWidth = this.measureText(word.substring(0, cutoffIndex)) + suffixWidth;\n                if (truncWordWidth < wordWrapWidth) {\n                    cutoffIndex += 1;\n                } else {\n                    // Finally, when bound is crossed, retract last letter.\n                    cutoffIndex -=1;\n                    break;\n                }\n            }\n        }\n\n        /* If wrapWidth is too short to even contain suffix alone, return empty string */\n        return word.substring(0, cutoffIndex) + (wordWrapWidth >= suffixWidth ? suffix : '')\n    }\n\n    _getBreakIndex(word, width) {\n        const wordLen = word.length;\n        const wordWidth = this.measureText(word);\n\n        if (wordWidth <= width) {\n            return {breakIndex: word.length, truncWordWidth: wordWidth};\n        }\n\n        let breakIndex = Math.floor((width * wordLen) / wordWidth);\n        let truncWordWidth = this.measureText(word.substring(0, breakIndex))\n\n        /* In case guess was overestimated, shrink it letter by letter. */\n        if (truncWordWidth > width) {\n            while (breakIndex > 0) {\n                truncWordWidth = this.measureText(word.substring(0, breakIndex));\n                if (truncWordWidth > width) {\n                    breakIndex -= 1;\n                } else {\n                    break;\n                }\n            }\n\n        /* In case guess was underestimated, extend it letter by letter. */\n        } else {\n            while (breakIndex < wordLen) {\n                truncWordWidth = this.measureText(word.substring(0, breakIndex));\n                if (truncWordWidth < width) {\n                    breakIndex += 1;\n                } else {\n                    // Finally, when bound is crossed, retract last letter.\n                    breakIndex -=1;\n                    truncWordWidth = this.measureText(word.substring(0, breakIndex));\n                    break;\n                }\n            }\n        }\n        return {breakIndex, truncWordWidth};\n\n    }\n\n    wordBreak(word, width, baseFont) {\n        if (!word.text) {\n            return word\n        }\n        this.applyFontStyle(word, baseFont)\n        const parts = [];\n        let text = word.text;\n        if (!word.letters) {\n            while (true) {\n                const {breakIndex, truncWordWidth} = this._getBreakIndex(text, width);\n                parts.push({...word});\n                parts[parts.length - 1].text = text.slice(0, breakIndex);\n                parts[parts.length - 1].width = truncWordWidth;\n\n                if (breakIndex === text.length) {\n                    break;\n                }\n\n                text = text.slice(breakIndex);\n            }\n        } else {\n            let totalWidth = 0;\n            let letters = [];\n            let breakIndex = 0;\n            for (const l of word.letters) {\n                if (totalWidth + l.width >= width) {\n                    parts.push({...word});\n                    parts[parts.length - 1].text = text.slice(0, breakIndex);\n                    parts[parts.length - 1].width = totalWidth;\n                    parts[parts.length - 1].letters = letters;\n                    text = text.slice(breakIndex);\n                    totalWidth = 0;\n                    letters = [];\n                    breakIndex = 0;\n\n                } else {\n                    breakIndex += 1;\n                    letters.push(l);\n                    totalWidth += l.width;\n                }\n            }\n\n            if (totalWidth > 0) {\n                parts.push({...word});\n                parts[parts.length - 1].text = text.slice(0, breakIndex);\n                parts[parts.length - 1].width = totalWidth;\n                parts[parts.length - 1].letters = letters;\n            }\n        }\n\n        return parts;\n    }\n\n    alignLine(parsed, initialX = 0) {\n        let prevWidth = 0;\n        let prevX = initialX;\n        for (const word of parsed) {\n            if (word.text == '\\n') {\n                continue;\n            }\n            word.x = prevX + prevWidth;\n            prevX = word.x;\n            prevWidth = word.width;\n        }\n\n    }\n}","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Texture from \"../tree/Texture.mjs\";\nimport Utils from \"../tree/Utils.mjs\";\n\nexport default class TextTexture extends Texture {\n\n    constructor(stage) {\n        super(stage);\n\n        // We use the stage precision as the default precision in case of a text texture.\n        this._precision = this.stage.getOption('precision');\n    }\n\n    static renderer(stage, canvas, settings) {\n        if (this.advancedRenderer) {\n            return new TextTextureRendererAdvanced(stage, canvas, settings);\n        } else {\n            return new TextTextureRenderer(stage, canvas, settings);\n        }\n    }\n\n    get text() {\n        return this._text;\n    }\n\n    set text(v) {\n        if (this._text !== v) {\n            this._text = \"\" + v;\n            this._changed();\n        }\n    }\n\n    get w() {\n        return this._w;\n    }\n\n    set w(v) {\n        if (this._w !== v) {\n            this._w = v;\n            this._changed();\n        }\n    }\n\n    get h() {\n        return this._h;\n    }\n\n    set h(v) {\n        if (this._h !== v) {\n            this._h = v;\n            this._changed();\n        }\n    }\n\n    get fontStyle() {\n        return this._fontStyle;\n    }\n\n    set fontStyle(v) {\n        if (this._fontStyle !== v) {\n            this._fontStyle = v;\n            this._changed();\n        }\n    }\n\n    get fontBaselineRatio() {\n        return this._fontBaselineRatio;\n    }\n    \n    set fontBaselineRatio(v) {\n        if (this._fontBaselineRatio !== v) {\n            this._fontBaselineRatio = v;\n            this._changed();\n        }\n    }\n\n    get fontSize() {\n        return this._fontSize;\n    }\n\n    set fontSize(v) {\n        if (this._fontSize !== v) {\n            this._fontSize = v;\n            this._changed();\n        }\n    }\n\n    get fontWeight() {\n        return this._fontWeight;\n    }\n\n    set fontWeight(v) {\n        if (this._fontWeight !== v) {\n            this._fontWeight = v;\n            this._changed();\n        }\n    }\n\n    get fontFace() {\n        return this._fontFace;\n    }\n\n    set fontFace(v) {\n        if (this._fontFace !== v) {\n            this._fontFace = v;\n            this._changed();\n        }\n    }\n\n    get wordWrap() {\n        return this._wordWrap;\n    }\n\n    set wordWrap(v) {\n        if (this._wordWrap !== v) {\n            this._wordWrap = v;\n            this._changed();\n        }\n    }\n\n    get wordWrapWidth() {\n        return this._wordWrapWidth;\n    }\n\n    set wordWrapWidth(v) {\n        if (this._wordWrapWidth !== v) {\n            this._wordWrapWidth = v;\n            this._changed();\n        }\n    }\n\n    get wordBreak() {\n        return this._wordBreak;\n    }\n\n    set wordBreak(v) {\n        if (this._wordBreak !== v) {\n            this._wordBreak = v;\n            this._changed();\n        }\n    }\n\n    get textOverflow() {\n        return this._textOverflow;\n    }\n\n    set textOverflow(v) {\n        if (v != this._textOverflow) {\n            this._textOverflow = v;\n            this._changed();\n        }\n    }\n\n    get lineHeight() {\n        return this._lineHeight;\n    }\n\n    set lineHeight(v) {\n        if (this._lineHeight !== v) {\n            this._lineHeight = v;\n            this._changed();\n        }\n    }\n\n    get textBaseline() {\n        return this._textBaseline;\n    }\n\n    set textBaseline(v) {\n        if (this._textBaseline !== v) {\n            this._textBaseline = v;\n            this._changed();\n        }\n    }\n\n    get textAlign() {\n        return this._textAlign;\n    }\n\n    set textAlign(v) {\n        if (v != 'center' && window.isRTL) {\n            v = v == \"right\" ? \"left\" : \"right\";\n        }\n        if (this._textAlign !== v) {\n            this._textAlign = v;\n            this._changed();\n        }\n    }\n\n    get verticalAlign() {\n        return this._verticalAlign;\n    }\n\n    set verticalAlign(v) {\n        if (this._verticalAlign !== v) {\n            this._verticalAlign = v;\n            this._changed();\n        }\n    }\n\n    get offsetY() {\n        return this._offsetY;\n    }\n\n    set offsetY(v) {\n        if (this._offsetY !== v) {\n            this._offsetY = v;\n            this._changed();\n        }\n    }\n\n    get maxLines() {\n        return this._maxLines;\n    }\n\n    set maxLines(v) {\n        if (this._maxLines !== v) {\n            this._maxLines = v;\n            this._changed();\n        }\n    }\n\n    get maxLinesSuffix() {\n        return this._maxLinesSuffix;\n    }\n\n    set maxLinesSuffix(v) {\n        if (this._maxLinesSuffix !== v) {\n            this._maxLinesSuffix = v;\n            this._changed();\n        }\n    }\n\n    get textColor() {\n        return this._textColor;\n    }\n\n    set textColor(v) {\n        if (this._textColor !== v) {\n            this._textColor = v;\n            this._changed();\n        }\n    }\n\n    get paddingLeft() {\n        return this._paddingLeft;\n    }\n\n    set paddingLeft(v) {\n        if (this._paddingLeft !== v) {\n            this._paddingLeft = v;\n            this._changed();\n        }\n    }\n\n    get paddingRight() {\n        return this._paddingRight;\n    }\n\n    set paddingRight(v) {\n        if (this._paddingRight !== v) {\n            this._paddingRight = v;\n            this._changed();\n        }\n    }\n\n    get shadow() {\n        return this._shadow;\n    }\n\n    set shadow(v) {\n        if (this._shadow !== v) {\n            this._shadow = v;\n            this._changed();\n        }\n    }\n\n    get shadowColor() {\n        return this._shadowColor;\n    }\n\n    set shadowColor(v) {\n        if (this._shadowColor !== v) {\n            this._shadowColor = v;\n            this._changed();\n        }\n    }\n\n    get shadowOffsetX() {\n        return this._shadowOffsetX;\n    }\n\n    set shadowOffsetX(v) {\n        if (this._shadowOffsetX !== v) {\n            this._shadowOffsetX = v;\n            this._changed();\n        }\n    }\n\n    get shadowOffsetY() {\n        return this._shadowOffsetY;\n    }\n\n    set shadowOffsetY(v) {\n        if (this._shadowOffsetY !== v) {\n            this._shadowOffsetY = v;\n            this._changed();\n        }\n    }\n\n    get shadowBlur() {\n        return this._shadowBlur;\n    }\n\n    set shadowBlur(v) {\n        if (this._shadowBlur !== v) {\n            this._shadowBlur = v;\n            this._changed();\n        }\n    }\n\n    get highlight() {\n        return this._highlight;\n    }\n\n    set highlight(v) {\n        if (this._highlight !== v) {\n            this._highlight = v;\n            this._changed();\n        }\n    }\n\n    get highlightHeight() {\n        return this._highlightHeight;\n    }\n\n    set highlightHeight(v) {\n        if (this._highlightHeight !== v) {\n            this._highlightHeight = v;\n            this._changed();\n        }\n    }\n\n    get highlightColor() {\n        return this._highlightColor;\n    }\n\n    set highlightColor(v) {\n        if (this._highlightColor !== v) {\n            this._highlightColor = v;\n            this._changed();\n        }\n    }\n\n    get highlightOffset() {\n        return this._highlightOffset;\n    }\n\n    set highlightOffset(v) {\n        if (this._highlightOffset !== v) {\n            this._highlightOffset = v;\n            this._changed();\n        }\n    }\n\n    get highlightPaddingLeft() {\n        return this._highlightPaddingLeft;\n    }\n\n    set highlightPaddingLeft(v) {\n        if (this._highlightPaddingLeft !== v) {\n            this._highlightPaddingLeft = v;\n            this._changed();\n        }\n    }\n\n    get highlightPaddingRight() {\n        return this._highlightPaddingRight;\n    }\n\n    set highlightPaddingRight(v) {\n        if (this._highlightPaddingRight !== v) {\n            this._highlightPaddingRight = v;\n            this._changed();\n        }\n    }\n\n    get cutSx() {\n        return this._cutSx;\n    }\n\n    set cutSx(v) {\n        if (this._cutSx !== v) {\n            this._cutSx = v;\n            this._changed();\n        }\n    }\n\n    get cutEx() {\n        return this._cutEx;\n    }\n\n    set cutEx(v) {\n        if (this._cutEx !== v) {\n            this._cutEx = v;\n            this._changed();\n        }\n    }\n\n    get cutSy() {\n        return this._cutSy;\n    }\n\n    set cutSy(v) {\n        if (this._cutSy !== v) {\n            this._cutSy = v;\n            this._changed();\n        }\n    }\n\n    get cutEy() {\n        return this._cutEy;\n    }\n\n    set cutEy(v) {\n        if (this._cutEy !== v) {\n            this._cutEy = v;\n            this._changed();\n        }\n    }\n\n    get advancedRenderer() {\n        return this._advancedRenderer;\n    }\n\n    set advancedRenderer(v) {\n        if (this._advancedRenderer !== v) {\n            this._advancedRenderer = v;\n            this._changed();\n        }\n    }\n\n    set letterSpacing(v) {\n        if (this._letterSpacing !== v) {\n            this._letterSpacing = v;\n            this._changed();\n        }\n    }\n\n    get letterSpacing() {\n        return this._letterSpacing;\n    }\n\n    set textIndent(v) {\n        if (this._textIndent !== v) {\n            this._textIndent = v;\n            this._changed();\n        }\n    }\n\n    get textIndent() {\n        return this._textIndent;\n    }\n\n    get precision() {\n        return super.precision;\n    }\n\n    set precision(v) {\n        // We actually draw differently when the precision changes.\n        if (this.precision !== v) {\n            super.precision = v;\n            this._changed();\n        }\n    }\n\n    _getIsValid() {\n        return !!this.text;\n    }\n\n    _getLookupId() {\n        let parts = [];\n\n        if (this.w !== 0) parts.push(\"w \" + this.w);\n        if (this.h !== 0) parts.push(\"h \" + this.h);\n        if (this.fontStyle !== \"normal\") parts.push(\"fS\" + this.fontStyle);\n        if (this.fontSize !== 40) parts.push(\"fs\" + this.fontSize);\n        if (this.fontWeight !== 'normal') parts.push(\"fw\" + this.fontWeight);\n        if (this.fontBaselineRatio !== 0) parts.push('fb' + this.fontBaselineRatio);\n        if (this.fontFace !== null) parts.push(\"ff\" + (Array.isArray(this.fontFace) ? this.fontFace.join(\",\") : this.fontFace));\n        if (this.wordWrap !== true) parts.push(\"wr\" + (this.wordWrap ? 1 : 0));\n        if (this.wordWrapWidth !== 0) parts.push(\"ww\" + this.wordWrapWidth);\n        if (this.wordBreak !== false) parts.push(\"wb\" + this.wordBreak ? 1 : 0);\n        if (this.textOverflow != \"\") parts.push(\"to\" + this.textOverflow);\n        if (this.lineHeight !== null) parts.push(\"lh\" + this.lineHeight);\n        if (this.textBaseline !== \"alphabetic\") parts.push(\"tb\" + this.textBaseline);\n        if (this.textAlign !== \"left\") parts.push(\"ta\" + this.textAlign);\n        if (this.verticalAlign !== \"top\") parts.push(\"va\" + this.verticalAlign);\n        if (this.offsetY !== null) parts.push(\"oy\" + this.offsetY);\n        if (this.maxLines !== 0) parts.push(\"ml\" + this.maxLines);\n        if (this.maxLinesSuffix !== \"..\") parts.push(\"ms\" + this.maxLinesSuffix);\n        parts.push(\"pc\" + this.precision);\n        if (this.textColor !== 0xffffffff) parts.push(\"co\" + this.textColor.toString(16));\n        if (this.paddingLeft !== 0) parts.push(\"pl\" + this.paddingLeft);\n        if (this.paddingRight !== 0) parts.push(\"pr\" + this.paddingRight);\n        if (this.shadow !== false) parts.push(\"sh\" + (this.shadow ? 1 : 0));\n        if (this.shadowColor !== 0xff000000) parts.push(\"sc\" + this.shadowColor.toString(16));\n        if (this.shadowOffsetX !== 0) parts.push(\"sx\" + this.shadowOffsetX);\n        if (this.shadowOffsetY !== 0) parts.push(\"sy\" + this.shadowOffsetY);\n        if (this.shadowBlur !== 5) parts.push(\"sb\" + this.shadowBlur);\n        if (this.highlight !== false) parts.push(\"hL\" + (this.highlight ? 1 : 0));\n        if (this.highlightHeight !== 0) parts.push(\"hh\" + this.highlightHeight);\n        if (this.highlightColor !== 0xff000000) parts.push(\"hc\" + this.highlightColor.toString(16));\n        if (this.highlightOffset !== null) parts.push(\"ho\" + this.highlightOffset);\n        if (this.highlightPaddingLeft !== null) parts.push(\"hl\" + this.highlightPaddingLeft);\n        if (this.highlightPaddingRight !== null) parts.push(\"hr\" + this.highlightPaddingRight);\n        if (this.letterSpacing !== null) parts.push(\"ls\" + this.letterSpacing);\n        if (this.textIndent !== null) parts.push(\"ti\" + this.textIndent);\n\n        if (this.cutSx) parts.push(\"csx\" + this.cutSx);\n        if (this.cutEx) parts.push(\"cex\" + this.cutEx);\n        if (this.cutSy) parts.push(\"csy\" + this.cutSy);\n        if (this.cutEy) parts.push(\"cey\" + this.cutEy);\n\n        if (this.advancedRenderer) parts.push(\"aR\" + this.advancedRenderer ? 1 : 0);\n\n        let id = \"TX$\" + parts.join(\"|\") + \":\" + this.text;\n        return id;\n    }\n\n    _getSourceLoader() {\n        const args = this.cloneArgs();\n\n        const gl = this.stage.gl;\n\n        return function (cb) {\n            const canvas = this.stage.platform.getDrawingCanvas();\n            const renderer = (args.advancedRenderer)\n              ? new TextTextureRendererAdvanced(this.stage, canvas, args)\n              : new TextTextureRenderer(this.stage, canvas, args);\n            \n            const p = renderer.draw();\n\n            const texParams = {};\n\n            const sharpCfg = this.stage.getOption('fontSharp');\n            let sharpen = false;\n\n            // Prevent text blur when text texture is downscaled\n            if (Utils.isBoolean(sharpCfg)) {\n                sharpen = sharpCfg;\n            } else if (Utils.isObject(sharpCfg)) {\n                const precision = this.stage.getRenderPrecision();\n                sharpen = precision <= sharpCfg.precision && args.fontSize <= sharpCfg.fontSize;\n            }\n\n            if (gl && sharpen) {\n                texParams[gl.TEXTURE_MAG_FILTER] = gl.NEAREST;\n            }\n\n            if (p) {\n                p.then(() => {\n                    /* FIXME: on some platforms (e.g. RPI), throttling text textures cause artifacts */\n                    cb(null, Object.assign({\n                        renderInfo: renderer.renderInfo,\n                        throttle: false,\n                        texParams: texParams,\n                    }, this.stage.platform.getTextureOptionsForDrawingCanvas(canvas)));\n                }).catch((err) => {\n                    cb(err);\n                });\n            } else {\n                cb(null, Object.assign({\n                    renderInfo: renderer.renderInfo,\n                    throttle: false,\n                    texParams: texParams,\n                }, this.stage.platform.getTextureOptionsForDrawingCanvas(canvas)));\n            }\n        };\n    }\n\n\n    getNonDefaults() {\n        const nonDefaults = super.getNonDefaults();\n        if (this.text !== \"\") nonDefaults['text'] = this.text;\n        if (this.w !== 0) nonDefaults['w'] = this.w;\n        if (this.h !== 0) nonDefaults['h'] = this.h;\n        if (this.fontStyle !== \"normal\") nonDefaults['fontStyle'] = this.fontStyle;\n        if (this.fontSize !== 40) nonDefaults[\"fontSize\"] = this.fontSize;\n        if (this.fontWeight !== \"normal\") nonDefaults[\"fontWeight\"] = this.fontWeight;\n        if (this.fontBaselineRatio !== 0) nonDefaults['fontBaselineRatio'] = this.fontBaselineRatio;\n        if (this.fontFace !== null) nonDefaults[\"fontFace\"] = this.fontFace;\n        if (this.wordWrap !== true) nonDefaults[\"wordWrap\"] = this.wordWrap;\n        if (this.wordWrapWidth !== 0) nonDefaults[\"wordWrapWidth\"] = this.wordWrapWidth;\n        if (this.wordBreak !== false) nonDefaults[\"wordBreak\"] = this.wordBreak;\n        if (this.textOverflow != \"\") nonDefaults[\"textOverflow\"] = this.textOverflow;\n        if (this.lineHeight !== null) nonDefaults[\"lineHeight\"] = this.lineHeight;\n        if (this.textBaseline !== \"alphabetic\") nonDefaults[\"textBaseline\"] = this.textBaseline;\n        if (this.textAlign !== \"left\") nonDefaults[\"textAlign\"] = this.textAlign;\n        if (this.verticalAlign !== \"top\") nonDefaults[\"verticalAlign\"] = this.verticalAlign;\n        if (this.offsetY !== null) nonDefaults[\"offsetY\"] = this.offsetY;\n        if (this.maxLines !== 0) nonDefaults[\"maxLines\"] = this.maxLines;\n        if (this.maxLinesSuffix !== \"..\") nonDefaults[\"maxLinesSuffix\"] = this.maxLinesSuffix;\n        if (this.precision !== this.stage.getOption('precision')) nonDefaults[\"precision\"] = this.precision;\n        if (this.textColor !== 0xffffffff) nonDefaults[\"textColor\"] = this.textColor;\n        if (this.paddingLeft !== 0) nonDefaults[\"paddingLeft\"] = this.paddingLeft;\n        if (this.paddingRight !== 0) nonDefaults[\"paddingRight\"] = this.paddingRight;\n        if (this.shadow !== false) nonDefaults[\"shadow\"] = this.shadow;\n        if (this.shadowColor !== 0xff000000) nonDefaults[\"shadowColor\"] = this.shadowColor;\n        if (this.shadowOffsetX !== 0) nonDefaults[\"shadowOffsetX\"] = this.shadowOffsetX;\n        if (this.shadowOffsetY !== 0) nonDefaults[\"shadowOffsetY\"] = this.shadowOffsetY;\n        if (this.shadowBlur !== 5) nonDefaults[\"shadowBlur\"] = this.shadowBlur;\n        if (this.highlight !== false) nonDefaults[\"highlight\"] = this.highlight;\n        if (this.highlightHeight !== 0) nonDefaults[\"highlightHeight\"] = this.highlightHeight;\n        if (this.highlightColor !== 0xff000000) nonDefaults[\"highlightColor\"] = this.highlightColor;\n        if (this.highlightOffset !== 0) nonDefaults[\"highlightOffset\"] = this.highlightOffset;\n        if (this.highlightPaddingLeft !== 0) nonDefaults[\"highlightPaddingLeft\"] = this.highlightPaddingLeft;\n        if (this.highlightPaddingRight !== 0) nonDefaults[\"highlightPaddingRight\"] = this.highlightPaddingRight;\n        if (this.letterSpacing !== 0) nonDefaults[\"letterSpacing\"] = this.letterSpacing;\n        if (this.textIndent !== 0) nonDefaults[\"textIndent\"] = this.textIndent;\n\n        if (this.cutSx) nonDefaults[\"cutSx\"] = this.cutSx;\n        if (this.cutEx) nonDefaults[\"cutEx\"] = this.cutEx;\n        if (this.cutSy) nonDefaults[\"cutSy\"] = this.cutSy;\n        if (this.cutEy) nonDefaults[\"cutEy\"] = this.cutEy;\n\n        if (this.advancedRenderer) nonDefaults[\"renderer\"] = this.advancedRenderer;\n        return nonDefaults;\n    }\n\n    cloneArgs() {\n        let obj = {};\n        obj.text = this._text;\n        obj.w = this._w;\n        obj.h = this._h;\n        obj.fontStyle = this._fontStyle;\n        obj.fontSize = this._fontSize;\n        obj.fontWeight = this._fontWeight;\n        obj.fontBaselineRatio = this._fontBaselineRatio;\n        obj.fontFace = this._fontFace;\n        obj.wordWrap = this._wordWrap;\n        obj.wordWrapWidth = this._wordWrapWidth;\n        obj.wordBreak = this._wordBreak;\n        obj.textOverflow = this._textOverflow;\n        obj.lineHeight = this._lineHeight;\n        obj.textBaseline = this._textBaseline;\n        obj.textAlign = this._textAlign;\n        obj.verticalAlign = this._verticalAlign;\n        obj.offsetY = this._offsetY;\n        obj.maxLines = this._maxLines;\n        obj.maxLinesSuffix = this._maxLinesSuffix;\n        obj.precision = this._precision;\n        obj.textColor = this._textColor;\n        obj.paddingLeft = this._paddingLeft;\n        obj.paddingRight = this._paddingRight;\n        obj.shadow = this._shadow;\n        obj.shadowColor = this._shadowColor;\n        obj.shadowOffsetX = this._shadowOffsetX;\n        obj.shadowOffsetY = this._shadowOffsetY;\n        obj.shadowBlur = this._shadowBlur;\n        obj.highlight = this._highlight;\n        obj.highlightHeight = this._highlightHeight;\n        obj.highlightColor = this._highlightColor;\n        obj.highlightOffset = this._highlightOffset;\n        obj.highlightPaddingLeft = this._highlightPaddingLeft;\n        obj.highlightPaddingRight = this._highlightPaddingRight;\n        obj.letterSpacing = this._letterSpacing;\n        obj.textIndent = this._textIndent;\n        obj.cutSx = this._cutSx;\n        obj.cutEx = this._cutEx;\n        obj.cutSy = this._cutSy;\n        obj.cutEy = this._cutEy;\n        obj.advancedRenderer = this._advancedRenderer;\n        return obj;\n    }\n\n\n}\n\n// Because there are so many properties, we prefer to use the prototype for default values.\n// This causes a decrease in performance, but also a decrease in memory usage.\nlet proto = TextTexture.prototype;\nproto._text = \"\";\nproto._w = 0;\nproto._h = 0;\nproto._fontStyle = \"normal\";\nproto._fontSize = 40;\nproto._fontWeight = \"normal\";\nproto._fontFace = null;\nproto._wordWrap = true;\nproto._wordWrapWidth = 0;\nproto._wordBreak = false;\nproto._textOverflow = \"\";\nproto._lineHeight = null;\nproto._textBaseline = \"alphabetic\";\nproto._textAlign = \"left\";\nproto._verticalAlign = \"top\";\nproto._offsetY = null;\nproto._maxLines = 0;\nproto._maxLinesSuffix = \"..\";\nproto._textColor = 0xFFFFFFFF;\nproto._paddingLeft = 0;\nproto._paddingRight = 0;\nproto._shadow = false;\nproto._shadowColor = 0xFF000000;\nproto._shadowOffsetX = 0;\nproto._shadowOffsetY = 0;\nproto._shadowBlur = 5;\nproto._highlight = false;\nproto._highlightHeight = 0;\nproto._highlightColor = 0xFF000000;\nproto._highlightOffset = 0;\nproto._highlightPaddingLeft = 0;\nproto._highlightPaddingRight = 0;\nproto._letterSpacing = 0;\nproto._textIndent = 0;\nproto._cutSx = 0;\nproto._cutEx = 0;\nproto._cutSy = 0;\nproto._cutEy = 0;\nproto._advancedRenderer = false;\nproto._fontBaselineRatio = 0;\n\n\nimport TextTextureRenderer from \"./TextTextureRenderer.mjs\";\nimport TextTextureRendererAdvanced from \"./TextTextureRendererAdvanced.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Texture from \"../tree/Texture.mjs\";\n\nexport default class SourceTexture extends Texture {\n\n    constructor(stage) {\n        super(stage);\n\n        this._textureSource = undefined;\n    }\n\n    get textureSource() {\n        return this._textureSource;\n    }\n\n    set textureSource(v) {\n        if (v !== this._textureSource) {\n            if (v.isResultTexture) {\n                // In case of a result texture, automatically inherit the precision.\n                this._precision = this.stage.getRenderPrecision();\n            }\n            this._textureSource = v;\n            this._changed();\n        }\n    }\n\n    _getTextureSource() {\n        return this._textureSource;\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport EventEmitter from \"../EventEmitter.mjs\";\n\nexport default class Transition extends EventEmitter {\n\n    constructor(manager, settings, element, property) {\n        super();\n\n        this.manager = manager;\n\n        this._settings = settings;\n\n        this._element = element;\n\n        this._getter = element.constructor.getGetter(property);\n        this._setter = element.constructor.getSetter(property);\n\n        this._merger = settings.merger;\n\n        if (!this._merger) {\n            this._merger = element.constructor.getMerger(property);\n        }\n\n        this._startValue = this._getter(this._element);\n        this._targetValue = this._startValue;\n\n        this._p = 1;\n        this._delayLeft = 0;\n    }\n\n    start(targetValue) {\n        this._startValue = this._getter(this._element);\n\n        if (!this.isAttached()) {\n            // We don't support transitions on non-attached elements. Just set value without invoking listeners.\n            this._targetValue = targetValue;\n            this._p = 1;\n            this._updateDrawValue();\n        } else {\n            if (targetValue === this._startValue) {\n                this.reset(targetValue, 1);\n            } else {\n                this._targetValue = targetValue;\n                this._p = 0;\n                this._delayLeft = this._settings.delay;\n                this.emit('start');\n                this.add();\n            }\n        }\n    }\n\n    finish() {\n        if (this._p < 1) {\n            // Value setting and will must be invoked (async) upon next transition cycle.\n            this._p = 1;\n        }\n    }\n\n    stop() {\n        // Just stop where the transition is at.\n        this.emit('stop');\n        this.manager.removeActive(this);\n    }\n\n    pause() {\n        this.stop();\n    }\n\n    play() {\n        this.manager.addActive(this);\n    }\n\n    reset(targetValue, p) {\n        if (!this.isAttached()) {\n            // We don't support transitions on non-attached elements. Just set value without invoking listeners.\n            this._startValue = this._getter(this._element);\n            this._targetValue = targetValue;\n            this._p = 1;\n            this._updateDrawValue();\n        } else {\n            this._startValue = this._getter(this._element);\n            this._targetValue = targetValue;\n            this._p = p;\n            this.add();\n        }\n    }\n\n    _updateDrawValue() {\n        this._setter(this._element, this.getDrawValue());\n    }\n\n    add() {\n        this.manager.addActive(this);\n    }\n\n    isAttached() {\n        return this._element.attached;\n    }\n\n    isRunning() {\n        return (this._p < 1.0);\n    }\n\n    progress(dt) {\n        if (!this.isAttached()) {\n            // Skip to end of transition so that it is removed.\n            this._p = 1;\n        }\n\n        if (this.p < 1) {\n            if (this.delayLeft > 0) {\n                this._delayLeft -= dt;\n\n                if (this.delayLeft < 0) {\n                    dt = -this.delayLeft;\n                    this._delayLeft = 0;\n\n                    this.emit('delayEnd');\n                } else {\n                    return;\n                }\n            }\n\n            if (this._settings.duration == 0) {\n                this._p = 1;\n            } else {\n                this._p += dt / this._settings.duration;\n            }\n            if (this._p >= 1) {\n                // Finished!;\n                this._p = 1;\n            }\n        }\n\n        this._updateDrawValue();\n\n        this.invokeListeners();\n    }\n\n    invokeListeners() {\n        this.emit('progress', this.p);\n        if (this.p === 1) {\n            this.emit('finish');\n        }\n    }\n\n    updateTargetValue(targetValue) {\n        let t = this._settings.timingFunctionImpl(this.p);\n        if (t === 1) {\n            this._targetValue = targetValue;\n        } else if (t === 0) {\n            this._startValue = this._targetValue;\n            this._targetValue = targetValue;\n        } else {\n            this._startValue = targetValue - ((targetValue - this._targetValue) / (1 - t));\n            this._targetValue = targetValue;\n        }\n    }\n\n    getDrawValue() {\n        if (this.p >= 1) {\n            return this.targetValue;\n        } else {\n            let v = this._settings._timingFunctionImpl(this.p);\n            return this._merger(this.targetValue, this.startValue, v);\n        }\n    }\n\n    skipDelay() {\n        this._delayLeft = 0;\n    }\n\n    get startValue() {\n        return this._startValue;\n    }\n\n    get targetValue() {\n        return this._targetValue;\n    }\n\n    get p() {\n        return this._p;\n    }\n\n    get delayLeft() {\n        return this._delayLeft;\n    }\n\n    get element() {\n        return this._element;\n    }\n\n    get settings() {\n        return this._settings;\n    }\n\n    set settings(v) {\n        this._settings = v;\n    }\n\n}\n\nTransition.prototype.isTransition = true;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Manages a list of objects.\n * Objects may be patched. Then, they can be referenced using the 'ref' (string) property.\n */\nexport default class ObjectList {\n\n    constructor() {\n        this._items = [];\n        this._refs = {}\n    }\n\n    get() {\n        return this._items;\n    }\n\n    get first() {\n        return this._items[0];\n    }\n\n    get last() {\n        return this._items.length ? this._items[this._items.length - 1] : undefined;\n    }\n\n    add(item) {\n        this.addAt(item, this._items.length);\n    }\n\n    addAt(item, index) {\n        if (index >= 0 && index <= this._items.length) {\n            let currentIndex = this._items.indexOf(item);\n            if (currentIndex === index) {\n                return item;\n            }\n\n            if (Utils.isObjectLiteral(item)) {\n                const o = item;\n                item = this.createItem(o);\n                item.patch(o);\n            }\n\n            if (currentIndex != -1) {\n                this.setAt(item, index);\n            } else {\n                if (item.ref) {\n                    this._refs[item.ref] = item;\n                }\n                this._items.splice(index, 0, item);\n                this.onAdd(item, index);\n            }\n        } else {\n            throw new Error('addAt: The index ' + index + ' is out of bounds ' + this._items.length);\n        }\n    }\n\n    replaceByRef(item) {\n        if (item.ref) {\n            const existingItem = this.getByRef(item.ref);\n            if (!existingItem) {\n                throw new Error('replaceByRef: no item found with reference: ' + item.ref);\n            }\n            this.replace(item, existingItem);\n        } else {\n            throw new Error('replaceByRef: no ref specified in item');\n        }\n        this.addAt(item, this._items.length);\n\n    }\n\n    replace(item, prevItem) {\n        const index = this.getIndex(prevItem);\n        if (index === -1) {\n            throw new Error('replace: The previous item does not exist');\n        }\n        this.setAt(item, index);\n    }\n\n    setAt(item, index) {\n        if (index >= 0 && index <= this._items.length) {\n\n            if (Utils.isObjectLiteral(item)) {\n                const o = item;\n                item = this.createItem(o);\n                item.patch(o);\n            }\n\n            let currentIndex = this._items.indexOf(item);\n            if (currentIndex != -1) {\n                if (currentIndex !== index) {\n                    const fromIndex = currentIndex;\n                    if (fromIndex !== index) {\n                        this._items.splice(fromIndex, 1);\n                        this._items.splice(index, 0, item);\n                        this.onMove(item, fromIndex, index);\n                    }\n                }\n            } else {\n                if( index < this._items.length){\n\n                    if (this._items[index].ref) {\n                        this._refs[this._items[index].ref] = undefined;\n                    }\n\n                    const prevItem = this._items[index];\n\n                    // Doesn't exist yet: overwrite current.\n                    this._items[index] = item;\n\n                    if (item.ref) {\n                        this._refs[item.ref] = item;\n                    }\n\n                    this.onSet(item, index, prevItem);\n                } else {\n                    throw new Error('setAt: The index ' + index + ' is out of bounds ' + this._items.length);\n                }\n            }\n        } else {\n            throw new Error('setAt: The index ' + index + ' is out of bounds ' + this._items.length);\n        }\n    }\n\n    getAt(index) {\n        return this._items[index];\n    }\n\n    getIndex(item) {\n        return this._items.indexOf(item);\n    }\n\n    remove(item) {\n        let index = this._items.indexOf(item);\n\n        if (index !== -1) {\n            this.removeAt(index);\n        }\n    };\n\n    removeAt(index) {\n        if (index >= 0 && index < this._items.length) {\n            const item = this._items[index];\n\n            if (item.ref) {\n                this._refs[item.ref] = undefined;\n            }\n\n            this._items.splice(index, 1);\n\n            this.onRemove(item, index);\n\n            return item;\n        } else {\n            throw new Error(`removeAt: The index ${index} is out of bounds ${this._items.length - 1}`);\n        }\n    };\n\n    clear() {\n        let n = this._items.length;\n        if (n) {\n            let prev = this._items;\n            this._items = [];\n            this._refs = {}\n            this.onSync(prev, [], []);\n        }\n    };\n\n    a(o) {\n        if (Utils.isObjectLiteral(o)) {\n            let c = this.createItem(o);\n            c.patch(o);\n            this.add(c);\n            return c;\n        } else if (Array.isArray(o)) {\n            for (let i = 0, n = o.length; i < n; i++) {\n                this.a(o[i]);\n            }\n            return null;\n        } else if (this.isItem(o)) {\n            this.add(o);\n            return o;\n        }\n    };\n\n    get length() {\n        return this._items.length;\n    }\n\n    _getRefs() {\n        return this._refs;\n    }\n\n    getByRef(ref) {\n        return this._refs[ref];\n    }\n\n    clearRef(ref) {\n        delete this._refs[ref];\n    }\n\n    setRef(ref, child) {\n        this._refs[ref] = child;\n    }\n\n    patch(settings) {\n        if (Utils.isObjectLiteral(settings)) {\n            this._setByObject(settings);\n        } else if (Array.isArray(settings)) {\n            this._setByArray(settings);\n        }\n    }\n\n    _setByObject(settings) {\n        // Overrule settings of known referenced items.\n        let refs = this._getRefs();\n        let crefs = Object.keys(settings);\n        for (let i = 0, n = crefs.length; i < n; i++) {\n            let cref = crefs[i];\n            let s = settings[cref];\n\n            let c = refs[cref];\n            if (!c) {\n                if (this.isItem(s)) {\n                    // Replace previous item;\n                    s.ref = cref;\n                    this.add(s);\n                } else {\n                    // Create new item.\n                    c = this.createItem(s);\n                    c.ref = cref;\n                    c.patch(s);\n                    this.add(c);\n                }\n            } else {\n                if (this.isItem(s)) {\n                    if (c !== s) {\n                        // Replace previous item;\n                        let idx = this.getIndex(c);\n                        s.ref = cref;\n                        this.setAt(s, idx);\n                    }\n                } else {\n                    c.patch(s);\n                }\n            }\n        }\n    }\n\n    _equalsArray(array) {\n        let same = true;\n        if (array.length === this._items.length) {\n            for (let i = 0, n = this._items.length; (i < n) && same; i++) {\n                same = same && (this._items[i] === array[i]);\n            }\n        } else {\n            same = false;\n        }\n        return same;\n    }\n\n    _setByArray(array) {\n        // For performance reasons, first check if the arrays match exactly and bail out if they do.\n        if (this._equalsArray(array)) {\n            return;\n        }\n\n        for (let i = 0, n = this._items.length; i < n; i++) {\n            this._items[i].marker = true;\n        }\n\n        let refs;\n        let newItems = [];\n        for (let i = 0, n = array.length; i < n; i++) {\n            let s = array[i];\n            if (this.isItem(s)) {\n                s.marker = false;\n                newItems.push(s);\n            } else {\n                let cref = s.ref;\n                let c;\n                if (cref) {\n                    if (!refs) refs = this._getRefs();\n                    c = refs[cref];\n                }\n\n                if (!c) {\n                    // Create new item.\n                    c = this.createItem(s);\n                } else {\n                    c.marker = false;\n                }\n\n                if (Utils.isObjectLiteral(s)) {\n                    c.patch(s);\n                }\n\n                newItems.push(c);\n            }\n        }\n\n        this._setItems(newItems);\n    }\n\n    _setItems(newItems) {\n        let prevItems = this._items;\n        this._items = newItems;\n\n        // Remove the items.\n        let removed = prevItems.filter(item => {let m = item.marker; delete item.marker; return m});\n        let added = newItems.filter(item => (prevItems.indexOf(item) === -1));\n\n        if (removed.length || added.length) {\n            // Recalculate refs.\n            this._refs = {}\n            for (let i = 0, n = this._items.length; i < n; i++) {\n                let ref = this._items[i].ref;\n                if (ref) {\n                    this._refs[ref] = this._items[i];\n                }\n            }\n        }\n\n        this.onSync(removed, added, newItems);\n    }\n\n    sort(f) {\n        const items = this._items.slice();\n        items.sort(f);\n        this._setByArray(items);\n    }\n\n    onAdd(item, index) {\n    }\n\n    onRemove(item, index) {\n    }\n\n    onSync(removed, added, order) {\n    }\n\n    onSet(item, index, prevItem) {\n    }\n\n    onMove(item, fromIndex, toIndex) {\n    }\n\n    createItem(object) {\n        throw new Error(\"ObjectList.createItem must create and return a new object\");\n    }\n\n    isItem(object) {\n        return false;\n    }\n\n    forEach(f) {\n        this.get().forEach(f);\n    }\n\n}\n\nimport Utils from \"./Utils.mjs\";\n\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Manages the list of children for an element.\n */\n\nimport ObjectList from \"./ObjectList.mjs\";\n\nexport default class ElementChildList extends ObjectList {\n\n    constructor(element) {\n        super();\n        this._element = element;\n    }\n\n    _connectParent(item) {\n        const prevParent = item.parent;\n        if (prevParent && prevParent !== this._element) {\n            // Cleanup in previous child list, without\n            const prevChildList = item.parent.childList;\n            const index = prevChildList.getIndex(item);\n\n            if (item.ref) {\n                prevChildList._refs[item.ref] = undefined;\n            }\n            prevChildList._items.splice(index, 1);\n\n            // Also clean up element core.\n            prevParent.core.removeChildAt(index);\n\n        }\n\n        item._setParent(this._element);\n\n        // We are expecting the caller to sync it to the core.\n    }\n\n    onAdd(item, index) {\n        this._connectParent(item);\n        this._element.core.addChildAt(index, item.core);\n    }\n\n    onRemove(item, index) {\n        item._setParent(null);\n        this._element.core.removeChildAt(index);\n    }\n\n    onSync(removed, added, order) {\n        for (let i = 0, n = removed.length; i < n; i++) {\n            removed[i]._setParent(null);\n        }\n        for (let i = 0, n = added.length; i < n; i++) {\n            this._connectParent(added[i]);\n        }\n        let gc = i => i.core;\n        this._element.core.syncChildren(removed.map(gc), added.map(gc), order.map(gc));\n    }\n\n    onSet(item, index, prevItem) {\n        prevItem._setParent(null);\n\n        this._connectParent(item);\n        this._element.core.setChildAt(index, item.core);\n    }\n\n    onMove(item, fromIndex, toIndex) {\n        this._element.core.moveChild(fromIndex, toIndex);\n    }\n\n    createItem(object) {\n        if (object.type) {\n            return new object.type(this._element.stage);\n        } else {\n            return this._element.stage.createElement();\n        }\n    }\n\n    isItem(object) {\n        return object.isElement;\n    }\n\n}\n\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Render tree node.\n */\n\nimport StageUtils from \"./StageUtils.mjs\";\nimport ElementCore from \"./core/ElementCore.mjs\";\nimport Base from \"./Base.mjs\";\n\nimport Utils from \"./Utils.mjs\";\nimport EventEmitter from \"../EventEmitter.mjs\";\nimport Shader from \"./Shader.mjs\";\n\nexport default class Element {\n\n    constructor(stage) {\n        this.stage = stage;\n\n        this.__id = Element.id++;\n\n        this.__start();\n\n        // EventEmitter constructor.\n        this._hasEventListeners = false;\n\n        this.__core = new ElementCore(this);\n\n        /**\n         * A reference that can be used while merging trees.\n         * @type {string}\n         */\n        this.__ref = null;\n\n        /**\n         * An element is attached if it is a descendant of the stage root.\n         * @type {boolean}\n         */\n        this.__attached = false;\n\n        /**\n         * An element is enabled when it is attached and it is visible (worldAlpha > 0).\n         * @type {boolean}\n         */\n        this.__enabled = false;\n\n        /**\n         * An element is active when it is enabled and it is within bounds.\n         * @type {boolean}\n         */\n        this.__active = false;\n\n        /**\n         * @type {Element}\n         */\n        this.__parent = null;\n\n        /**\n         * The texture that is currently set.\n         * @type {Texture}\n         */\n        this.__texture = null;\n\n        /**\n         * The currently displayed texture. While this.texture is loading, this one may be different.\n         * @type {Texture}\n         */\n        this.__displayedTexture = null;\n\n        /**\n         * Tags that can be used to identify/search for a specific element.\n         * @type {String[]}\n         */\n        this.__tags = null;\n\n        /**\n         * The tree's tags mapping.\n         * This contains all elements for all known tags, at all times.\n         * @type {Map}\n         */\n        this.__treeTags = null;\n\n        /**\n         * Creates a tag context: tagged elements in this branch will not be reachable from ancestors of this elements.\n         * @type {boolean}\n         */\n        this.__tagRoot = false;\n\n        /**\n         * (Lazy-initialised) list of children owned by this elements.\n         * @type {ElementChildList}\n         */\n        this.__childList = null;\n\n        this._w = 0;\n\n        this._h = 0;\n    }\n\n    __start() {\n    }\n\n    get id() {\n        return this.__id;\n    }\n\n    set ref(ref) {\n        if (this.__ref !== ref) {\n            const charcode = ref.charCodeAt(0);\n            if (!Utils.isUcChar(charcode)) {\n                this._throwError(\"Ref must start with an upper case character: \" + ref);\n            }\n            if (this.__ref !== null) {\n                this.removeTag(this.__ref);\n                if (this.__parent) {\n                    this.__parent.__childList.clearRef(this.__ref);\n                }\n            }\n\n            this.__ref = ref;\n\n            if (this.__ref) {\n                this._addTag(this.__ref);\n                if (this.__parent) {\n                    this.__parent.__childList.setRef(this.__ref, this);\n                }\n            }\n        }\n    }\n\n    get ref() {\n        return this.__ref;\n    }\n\n    get core() {\n        return this.__core;\n    }\n\n    setAsRoot() {\n        this.__core.setAsRoot();\n        this._updateAttachedFlag();\n        this._updateEnabledFlag();\n    }\n\n    get isRoot() {\n        return this.__core.isRoot;\n    }\n\n    _setParent(parent) {\n        if (this.__parent === parent) return;\n\n        if (this.__parent) {\n            this._unsetTagsParent();\n        }\n\n        this.__parent = parent;\n\n        if (parent) {\n            this._setTagsParent();\n        }\n\n        this._updateAttachedFlag();\n        this._updateEnabledFlag();\n        this._updateCollision();\n\n        if (this.isRoot && parent) {\n            this._throwError(\"Root should not be added as a child! Results are unspecified!\");\n        }\n    };\n\n    getDepth() {\n        let depth = 0;\n\n        let p = this.__parent;\n        while(p) {\n            depth++;\n            p = p.__parent;\n        }\n\n        return depth;\n    };\n\n    getAncestor(l) {\n        let p = this;\n        while (l > 0 && p.__parent) {\n            p = p.__parent;\n            l--;\n        }\n        return p;\n    };\n\n    getAncestors() {\n        const a = [];\n        let p = this;\n        while (p) {\n            a.push(p);\n            p = p.__parent;\n        }\n        return a;\n    }\n\n    getAncestorAtDepth(depth) {\n        let levels = this.getDepth() - depth;\n        if (levels < 0) {\n            return null;\n        }\n        return this.getAncestor(levels);\n    };\n\n    isAncestorOf(c) {\n        let p = c;\n        while(p = p.parent) {\n            if (this === p) {\n                return true;\n            }\n        }\n        return false;\n    };\n\n    getSharedAncestor(c) {\n        let o1 = this;\n        let o2 = c;\n        let l1 = o1.getDepth();\n        let l2 = o2.getDepth();\n        if (l1 > l2) {\n            o1 = o1.getAncestor(l1 - l2);\n        } else if (l2 > l1) {\n            o2 = o2.getAncestor(l2 - l1);\n        }\n\n        do {\n            if (o1 === o2) {\n                return o1;\n            }\n\n            o1 = o1.__parent;\n            o2 = o2.__parent;\n        } while (o1 && o2);\n\n        return null;\n    };\n\n    get attached() {\n        return this.__attached;\n    }\n\n    get enabled() {\n        return this.__enabled;\n    }\n\n    get active() {\n        return this.__active;\n    }\n\n    _isAttached() {\n        return (this.__parent ? this.__parent.__attached : (this.stage.root === this));\n    };\n\n    _isEnabled() {\n        return this.__core.visible && (this.__core.alpha > 0) && (this.__parent ? this.__parent.__enabled : (this.stage.root === this));\n    };\n\n    _isActive() {\n        return this._isEnabled() && this.withinBoundsMargin;\n    };\n\n    /**\n     * Updates the 'attached' flag for this branch.\n     */\n    _updateAttachedFlag() {\n        let newAttached = this._isAttached();\n        if (this.__attached !== newAttached) {\n            this.__attached = newAttached;\n\n            if (newAttached) {\n                this._onSetup();\n            }\n\n            let children = this._children.get();\n            if (children) {\n                let m = children.length;\n                if (m > 0) {\n                    for (let i = 0; i < m; i++) {\n                        children[i]._updateAttachedFlag();\n                    }\n                }\n            }\n\n            if (newAttached) {\n                this._onAttach();\n            } else {\n                this._onDetach();\n            }\n        }\n    };\n\n    /**\n     * Updates the 'enabled' flag for this branch.\n     */\n    _updateEnabledFlag() {\n        let newEnabled = this._isEnabled();\n        if (this.__enabled !== newEnabled) {\n            if (newEnabled) {\n                this._onEnabled();\n                this._setEnabledFlag();\n            } else {\n                this._onDisabled();\n                this._unsetEnabledFlag();\n            }\n\n            let children = this._children.get();\n            if (children) {\n                let m = children.length;\n                if (m > 0) {\n                    for (let i = 0; i < m; i++) {\n                        children[i]._updateEnabledFlag();\n                    }\n                }\n            }\n        }\n    };\n\n    _setEnabledFlag() {\n        this.__enabled = true;\n\n        // Force re-check of texture because dimensions might have changed (cutting).\n        this._updateDimensions();\n        this._updateTextureCoords();\n\n        if (this.__texture) {\n            this.__texture.addElement(this);\n        }\n\n        if (this.withinBoundsMargin) {\n            this._setActiveFlag();\n        }\n\n        if (this.__core.shader) {\n            this.__core.shader.addElement(this.__core);\n        }\n\n    }\n\n    _unsetEnabledFlag() {\n        if (this.__active) {\n            this._unsetActiveFlag();\n        }\n\n        if (this.__texture) {\n            this.__texture.removeElement(this);\n        }\n\n        if (this.__core.shader) {\n            this.__core.shader.removeElement(this.__core);\n        }\n\n        if (this._texturizer) {\n            this.texturizer.filters.forEach(filter => filter.removeElement(this.__core));\n        }\n\n        this.__enabled = false;\n    }\n\n    _setActiveFlag() {\n        this.__active = true;\n\n        // This must happen before enabling the texture, because it may already be loaded or load directly.\n        if (this.__texture) {\n            this.__texture.incActiveCount();\n        }\n\n        if (this.__texture) {\n            this._enableTexture();\n        }\n        this._onActive();\n    }\n\n    _unsetActiveFlag() {\n        if (this.__texture) {\n            this.__texture.decActiveCount();\n        }\n\n        this.__active = false;\n        if (this.__texture) {\n            this._disableTexture();\n        }\n\n        if (this._hasTexturizer()) {\n            this.texturizer.deactivate();\n        }\n\n        this._onInactive();\n    }\n\n    _onSetup() {\n    }\n\n    _onAttach() {\n    }\n\n    _onDetach() {\n    }\n\n    _onEnabled() {\n    }\n\n    _onDisabled() {\n    }\n\n    _onActive() {\n    }\n\n    _onInactive() {\n    }\n\n    _onResize() {\n    }\n\n    _getRenderWidth() {\n        if (this._w) {\n            return this._w;\n        } else if (this.__displayedTexture) {\n            return this.__displayedTexture.getRenderWidth();\n        } else if (this.__texture) {\n            // Texture already loaded, but not yet updated (probably because this element is not active).\n            return this.__texture.getRenderWidth();\n        } else {\n            return 0;\n        }\n    };\n\n    _getRenderHeight() {\n        if (this._h) {\n            return this._h;\n        } else if (this.__displayedTexture) {\n            return this.__displayedTexture.getRenderHeight();\n        } else if (this.__texture) {\n            // Texture already loaded, but not yet updated (probably because this element is not active).\n            return this.__texture.getRenderHeight();\n        } else {\n            return 0;\n        }\n    };\n\n    get renderWidth() {\n        if (this.__enabled) {\n            // Render width is only maintained if this element is enabled.\n            return this.__core.getRenderWidth();\n        } else {\n            return this._getRenderWidth();\n        }\n    }\n\n    get renderHeight() {\n        if (this.__enabled) {\n            return this.__core.getRenderHeight();\n        } else {\n            return this._getRenderHeight();\n        }\n    }\n\n    get finalX() {\n        return this.__core.x;\n    }\n\n    get finalY() {\n        return this.__core.y;\n    }\n\n    get finalW() {\n        return this.__core.w;\n    }\n\n    get finalH() {\n        return this.__core.h;\n    }\n\n    textureIsLoaded() {\n        return this.__texture && this.__texture.isLoaded();\n    }\n\n    loadTexture() {\n        if (this.__texture) {\n            this.__texture.load();\n\n            if (!this.__texture.isUsed() || !this._isEnabled()) {\n                // Loading the texture will have no effect on the dimensions of this element.\n                // Manually update them, so that calcs can be performed immediately in userland.\n                this._updateDimensions();\n            }\n        }\n    }\n\n    _enableTextureError() {\n        // txError event should automatically be re-triggered when a element becomes active.\n        const loadError = this.__texture.loadError;\n        if (loadError) {\n            this.emit('txError', loadError, this.__texture._source);\n        }\n    }\n\n    _enableTexture() {\n        if (this.__texture.isLoaded()) {\n            this._setDisplayedTexture(this.__texture);\n        } else {\n            // We don't want to retain the old 'ghost' image as it wasn't visible anyway.\n            this._setDisplayedTexture(null);\n\n            this._enableTextureError();\n        }\n    }\n\n    _disableTexture() {\n        // We disable the displayed texture because, when the texture changes while invisible, we should use that w, h,\n        // mw, mh for checking within bounds.\n        this._setDisplayedTexture(null);\n    }\n\n    get texture() {\n        return this.__texture;\n    }\n\n    set texture(v) {\n        let texture;\n        if (Utils.isObjectLiteral(v)) {\n            if (v.type) {\n                texture = new v.type(this.stage);\n            } else {\n                texture = this.texture;\n            }\n\n            if (texture) {\n                Base.patchObject(texture, v);\n            }\n        } else if (!v) {\n            texture = null;\n        } else {\n            if (v.isTexture) {\n                texture = v;\n            } else if (v.isTextureSource) {\n                texture = new SourceTexture(this.stage);\n                texture.textureSource = v;\n            } else {\n                console.error(\"[Lightning] Please specify a texture type.\");\n                return;\n            }\n        }\n\n        const prevTexture = this.__texture;\n        if (texture !== prevTexture) {\n            this.__texture = texture;\n\n            if (this.__texture) {\n                if (this.__enabled) {\n                    this.__texture.addElement(this);\n\n                    if (this.withinBoundsMargin) {\n                        if (this.__texture.isLoaded()) {\n                            this._setDisplayedTexture(this.__texture);\n                        } else {\n                            this._enableTextureError();\n                        }\n                    }\n                }\n            } else {\n                // Make sure that current texture is cleared when the texture is explicitly set to null.\n                this._setDisplayedTexture(null);\n            }\n\n            if (prevTexture && prevTexture !== this.__displayedTexture) {\n                prevTexture.removeElement(this);\n            }\n\n            this._updateDimensions();\n        }\n    }\n\n    get displayedTexture() {\n        return this.__displayedTexture;\n    }\n\n    _setDisplayedTexture(v) {\n        let prevTexture = this.__displayedTexture;\n\n        if (prevTexture && (v !== prevTexture)) {\n            if (this.__texture !== prevTexture) {\n                // The old displayed texture is deprecated.\n                prevTexture.removeElement(this);\n            }\n        }\n\n        const prevSource = this.__core.displayedTextureSource;\n        const sourceChanged = (v ? v._source : null) !== prevSource;\n\n        this.__displayedTexture = v;\n        this._updateDimensions();\n\n        if (this.__displayedTexture) {\n            if (sourceChanged) {\n                // We don't need to reference the displayed texture because it was already referenced (this.texture === this.displayedTexture).\n                this._updateTextureCoords();\n                this.__core.setDisplayedTextureSource(this.__displayedTexture._source);\n            }\n        } else {\n            this.__core.setDisplayedTextureSource(null);\n        }\n\n        if (sourceChanged) {\n            if (this.__displayedTexture) {\n                this.stage.removeUpdateSourceTexture(this.__displayedTexture)\n                this.emit('txLoaded', this.__displayedTexture);\n            } else {\n                this.emit('txUnloaded', this.__displayedTexture);\n            }\n        }\n    }\n\n    onTextureSourceLoaded() {\n        // This function is called when element is enabled, but we only want to set displayed texture for active elements.\n        if (this.active) {\n            // We may be dealing with a texture reloading, so we must force update.\n            this._setDisplayedTexture(this.__texture);\n        }\n    };\n\n    onTextureSourceLoadError(e) {\n        this.emit('txError', e, this.__texture._source);\n    };\n\n    forceRenderUpdate() {\n        this.__core.setHasRenderUpdates(3);\n    }\n\n    onDisplayedTextureClippingChanged() {\n        this._updateDimensions();\n        this._updateTextureCoords();\n    };\n\n    onPrecisionChanged() {\n        this._updateDimensions();\n    };\n\n    onDimensionsChanged(w, h) {\n        if (this.texture instanceof TextTexture) {\n            this.texture.w = w;\n            this.texture.h = h;\n            this.w = w;\n            this.h = h;\n        }\n    }\n\n    _updateDimensions() {\n        let w = this._getRenderWidth();\n        let h = this._getRenderHeight();\n\n        let unknownSize = false;\n        if (!w || !h) {\n            if (!this.__displayedTexture && this.__texture) {\n                // We use a 'max width' replacement instead in the ElementCore calcs.\n                // This makes sure that it is able to determine withinBounds.\n                w = w || this.__texture.mw;\n                h = h || this.__texture.mh;\n\n                if ((!w || !h) && this.__texture.isAutosizeTexture()) {\n                    unknownSize = true;\n                }\n            }\n        }\n\n        if (this.__core.setDimensions(w, h, unknownSize)) {\n            this._onResize();\n        }\n    }\n\n    _updateTextureCoords() {\n        if (this.displayedTexture && this.displayedTexture._source) {\n            let displayedTexture = this.displayedTexture;\n            let displayedTextureSource = this.displayedTexture._source;\n\n            let tx1 = 0, ty1 = 0, tx2 = 1.0, ty2 = 1.0;\n            if (displayedTexture.clipping) {\n                // Apply texture clipping.\n                let w = displayedTextureSource.getRenderWidth();\n                let h = displayedTextureSource.getRenderHeight();\n                let iw, ih, rw, rh;\n                iw = 1 / w;\n                ih = 1 / h;\n\n                if (displayedTexture.pw) {\n                    rw = (displayedTexture.pw) * iw;\n                } else {\n                    rw = (w - displayedTexture.px) * iw;\n                }\n\n                if (displayedTexture.ph) {\n                    rh = displayedTexture.ph * ih;\n                } else {\n                    rh = (h - displayedTexture.py) * ih;\n                }\n\n                iw *= (displayedTexture.px);\n                ih *= (displayedTexture.py);\n\n                tx1 = iw;\n                ty1 = ih;\n                tx2 = tx2 * rw + iw;\n                ty2 = ty2 * rh + ih;\n\n                tx1 = Math.max(0, tx1);\n                ty1 = Math.max(0, ty1);\n                tx2 = Math.min(1, tx2);\n                ty2 = Math.min(1, ty2);\n            }\n\n            if (displayedTextureSource._flipTextureY) {\n                let tempty = ty2;\n                ty2 = ty1;\n                ty1 = tempty;\n            }\n            this.__core.setTextureCoords(tx1, ty1, tx2, ty2);\n        }\n    }\n\n    getCornerPoints() {\n        return this.__core.getCornerPoints();\n    }\n\n    _unsetTagsParent() {\n        if (this.__tags) {\n            this.__tags.forEach((tag) => {\n                // Remove from treeTags.\n                let p = this;\n                while (p = p.__parent) {\n                    let parentTreeTags = p.__treeTags.get(tag);\n                    parentTreeTags.delete(this);\n\n                    if (p.__tagRoot) {\n                        break;\n                    }\n                }\n            });\n        }\n\n        let tags = null;\n        let n = 0;\n        if (this.__treeTags) {\n            if (!this.__tagRoot) {\n                tags = Utils.iteratorToArray(this.__treeTags.keys());\n                n = tags.length;\n\n                if (n > 0) {\n                    for (let i = 0; i < n; i++) {\n                        let tagSet = this.__treeTags.get(tags[i]);\n\n                        // Remove from treeTags.\n                        let p = this;\n                        while ((p = p.__parent)) {\n                            let parentTreeTags = p.__treeTags.get(tags[i]);\n\n                            tagSet.forEach(function (comp) {\n                                parentTreeTags.delete(comp);\n                            });\n\n                            if (p.__tagRoot) {\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    _setTagsParent() {\n        // Just copy over the 'local' tags.\n        if (this.__tags) {\n            this.__tags.forEach((tag) => {\n                let p = this;\n                while (p = p.__parent) {\n                    if (!p.__treeTags) {\n                        p.__treeTags = new Map();\n                    }\n\n                    let s = p.__treeTags.get(tag);\n                    if (!s) {\n                        s = new Set();\n                        p.__treeTags.set(tag, s);\n                    }\n\n                    s.add(this);\n\n                    if (p.__tagRoot) {\n                        break;\n                    }\n                }\n            });\n        }\n\n        if (this.__treeTags && this.__treeTags.size) {\n            if (!this.__tagRoot) {\n                this.__treeTags.forEach((tagSet, tag) => {\n                    let p = this;\n                    while (!p.__tagRoot && (p = p.__parent)) {\n                        if (p.__tagRoot) {\n                            // Do not copy all subs.\n                        }\n                        if (!p.__treeTags) {\n                            p.__treeTags = new Map();\n                        }\n\n                        let s = p.__treeTags.get(tag);\n                        if (!s) {\n                            s = new Set();\n                            p.__treeTags.set(tag, s);\n                        }\n\n                        tagSet.forEach(function (comp) {\n                            s.add(comp);\n                        });\n                    }\n                });\n            }\n        }\n    };\n\n\n    _getByTag(tag) {\n        if (!this.__treeTags) {\n            return [];\n        }\n        let t = this.__treeTags.get(tag);\n        return t ? Utils.setToArray(t) : [];\n    };\n\n    getTags() {\n        return this.__tags ? this.__tags : [];\n    };\n\n    setTags(tags) {\n        tags = tags.reduce((acc, tag) => {\n            return acc.concat(tag.split(' '));\n        }, []);\n\n        if (this.__ref) {\n            tags.push(this.__ref);\n        }\n\n        let i, n = tags.length;\n        let removes = [];\n        let adds = [];\n        for (i = 0; i < n; i++) {\n            if (!this.hasTag(tags[i])) {\n                adds.push(tags[i]);\n            }\n        }\n\n        let currentTags = this.tags || [];\n        n = currentTags.length;\n        for (i = 0; i < n; i++) {\n            if (tags.indexOf(currentTags[i]) == -1) {\n                removes.push(currentTags[i]);\n            }\n        }\n\n        for (i = 0; i < removes.length; i++) {\n            this.removeTag(removes[i]);\n        }\n\n        for (i = 0; i < adds.length; i++) {\n            this.addTag(adds[i]);\n        }\n    }\n\n    addTag(tag) {\n        if (tag.indexOf(' ') === -1) {\n            if (Utils.isUcChar(tag.charCodeAt(0))) {\n                this._throwError(\"Tag may not start with an upper case character.\");\n            }\n\n            this._addTag(tag);\n        } else {\n            const tags = tag.split(' ');\n            for (let i = 0, m = tags.length; i < m; i++) {\n                const tag = tags[i];\n\n                if (Utils.isUcChar(tag.charCodeAt(0))) {\n                    this._throwError(\"Tag may not start with an upper case character.\");\n                }\n\n                this._addTag(tag);\n            }\n        }\n    }\n\n    _addTag(tag) {\n        if (!this.__tags) {\n            this.__tags = [];\n        }\n        if (this.__tags.indexOf(tag) === -1) {\n            this.__tags.push(tag);\n\n            // Add to treeTags hierarchy.\n            let p = this.__parent;\n            if (p) {\n                do {\n                    if (!p.__treeTags) {\n                        p.__treeTags = new Map();\n                    }\n\n                    let s = p.__treeTags.get(tag);\n                    if (!s) {\n                        s = new Set();\n                        p.__treeTags.set(tag, s);\n                    }\n\n                    s.add(this);\n\n                } while (!p.__tagRoot && (p = p.__parent));\n            }\n        }\n    }\n\n    removeTag(tag) {\n        let i = this.__tags.indexOf(tag);\n        if (i !== -1) {\n            this.__tags.splice(i, 1);\n\n            // Remove from treeTags hierarchy.\n            let p = this.__parent;\n            if (p) {\n                do {\n                    let list = p.__treeTags.get(tag);\n                    if (list) {\n                        list.delete(this);\n                    }\n                } while (!p.__tagRoot && (p = p.__parent));\n            }\n        }\n    }\n\n    hasTag(tag) {\n        return (this.__tags && (this.__tags.indexOf(tag) !== -1));\n    }\n\n    /**\n     * Returns one of the elements from the subtree that have this tag.\n     * @param {string} tag\n     * @returns {Element}\n     */\n    _tag(tag) {\n        if (tag.indexOf(\".\") !== -1) {\n            return this.mtag(tag)[0];\n        } else {\n            if (this.__treeTags) {\n                let t = this.__treeTags.get(tag);\n                if (t) {\n                    const item = t.values().next();\n                    return item ? item.value : undefined;\n                }\n            }\n        }\n    };\n\n    get tag() {\n        return this._tag;\n    }\n\n    set tag(t) {\n        this.tags = t;\n    }\n\n    /**\n     * Returns all elements from the subtree that have this tag.\n     * @param {string} tag\n     * @returns {Element[]}\n     */\n    mtag(tag) {\n        let idx = tag.indexOf(\".\");\n        if (idx >= 0) {\n            let parts = tag.split('.');\n            let res = this._getByTag(parts[0]);\n            let level = 1;\n            let c = parts.length;\n            while (res.length && level < c) {\n                let resn = [];\n                for (let j = 0, n = res.length; j < n; j++) {\n                    resn = resn.concat(res[j]._getByTag(parts[level]));\n                }\n\n                res = resn;\n                level++;\n            }\n            return res;\n        } else {\n            return this._getByTag(tag);\n        }\n    };\n\n    stag(tag, settings) {\n        let t = this.mtag(tag);\n        let n = t.length;\n        for (let i = 0; i < n; i++) {\n            Base.patchObject(t[i], settings);\n        }\n    }\n\n    get tagRoot() {\n        return this.__tagRoot;\n    }\n\n    set tagRoot(v) {\n        if (this.__tagRoot !== v) {\n            if (!v) {\n                this._setTagsParent();\n            } else {\n                this._unsetTagsParent();\n            }\n\n            this.__tagRoot = v;\n        }\n    }\n\n    sel(path) {\n        const results = this.select(path);\n        if (results.length) {\n            return results[0];\n        } else {\n            return undefined;\n        }\n    }\n\n    select(path) {\n        if (path.indexOf(\",\") !== -1) {\n            let selectors = path.split(',');\n            let res = [];\n            for (let i = 0; i < selectors.length; i++) {\n                res = res.concat(this._select(selectors[i]));\n            }\n            return res;\n        } else {\n            return this._select(path);\n        }\n    }\n\n    _select(path) {\n        if (path === \"\") return [this];\n\n\n        let pointIdx = path.indexOf(\".\");\n        let arrowIdx = path.indexOf(\">\");\n        if (pointIdx === -1 && arrowIdx === -1) {\n            // Quick case.\n            return this.mtag(path);\n        }\n\n        // Detect by first char.\n        let isRef;\n        if (arrowIdx === 0) {\n            isRef = true;\n            path = path.substr(1);\n        } else if (pointIdx === 0) {\n            isRef = false;\n            path = path.substr(1);\n        } else {\n            isRef = false;\n        }\n\n        return this._selectChilds(path, isRef);\n    }\n\n    _selectChilds(path, isRef) {\n        const pointIdx = path.indexOf(\".\");\n        const arrowIdx = path.indexOf(\">\");\n\n        if (pointIdx === -1 && arrowIdx === -1) {\n            if (isRef) {\n                const ref = this.getByRef(path);\n                return ref ? [ref] : [];\n            } else {\n                return this.mtag(path);\n            }\n        }\n\n        if ((arrowIdx === -1) || (pointIdx !== -1 && pointIdx < arrowIdx)) {\n            let next;\n            const str = path.substr(0, pointIdx);\n            if (isRef) {\n                const ref = this.getByRef(str);\n                next = ref ? [ref] : [];\n            } else {\n                next = this.mtag(str);\n            }\n            let total = [];\n            const subPath = path.substr(pointIdx + 1);\n            for (let i = 0, n = next.length; i < n; i++) {\n                total = total.concat(next[i]._selectChilds(subPath, false));\n            }\n            return total;\n        } else {\n            let next;\n            const str = path.substr(0, arrowIdx);\n            if (isRef) {\n                const ref = this.getByRef(str);\n                next = ref ? [ref] : [];\n            } else {\n                next = this.mtag(str);\n            }\n            let total = [];\n            const subPath = path.substr(arrowIdx + 1);\n            for (let i = 0, n = next.length; i < n; i++) {\n                total = total.concat(next[i]._selectChilds(subPath, true));\n            }\n            return total;\n        }\n    }\n\n    getByRef(ref) {\n        return this.childList.getByRef(ref);\n    }\n\n    getLocationString() {\n        let i;\n        i = this.__parent ? this.__parent._children.getIndex(this) : \"R\";\n        let localTags = this.getTags();\n        let str = this.__parent ? this.__parent.getLocationString(): \"\";\n        if (this.ref) {\n            str += \":[\" + i + \"]\" + this.ref;\n        } else if (localTags.length) {\n            str += \":[\" + i + \"]\" + localTags.join(\",\");\n        } else {\n            str += \":[\" + i + \"]#\" + this.id;\n        }\n        return str;\n    }\n\n    toString() {\n        let obj = this.getSettings();\n        return Element.getPrettyString(obj, \"\");\n    };\n\n    static getPrettyString(obj, indent) {\n        let children = obj.children;\n        delete obj.children;\n\n\n        // Convert singular json settings object.\n        let colorKeys = [\"color\", \"colorUl\", \"colorUr\", \"colorBl\", \"colorBr\"];\n        let str = JSON.stringify(obj, function (k, v) {\n            if (colorKeys.indexOf(k) !== -1) {\n                return \"COLOR[\" + v.toString(16) + \"]\";\n            }\n            return v;\n        });\n        str = str.replace(/\"COLOR\\[([a-f0-9]{1,8})\\]\"/g, \"0x$1\");\n\n        if (children) {\n            let childStr = \"\";\n            if (Utils.isObjectLiteral(children)) {\n                let refs = Object.keys(children);\n                childStr = \"\";\n                for (let i = 0, n = refs.length; i < n; i++) {\n                    childStr += `\\n${indent}  \"${refs[i]}\":`\n                    delete children[refs[i]].ref;\n                    childStr += Element.getPrettyString(children[refs[i]], indent + \"  \") + (i < n - 1 ? \",\" : \"\");\n                }\n                let isEmpty = (str === \"{}\");\n                str = str.substr(0, str.length - 1) + (isEmpty ? \"\" : \",\") + childStr + \"\\n\" + indent + \"}\";\n            } else {\n                let n = children.length;\n                childStr = \"[\";\n                for (let i = 0; i < n; i++) {\n                    childStr += Element.getPrettyString(children[i], indent + \"  \") + (i < n - 1 ? \",\" : \"\") + \"\\n\";\n                }\n                childStr += indent + \"]}\";\n                let isEmpty = (str === \"{}\");\n                str = str.substr(0, str.length - 1) + (isEmpty ? \"\" : \",\") + \"\\\"children\\\":\\n\" + indent + childStr + \"}\";\n            }\n\n        }\n\n        return str;\n    }\n\n    getSettings() {\n        let settings = this.getNonDefaults();\n\n        let children = this._children.get();\n        if (children) {\n            let n = children.length;\n            if (n) {\n                const childArray = [];\n                let missing = false;\n                for (let i = 0; i < n; i++) {\n                    childArray.push(children[i].getSettings());\n                    missing = missing || !children[i].ref;\n                }\n\n                if (!missing) {\n                    settings.children = {}\n                    childArray.forEach(child => {\n                        settings.children[child.ref] = child;\n                    });\n                } else {\n                    settings.children = childArray;\n                }\n            }\n        }\n\n        settings.id = this.id;\n\n        return settings;\n    }\n\n    getNonDefaults() {\n        let settings = {};\n\n        if (this.constructor !== Element) {\n            settings.type = this.constructor.name;\n        }\n\n        if (this.__ref) {\n            settings.ref = this.__ref;\n        }\n\n        if (this.__tags && this.__tags.length) {\n            settings.tags = this.__tags;\n        }\n\n        if (this.x !== 0) settings.x = this.x;\n        if (this.y !== 0) settings.y = this.y;\n        if (this.w !== 0) settings.w = this.w;\n        if (this.h !== 0) settings.h = this.h;\n\n        if (this.scaleX === this.scaleY) {\n            if (this.scaleX !== 1) settings.scale = this.scaleX;\n        } else {\n            if (this.scaleX !== 1) settings.scaleX = this.scaleX;\n            if (this.scaleY !== 1) settings.scaleY = this.scaleY;\n        }\n\n        if (this.pivotX === this.pivotY) {\n            if (this.pivotX !== 0.5) settings.pivot = this.pivotX;\n        } else {\n            if (this.pivotX !== 0.5) settings.pivotX = this.pivotX;\n            if (this.pivotY !== 0.5) settings.pivotY = this.pivotY;\n        }\n\n        if (this.mountX === this.mountY) {\n            if (this.mountX !== 0) settings.mount = this.mountX;\n        } else {\n            if (this.mountX !== 0) settings.mountX = this.mountX;\n            if (this.mountY !== 0) settings.mountY = this.mountY;\n        }\n\n        if (this.alpha !== 1) settings.alpha = this.alpha;\n\n        if (!this.visible) settings.visible = false;\n\n        if (this.rotation !== 0) settings.rotation = this.rotation;\n\n        if (this.colorUl === this.colorUr && this.colorBl === this.colorBr && this.colorUl === this.colorBl) {\n            if (this.colorUl !== 0xFFFFFFFF) settings.color = this.colorUl.toString(16);\n        } else {\n            if (this.colorUl !== 0xFFFFFFFF) settings.colorUl = this.colorUl.toString(16);\n            if (this.colorUr !== 0xFFFFFFFF) settings.colorUr = this.colorUr.toString(16);\n            if (this.colorBl !== 0xFFFFFFFF) settings.colorBl = this.colorBl.toString(16);\n            if (this.colorBr !== 0xFFFFFFFF) settings.colorBr = this.colorBr.toString(16);\n        }\n\n        if (this.zIndex) settings.zIndex = this.zIndex;\n\n        if (this.forceZIndexContext) settings.forceZIndexContext = true;\n\n        if (this.clipping) settings.clipping = this.clipping;\n\n        if (!this.clipbox) settings.clipbox = this.clipbox;\n\n        if (this.__texture) {\n            let tnd = this.__texture.getNonDefaults();\n            if (Object.keys(tnd).length) {\n                settings.texture = tnd;\n            }\n        }\n\n        if (this.shader && Utils.isFunction(this.shader.getNonDefaults)) {\n            let tnd = this.shader.getNonDefaults();\n            if (Object.keys(tnd).length) {\n                settings.shader = tnd;\n            }\n        }\n\n        if (this._hasTexturizer()) {\n            if (this.texturizer.enabled) {\n                settings.renderToTexture = this.texturizer.enabled;\n            }\n            if (this.texturizer.lazy) {\n                settings.renderToTextureLazy = this.texturizer.lazy;\n            }\n            if (this.texturizer.colorize) {\n                settings.colorizeResultTexture = this.texturizer.colorize;\n            }\n            if (this.texturizer.renderOffscreen) {\n                settings.renderOffscreen = this.texturizer.renderOffscreen;\n            }\n        }\n\n        return settings;\n    };\n\n    static getGetter(propertyPath) {\n        let getter = Element.PROP_GETTERS.get(propertyPath);\n        if (!getter) {\n            getter = new Function('obj', 'return obj.' + propertyPath);\n            Element.PROP_GETTERS.set(propertyPath, getter);\n        }\n        return getter;\n    }\n\n    static getSetter(propertyPath) {\n        let setter = Element.PROP_SETTERS.get(propertyPath);\n        if (!setter) {\n            setter = new Function('obj', 'v', 'obj.' + propertyPath + ' = v');\n            Element.PROP_SETTERS.set(propertyPath, setter);\n        }\n        return setter;\n    }\n\n    get withinBoundsMargin() {\n        return this.__core._withinBoundsMargin;\n    }\n\n    _enableWithinBoundsMargin() {\n        // Iff enabled, this toggles the active flag.\n        if (this.__enabled) {\n            this._setActiveFlag();\n        }\n    }\n\n    _disableWithinBoundsMargin() {\n        // Iff active, this toggles the active flag.\n        if (this.__active) {\n            this._unsetActiveFlag();\n        }\n    }\n\n    set boundsMargin(v) {\n        if (!Array.isArray(v) && v !== null) {\n            throw new Error(\"boundsMargin should be an array of left-top-right-bottom values or null (inherit margin)\");\n        }\n        this.__core.boundsMargin = v;\n    }\n\n    get boundsMargin() {\n        return this.__core.boundsMargin;\n    }\n\n    get x() {\n        return this.__core.offsetX;\n    }\n\n    set x(v) {\n        this.__core.offsetX = v;\n    }\n\n    get y() {\n        return this.__core.offsetY;\n    }\n\n    set y(v) {\n        this.__core.offsetY = v;\n    }\n\n    get w() {\n        return this._w;\n    }\n\n    set w(v) {\n        if (Utils.isFunction(v)) {\n            this._w = 0;\n            this.__core.funcW = v;\n        } else {\n            v = Math.max(v, 0);\n            if (this._w !== v) {\n                this.__core.disableFuncW();\n                this._w = v;\n                this._updateDimensions();\n            }\n        }\n    }\n\n    get h() {\n        return this._h;\n    }\n\n    set h(v) {\n        if (Utils.isFunction(v)) {\n            this._h = 0;\n            this.__core.funcH = v;\n        } else {\n            v = Math.max(v, 0);\n            if (this._h !== v) {\n                this.__core.disableFuncH();\n                this._h = v;\n                this._updateDimensions();\n            }\n        }\n    }\n\n    get collision() {\n        return this._collision;\n    }\n\n    set collision(v) {\n        this._collision = v;\n    }\n\n    _updateCollision() {\n        if (this.collision && this.__parent && this.__parent.collision === undefined) {\n            /**\n             * Mark collision as 2 to indicate atleast one descendant has collision enabled.\n             * This narrows down the search for elements with active collision.\n            */\n            this.__parent.collision = 2;\n        }\n    }\n\n    get scaleX() {\n        return this.__core.scaleX;\n    }\n\n    set scaleX(v) {\n        this.__core.scaleX = v;\n    }\n\n    get scaleY() {\n        return this.__core.scaleY;\n    }\n\n    set scaleY(v) {\n        this.__core.scaleY = v;\n    }\n\n    get scale() {\n        return this.__core.scale;\n    }\n\n    set scale(v) {\n        this.__core.scale = v;\n    }\n\n    get pivotX() {\n        return this.__core.pivotX;\n    }\n\n    set pivotX(v) {\n        this.__core.pivotX = v;\n    }\n\n    get pivotY() {\n        return this.__core.pivotY;\n    }\n\n    set pivotY(v) {\n        this.__core.pivotY = v;\n    }\n\n    get pivot() {\n        return this.__core.pivot;\n    }\n\n    set pivot(v) {\n        this.__core.pivot = v;\n    }\n\n    get mountX() {\n        return this.__core.mountX;\n    }\n\n    set mountX(v) {\n        this.__core.mountX = v;\n    }\n\n    get mountY() {\n        return this.__core.mountY;\n    }\n\n    set mountY(v) {\n        this.__core.mountY = v;\n    }\n\n    get mount() {\n        return this.__core.mount;\n    }\n\n    set mount(v) {\n        this.__core.mount = v;\n    }\n\n    get rotation() {\n        return this.__core.rotation;\n    }\n\n    set rotation(v) {\n        this.__core.rotation = v;\n    }\n\n    get alpha() {\n        return this.__core.alpha;\n    }\n\n    set alpha(v) {\n        this.__core.alpha = v;\n    }\n\n    get visible() {\n        return this.__core.visible;\n    }\n\n    set visible(v) {\n        this.__core.visible = v;\n    }\n    \n    get colorUl() {\n        return this.__core.colorUl;\n    }\n\n    set colorUl(v) {\n        this.__core.colorUl = v;\n    }\n\n    get colorUr() {\n        return this.__core.colorUr;\n    }\n\n    set colorUr(v) {\n        this.__core.colorUr = v;\n    }\n\n    get colorBl() {\n        return this.__core.colorBl;\n    }\n\n    set colorBl(v) {\n        this.__core.colorBl = v;\n    }\n\n    get colorBr() {\n        return this.__core.colorBr;\n    }\n\n    set colorBr(v) {\n        this.__core.colorBr = v;\n    }\n\n    get color() {\n        return this.__core.colorUl;\n    }\n\n    set color(v) {\n        if (this.colorUl !== v || this.colorUr !== v || this.colorBl !== v || this.colorBr !== v) {\n            this.colorUl = v;\n            this.colorUr = v;\n            this.colorBl = v;\n            this.colorBr = v;\n        }\n    }\n\n    get colorTop() {\n        return this.colorUl;\n    }\n\n    set colorTop(v) {\n        if (this.colorUl !== v || this.colorUr !== v) {\n            this.colorUl = v;\n            this.colorUr = v;\n        }\n    }\n\n    get colorBottom() {\n        return this.colorBl;\n    }\n\n    set colorBottom(v) {\n        if (this.colorBl !== v || this.colorBr !== v) {\n            this.colorBl = v;\n            this.colorBr = v;\n        }\n    }\n\n    get colorLeft() {\n        return this.colorUl;\n    }\n\n    set colorLeft(v) {\n        if (this.colorUl !== v || this.colorBl !== v) {\n            this.colorUl = v;\n            this.colorBl = v;\n        }\n    }\n\n    get colorRight() {\n        return this.colorUr;\n    }\n\n    set colorRight(v) {\n        if (this.colorUr !== v || this.colorBr !== v) {\n            this.colorUr = v;\n            this.colorBr = v;\n        }\n    }\n\n    get zIndex() {return this.__core.zIndex}\n    set zIndex(v) {\n        this.__core.zIndex = v;\n    }\n\n    get forceZIndexContext() {return this.__core.forceZIndexContext}\n    set forceZIndexContext(v) {\n        this.__core.forceZIndexContext = v;\n    }\n\n    get clipping() {return this.__core.clipping}\n    set clipping(v) {\n        this.__core.clipping = v;\n    }\n\n    get clipbox() {return this.__core.clipbox}\n    set clipbox(v) {\n        this.__core.clipbox = v;\n    }\n\n    get tags() {\n        return this.getTags();\n    }\n\n    set tags(v) {\n        if (!Array.isArray(v)) v = [v];\n        this.setTags(v);\n    }\n\n    set t(v) {\n        this.tags = v;\n    }\n\n    get _children() {\n        if (!this.__childList) {\n            this.__childList = new ElementChildList(this, false);\n        }\n        return this.__childList;\n    }\n\n    get childList() {\n        if (!this._allowChildrenAccess()) {\n            this._throwError(\"Direct access to children is not allowed in \" + this.getLocationString());\n        }\n        return this._children;\n    }\n\n    hasChildren() {\n        return this._allowChildrenAccess() && this.__childList && (this.__childList.length > 0);\n    }\n\n    _allowChildrenAccess() {\n        return true;\n    }\n\n    get children() {\n        return this.childList.get();\n    }\n\n    set children(children) {\n        this.childList.patch(children);\n    }\n\n    add(o) {\n        return this.childList.a(o);\n    }\n\n    get p() {\n        return this.__parent;\n    }\n\n    get parent() {\n        return this.__parent;\n    }\n\n    get src() {\n        if (this.texture && this.texture instanceof ImageTexture) {\n            return this.texture._src;\n        } else {\n            return undefined;\n        }\n    }\n\n    set src(v) {\n        const texture = new ImageTexture(this.stage);\n        texture.src = v;\n        this.texture = texture;\n    }\n\n    set mw(v) {\n        if (this.texture) {\n            this.texture.mw = v;\n            this._updateDimensions();\n        } else {\n            this._throwError('Please set mw after setting a texture.');\n        }\n    }\n\n    set mh(v) {\n        if (this.texture) {\n            this.texture.mh = v;\n            this._updateDimensions();\n        } else {\n            this._throwError('Please set mh after setting a texture.');\n        }\n    }\n\n    get rect() {\n        return (this.texture === this.stage.rectangleTexture);\n    }\n\n    set rect(v) {\n        if (v) {\n            this.texture = this.stage.rectangleTexture;\n        } else {\n            this.texture = null;\n        }\n    }\n\n    enableTextTexture() {\n        if (!this.texture || !(this.texture instanceof TextTexture)) {\n            this.texture = new TextTexture(this.stage);\n\n            if (!this.texture.w && !this.texture.h) {\n                // Inherit dimensions from element.\n                // This allows userland to set dimensions of the Element and then later specify the text.\n                this.texture.w = this.w;\n                this.texture.h = this.h;\n            }\n        }\n        return this.texture;\n    }\n\n    get text() {\n        if (this.texture && (this.texture instanceof TextTexture)) {\n            return this.texture;\n        } else {\n            return null;\n        }\n    }\n\n    set text(v) {\n        if (!this.texture || !(this.texture instanceof TextTexture)) {\n            this.enableTextTexture();\n        }\n        if (Utils.isString(v)) {\n            this.texture.text = v;\n        } else {\n            this.texture.patch(v);\n        }\n    }\n\n    set onUpdate(f) {\n        this.__core.onUpdate = f;\n    }\n\n    set onAfterCalcs(f) {\n        this.__core.onAfterCalcs = f;\n    }\n\n    set onAfterUpdate(f) {\n        this.__core.onAfterUpdate = f;\n    }\n\n    forceUpdate() {\n        // Make sure that the update loop is run.\n        this.__core._setHasUpdates();\n    }\n\n    get shader() {\n        return this.__core.shader;\n    }\n\n    set shader(v) {\n        if (Utils.isObjectLiteral(v) && !v.type) {\n            // Setting properties on an existing shader.\n            if (this.shader) {\n                this.shader.patch(v);\n            }\n        } else {\n            const shader = Shader.create(this.stage, v);\n\n            if (this.__enabled && this.__core.shader) {\n                this.__core.shader.removeElement(this.__core);\n            }\n\n            this.__core.shader = shader;\n\n            if (this.__enabled && this.__core.shader) {\n                this.__core.shader.addElement(this.__core);\n            }\n        }\n    }\n\n    _hasTexturizer() {\n        return !!this.__core._texturizer;\n    }\n\n    get renderToTexture() {\n        return this.rtt\n    }\n\n    set renderToTexture(v) {\n        this.rtt = v\n    }\n\n    get rtt() {\n        return this._hasTexturizer() && this.texturizer.enabled;\n    }\n\n    set rtt(v) {\n        this.texturizer.enabled = v;\n    }\n\n    get rttLazy() {\n        return this._hasTexturizer() && this.texturizer.lazy;\n    }\n\n    set rttLazy(v) {\n        this.texturizer.lazy = v;\n    }\n\n    get renderOffscreen() {\n        return this._hasTexturizer() && this.texturizer.renderOffscreen;\n    }\n\n    set renderOffscreen(v) {\n        this.texturizer.renderOffscreen = v;\n    }\n\n    get colorizeResultTexture() {\n        return this._hasTexturizer() && this.texturizer.colorize;\n    }\n\n    set colorizeResultTexture(v) {\n        this.texturizer.colorize = v;\n    }\n\n    getTexture() {\n        return this.texturizer._getTextureSource();\n    }\n\n    get texturizer() {\n        return this.__core.texturizer;\n    }\n\n    patch(settings) {\n        let paths = Object.keys(settings);\n\n        for (let i = 0, n = paths.length; i < n; i++) {\n            let path = paths[i];\n            const v = settings[path];\n\n            const firstCharCode = path.charCodeAt(0);\n            if (Utils.isUcChar(firstCharCode)) {\n                // Ref.\n                const child = this.getByRef(path);\n                if (!child) {\n                    if (v !== undefined) {\n                        // Add to list immediately.\n                        let c;\n                        if (Utils.isObjectLiteral(v)) {\n                            // Catch this case to capture createMode flag.\n                            c = this.childList.createItem(v);\n                            c.patch(v);\n                        } else if (Utils.isObject(v)) {\n                            c = v;\n                        }\n                        if (c.isElement) {\n                            c.ref = path;\n                        }\n\n                        this.childList.a(c);\n                    }\n                } else {\n                    if (v === undefined) {\n                        if (child.parent) {\n                            child.parent.childList.remove(child);\n                        }\n                    } else if (Utils.isObjectLiteral(v)) {\n                        child.patch(v);\n                    } else if (v.isElement) {\n                        // Replace element by new element.\n                        v.ref = path;\n                        this.childList.replace(v, child);\n                    } else {\n                        this._throwError(\"Unexpected value for path: \" + path);\n                    }\n                }\n            } else {\n                // Property.\n                Base.patchObjectProperty(this, path, v);\n            }\n        }\n    }\n\n    _throwError(message) {\n        throw new Error(this.constructor.name + \" (\" + this.getLocationString() + \"): \" + message);\n    }\n\n    animation(settings) {\n        return this.stage.animations.createAnimation(this, settings);\n    }\n\n    transition(property, settings = null) {\n        if (settings === null) {\n            return this._getTransition(property);\n        } else {\n            this._setTransition(property, settings);\n            // We do not create/return the transition, because it would undo the 'lazy transition creation' optimization.\n            return null;\n        }\n    }\n\n    set transitions(object) {\n        let keys = Object.keys(object);\n        keys.forEach(property => {\n            this.transition(property, object[property]);\n        });\n    }\n\n    set smooth(object) {\n        let keys = Object.keys(object);\n        keys.forEach(property => {\n            let value = object[property];\n            if (Array.isArray(value)) {\n                this.setSmooth(property, value[0], value[1]);\n            } else {\n                this.setSmooth(property, value);\n            }\n        });\n    }\n\n    fastForward(property) {\n        if (this._transitions) {\n            let t = this._transitions[property];\n            if (t && t.isTransition) {\n                t.finish();\n            }\n        }\n    }\n\n    _getTransition(property) {\n        if (!this._transitions) {\n            this._transitions = {};\n        }\n        let t = this._transitions[property];\n        if (!t) {\n            // Create default transition.\n            t = new Transition(this.stage.transitions, this.stage.transitions.defaultTransitionSettings, this, property);\n        } else if (t.isTransitionSettings) {\n            // Upgrade to 'real' transition.\n            t = new Transition(\n                this.stage.transitions,\n                t,\n                this,\n                property\n            );\n        }\n        this._transitions[property] = t;\n        return t;\n    }\n\n    _setTransition(property, settings) {\n        if (!settings) {\n            this._removeTransition(property);\n        } else {\n            if (Utils.isObjectLiteral(settings)) {\n                // Convert plain object to proper settings object.\n                settings = this.stage.transitions.createSettings(settings);\n            }\n\n            if (!this._transitions) {\n                this._transitions = {};\n            }\n\n            let current = this._transitions[property];\n            if (current && current.isTransition) {\n                // Runtime settings change.\n                current.settings = settings;\n                return current;\n            } else {\n                // Initially, only set the settings and upgrade to a 'real' transition when it is used.\n                this._transitions[property] = settings;\n            }\n        }\n    }\n\n    _removeTransition(property) {\n        if (this._transitions) {\n            delete this._transitions[property];\n        }\n    }\n\n    getSmooth(property, v) {\n        let t = this._getTransition(property);\n        if (t && t.isAttached()) {\n            return t.targetValue;\n        } else {\n            return v;\n        }\n    }\n\n    setSmooth(property, v, settings) {\n        if (settings) {\n            this._setTransition(property, settings);\n        }\n        let t = this._getTransition(property);\n        t.start(v);\n        return t;\n    }\n\n    get flex() {\n        return this.__core.flex;\n    }\n\n    set flex(v) {\n        this.__core.flex = v;\n    }\n\n    get flexItem() {\n        return this.__core.flexItem;\n    }\n\n    set flexItem(v) {\n        this.__core.flexItem = v;\n    }\n\n    static isColorProperty(property) {\n        return property.toLowerCase().indexOf(\"color\") >= 0;\n    }\n\n    static getMerger(property) {\n        if (Element.isColorProperty(property)) {\n            return StageUtils.mergeColors;\n        } else {\n            return StageUtils.mergeNumbers;\n        }\n    }\n\n    toJSON() {\n        const ref = [`${this.constructor.name}`];\n        const tree = {};\n        tree[ref] = {};\n\n        if (this.hasChildren()) {\n            Element.collectChildren(tree[ref], this.__childList);\n        } else {\n            tree[ref] = {...Element.getProperties(this)};\n        }\n        return tree;\n    }\n\n    static collectChildren(tree, children) {\n        const childList = children;\n        for (let i = 0, j = childList.length; i < j; i++) {\n            const element = childList.getAt(i);\n            const ref = `${element.__ref || `Element-${element.id}`}`;\n            const properties = this.getProperties(element);\n\n            tree[ref] = {...properties};\n\n            if (element.hasChildren()) {\n                tree[ref].children = {};\n                this.collectChildren(\n                    tree[ref].children, element.__childList\n                );\n            }\n        }\n    }\n\n    static getProperties(element) {\n        const props = {};\n        const list = [\n            \"alpha\", \"active\", \"attached\", \"boundsMargin\", \"color\", \"clipping\", \"enabled\", \"h\", \"id\", \"isComponent\",\n            \"mount\", \"mountY\", \"mountX\", \"pivot\", \"pivotX\", \"pivotY\", \"ref\", \"renderOffscreen\", \"renderToTexture\", \"scale\",\n            \"scaleX\", \"scaleY\", \"state\", \"tag\", \"visible\", \"w\", \"x\", \"y\", \"zIndex\",\n            \"!!flex\", \"!!flexItem\", \"hasFocus()\", \"hasFinalFocus()\"\n        ];\n        let n = list.length;\n\n        while (n--) {\n            let key = list[n];\n            const getBoolean = /^!{2}/;\n            const isFunction = /\\(\\)$/;\n\n            if (getBoolean.test(key)) {\n                key = key.substring(2, key.length);\n                props[key] = !!element[key];\n            } else if (isFunction.test(key)) {\n                key = key.substring(0, key.length - 2);\n                if (typeof element[key] === \"function\") {\n                    props[key] = element[key]();\n                }\n            } else {\n                props[key] = element[key];\n            }\n        }\n        return {...props, ...element.getNonDefaults()};\n    }\n}\n\n// This gives a slight performance benefit compared to extending EventEmitter.\nEventEmitter.addAsMixin(Element);\n\nElement.prototype.isElement = 1;\n\nElement.id = 1;\n\n// Getters reused when referencing element (subobject) properties by a property path, as used in a transition or animation ('x', 'texture.x', etc).\nElement.PROP_GETTERS = new Map();\n\n// Setters reused when referencing element (subobject) properties by a property path, as used in a transition or animation ('x', 'texture.x', etc).\nElement.PROP_SETTERS = new Map();\n\nimport Texture from \"./Texture.mjs\";\nimport ImageTexture from \"../textures/ImageTexture.mjs\";\nimport TextTexture from \"../textures/TextTexture.mjs\";\nimport SourceTexture from \"../textures/SourceTexture.mjs\";\nimport Transition from \"../animation/Transition.mjs\";\nimport ElementChildList from \"./ElementChildList.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class StateMachine {\n\n    constructor() {\n        StateMachine.setupStateMachine(this);\n    }\n\n    static setupStateMachine(target) {\n        const targetConstructor = target.constructor;\n        const router = StateMachine.create(targetConstructor);\n        Object.setPrototypeOf(target, router.prototype);\n        target.constructor = targetConstructor;\n        target._initStateMachine();\n    }\n\n    /**\n     * Creates a state machine implementation.\n     * It extends the original type and should be used when creating new instances.\n     * The original type is available as static property 'original', and it must be used when subclassing as follows:\n     * const type = StateMachine.create(class YourNewStateMachineClass extends YourBaseStateMachineClass.original {  })\n     * @param {Class} type\n     * @returns {StateMachine}\n     */\n    static create(type) {\n        if (!type.hasOwnProperty('_sm')) {\n            // Only need to run once.\n            const stateMachineType = new StateMachineType(type);\n            type._sm = stateMachineType;\n        }\n\n        return type._sm.router;\n    }\n\n    /**\n     * Calls the specified method if it exists.\n     * @param {string} event\n     * @param {*...} args\n     */\n    fire(event, ...args) {\n        if (this._hasMethod(event)) {\n            return this[event](...args);\n        }\n    }\n\n    /**\n     * Returns the current state path (for example \"Initialized.Loading\").\n     * @returns {string}\n     * @protected\n     */\n    _getState() {\n        return this._state.__path;\n    }\n\n    /**\n     * Returns true iff statePath is (an ancestor of) currentStatePath.\n     * @param {string} statePath\n     * @param {string} currentStatePath\n     * @returns {Boolean}\n     * @protected\n     */\n    _inState(statePath, currentStatePath = this._state.__path) {\n        const state = this._sm.getStateByPath(statePath);\n        const currentState = this._sm.getStateByPath(currentStatePath);\n        const level = state.__level;\n        const stateAtLevel = StateMachine._getStateAtLevel(currentState, level);\n        return (stateAtLevel === state);\n    }\n\n    /**\n     * Returns true if the specified class member is defined for the currently set state.\n     * @param {string} name\n     * @returns {boolean}\n     * @protected\n     */\n    _hasMember(name) {\n        return !!this.constructor.prototype[name];\n    }\n\n    /**\n     * Returns true if the specified class member is a method for the currently set state.\n     * @param {string} name\n     * @returns {boolean}\n     * @protected\n     */\n    _hasMethod(name) {\n        const member = this.constructor.prototype[name];\n        return !!member && (typeof member === \"function\")\n    }\n\n    /**\n     * Switches to the specified state.\n     * @param {string} statePath\n     *   Substates are seperated by a underscores (for example \"Initialized.Loading\").\n     * @param {*[]} [args]\n     *   Args that are supplied in $enter and $exit events.\n     * @protected\n     */\n    _setState(statePath, args) {\n        const setStateId = ++this._setStateCounter;\n        this._setStateId = setStateId;\n\n        if (this._state.__path !== statePath) {\n            // Performance optimization.\n            let newState = this._sm._stateMap[statePath];\n            if (!newState) {\n                // Check for super state.\n                newState = this._sm.getStateByPath(statePath);\n            }\n\n            const prevState = this._state;\n\n            const hasDifferentEnterMethod = (newState.prototype.$enter !== this._state.prototype.$enter);\n            const hasDifferentExitMethod = (newState.prototype.$exit !== this._state.prototype.$exit);\n            if (hasDifferentEnterMethod || hasDifferentExitMethod) {\n                const sharedState = StateMachine._getSharedState(this._state, newState);\n                const context = {\n                    newState: newState.__path,\n                    prevState: prevState.__path,\n                    sharedState: sharedState.__path\n                };\n                const sharedLevel = sharedState.__level;\n\n                if (hasDifferentExitMethod) {\n                    const exitStates = StateMachine._getStatesUntilLevel(this._state, sharedLevel);\n                    for (let i = 0, n = exitStates.length; i < n; i++) {\n                        this.__setState(exitStates[i]);\n                        this._callExit(this._state, args, context);\n                        const stateChangeOverridden = (this._setStateId !== setStateId);\n                        if (stateChangeOverridden) {\n                            return;\n                        }\n                    }\n                }\n\n                if (hasDifferentEnterMethod) {\n                    const enterStates = StateMachine._getStatesUntilLevel(newState, sharedLevel).reverse();\n                    for (let i = 0, n = enterStates.length; i < n; i++) {\n                        this.__setState(enterStates[i]);\n                        this._callEnter(this._state, args, context);\n                        const stateChangeOverridden = (this._setStateId !== setStateId);\n                        if (stateChangeOverridden) {\n                            return;\n                        }\n                    }\n                }\n\n            }\n\n            this.__setState(newState);\n\n            if (this._changedState) {\n                const context = {\n                    newState: newState.__path,\n                    prevState: prevState.__path\n                };\n\n                if (args) {\n                    this._changedState(context, ...args);\n                } else {\n                    this._changedState(context);\n                }\n            }\n\n            if (this._onStateChange) {\n                const context = {\n                    newState: newState.__path,\n                    prevState: prevState.__path\n                };\n                this._onStateChange(context);\n            }\n\n        }\n    }\n\n    _callEnter(state, args = [], context) {\n        const hasParent = !!state.__parent;\n        if (state.prototype.$enter) {\n            if (!hasParent || (state.__parent.prototype.$enter !== state.prototype.$enter)) {\n                state.prototype.$enter.apply(this, [context, ...args]);\n            }\n        }\n    }\n\n    _callExit(state, args = [], context) {\n        const hasParent = !!state.__parent;\n        if (state.prototype.$exit) {\n            if (!hasParent || (state.__parent.prototype.$exit !== state.prototype.$exit)) {\n                state.prototype.$exit.apply(this, [context, ...args]);\n            }\n        }\n    }\n\n    __setState(state) {\n        this._state = state;\n        this._stateIndex = state.__index;\n        this.constructor = state;\n    }\n\n    _initStateMachine() {\n        this._state = null;\n        this._stateIndex = 0;\n        this._setStateCounter = 0;\n        this._sm = this._routedType._sm;\n        this.__setState(this._sm.getStateByPath(\"\"));\n        const context = {newState: \"\", prevState: undefined, sharedState: undefined};\n        this._callEnter(this._state, [], context);\n        this._onStateChange = undefined;\n    }\n\n    /**\n     * Between multiple member names, select the one specified in the deepest state.\n     * If multiple member names are specified in the same deepest state, the first one in the array is returned.\n     * @param {string[]} memberNames\n     * @returns {string|undefined}\n     * @protected\n     */\n    _getMostSpecificHandledMember(memberNames) {\n        let cur = this._state;\n        do {\n            for (let i = 0, n = memberNames.length; i < n; i++) {\n                const memberName = memberNames[i];\n                if (!cur.__parent) {\n                    if (cur.prototype[memberName]) {\n                        return memberName;\n                    }\n                } else {\n                    const alias = StateMachineType.getStateMemberAlias(cur.__path, memberName);\n                    if (this[alias]) {\n                        return memberName;\n                    }\n                }\n            }\n            cur = cur.__parent;\n        } while (cur);\n    }\n\n    static _getStatesUntilLevel(state, level) {\n        const states = [];\n        while (state.__level > level) {\n            states.push(state);\n            state = state.__parent;\n        }\n        return states;\n    }\n\n    static _getSharedState(state1, state2) {\n        const state1Array = StateMachine._getAncestorStates(state1);\n        const state2Array = StateMachine._getAncestorStates(state2);\n        const n = Math.min(state1Array.length, state2Array.length);\n        for (let i = 0; i < n; i++) {\n            if (state1Array[i] !== state2Array[i]) {\n                return state1Array[i - 1];\n            }\n        }\n        return state1Array[n - 1];\n    }\n\n    static _getAncestorStates(state) {\n        const result = [];\n        do {\n            result.push(state);\n        } while(state = state.__parent);\n        return result.reverse();\n    }\n\n    static _getStateAtLevel(state, level) {\n        if (level > state.__level) {\n            return undefined;\n        }\n\n        while(level < state.__level) {\n            state = state.__parent;\n        }\n        return state;\n    }\n}\n\nclass StateMachineType {\n\n    constructor(type) {\n        this._type = type;\n        this._router = null;\n\n        this.init();\n    }\n\n    get router() {\n        return this._router;\n    }\n\n    init() {\n        this._router = this._createRouter();\n\n        this._stateMap = this._getStateMap();\n\n        this._addStateMemberDelegatorsToRouter();\n\n    }\n\n    _createRouter() {\n        const type = this._type;\n\n        const router = class StateMachineRouter extends type {\n            constructor() {\n                super(...arguments);\n                if (!this.constructor.hasOwnProperty('_isRouter')) {\n                    throw new Error(`You need to extend ${type.name}.original instead of ${type.name}.`);\n                }\n            }\n        };\n        router._isRouter = true;\n        router.prototype._routedType = type;\n        router.original = type;\n\n        this._mixinStateMachineMethods(router);\n\n        return router;\n    }\n\n    _mixinStateMachineMethods(router) {\n        // Mixin the state machine methods, so that we reuse the methods instead of re-creating them.\n        const names = Object.getOwnPropertyNames(StateMachine.prototype);\n        for (let i = 0, n = names.length; i < n; i++) {\n            const name = names[i];\n            if (name !== \"constructor\") {\n                const descriptor = Object.getOwnPropertyDescriptor(StateMachine.prototype, name);\n                Object.defineProperty(router.prototype, name, descriptor);\n            }\n        }\n    }\n\n    _addStateMemberDelegatorsToRouter() {\n        const members = this._getAllMemberNames();\n\n        members.forEach(member => {\n            this._addMemberRouter(member);\n        });\n    }\n\n    /**\n     * @note We are generating code because it yields much better performance.\n     */\n    _addMemberRouter(member) {\n        const statePaths = Object.keys(this._stateMap);\n        const descriptors = [];\n        const aliases = [];\n        statePaths.forEach((statePath, index) => {\n            const state = this._stateMap[statePath];\n            const descriptor = this._getDescriptor(state, member);\n            if (descriptor) {\n                descriptors[index] = descriptor;\n\n                // Add to prototype.\n                const alias = StateMachineType.getStateMemberAlias(descriptor._source.__path, member);\n                aliases[index] = alias;\n\n                if (!this._router.prototype.hasOwnProperty(alias)) {\n                    Object.defineProperty(this._router.prototype, alias, descriptor);\n                }\n            } else {\n                descriptors[index] = null;\n                aliases[index] = null;\n            }\n        });\n\n        let type = undefined;\n        descriptors.forEach(descriptor => {\n            if (descriptor) {\n                const descType = this._getDescriptorType(descriptor);\n                if (type && (type !== descType)) {\n                    console.warn(`[Lightning] Member ${member} in ${this._type.name} has inconsistent types.`);\n                    return;\n                }\n                type = descType;\n            }\n        });\n\n        switch(type) {\n            case \"method\":\n                this._addMethodRouter(member, descriptors, aliases);\n                break;\n            case \"getter\":\n                this._addGetterSetterRouters(member);\n                break;\n            case \"property\":\n                console.warn(\"[Lightning] Fixed properties are not supported; please use a getter instead!\")\n                break;\n        }\n    }\n\n    _getDescriptor(state, member, isValid = () => true) {\n        let type = state;\n        let curState = state;\n\n        do {\n            const descriptor = Object.getOwnPropertyDescriptor(type.prototype, member);\n            if (descriptor) {\n                if (isValid(descriptor)) {\n                    descriptor._source = curState;\n                    return descriptor;\n                }\n            }\n            type = Object.getPrototypeOf(type);\n            if (type && type.hasOwnProperty('__state')) {\n                curState = type;\n            }\n        } while(type && type.prototype);\n        return undefined;\n    }\n\n    _getDescriptorType(descriptor) {\n        if (descriptor.get || descriptor.set) {\n            return 'getter';\n        } else {\n            if (typeof descriptor.value === \"function\") {\n                return 'method';\n            } else {\n                return 'property';\n            }\n        }\n    }\n\n    static _supportsSpread() {\n        if (this.__supportsSpread === undefined) {\n            this.__supportsSpread = false;\n            try {\n                const func = new Function(\"return [].concat(...arguments);\");\n                func();\n                this.__supportsSpread = true;\n            } catch(e) {}\n        }\n        return this.__supportsSpread;\n    }\n\n    _addMethodRouter(member, descriptors, aliases) {\n        const code = [\n            // The line ensures that, while debugging, your IDE won't open many tabs.\n            \"//@ sourceURL=StateMachineRouter.js\",\n            \"var i = this._stateIndex;\"\n        ];\n        let cur = aliases[0];\n        const supportsSpread = StateMachineType._supportsSpread();\n        for (let i = 1, n = aliases.length; i < n; i++) {\n            const alias = aliases[i];\n            if (alias !== cur) {\n                if (cur) {\n                    if (supportsSpread) {\n                        code.push(`if (i < ${i}) return this[\"${cur}\"](...arguments); else`);\n                    } else {\n                        code.push(`if (i < ${i}) return this[\"${cur}\"].apply(this, arguments); else`);\n                    }\n                } else {\n                    code.push(`if (i < ${i}) return ; else`);\n                }\n            }\n            cur = alias;\n        }\n        if (cur) {\n            if (supportsSpread) {\n                code.push(`return this[\"${cur}\"](...arguments);`);\n            } else {\n                code.push(`return this[\"${cur}\"].apply(this, arguments);`);\n            }\n        } else {\n            code.push(`;`);\n        }\n        const functionBody = code.join(\"\\n\");\n        const router = new Function([], functionBody);\n\n        const descriptor = {value: router};\n        Object.defineProperty(this._router.prototype, member, descriptor);\n    }\n\n    _addGetterSetterRouters(member) {\n        const getter = this._getGetterRouter(member);\n        const setter = this._getSetterRouter(member);\n        const descriptor = {\n            get: getter,\n            set: setter\n        };\n        Object.defineProperty(this._router.prototype, member, descriptor);\n    }\n\n    _getGetterRouter(member) {\n        const statePaths = Object.keys(this._stateMap);\n        const descriptors = [];\n        const aliases = [];\n        statePaths.forEach((statePath, index) => {\n            const state = this._stateMap[statePath];\n            const descriptor = this._getDescriptor(state, member, (descriptor => descriptor.get));\n            if (descriptor) {\n                descriptors[index] = descriptor;\n\n                // Add to prototype.\n                const alias = StateMachineType.getStateMemberAlias(descriptor._source.__path, member);\n                aliases[index] = alias;\n\n                if (!this._router.prototype.hasOwnProperty(alias)) {\n                    Object.defineProperty(this._router.prototype, alias, descriptor);\n                }\n            } else {\n                descriptors[index] = null;\n                aliases[index] = null;\n            }\n        });\n\n        const code = [\n            // The line ensures that, while debugging, your IDE won't open many tabs.\n            \"//@ sourceURL=StateMachineRouter.js\",\n            \"var i = this._stateIndex;\"\n        ];\n        let cur = aliases[0];\n        for (let i = 1, n = aliases.length; i < n; i++) {\n            const alias = aliases[i];\n            if (alias !== cur) {\n                if (cur) {\n                    code.push(`if (i < ${i}) return this[\"${cur}\"]; else`);\n                } else {\n                    code.push(`if (i < ${i}) return ; else`);\n                }\n            }\n            cur = alias;\n        }\n        if (cur) {\n            code.push(`return this[\"${cur}\"];`);\n        } else {\n            code.push(`;`);\n        }\n        const functionBody = code.join(\"\\n\");\n        const router = new Function([], functionBody);\n        return router;\n    }\n\n    _getSetterRouter(member) {\n        const statePaths = Object.keys(this._stateMap);\n        const descriptors = [];\n        const aliases = [];\n        statePaths.forEach((statePath, index) => {\n            const state = this._stateMap[statePath];\n            const descriptor = this._getDescriptor(state, member, (descriptor => descriptor.set));\n            if (descriptor) {\n                descriptors[index] = descriptor;\n\n                // Add to prototype.\n                const alias = StateMachineType.getStateMemberAlias(descriptor._source.__path, member);\n                aliases[index] = alias;\n\n                if (!this._router.prototype.hasOwnProperty(alias)) {\n                    Object.defineProperty(this._router.prototype, alias, descriptor);\n                }\n            } else {\n                descriptors[index] = null;\n                aliases[index] = null;\n            }\n        });\n\n        const code = [\n            // The line ensures that, while debugging, your IDE won't open many tabs.\n            \"//@ sourceURL=StateMachineRouter.js\",\n            \"var i = this._stateIndex;\"\n        ];\n        let cur = aliases[0];\n        for (let i = 1, n = aliases.length; i < n; i++) {\n            const alias = aliases[i];\n            if (alias !== cur) {\n                if (cur) {\n                    code.push(`if (i < ${i}) this[\"${cur}\"] = arg; else`);\n                } else {\n                    code.push(`if (i < ${i}) ; else`);\n                }\n            }\n            cur = alias;\n        }\n        if (cur) {\n            code.push(`this[\"${cur}\"] = arg;`);\n        } else {\n            code.push(`;`);\n        }\n        const functionBody = code.join(\"\\n\");\n        const router = new Function([\"arg\"], functionBody);\n        return router;\n    }\n\n    static getStateMemberAlias(path, member) {\n        return \"$\" + (path ? path + \".\" : \"\") + member;\n    }\n\n    _getAllMemberNames() {\n        const stateMap = this._stateMap;\n        const map = Object.keys(stateMap);\n        let members = new Set();\n        map.forEach(statePath => {\n            if (statePath === \"\") {\n                // Root state can be skipped: if the method only occurs in the root state, we don't need to re-delegate it based on state.\n                return;\n            }\n            const state = stateMap[statePath];\n            const names = this._getStateMemberNames(state);\n            names.forEach(name => {\n                members.add(name);\n            })\n        });\n        return [...members];\n    }\n\n    _getStateMemberNames(state) {\n        let type = state;\n        let members = new Set();\n        const isRoot = this._type === state;\n        do {\n            const names = this._getStateMemberNamesForType(type);\n            names.forEach(name => {\n                members.add(name)\n            });\n\n            type = Object.getPrototypeOf(type);\n        } while(type && type.prototype && (!type.hasOwnProperty(\"__state\") || isRoot));\n\n        return members;\n    }\n\n    _getStateMemberNamesForType(type) {\n        const memberNames = Object.getOwnPropertyNames(type.prototype);\n        return memberNames.filter(memberName => {\n            return (memberName !== \"constructor\") && !StateMachineType._isStateLocalMember(memberName);\n        });\n    }\n\n    static _isStateLocalMember(memberName) {\n        return (memberName === \"$enter\") || (memberName === \"$exit\");\n    }\n\n    getStateByPath(statePath) {\n        if (this._stateMap[statePath]) {\n            return this._stateMap[statePath];\n        }\n\n        // Search for closest match.\n        const parts = statePath.split(\".\");\n        while(parts.pop()) {\n            const statePath = parts.join(\".\");\n            if (this._stateMap[statePath]) {\n                return this._stateMap[statePath];\n            }\n        }\n    }\n\n    _getStateMap() {\n        if (!this._stateMap) {\n            this._stateMap = this._createStateMap();\n        }\n        return this._stateMap;\n    }\n\n    _createStateMap() {\n        const stateMap = {};\n        this._addState(this._type, null, \"\", stateMap);\n        return stateMap;\n    }\n\n    _addState(state, parentState, name, stateMap) {\n        state.__state = true;\n        state.__name = name;\n\n        this._addStaticStateProperty(state, parentState);\n\n        const parentPath = (parentState ? parentState.__path : \"\");\n        let path = (parentPath ? parentPath + \".\" : \"\") + name;\n        state.__path = path;\n        state.__level = parentState ? parentState.__level + 1 : 0;\n        state.__parent = parentState;\n        state.__index = Object.keys(stateMap).length;\n        stateMap[path] = state;\n\n        const states = state._states;\n        if (states) {\n            const isInheritedFromParent = (parentState && parentState._states === states);\n            if (!isInheritedFromParent) {\n                const subStates = state._states();\n                subStates.forEach(subState => {\n                    const stateName = StateMachineType._getStateName(subState);\n                    this._addState(subState, state, stateName, stateMap);\n                });\n            }\n        }\n    }\n\n    static _getStateName(state) {\n        const name = state.name;\n\n        const index = name.indexOf('$');\n        if (index > 0) {\n            // Strip off rollup name suffix.\n            return name.substr(0, index);\n        }\n\n        return name;\n    }\n\n    _addStaticStateProperty(state, parentState) {\n        if (parentState) {\n            const isClassStateLevel = parentState && !parentState.__parent;\n            if (isClassStateLevel) {\n                this._router[state.__name] = state;\n            } else {\n                parentState[state.__name] = state;\n            }\n        }\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Element from \"../tree/Element.mjs\";\nimport Utils from \"../tree/Utils.mjs\";\nimport StateMachine from \"./StateMachine.mjs\";\n\n/**\n * @extends StateMachine\n */\nexport default class Component extends Element {\n\n    constructor(stage, properties) {\n        super(stage);\n\n        // Encapsulate tags to prevent leaking.\n        this.tagRoot = true;\n\n        if (Utils.isObjectLiteral(properties)) {\n            Object.assign(this, properties);\n        }\n\n        this.__initialized = false;\n        this.__firstActive = false;\n        this.__firstEnable = false;\n\n        this.__signals = undefined;\n\n        this.__passSignals = undefined;\n\n        this.__construct();\n\n        // Quick-apply template.\n        const func = this.constructor.getTemplateFunc(this);\n        func.f(this, func.a);\n\n        this._build();\n    }\n\n    __start() {\n        StateMachine.setupStateMachine(this);\n        this._onStateChange = Component.prototype.__onStateChange;\n    }\n\n    get state() {\n        return this._getState();\n    }\n\n    __onStateChange() {\n        /* FIXME: Workaround for case, where application was shut but component still lives */\n        if (this.application) {\n            this.application.updateFocusPath();\n        }\n    }\n\n    _refocus() {\n        /* FIXME: Workaround for case, where application was shut but component still lives */\n        if (this.application) {\n            this.application.updateFocusPath();\n        }\n    }\n\n    static bindProp(name, func = null) {\n        return {__propertyBinding: true, __name: name, __func: func};\n    }\n\n    __bindProperty(propObj, targetObj, targetProp) {\n        // 1. find binding position: find object and property name to be bound\n        const obj = targetObj;\n        const prop = targetProp;\n        const propDependencies = Array.isArray(propObj.__name) ? propObj.__name : [propObj.__name];\n\n        // 2. create setters for every given dependency\n        for (let i = 0; i < propDependencies.length; i++) {\n            const propName = propDependencies[i];\n            const func = propObj.__func ? propObj.__func : (context) => context[propName];\n\n            if (!this.hasOwnProperty(propName)) {\n                this[`__prop_bindings_${propName}`] = [{__obj: obj, __prop: prop, __func: func}];\n                Object.defineProperty(this, propName, {\n                    set: (value) => {\n                        this[`__prop_${propName}`] = value;\n                        for (const {__obj, __prop, __func} of this[`__prop_bindings_${propName}`]) {\n                            __obj[__prop] = __func(this);\n                        }\n                    },\n                    get: () => this[`__prop_${propName}`]\n                });\n            } else {\n                this[`__prop_bindings_${propName}`].push({__obj: obj, __prop: prop, __func: func});\n            }\n        }\n    }\n\n    /**\n     * Returns a high-performance template patcher.\n     */\n    static getTemplateFunc(ctx) {\n        // We need a different template function per patch id.\n        const name = \"_templateFunc\";\n\n        // Be careful with class-based static inheritance.\n        const hasName = '__has' + name;\n        if (this[hasName] !== this) {\n            this[hasName] = this;\n            this[name] = this.parseTemplate(this._template(ctx));\n        }\n        return this[name];\n    }\n\n    static parseTemplate(obj) {\n        const context = {\n            loc: [],\n            store: [],\n            rid: 0\n        };\n\n        this.parseTemplateRec(obj, context, \"element\");\n\n        const code = context.loc.join(\";\\n\");\n        const f = new Function(\"element\", \"store\", code);\n        return {f: f, a: context.store};\n    }\n\n    static parseTemplateRec(obj, context, cursor) {\n        const store = context.store;\n        const loc = context.loc;\n        const keys = Object.keys(obj);\n        keys.forEach(key => {\n            let value = obj[key];\n            if (Utils.isUcChar(key.charCodeAt(0))) {\n                // Value must be expanded as well.\n                if (Utils.isObjectLiteral(value)) {\n                    // Ref.\n                    const childCursor = `r${key.replace(/[^a-z0-9]/gi, \"\") + context.rid}`;\n                    let type = value.type ? value.type : Element;\n                    if (type === Element) {\n                        loc.push(`var ${childCursor} = element.stage.createElement()`);\n                    } else {\n                        store.push(type);\n                        loc.push(`var ${childCursor} = new store[${store.length - 1}](${cursor}.stage)`);\n                    }\n                    loc.push(`${childCursor}.ref = \"${key}\"`);\n                    context.rid++;\n\n                    // Enter sub.\n                    this.parseTemplateRec(value, context, childCursor);\n\n                    loc.push(`${cursor}.childList.add(${childCursor})`);\n                } else if (Utils.isObject(value)) {\n                    // Dynamic assignment.\n                    store.push(value);\n                    loc.push(`${cursor}.childList.add(store[${store.length - 1}])`);\n                }\n            } else {\n                if (key === \"text\") {\n                    const propKey = cursor + \"__text\";\n                    loc.push(`var ${propKey} = ${cursor}.enableTextTexture()`);\n                    if (value.__propertyBinding === true) {\n                        // Allow binding entire objects to text property\n                        store.push(value);\n                        loc.push(`element.__bindProperty(store[${store.length - 1}], ${cursor}, \"${key}\")`);\n                    } else {\n                        this.parseTemplatePropRec(value, context, propKey);\n                    }\n                } else if (key === \"shader\" && Utils.isObjectLiteral(value)) {\n                    const shaderCursor = `${cursor}[\"shader\"]`\n                    store.push(value);\n                    loc.push(`${cursor}[\"${key}\"] = store[${store.length - 1}]`);\n                    this.parsePropertyBindings(value, context, shaderCursor);\n                } else if (key === \"texture\" && Utils.isObjectLiteral(value)) {\n                    const propKey = cursor + \"__texture\";\n                    const type = value.type;\n                    if (type) {\n                        store.push(type);\n                        loc.push(`var ${propKey} = new store[${store.length - 1}](${cursor}.stage)`);\n                        this.parseTemplatePropRec(value, context, propKey);\n                        loc.push(`${cursor}[\"${key}\"] = ${propKey}`);\n                    } else {\n                        loc.push(`${propKey} = ${cursor}.texture`);\n                        this.parseTemplatePropRec(value, context, propKey);\n                    }\n                } else if (Utils.isObjectLiteral(value) && value.__propertyBinding === true) {\n                    store.push(value);\n                    loc.push(`element.__bindProperty(store[${store.length - 1}], ${cursor}, \"${key}\")`);\n                } else {\n                    // Property;\n                    if (Utils.isNumber(value)) {\n                        loc.push(`${cursor}[\"${key}\"] = ${value}`);\n                    } else if (Utils.isBoolean(value)) {\n                        loc.push(`${cursor}[\"${key}\"] = ${value ? \"true\" : \"false\"}`);\n                    } else if (Utils.isObject(value) || Array.isArray(value)) {\n                        // Dynamic assignment.\n                        // Because literal objects may contain dynamics, we store the full object.\n                        store.push(value);\n                        loc.push(`${cursor}[\"${key}\"] = store[${store.length - 1}]`);\n                    } else {\n                        // String etc.\n                        loc.push(`${cursor}[\"${key}\"] = ${JSON.stringify(value)}`);\n                    }\n                }\n            }\n        });\n    }\n\n    static parseTemplatePropRec(obj, context, cursor) {\n        const store = context.store;\n        const loc = context.loc;\n        const keys = Object.keys(obj);\n        keys.forEach(key => {\n            if (key !== \"type\") {\n                const value = obj[key];\n                if (Utils.isNumber(value)) {\n                    loc.push(`${cursor}[\"${key}\"] = ${value}`);\n                } else if (Utils.isBoolean(value)) {\n                    loc.push(`${cursor}[\"${key}\"] = ${value ? \"true\" : \"false\"}`);\n                } else if (Utils.isObject(value) && value.__propertyBinding === true) {\n                    store.push(value);\n                    loc.push(`element.__bindProperty(store[${store.length - 1}], ${cursor}, \"${key}\")`);\n                } else if (Utils.isObject(value) || Array.isArray(value)) {\n                    // Dynamic assignment.\n                    // Because literal objects may contain dynamics, we store the full object.\n                    store.push(value);\n                    loc.push(`${cursor}[\"${key}\"] = store[${store.length - 1}]`);\n                } else {\n                    // String etc.\n                    loc.push(`${cursor}[\"${key}\"] = ${JSON.stringify(value)}`);\n                }\n            }\n        });\n    }\n\n    static parsePropertyBindings(obj, context, cursor) {\n        const store = context.store;\n        const loc = context.loc;\n        const keys = Object.keys(obj);\n        keys.forEach(key => {\n            if (key !== \"type\") {\n                const value = obj[key];\n                if (Utils.isObjectLiteral(value) && value.__propertyBinding === true) {\n                    store.push(value);\n                    loc.push(`element.__bindProperty(store[${store.length - 1}], ${cursor}, \"${key}\")`);\n                }\n            }\n        });\n    }\n\n    _onSetup() {\n        if (!this.__initialized) {\n            this._setup();\n        }\n    }\n\n    _setup() {\n    }\n\n    _onAttach() {\n        if (!this.__initialized) {\n            this.__init();\n            this.__initialized = true;\n        }\n\n        this._attach();\n    }\n\n    _attach() {\n    }\n\n    _onDetach() {\n        this._detach();\n    }\n\n    _detach() {\n    }\n\n    _onEnabled() {\n        if (!this.__firstEnable) {\n            this._firstEnable();\n            this.__firstEnable = true;\n        }\n\n        this._enable();\n    }\n\n    _firstEnable() {\n    }\n\n    _enable() {\n    }\n\n    _onDisabled() {\n        this._disable();\n    }\n\n    _disable() {\n    }\n\n    _onActive() {\n        if (!this.__firstActive) {\n            this._firstActive();\n            this.__firstActive = true;\n        }\n\n        this._active();\n    }\n\n    _firstActive() {\n    }\n\n    _active() {\n    }\n\n    _onInactive() {\n        this._inactive();\n    }\n\n    _inactive() {\n    }\n\n    get application() {\n        return this.stage.application;\n    }\n\n    __construct() {\n        this._construct();\n    }\n\n    _construct() {\n    }\n\n    _build() {\n    }\n\n    __init() {\n        this._init();\n    }\n\n    _init() {\n    }\n\n    _focus(newTarget, prevTarget) {\n    }\n\n    _unfocus(newTarget) {\n    }\n\n    _focusChange(target, newTarget) {\n    }\n\n    _getFocused() {\n        // Override to delegate focus to child components.\n        return this;\n    }\n\n    _setFocusSettings(settings) {\n        // Override to add custom settings. See Application._handleFocusSettings().\n    }\n\n    _handleFocusSettings(settings) {\n        // Override to react on custom settings. See Application._handleFocusSettings().\n    }\n\n    static _template() {\n        return {};\n    }\n\n    hasFinalFocus() {\n        let path = this.application._focusPath;\n        return path && path.length && path[path.length - 1] === this;\n    }\n\n    hasFocus() {\n        let path = this.application._focusPath;\n        return path && (path.indexOf(this) >= 0);\n    }\n\n    get cparent() {\n        return Component.getParent(this);\n    }\n\n    seekAncestorByType(type) {\n        let c = this.cparent;\n        while (c) {\n            if (c.constructor === type) {\n                return c;\n            }\n            c = c.cparent;\n        }\n    }\n\n    getSharedAncestorComponent(element) {\n        let ancestor = this.getSharedAncestor(element);\n        while (ancestor && !ancestor.isComponent) {\n            ancestor = ancestor.parent;\n        }\n        return ancestor;\n    }\n\n    get signals() {\n        return this.__signals;\n    }\n\n    set signals(v) {\n        if (!Utils.isObjectLiteral(v)) {\n            this._throwError(\"Signals: specify an object with signal-to-fire mappings\");\n        }\n        this.__signals = v;\n    }\n\n    set alterSignals(v) {\n        if (!Utils.isObjectLiteral(v)) {\n            this._throwError(\"Signals: specify an object with signal-to-fire mappings\");\n        }\n        if (!this.__signals) {\n            this.__signals = {};\n        }\n        for (let key in v) {\n            const d = v[key];\n            if (d === undefined) {\n                delete this.__signals[key];\n            } else {\n                this.__signals[key] = v;\n            }\n        }\n    }\n\n    get passSignals() {\n        return this.__passSignals || {};\n    }\n\n    set passSignals(v) {\n        this.__passSignals = Object.assign(this.__passSignals || {}, v);\n    }\n\n    set alterPassSignals(v) {\n        if (!Utils.isObjectLiteral(v)) {\n            this._throwError(\"Signals: specify an object with signal-to-fire mappings\");\n        }\n        if (!this.__passSignals) {\n            this.__passSignals = {};\n        }\n        for (let key in v) {\n            const d = v[key];\n            if (d === undefined) {\n                delete this.__passSignals[key];\n            } else {\n                this.__passSignals[key] = v;\n            }\n        }\n    }\n\n    /**\n     * Signals the parent of the specified event.\n     * A parent/ancestor that wishes to handle the signal should set the 'signals' property on this component.\n     * @param {string} event\n     * @param {...*} args\n     */\n    signal(event, ...args) {\n        return this._signal(event, args);\n    }\n\n    _signal(event, args) {\n        const signalParent = this._getParentSignalHandler();\n        if (signalParent) {\n            if (this.__signals) {\n                let fireEvent = this.__signals[event];\n                if (fireEvent === false) {\n                    // Ignore event.\n                    return;\n                }\n                if (fireEvent) {\n                    if (fireEvent === true) {\n                        fireEvent = event;\n                    }\n \n                    if (Utils.isFunction(fireEvent)) {\n                        return fireEvent(...args);\n                    }\n\n                    if (signalParent._hasMethod(fireEvent)) {\n                        return signalParent[fireEvent](...args);\n                    }\n                }\n            }\n\n            let passSignal = (this.__passSignals && this.__passSignals[event]);\n            if (passSignal) {\n                // Bubble up.\n                if (passSignal && passSignal !== true) {\n                    // Replace signal name.\n                    event = passSignal;\n                }\n\n                return signalParent._signal(event, args);\n            }\n        }\n    }\n\n    _getParentSignalHandler() {\n        return this.cparent ? this.cparent._getSignalHandler() : null;\n    }\n\n    _getSignalHandler() {\n        if (this._signalProxy) {\n            return this.cparent ? this.cparent._getSignalHandler() : null;\n        }\n        return this;\n    }\n\n    get _signalProxy() {\n        return false;\n    }\n\n    fireAncestors(name, ...args) {\n        if (!name.startsWith('$')) {\n            throw new Error(\"Ancestor event name must be prefixed by dollar sign.\");\n        }\n\n        const parent = this._getParentSignalHandler();\n        if (parent) {\n            return parent._doFireAncestors(name, args);\n        }\n    }\n\n    _doFireAncestors(name, args) {\n        if (this._hasMethod(name)) {\n            return this.fire(name, ...args);\n        } else {\n            const signalParent = this._getParentSignalHandler();\n            if (signalParent) {\n                return signalParent._doFireAncestors(name, args);\n            }\n        }\n    }\n\n    static collectSubComponents(subs, element) {\n        if (element.hasChildren()) {\n            const childList = element.__childList;\n            for (let i = 0, n = childList.length; i < n; i++) {\n                const child = childList.getAt(i);\n                if (child.isComponent) {\n                    subs.push(child);\n                } else {\n                    Component.collectSubComponents(subs, child);\n                }\n            }\n        }\n    }\n\n    static getComponent(element) {\n        let parent = element;\n        while (parent && !parent.isComponent) {\n            parent = parent.parent;\n        }\n        return parent;\n    }\n\n    static getParent(element) {\n        return Component.getComponent(element.parent);\n    }\n}\n\nComponent.prototype.isComponent = true;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class CoreQuadList {\n\n    constructor(ctx) {\n\n        this.ctx = ctx;\n\n        this.quadTextures = [];\n\n        this.quadElements = [];\n    }\n\n    get length() {\n        return this.quadTextures.length;\n    }\n\n    reset() {\n        this.quadTextures = [];\n        this.quadElements = [];\n        this.dataLength = 0;\n    }\n\n    getElement(index) {\n        return this.quadElements[index]._element;\n    }\n\n    getElementCore(index) {\n        return this.quadElements[index];\n    }\n\n    getTexture(index) {\n        return this.quadTextures[index];\n    }\n\n    getTextureWidth(index) {\n        let nativeTexture = this.quadTextures[index];\n        if (nativeTexture.w) {\n            // Render texture;\n            return nativeTexture.w;\n        } else {\n            return this.quadElements[index]._displayedTextureSource.w;\n        }\n    }\n\n    getTextureHeight(index) {\n        let nativeTexture = this.quadTextures[index];\n        if (nativeTexture.h) {\n            // Render texture;\n            return nativeTexture.h;\n        } else {\n            return this.quadElements[index]._displayedTextureSource.h;\n        }\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport CoreQuadList from \"../../tree/core/CoreQuadList.mjs\";\n\nexport default class WebGLCoreQuadList extends CoreQuadList {\n\n    constructor(ctx) {\n        super(ctx);\n\n        // Allocate a fairly big chunk of memory that should be enough to support ~100000 (default) quads.\n        // We do not (want to) handle memory overflow.\n        const byteSize = ctx.stage.getOption('bufferMemory');\n\n        this.dataLength = 0;\n\n        this.data = new ArrayBuffer(byteSize);\n        this.floats = new Float32Array(this.data);\n        this.uints = new Uint32Array(this.data);\n    }\n\n    getAttribsDataByteOffset(index) {\n        // Where this quad can be found in the attribs buffer.\n        return index * 80;\n    }\n\n    getQuadContents() {\n        // Debug: log contents of quad buffer.\n        let floats = this.floats;\n        let uints = this.uints;\n        let lines = [];\n        for (let i = 1; i <= this.length; i++) {\n            let str = 'entry ' + i + ': ';\n            for (let j = 0; j < 4; j++) {\n                let b = i * 20 + j * 4;\n                str += floats[b] + ',' + floats[b+1] + ':' + floats[b+2] + ',' + floats[b+3] + '[' + uints[b+4].toString(16) + '] ';\n            }\n            lines.push(str);\n        }\n\n        return lines;\n    }\n\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nexport default class CoreQuadOperation {\n\n    constructor(ctx, shader, shaderOwner, renderTextureInfo, scissor, index) {\n\n        this.ctx = ctx;\n        this.shader = shader;\n        this.shaderOwner = shaderOwner;\n        this.renderTextureInfo = renderTextureInfo;\n        this.scissor = scissor;\n        this.index = index;\n        this.length = 0;\n\n    }\n\n    get quads() {\n        return this.ctx.renderState.quads;\n    }\n\n    getTexture(index) {\n        return this.quads.getTexture(this.index + index);\n    }\n\n    getElementCore(index) {\n        return this.quads.getElementCore(this.index + index);\n    }\n\n    getElement(index) {\n        return this.quads.getElement(this.index + index);\n    }\n\n    getElementWidth(index) {\n        return this.getElement(index).renderWidth;\n    }\n\n    getElementHeight(index) {\n        return this.getElement(index).renderHeight;\n    }\n\n    getTextureWidth(index) {\n        return this.quads.getTextureWidth(this.index + index);\n    }\n\n    getTextureHeight(index) {\n        return this.quads.getTextureHeight(this.index + index);\n    }\n\n    getRenderWidth() {\n        if (this.renderTextureInfo) {\n            return this.renderTextureInfo.w;\n        } else {\n            return this.ctx.stage.w;\n        }\n    }\n\n    getRenderHeight() {\n        if (this.renderTextureInfo) {\n            return this.renderTextureInfo.h;\n        } else {\n            return this.ctx.stage.h;\n        }\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport CoreQuadOperation from \"../../tree/core/CoreQuadOperation.mjs\";\n\nexport default class WebGLCoreQuadOperation extends CoreQuadOperation {\n\n    constructor(ctx, shader, shaderOwner, renderTextureInfo, scissor, index) {\n        super(ctx, shader, shaderOwner, renderTextureInfo, scissor, index);\n\n        this.extraAttribsDataByteOffset = 0;\n    }\n\n    getAttribsDataByteOffset(index) {\n        // Where this quad can be found in the attribs buffer.\n        return this.quads.getAttribsDataByteOffset(this.index + index);\n    }\n\n    /**\n     * Returns the relative pixel coordinates in the shader owner to gl position coordinates in the render texture.\n     * @param x\n     * @param y\n     * @return {number[]}\n     */\n    getNormalRenderTextureCoords(x, y) {\n        let coords = this.shaderOwner.getRenderTextureCoords(x, y);\n        coords[0] /= this.getRenderWidth();\n        coords[1] /= this.getRenderHeight();\n        coords[0] = coords[0] * 2 - 1;\n        coords[1] = 1 - coords[1] * 2;\n        return coords;\n    }\n\n    getProjection() {\n        if (this.renderTextureInfo === null) {\n            return this.ctx.renderExec._projection;\n        } else {\n            return this.renderTextureInfo.nativeTexture.projection;\n        }\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nexport default class CoreRenderExecutor {\n\n    constructor(ctx) {\n        this.ctx = ctx;\n\n        this.renderState = ctx.renderState;\n\n        this.gl = this.ctx.stage.gl;\n    }\n\n    destroy() {\n        this.ctx = null;\n        this.renderState = null;\n        this.gl = null;\n\n        delete this.ctx;\n        delete this.renderState;\n        delete this.gl;\n    }\n\n    _reset() {\n        this._bindRenderTexture(null);\n        this._setScissor(null);\n        this._clearRenderTexture();\n    }\n\n    execute() {\n        this._reset();\n\n        let qops = this.renderState.quadOperations;\n\n        let i = 0, j = 0, n = qops.length;\n        while (i < n) {\n            this._processQuadOperation(qops[i]);\n            i++;\n        }\n    }\n\n    _processQuadOperation(quadOperation) {\n        if (quadOperation.renderTextureInfo && quadOperation.renderTextureInfo.ignore) {\n            // Ignore quad operations when we are 're-using' another texture as the render texture result.\n            return;\n        }\n\n        this._setupQuadOperation(quadOperation);\n        this._execQuadOperation(quadOperation);\n\n    }\n\n    _setupQuadOperation(quadOperation) {\n    }\n\n    _execQuadOperation(op) {\n        // Set render texture.\n        let nativeTexture = op.renderTextureInfo ? op.renderTextureInfo.nativeTexture : null;\n\n        if (this._renderTexture !== nativeTexture) {\n            this._bindRenderTexture(nativeTexture);\n        }\n\n        if (op.renderTextureInfo && !op.renderTextureInfo.cleared) {\n            this._setScissor(null);\n            this._clearRenderTexture();\n            op.renderTextureInfo.cleared = true;\n            this._setScissor(op.scissor);\n        } else {\n            this._setScissor(op.scissor);\n        }\n\n        this._renderQuadOperation(op);\n    }\n\n    _renderQuadOperation(op) {\n    }\n\n    _bindRenderTexture(renderTexture) {\n        this._renderTexture = renderTexture;\n    }\n\n    _clearRenderTexture(renderTexture) {\n    }\n\n    _setScissor(area) {\n    }\n\n}\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport CoreRenderExecutor from \"../../tree/core/CoreRenderExecutor.mjs\";\n\nexport default class WebGLCoreRenderExecutor extends CoreRenderExecutor {\n\n    constructor(ctx) {\n        super(ctx)\n\n        this.gl = this.ctx.stage.gl;\n\n        this.init();\n    }\n\n    init() {\n        let gl = this.gl;\n\n        // Create new sharable buffer for params.\n        this._attribsBuffer = gl.createBuffer();\n\n        let maxQuads = Math.floor(this.renderState.quads.data.byteLength / 80);\n\n        // Init webgl arrays.\n        let allIndices = new Uint16Array(maxQuads * 6);\n\n        // fill the indices with the quads to draw.\n        for (let i = 0, j = 0; i < maxQuads; i += 6, j += 4) {\n            allIndices[i] = j;\n            allIndices[i + 1] = j + 1;\n            allIndices[i + 2] = j + 2;\n            allIndices[i + 3] = j;\n            allIndices[i + 4] = j + 2;\n            allIndices[i + 5] = j + 3;\n        }\n\n        // The quads buffer can be (re)used to draw a range of quads.\n        this._quadsBuffer = gl.createBuffer();\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._quadsBuffer);\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, allIndices, gl.STATIC_DRAW);\n\n        // The matrix that causes the [0,0 - W,H] box to map to [-1,-1 - 1,1] in the end results.\n        this._projection = new Float32Array([2/this.ctx.stage.coordsWidth, -2/this.ctx.stage.coordsHeight]);\n\n    }\n\n    destroy() {\n        super.destroy();\n        this.gl.deleteBuffer(this._attribsBuffer);\n        this.gl.deleteBuffer(this._quadsBuffer);\n\n        this.gl = null;\n        delete this.gl;\n    }\n\n    _reset() {\n        super._reset();\n\n        let gl = this.gl;\n        gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n        gl.enable(gl.BLEND);\n        gl.disable(gl.DEPTH_TEST);\n\n        this._stopShaderProgram();\n        this._setupBuffers();\n    }\n\n    _setupBuffers() {\n        let gl = this.gl;\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._quadsBuffer);\n        let element = new Float32Array(this.renderState.quads.data, 0, this.renderState.quads.dataLength);\n        gl.bindBuffer(gl.ARRAY_BUFFER, this._attribsBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, element, gl.DYNAMIC_DRAW);\n    }\n\n    _setupQuadOperation(quadOperation) {\n        super._setupQuadOperation(quadOperation);\n        this._useShaderProgram(quadOperation.shader, quadOperation);\n    }\n\n    _renderQuadOperation(op) {\n        let shader = op.shader;\n\n        if (op.length || op.shader.addEmpty()) {\n            shader.beforeDraw(op);\n            shader.draw(op);\n            shader.afterDraw(op);\n        }\n    }\n\n    /**\n     * @param {WebGLShader} shader;\n     * @param {CoreQuadOperation} operation;\n     */\n    _useShaderProgram(shader, operation) {\n        if (!shader.hasSameProgram(this._currentShaderProgram)) {\n            if (this._currentShaderProgram) {\n                this._currentShaderProgram.stopProgram();\n            }\n            shader.useProgram();\n            this._currentShaderProgram = shader;\n        }\n        shader.setupUniforms(operation);\n    }\n\n    _stopShaderProgram() {\n        if (this._currentShaderProgram) {\n            // The currently used shader program should be stopped gracefully.\n            this._currentShaderProgram.stopProgram();\n            this._currentShaderProgram = null;\n        }\n    }\n\n    _bindRenderTexture(renderTexture) {\n        super._bindRenderTexture(renderTexture);\n\n        let gl = this.gl;\n        if (!this._renderTexture) {\n            gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n            gl.viewport(0,0,this.ctx.stage.w,this.ctx.stage.h);\n        } else {\n            gl.bindFramebuffer(gl.FRAMEBUFFER, this._renderTexture.framebuffer);\n            gl.viewport(0,0,this._renderTexture.w, this._renderTexture.h);\n        }\n    }\n\n    _clearRenderTexture() {\n        super._clearRenderTexture();\n        let gl = this.gl;\n        if (!this._renderTexture) {\n            let glClearColor = this.ctx.stage.getClearColor();\n            if (glClearColor) {\n                gl.clearColor(glClearColor[0] * glClearColor[3], glClearColor[1] * glClearColor[3], glClearColor[2] * glClearColor[3], glClearColor[3]);\n                gl.clear(gl.COLOR_BUFFER_BIT);\n            }\n        } else {\n            // Clear texture.\n            gl.clearColor(0, 0, 0, 0);\n            gl.clear(gl.COLOR_BUFFER_BIT);\n        }\n    }\n\n    _setScissor(area) {\n        super._setScissor(area);\n\n        if (this._scissor === area) {\n            return;\n        }\n        this._scissor = area;\n\n        let gl = this.gl;\n        if (!area) {\n            gl.disable(gl.SCISSOR_TEST);\n        } else {\n            gl.enable(gl.SCISSOR_TEST);\n            let precision = this.ctx.stage.getRenderPrecision();\n            let y = area[1];\n            if (this._renderTexture === null) {\n                // Flip.\n                y = (this.ctx.stage.h / precision - (area[1] + area[3]));\n            }\n            gl.scissor(Math.round(area[0] * precision), Math.round(y * precision), Math.round(area[2] * precision), Math.round(area[3] * precision));\n        }\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class CoreRenderState {\n\n    constructor(ctx) {\n        this.ctx = ctx;\n\n        this.stage = ctx.stage;\n\n        this.defaultShader = this.stage.renderer.getDefaultShader(ctx);\n\n        this.renderer = ctx.stage.renderer;\n\n        this.quads = this.renderer.createCoreQuadList(ctx);\n\n    }\n\n    reset() {\n        this._renderTextureInfo = null;\n\n        this._scissor = null;\n\n        this._shader = null;\n\n        this._shaderOwner = null;\n\n        this._realShader = null;\n\n        this._check = false;\n\n        this.quadOperations = [];\n\n        this._texturizer = null;\n\n        this._texturizerTemporary = false;\n\n        this._quadOperation = null;\n\n        this.quads.reset();\n\n        this._temporaryTexturizers = [];\n        \n        this._isCachingTexturizer = false;\n\n    }\n\n    get length() {\n        return this.quads.quadTextures.length;\n    }\n\n    setShader(shader, owner) {\n        if (this._shaderOwner !== owner || this._realShader !== shader) {\n            // Same shader owner: active shader is also the same.\n            // Prevent any shader usage to save performance.\n\n            this._realShader = shader;\n\n            if (shader.useDefault()) {\n                // Use the default shader when possible to prevent unnecessary program changes.\n                shader = this.defaultShader;\n            }\n            if (this._shader !== shader || this._shaderOwner !== owner) {\n                this._shader = shader;\n                this._shaderOwner = owner;\n                this._check = true;\n            }\n        }\n    }\n\n    get renderTextureInfo() {\n        return this._renderTextureInfo;\n    }\n\n    setScissor(area) {\n        if (this._scissor !== area) {\n            if (area) {\n                this._scissor = area;\n            } else {\n                this._scissor = null;\n            }\n            this._check = true;\n        }\n    }\n\n    getScissor() {\n        return this._scissor;\n    }\n\n    setRenderTextureInfo(renderTextureInfo) {\n        if (this._renderTextureInfo !== renderTextureInfo) {\n            this._renderTextureInfo = renderTextureInfo;\n            this._scissor = null;\n            this._check = true;\n        }\n    }\n\n    /**\n     * Sets the texturizer to be drawn during subsequent addQuads.\n     * @param {ElementTexturizer} texturizer\n     */\n    setTexturizer(texturizer, cache = false) {\n        this._texturizer = texturizer;\n        this._cacheTexturizer = cache;\n    }\n\n    set isCachingTexturizer(v) {\n        this._isCachingTexturizer = v;\n    }\n\n    get isCachingTexturizer() {\n        return this._isCachingTexturizer;\n    }\n\n    addQuad(elementCore) {\n        if (!this._quadOperation) {\n            this._createQuadOperation();\n        } else if (this._check && this._hasChanges()) {\n            this._finishQuadOperation();\n            this._check = false;\n        }\n\n        let nativeTexture = null;\n        if (this._texturizer) {\n            nativeTexture = this._texturizer.getResultTexture();\n\n            if (!this._cacheTexturizer) {\n                // We can release the temporary texture immediately after finalizing this quad operation.\n                this._temporaryTexturizers.push(this._texturizer);\n            }\n        }\n\n        if (!nativeTexture) {\n            nativeTexture = elementCore._displayedTextureSource.nativeTexture;\n        }\n\n        if (this._renderTextureInfo) {\n            if (this._shader === this.defaultShader && this._renderTextureInfo.empty) {\n                // The texture might be reusable under some conditions. We will check them in ElementCore.renderer.\n                this._renderTextureInfo.nativeTexture = nativeTexture;\n                this._renderTextureInfo.offset = this.length;\n            } else {\n                // It is not possible to reuse another texture when there is more than one quad.\n                this._renderTextureInfo.nativeTexture = null;\n            }\n            this._renderTextureInfo.empty = false;\n        }\n\n        this.quads.quadTextures.push(nativeTexture);\n        this.quads.quadElements.push(elementCore);\n\n        this._quadOperation.length++;\n\n        this.renderer.addQuad(this, this.quads, this.length - 1)\n    }\n\n    finishedRenderTexture() {\n        if (this._renderTextureInfo.nativeTexture) {\n            // There was only one texture drawn in this render texture.\n            // Check if we can reuse it so that we can optimize out an unnecessary render texture operation.\n            // (it should exactly span this render texture).\n            if (!this._isRenderTextureReusable()) {\n                this._renderTextureInfo.nativeTexture = null;\n            }\n        }\n    }\n\n    _isRenderTextureReusable() {\n        const offset = this._renderTextureInfo.offset;\n        return (this.quads.quadTextures[offset].w === this._renderTextureInfo.w) &&\n            (this.quads.quadTextures[offset].h === this._renderTextureInfo.h) &&\n            this.renderer.isRenderTextureReusable(this, this._renderTextureInfo)\n    }\n\n    _hasChanges() {\n        let q = this._quadOperation;\n        if (this._shader !== q.shader) return true;\n        if (this._shaderOwner !== q.shaderOwner) return true;\n        if (this._renderTextureInfo !== q.renderTextureInfo) return true;\n        if (this._scissor !== q.scissor) {\n            if ((this._scissor[0] !== q.scissor[0]) || (this._scissor[1] !== q.scissor[1]) || (this._scissor[2] !== q.scissor[2]) || (this._scissor[3] !== q.scissor[3])) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    _finishQuadOperation(create = true) {\n        if (this._quadOperation) {\n            if (this._quadOperation.length || this._shader.addEmpty()) {\n                if (!this._quadOperation.scissor || ((this._quadOperation.scissor[2] > 0) && (this._quadOperation.scissor[3] > 0))) {\n                    // Ignore empty clipping regions.\n                    this.quadOperations.push(this._quadOperation);\n                }\n            }\n\n            if (this._temporaryTexturizers.length) {\n                for (let i = 0, n = this._temporaryTexturizers.length; i < n; i++) {\n                    // We can now reuse these render-to-textures in subsequent stages.\n                    // Huge performance benefit when filtering (fast blur).\n                    this._temporaryTexturizers[i].releaseRenderTexture();\n                }\n                this._temporaryTexturizers = [];\n            }\n\n            this._quadOperation = null;\n        }\n\n        if (create) {\n            this._createQuadOperation();\n        }\n    }\n\n    _createQuadOperation() {\n        this._quadOperation = this.renderer.createCoreQuadOperation(\n            this.ctx,\n            this._shader,\n            this._shaderOwner,\n            this._renderTextureInfo,\n            this._scissor,\n            this.length\n        );\n        this._check = false;\n    }\n\n    finish() {\n        if (this._quadOperation) {\n            // Add remaining.\n            this._finishQuadOperation(false);\n        }\n\n        this.renderer.finishRenderState(this);\n    }\n\n}\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Base functionality for shader setup/destroy.\n */\nexport default class WebGLShaderProgram {\n\n    constructor(vertexShaderSource, fragmentShaderSource) {\n\n        this.vertexShaderSource = vertexShaderSource;\n        this.fragmentShaderSource = fragmentShaderSource;\n\n        this._program = null;\n        this.gl = null;\n\n        this._uniformLocations = new Map();\n        this._attributeLocations = new Map();\n\n        this._currentUniformValues = {};\n    }\n\n    compile(gl) {\n        if (this._program) return;\n\n        this.gl = gl;\n\n        this._program = gl.createProgram();\n\n        let glVertShader = this._glCompile(gl.VERTEX_SHADER, this.vertexShaderSource);\n        let glFragShader = this._glCompile(gl.FRAGMENT_SHADER, this.fragmentShaderSource);\n\n        gl.attachShader(this._program, glVertShader);\n        gl.attachShader(this._program, glFragShader);\n        gl.linkProgram(this._program);\n\n        // if linking fails, then log and cleanup\n        if (!gl.getProgramParameter(this._program, gl.LINK_STATUS)) {\n            console.error('[Lightning] Error: Could not initialize shader.');\n            console.error('[Lightning] gl.VALIDATE_STATUS', gl.getProgramParameter(this._program, gl.VALIDATE_STATUS));\n            console.error('[Lightning] gl.getError()', gl.getError());\n\n            // if there is a program info log, log it\n            if (gl.getProgramInfoLog(this._program) !== '') {\n                console.warn('[Lightning] Warning: gl.getProgramInfoLog()', gl.getProgramInfoLog(this._program));\n            }\n\n            gl.deleteProgram(this._program);\n            this._program = null;\n        }\n\n        // clean up some shaders\n        gl.deleteShader(glVertShader);\n        gl.deleteShader(glFragShader);\n    }\n\n    _glCompile(type, src) {\n        let shader = this.gl.createShader(type);\n\n        this.gl.shaderSource(shader, src);\n        this.gl.compileShader(shader);\n\n        if (!this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS)) {\n            console.error('[Lightning]', this.constructor.name, 'Type: ' + (type === this.gl.VERTEX_SHADER ? 'vertex shader' : 'fragment shader') );\n            console.error('[Lightning]', this.gl.getShaderInfoLog(shader));\n            let idx = 0;\n            console.error('[Lightning]', \"========== source ==========\\n\" + src.split(\"\\n\").map(line => \"\" + (++idx) + \": \" + line).join(\"\\n\"));\n            return null;\n        }\n\n        return shader;\n    }\n\n    getUniformLocation(name) {\n        let location = this._uniformLocations.get(name);\n        if (location === undefined) {\n            location = this.gl.getUniformLocation(this._program, name);\n            this._uniformLocations.set(name, location);\n        }\n\n        return location;\n    }\n\n    getAttribLocation(name) {\n        let location = this._attributeLocations.get(name);\n        if (location === undefined) {\n            location = this.gl.getAttribLocation(this._program, name);\n            this._attributeLocations.set(name, location);\n        }\n\n        return location;\n    }\n\n    destroy() {\n        if (this._program) {\n            this.gl.deleteProgram(this._program);\n        }\n\n        this._attributeLocations = null;\n        this._currentUniformValues = null;\n        this.fragmentShaderSource = null;\n        this._program = null;\n        this.gl = null;\n        this._uniformLocations = null;\n        this.vertexShaderSource = null;  \n\n        delete this.vertexShaderSource;\n        delete this._program;        \n        delete this._currentUniformValues;\n        delete this.fragmentShaderSource;\n        delete this.gl;\n        delete this._uniformLocations;\n        delete this._attributeLocations;\n\n    }\n\n    get glProgram() {\n        return this._program;\n    }\n\n    get compiled() {\n        return !!this._program;\n    }\n\n    _valueEquals(v1, v2) {\n        // Uniform value is either a typed array or a numeric value.\n        if (v1.length && v2.length) {\n            for (let i = 0, n = v1.length; i < n; i++) {\n                if (v1[i] !== v2[i]) return false;\n            }\n            return true;\n        } else {\n            return (v1 === v2);\n        }\n    }\n\n    _valueClone(v) {\n        if (v.length) {\n            return v.slice(0);\n        } else {\n            return v;\n        }\n    }\n\n    setUniformValue(name, value, glFunction) {\n        let v = this._currentUniformValues[name];\n        if (v === undefined || !this._valueEquals(v, value)) {\n            let clonedValue = this._valueClone(value);\n            this._currentUniformValues[name] = clonedValue;\n\n            let loc = this.getUniformLocation(name);\n            if (loc) {\n                let isMatrix = (glFunction === this.gl.uniformMatrix2fv || glFunction === this.gl.uniformMatrix3fv || glFunction === this.gl.uniformMatrix4fv);\n                if (isMatrix) {\n                    glFunction.call(this.gl, loc, false, clonedValue);\n                } else {\n                    glFunction.call(this.gl, loc, clonedValue);\n                }\n            }\n        }\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport WebGLShaderProgram from \"./WebGLShaderProgram.mjs\";\nimport Shader from \"../../tree/Shader.mjs\";\n\nexport default class WebGLShader extends Shader {\n\n    constructor(ctx) {\n        super(ctx);\n\n        const stage = ctx.stage;\n\n        this._program = stage.renderer.shaderPrograms.get(this.constructor);\n        if (!this._program) {\n            this._program = new WebGLShaderProgram(this.constructor.vertexShaderSource, this.constructor.fragmentShaderSource);\n\n            // Let the vbo context perform garbage collection.\n            stage.renderer.shaderPrograms.set(this.constructor, this._program);\n        }\n\n        this.gl = stage.gl;\n    }\n\n    get glProgram() {\n        return this._program.glProgram;\n    }\n\n    _init() {\n        if (!this._initialized) {\n            this.initialize();\n            this._initialized = true;\n        }\n    }\n\n    initialize() {\n        this._program.compile(this.gl);\n    }\n\n    get initialized() {\n        return this._initialized;\n    }\n\n    _uniform(name) {\n        return this._program.getUniformLocation(name);\n    }\n\n    _attrib(name) {\n        return this._program.getAttribLocation(name);\n    }\n\n    _setUniform(name, value, glFunction) {\n        this._program.setUniformValue(name, value, glFunction);\n    }\n\n    useProgram() {\n        this._init();\n        this.gl.useProgram(this.glProgram);\n        this.beforeUsage();\n        this.enableAttribs();\n    }\n\n    stopProgram() {\n        this.afterUsage();\n        this.disableAttribs();\n    }\n\n    hasSameProgram(other) {\n        // For performance reasons, we first check for identical references.\n        return (other && ((other === this) || (other._program === this._program)));\n    }\n\n    beforeUsage() {\n        // Override to set settings other than the default settings (blend mode etc).\n    }\n\n    afterUsage() {\n        // All settings changed in beforeUsage should be reset here.\n    }\n\n    enableAttribs() {\n\n    }\n\n    disableAttribs() {\n\n    }\n\n    getExtraAttribBytesPerVertex() {\n        return 0;\n    }\n\n    getVertexAttribPointerOffset(operation) {\n        return operation.extraAttribsDataByteOffset - operation.index * 4 * this.getExtraAttribBytesPerVertex();\n    }\n\n    setExtraAttribsInBuffer(operation) {\n        // Set extra attrib data in in operation.quads.data/floats/uints, starting from\n        // operation.extraAttribsBufferByteOffset.\n    }\n\n    setupUniforms(operation) {\n        // Set all shader-specific uniforms.\n        // Notice that all uniforms should be set, even if they have not been changed within this shader instance.\n        // The uniforms are shared by all shaders that have the same type (and shader program).\n    }\n\n    _getProjection(operation) {\n        return operation.getProjection();\n    }\n\n    getFlipY(operation) {\n        return this._getProjection(operation)[1] < 0;\n    }\n\n    beforeDraw(operation) {\n    }\n\n    draw(operation) {\n    }\n\n    afterDraw(operation) {\n    }\n\n    cleanup() {\n        this._initialized = false;\n        // Program takes little resources, so it is only destroyed when the full stage is destroyed.\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport WebGLShader from \"../WebGLShader.mjs\";\n\nexport default class DefaultShader extends WebGLShader {\n\n    enableAttribs() {\n        // Enables the attribs in the shader program.\n        let gl = this.gl;\n        gl.vertexAttribPointer(this._attrib(\"aVertexPosition\"), 2, gl.FLOAT, false, 20, 0);\n        gl.enableVertexAttribArray(this._attrib(\"aVertexPosition\"));\n\n        if (this._attrib(\"aTextureCoord\") !== -1) {\n            gl.vertexAttribPointer(this._attrib(\"aTextureCoord\"), 2, gl.FLOAT, false, 20, 2 * 4);\n            gl.enableVertexAttribArray(this._attrib(\"aTextureCoord\"));\n        }\n\n        if (this._attrib(\"aColor\") !== -1) {\n            // Some shaders may ignore the color.\n            gl.vertexAttribPointer(this._attrib(\"aColor\"), 4, gl.UNSIGNED_BYTE, true, 20, 4 * 4);\n            gl.enableVertexAttribArray(this._attrib(\"aColor\"));\n        }\n    }\n\n    disableAttribs() {\n        // Disables the attribs in the shader program.\n        let gl = this.gl;\n        gl.disableVertexAttribArray(this._attrib(\"aVertexPosition\"));\n\n        if (this._attrib(\"aTextureCoord\") !== -1) {\n            gl.disableVertexAttribArray(this._attrib(\"aTextureCoord\"));\n        }\n\n        if (this._attrib(\"aColor\") !== -1) {\n            gl.disableVertexAttribArray(this._attrib(\"aColor\"));\n        }\n    }\n\n    setupUniforms(operation) {\n        this._setUniform(\"projection\", this._getProjection(operation), this.gl.uniform2fv, false);\n    }\n\n    draw(operation) {\n        let gl = this.gl;\n\n        let length = operation.length;\n\n        if (length) {\n            let glTexture = operation.getTexture(0);\n            let pos = 0;\n            for (let i = 0; i < length; i++) {\n                let tx = operation.getTexture(i);\n                if (glTexture !== tx) {\n                    gl.bindTexture(gl.TEXTURE_2D, glTexture);\n                    gl.drawElements(gl.TRIANGLES, 6 * (i - pos), gl.UNSIGNED_SHORT, (pos + operation.index) * 6 * 2);\n                    glTexture = tx;\n                    pos = i;\n                }\n            }\n            \n            gl.bindTexture(gl.TEXTURE_2D, glTexture);\n            gl.drawElements(gl.TRIANGLES, 6 * (length - pos), gl.UNSIGNED_SHORT, (pos + operation.index) * 6 * 2);\n        }\n    }\n\n}\n\nDefaultShader.vertexShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    attribute vec2 aVertexPosition;\n    attribute vec2 aTextureCoord;\n    attribute vec4 aColor;\n    uniform vec2 projection;\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    void main(void){\n        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);\n        vTextureCoord = aTextureCoord;\n        vColor = aColor;\n        gl_Position.y = -sign(projection.y) * gl_Position.y;\n    }\n`;\n\nDefaultShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    void main(void){\n        gl_FragColor = texture2D(uSampler, vTextureCoord) * vColor;\n    }\n`;\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class Renderer {\n\n    constructor(stage) {\n        this.stage = stage;\n        this._defaultShader = undefined;\n    }\n\n    gc(aggressive) {\n    }\n\n    destroy() {\n    }\n\n    getDefaultShader(ctx = this.stage.ctx) {\n        if (!this._defaultShader) {\n            this._defaultShader = this._createDefaultShader(ctx);\n        }\n        return this._defaultShader;\n    }\n\n    _createDefaultShader(ctx) {\n    }\n\n    isValidShaderType(shaderType) {\n        return (shaderType.prototype instanceof this._getShaderBaseType());\n    }\n\n    createShader(ctx, settings) {\n        const shaderType = settings.type;\n        // If shader type is not correct, use a different platform.\n        if (!this.isValidShaderType(shaderType)) {\n            const convertedShaderType = this._getShaderAlternative(shaderType);\n            if (!convertedShaderType) {\n                console.warn(\"[Lightning] Shader has no implementation for render target: \" + shaderType.name);\n                return this._createDefaultShader(ctx);\n            }\n            return new convertedShaderType(ctx);\n        } else {\n            const shader = new shaderType(ctx);\n            Base.patchObject(this, settings);\n            return shader;\n        }\n    }\n\n    _getShaderBaseType() {\n    }\n\n    _getShaderAlternative(shaderType) {\n        return this.getDefaultShader();\n    }\n\n    copyRenderTexture(renderTexture, nativeTexture, options) {\n        console.warn('[Lightning] copyRenderTexture not supported by renderer');\n    }\n}\n\nimport Base from \"../tree/Base.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Utils from \"../../tree/Utils.mjs\";\nimport StageUtils from \"../../tree/StageUtils.mjs\";\nimport WebGLCoreQuadList from \"./WebGLCoreQuadList.mjs\";\nimport WebGLCoreQuadOperation from \"./WebGLCoreQuadOperation.mjs\";\nimport WebGLCoreRenderExecutor from \"./WebGLCoreRenderExecutor.mjs\";\nimport CoreRenderState from \"../../tree/core/CoreRenderState.mjs\";\nimport DefaultShader from \"./shaders/DefaultShader.mjs\";\nimport WebGLShader from \"./WebGLShader.mjs\";\nimport Renderer from \"../Renderer.mjs\";\n\nexport default class WebGLRenderer extends Renderer {\n\n    constructor(stage) {\n        super(stage);\n        this.shaderPrograms = new Map();\n        this._compressedTextureExtensions = {\n            astc: stage.gl.getExtension('WEBGL_compressed_texture_astc'),\n            etc1: stage.gl.getExtension('WEBGL_compressed_texture_etc1'),\n            s3tc: stage.gl.getExtension('WEBGL_compressed_texture_s3tc'),\n            pvrtc: stage.gl.getExtension('WEBGL_compressed_texture_pvrtc'),\n        }\n    }\n\n    getCompressedTextureExtensions() {\n        return this._compressedTextureExtensions\n    }\n\n    destroy() {\n        this.shaderPrograms.forEach(shaderProgram => shaderProgram.destroy());\n\n        this.shaderPrograms = null;\n        this._compressedTextureExtensions = null;\n\n        delete this.shaderPrograms;\n        delete this._compressedTextureExtensions;\n    }\n\n    _createDefaultShader(ctx) {\n        return new DefaultShader(ctx);\n    }\n\n    _getShaderBaseType() {\n        return WebGLShader\n    }\n\n    _getShaderAlternative(shaderType) {\n        return shaderType.getWebGL && shaderType.getWebGL();\n    }\n\n    createCoreQuadList(ctx) {\n        return new WebGLCoreQuadList(ctx);\n    }\n\n    createCoreQuadOperation(ctx, shader, shaderOwner, renderTextureInfo, scissor, index) {\n        return new WebGLCoreQuadOperation(ctx, shader, shaderOwner, renderTextureInfo, scissor, index);\n    }\n\n    createCoreRenderExecutor(ctx) {\n        return new WebGLCoreRenderExecutor(ctx);\n    }\n\n    createCoreRenderState(ctx) {\n        return new CoreRenderState(ctx);\n    }\n\n    createRenderTexture(w, h, pw, ph) {\n        const gl = this.stage.gl;\n        const glTexture = gl.createTexture();\n        gl.bindTexture(gl.TEXTURE_2D, glTexture);\n\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, pw, ph, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n        glTexture.params = {};\n        glTexture.params[gl.TEXTURE_MAG_FILTER] = gl.LINEAR;\n        glTexture.params[gl.TEXTURE_MIN_FILTER] = gl.LINEAR;\n        glTexture.params[gl.TEXTURE_WRAP_S] = gl.CLAMP_TO_EDGE;\n        glTexture.params[gl.TEXTURE_WRAP_T] = gl.CLAMP_TO_EDGE;\n        glTexture.options = { format: gl.RGBA, internalFormat: gl.RGBA, type: gl.UNSIGNED_BYTE };\n\n        // We need a specific framebuffer for every render texture.\n        glTexture.framebuffer = gl.createFramebuffer();\n        glTexture.projection = new Float32Array([2 / w, 2 / h]);\n\n        gl.bindFramebuffer(gl.FRAMEBUFFER, glTexture.framebuffer);\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, glTexture, 0);\n\n        return glTexture;\n    }\n\n    freeRenderTexture(glTexture) {\n        let gl = this.stage.gl;\n        gl.deleteFramebuffer(glTexture.framebuffer);\n        gl.deleteTexture(glTexture);\n    }\n\n    _getBytesPerPixel(fmt, type) {\n        const gl = this.stage.gl;\n\n        if (fmt === gl.RGBA) {\n            switch (type) {\n                case gl.UNSIGNED_BYTE:\n                    return 4;\n\n                case gl.UNSIGNED_SHORT_4_4_4_4:\n                    return 2;\n\n                case gl.UNSIGNED_SHORT_5_5_5_1:\n                    return 2;\n\n                default:\n                    throw new Error('Invalid type specified for GL_RGBA format');\n            }\n        }\n        else if (fmt === gl.RGB) {\n            switch (type) {\n                case gl.UNSIGNED_BYTE:\n                    return 3;\n\n                case gl.UNSIGNED_BYTE_5_6_5:\n                    return 2;\n\n                default:\n                    throw new Error('Invalid type specified for GL_RGB format');\n            }\n        }\n        else {\n            throw new Error('Invalid format specified in call to _getBytesPerPixel()');\n        }\n    }\n\n    uploadTextureSource(textureSource, options) {\n        const gl = this.stage.gl;\n\n        const source = options.source;\n        let compressed = false;\n        if (options.renderInfo) {\n            compressed = options.renderInfo.compressed || false\n        }\n\n        const format = {\n            premultiplyAlpha: true,\n            hasAlpha: true\n        };\n\n        if (options && options.hasOwnProperty('premultiplyAlpha')) {\n            format.premultiplyAlpha = options.premultiplyAlpha;\n        }\n\n        if (options && options.hasOwnProperty('flipBlueRed')) {\n            format.flipBlueRed = options.flipBlueRed;\n        }\n\n        if (options && options.hasOwnProperty('hasAlpha')) {\n            format.hasAlpha = options.hasAlpha;\n        }\n\n        if (!format.hasAlpha) {\n            format.premultiplyAlpha = false;\n        }\n\n        format.texParams = options.texParams || {}\n        format.texOptions = options.texOptions || {}\n\n        let glTexture = gl.createTexture();\n        gl.bindTexture(gl.TEXTURE_2D, glTexture);\n\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, format.premultiplyAlpha);\n\n        if (Utils.isNode) {\n            gl.pixelStorei(gl.UNPACK_FLIP_BLUE_RED, !!format.flipBlueRed);\n        }\n\n        const texParams = format.texParams;\n        if (!texParams[gl.TEXTURE_MAG_FILTER]) texParams[gl.TEXTURE_MAG_FILTER] = gl.LINEAR;\n        if (!texParams[gl.TEXTURE_MIN_FILTER]) texParams[gl.TEXTURE_MIN_FILTER] = gl.LINEAR;\n        if (!texParams[gl.TEXTURE_WRAP_S]) texParams[gl.TEXTURE_WRAP_S] = gl.CLAMP_TO_EDGE;\n        if (!texParams[gl.TEXTURE_WRAP_T]) texParams[gl.TEXTURE_WRAP_T] = gl.CLAMP_TO_EDGE;\n\n        Object.keys(texParams).forEach(key => {\n            const value = texParams[key];\n            gl.texParameteri(gl.TEXTURE_2D, parseInt(key), value);\n        });\n\n        if (compressed) {\n            this.stage.platform.uploadCompressedGlTexture(gl, textureSource, source);\n            return glTexture;\n        }\n         \n        const texOptions = format.texOptions;\n        texOptions.format = texOptions.format || (format.hasAlpha ? gl.RGBA : gl.RGB);\n        texOptions.type = texOptions.type || gl.UNSIGNED_BYTE;\n        texOptions.internalFormat = texOptions.internalFormat || texOptions.format;\n        if (options && options.imageRef) {\n            texOptions.imageRef = options.imageRef;\n        }\n        \n        this.stage.platform.uploadGlTexture(gl, textureSource, source, texOptions);\n        \n        glTexture.params = Utils.cloneObjShallow(texParams);\n        glTexture.options = Utils.cloneObjShallow(texOptions);\n\n        // calculate bytes per pixel for vram usage tracking\n        glTexture.bytesPerPixel = this._getBytesPerPixel(texOptions.format, texOptions.type);\n\n        return glTexture;\n    }\n\n    freeTextureSource(textureSource) {\n        this.stage.gl.deleteTexture(textureSource.nativeTexture);\n    }\n\n    addQuad(renderState, quads, index) {\n        let offset = (index * 20);\n        const elementCore = quads.quadElements[index];\n\n        let r = elementCore._renderContext;\n\n        let floats = renderState.quads.floats;\n        let uints = renderState.quads.uints;\n        const mca = StageUtils.mergeColorAlpha;\n\n        if (r.tb !== 0 || r.tc !== 0) {\n            floats[offset++] = r.px;\n            floats[offset++] = r.py;\n            floats[offset++] = elementCore._ulx;\n            floats[offset++] = elementCore._uly;\n            uints[offset++] = mca(elementCore._colorUl, r.alpha);\n            floats[offset++] = r.px + elementCore._w * r.ta;\n            floats[offset++] = r.py + elementCore._w * r.tc;\n            floats[offset++] = elementCore._brx;\n            floats[offset++] = elementCore._uly;\n            uints[offset++] = mca(elementCore._colorUr, r.alpha);\n            floats[offset++] = r.px + elementCore._w * r.ta + elementCore._h * r.tb;\n            floats[offset++] = r.py + elementCore._w * r.tc + elementCore._h * r.td;\n            floats[offset++] = elementCore._brx;\n            floats[offset++] = elementCore._bry;\n            uints[offset++] = mca(elementCore._colorBr, r.alpha);\n            floats[offset++] = r.px + elementCore._h * r.tb;\n            floats[offset++] = r.py + elementCore._h * r.td;\n            floats[offset++] = elementCore._ulx;\n            floats[offset++] = elementCore._bry;\n            uints[offset] = mca(elementCore._colorBl, r.alpha);\n        } else {\n            // Simple.\n            let cx = r.px + elementCore._w * r.ta;\n            let cy = r.py + elementCore._h * r.td;\n\n            floats[offset++] = r.px;\n            floats[offset++] = r.py;\n            floats[offset++] = elementCore._ulx;\n            floats[offset++] = elementCore._uly;\n            uints[offset++] = mca(elementCore._colorUl, r.alpha);\n            floats[offset++] = cx;\n            floats[offset++] = r.py;\n            floats[offset++] = elementCore._brx;\n            floats[offset++] = elementCore._uly;\n            uints[offset++] = mca(elementCore._colorUr, r.alpha);\n            floats[offset++] = cx;\n            floats[offset++] = cy;\n            floats[offset++] = elementCore._brx;\n            floats[offset++] = elementCore._bry;\n            uints[offset++] = mca(elementCore._colorBr, r.alpha);\n            floats[offset++] = r.px;\n            floats[offset++] = cy;\n            floats[offset++] = elementCore._ulx;\n            floats[offset++] = elementCore._bry;\n            uints[offset] = mca(elementCore._colorBl, r.alpha);\n        }\n    }\n\n    isRenderTextureReusable(renderState, renderTextureInfo) {\n        let offset = (renderState._renderTextureInfo.offset * 80) / 4;\n        let floats = renderState.quads.floats;\n        let uints = renderState.quads.uints;\n        return ((floats[offset] === 0) &&\n            (floats[offset + 1] === 0) &&\n            (floats[offset + 2] === 0) &&\n            (floats[offset + 3] === 0) &&\n            (uints[offset + 4] === 0xFFFFFFFF) &&\n            (floats[offset + 5] === renderTextureInfo.w) &&\n            (floats[offset + 6] === 0) &&\n            (floats[offset + 7] === 1) &&\n            (floats[offset + 8] === 0) &&\n            (uints[offset + 9] === 0xFFFFFFFF) &&\n            (floats[offset + 10] === renderTextureInfo.w) &&\n            (floats[offset + 11] === renderTextureInfo.h) &&\n            (floats[offset + 12] === 1) &&\n            (floats[offset + 13] === 1) &&\n            (uints[offset + 14] === 0xFFFFFFFF) &&\n            (floats[offset + 15] === 0) &&\n            (floats[offset + 16] === renderTextureInfo.h) &&\n            (floats[offset + 17] === 0) &&\n            (floats[offset + 18] === 1) &&\n            (uints[offset + 19] === 0xFFFFFFFF));\n    }\n\n    finishRenderState(renderState) {\n        // Set extra shader attribute data.\n        let offset = renderState.length * 80;\n        for (let i = 0, n = renderState.quadOperations.length; i < n; i++) {\n            renderState.quadOperations[i].extraAttribsDataByteOffset = offset;\n            let extra = renderState.quadOperations[i].shader.getExtraAttribBytesPerVertex() * 4 * renderState.quadOperations[i].length;\n            offset += extra;\n            if (extra) {\n                renderState.quadOperations[i].shader.setExtraAttribsInBuffer(renderState.quadOperations[i], renderState.quads);\n            }\n        }\n        renderState.quads.dataLength = offset;\n    }\n\n    copyRenderTexture(renderTexture, nativeTexture, options) {\n        const gl = this.stage.gl;\n        gl.bindTexture(gl.TEXTURE_2D, nativeTexture);\n        gl.bindFramebuffer(gl.FRAMEBUFFER, renderTexture.framebuffer);\n        const precision = renderTexture.precision;\n        gl.copyTexSubImage2D(\n            gl.TEXTURE_2D,\n            0,\n            precision * (options.sx || 0),\n            precision * (options.sy || 0),\n            precision * (options.x || 0),\n            precision * (options.y || 0),\n            precision * (options.w || renderTexture.ow),\n            precision * (options.h || renderTexture.oh));\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport CoreQuadList from \"../../tree/core/CoreQuadList.mjs\";\n\nexport default class C2dCoreQuadList extends CoreQuadList {\n\n    constructor(ctx) {\n        super(ctx);\n\n        this.renderContexts = [];\n        this.modes = [];\n    }\n\n    setRenderContext(index, v) {\n        this.renderContexts[index] = v;\n    }\n\n    setSimpleTc(index, v) {\n        if (v) {\n            this.modes[index] |= 1;\n        } else {\n            this.modes[index] -= (this.modes[index] & 1);\n        }\n    }\n\n    setWhite(index, v) {\n        if (v) {\n            this.modes[index] |= 2;\n        } else {\n            this.modes[index] -= (this.modes[index] & 2);\n        }\n    }\n\n    getRenderContext(index) {\n        return this.renderContexts[index];\n    }\n\n    getSimpleTc(index) {\n        return (this.modes[index] & 1);\n    }\n\n    getWhite(index) {\n        return (this.modes[index] & 2);\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport CoreQuadOperation from \"../../tree/core/CoreQuadOperation.mjs\";\n\nexport default class C2dCoreQuadOperation extends CoreQuadOperation {\n\n    getRenderContext(index) {\n        return this.quads.getRenderContext(this.index + index);\n    }\n\n    getSimpleTc(index) {\n        return this.quads.getSimpleTc(this.index + index);\n    }\n\n    getWhite(index) {\n        return this.quads.getWhite(this.index + index);\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport CoreRenderExecutor from \"../../tree/core/CoreRenderExecutor.mjs\";\nimport StageUtils from \"../../tree/StageUtils.mjs\";\nimport Utils from \"../../tree/Utils.mjs\";\n\nexport default class C2dCoreRenderExecutor extends CoreRenderExecutor {\n\n    init() {\n        this._mainRenderTexture = this.ctx.stage.getCanvas();\n    }\n\n    _renderQuadOperation(op) {\n        let shader = op.shader;\n\n        if (op.length || op.shader.addEmpty()) {\n            const target = this._renderTexture || this._mainRenderTexture;\n            shader.beforeDraw(op, target);\n            shader.draw(op, target);\n            shader.afterDraw(op, target);\n        }\n    }\n\n    _clearRenderTexture() {\n        const ctx = this._getContext();\n\n        let clearColor = [0, 0, 0, 0];\n        if (this._mainRenderTexture.ctx === ctx) {\n            clearColor = this.ctx.stage.getClearColor();\n        }\n\n        const renderTexture = ctx.canvas;\n        ctx.setTransform(1, 0, 0, 1, 0, 0);\n        if (!clearColor[0] && !clearColor[1] && !clearColor[2] && !clearColor[3]) {\n            ctx.clearRect(0, 0, renderTexture.width, renderTexture.height);\n        } else {\n            ctx.fillStyle = StageUtils.getRgbaStringFromArray(clearColor);\n            // Do not use fillRect because it produces artifacts.\n            ctx.globalCompositeOperation = 'copy';\n            ctx.beginPath();\n            ctx.rect(0, 0, renderTexture.width, renderTexture.height);\n            ctx.closePath();\n            ctx.fill();\n            ctx.globalCompositeOperation = 'source-over';\n        }\n    }\n    \n    _getContext() {\n        if (this._renderTexture) {\n            return this._renderTexture.ctx;\n        } else {\n            return this._mainRenderTexture.ctx;\n        } \n    }\n\n    _restoreContext() {\n        const ctx = this._getContext();\n        ctx.restore();\n        ctx.save();\n        ctx._scissor = null;\n    }\n\n    _setScissor(area) {\n        const ctx = this._getContext();\n\n        if (!C2dCoreRenderExecutor._equalScissorAreas(ctx.canvas, ctx._scissor, area)) {\n            // Clipping is stored in the canvas context state.\n            // We can't reset clipping alone so we need to restore the full context.\n            this._restoreContext();\n\n            let precision = this.ctx.stage.getRenderPrecision();\n            if (area) {\n                ctx.beginPath();\n                ctx.rect(Math.round(area[0] * precision), Math.round(area[1] * precision), Math.round(area[2] * precision), Math.round(area[3] * precision));\n                ctx.closePath();\n                ctx.clip();\n            }\n            ctx._scissor = area;\n        }\n    }\n\n    static _equalScissorAreas(canvas, area, current) {\n        if (!area) {\n            area = [0, 0, canvas.width, canvas.height]\n        }\n        if (!current) {\n            current = [0, 0, canvas.width, canvas.height]\n        }\n        return Utils.equalValues(area, current)\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Shader from \"../../tree/Shader.mjs\";\n\nexport default class C2dShader extends Shader {\n\n    beforeDraw(operation) {\n    }\n\n    draw(operation) {\n    }\n\n    afterDraw(operation) {\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport C2dShader from \"../C2dShader.mjs\";\nimport StageUtils from \"../../../tree/StageUtils.mjs\";\n\nexport default class DefaultShader extends C2dShader {\n\n    constructor(ctx) {\n        super(ctx);\n        this._rectangleTexture = ctx.stage.rectangleTexture.source.nativeTexture;\n        this._tintManager = this.ctx.stage.renderer.tintManager;\n    }\n\n    draw(operation, target) {\n        const ctx = target.ctx;\n        let length = operation.length;\n        for (let i = 0; i < length; i++) {\n            const tx = operation.getTexture(i);\n            const vc = operation.getElementCore(i);\n            const rc = operation.getRenderContext(i);\n            const white = operation.getWhite(i);\n            const stc = operation.getSimpleTc(i);\n\n            //@todo: try to optimize out per-draw transform setting. split translate, transform.\n            const precision = this.ctx.stage.getRenderPrecision();\n            ctx.setTransform(rc.ta * precision, rc.tc * precision, rc.tb * precision, rc.td * precision, rc.px * precision, rc.py * precision);\n\n            const rect = (tx === this._rectangleTexture);\n            const info = {operation, target, index: i, rect};\n\n            if (rect) {\n                // Check for gradient.\n                if (white) {\n                    ctx.fillStyle = 'white';\n                } else {\n                    this._setColorGradient(ctx, vc);\n                }\n\n                ctx.globalAlpha = rc.alpha;\n                this._beforeDrawEl(info);\n                ctx.fillRect(0, 0, vc.w, vc.h);\n                this._afterDrawEl(info);\n                ctx.globalAlpha = 1.0;\n            } else {\n                // @todo: set image smoothing based on the texture.\n\n                // @todo: optimize by registering whether identity texcoords are used.\n                ctx.globalAlpha = rc.alpha;\n                this._beforeDrawEl(info);\n\n                // @todo: test if rounding yields better performance.\n\n                // Notice that simple texture coords can be turned on even though vc._ulx etc are not simple, because\n                //  we are rendering a render-to-texture (texcoords were stashed). Same is true for 'white' color btw.\n                const sourceX = stc ? 0 : (vc._ulx * tx.w);\n                const sourceY = stc ? 0 : (vc._uly * tx.h);\n                const sourceW = (stc ? 1 : (vc._brx - vc._ulx)) * tx.w;\n                const sourceH = (stc ? 1 : (vc._bry - vc._uly)) * tx.h;\n\n                let colorize = !white;\n                if (colorize) {\n                    // @todo: cache the tint texture for better performance.\n\n                    // Draw to intermediate texture with background color/gradient.\n                    // This prevents us from having to create a lot of render texture canvases.\n\n                    // Notice that we don't support (non-rect) gradients, only color tinting for c2d. We'll just take the average color.\n                    let color = vc._colorUl;\n                    if (vc._colorUl !== vc._colorUr || vc._colorUr !== vc._colorBl || vc._colorBr !== vc._colorBl) {\n                        color = StageUtils.mergeMultiColorsEqual([vc._colorUl, vc._colorUr, vc._colorBl, vc._colorBr]);\n                    }\n\n                    const alpha = ((color / 16777216) | 0) / 255.0;\n                    ctx.globalAlpha *= alpha;\n\n                    const rgb = color & 0x00FFFFFF;\n                    const tintTexture = this._tintManager.getTintTexture(tx, rgb);\n\n                    // Actually draw result.\n                    ctx.fillStyle = 'white';\n                    ctx.drawImage(tintTexture, sourceX, sourceY, sourceW, sourceH, 0, 0, vc.w, vc.h);\n                } else {\n                    ctx.fillStyle = 'white';\n                    ctx.drawImage(tx, sourceX, sourceY, sourceW, sourceH, 0, 0, vc.w, vc.h);\n                }\n                this._afterDrawEl(info);\n                ctx.globalAlpha = 1.0;\n            }\n        }\n    }\n\n    _setColorGradient(ctx, vc, w = vc.w, h = vc.h, transparency = true) {\n        let color = vc._colorUl;\n        let gradient;\n        //@todo: quick single color check.\n        //@todo: cache gradient/fill style (if possible, probably context-specific).\n\n        if (vc._colorUl === vc._colorUr) {\n            if (vc._colorBl === vc._colorBr) {\n                if (vc._colorUl === vc.colorBl) {\n                    // Single color.\n                } else {\n                    // Vertical gradient.\n                    gradient = ctx.createLinearGradient(0, 0, 0, h);\n                    if (transparency) {\n                        gradient.addColorStop(0, StageUtils.getRgbaString(vc._colorUl));\n                        gradient.addColorStop(1, StageUtils.getRgbaString(vc._colorBl));\n                    } else {\n                        gradient.addColorStop(0, StageUtils.getRgbString(vc._colorUl));\n                        gradient.addColorStop(1, StageUtils.getRgbString(vc._colorBl));\n\n                    }\n                }\n            } else {\n                // Not supported gradient.\n            }\n        } else {\n            if (vc._colorUl === vc._colorBl && vc._colorUr === vc._colorBr) {\n                // Horizontal gradient.\n                gradient = ctx.createLinearGradient(0, 0, w, 0);\n                if (transparency) {\n                    gradient.addColorStop(0, StageUtils.getRgbaString(vc._colorUl));\n                    gradient.addColorStop(1, StageUtils.getRgbaString(vc._colorBr));\n                } else {\n                    gradient.addColorStop(0, StageUtils.getRgbString(vc._colorUl));\n                    gradient.addColorStop(1, StageUtils.getRgbString(vc._colorBr));\n                }\n            }\n        }\n\n        if (gradient) {\n            ctx.fillStyle = gradient;\n        } else {\n            ctx.fillStyle = transparency ? StageUtils.getRgbaString(color) : StageUtils.getRgbString(color);\n        }\n    }\n\n    _beforeDrawEl(info) {\n    }\n\n    _afterDrawEl(info) {\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class C2dTextureTintManager {\n\n    constructor(stage) {\n        this.stage = stage;\n        this._usedMemory = 0;\n        this._cachedNativeTextures = new Set();\n    }\n\n    destroy() {\n        this.gc(true);\n\n        this.stage = null;\n        delete this.stage;\n    }\n\n    _addMemoryUsage(delta) {\n        this._usedMemory += delta;\n\n        this.stage.addMemoryUsage(delta);\n    }\n\n    delete(nativeTexture) {\n        // Should be called when native texture is cleaned up.\n        if (this._hasCache(nativeTexture)) {\n            const cache = this._getCache(nativeTexture);\n            const prevMemUsage = cache.memoryUsage;\n            cache.clear();\n            this._cachedNativeTextures.delete(nativeTexture);\n            this._addMemoryUsage(cache.memoryUsage - prevMemUsage);\n        }\n    }\n\n    getTintTexture(nativeTexture, color) {\n        const frame = this.stage.frameCounter;\n\n        this._cachedNativeTextures.add(nativeTexture);\n\n        const cache = this._getCache(nativeTexture);\n\n        const item = cache.get(color);\n        item.lf = frame;\n\n        if (item.tx) {\n            if (nativeTexture.update > item.u) {\n                // Native texture was updated in the mean time: renew.\n                this._tintTexture(item.tx, nativeTexture, color)\n            }\n\n            return item.tx;\n        } else {\n            const before = cache.memoryUsage;\n\n            // Find blanco tint texture.\n            let target = cache.reuseTexture(frame);\n            if (target) {\n                target.ctx.clearRect(0, 0, target.width, target.height);\n            } else {\n                // Allocate new.\n                target = document.createElement('canvas');\n                target.width = nativeTexture.w;\n                target.height = nativeTexture.h;\n                target.ctx = target.getContext('2d');\n            }\n\n            this._tintTexture(target, nativeTexture, color);\n            cache.set(color, target, frame);\n\n            const after = cache.memoryUsage;\n\n            if (after !== before) {\n                this._addMemoryUsage(after - before);\n            }\n\n            return target;\n        }\n    }\n\n    _tintTexture(target, source, color) {\n        let col = color.toString(16);\n        while (col.length < 6) {\n            col = \"0\" + col;\n        }\n        target.ctx.fillStyle = '#' + col;\n        target.ctx.globalCompositeOperation = 'copy';\n        target.ctx.fillRect(0, 0, source.w, source.h);\n        target.ctx.globalCompositeOperation = 'multiply';\n        target.ctx.drawImage(source, 0, 0, source.w, source.h, 0, 0, target.width, target.height);\n\n        // Alpha-mix the texture.\n        target.ctx.globalCompositeOperation = 'destination-in';\n        target.ctx.drawImage(source, 0, 0, source.w, source.h, 0, 0, target.width, target.height);\n    }\n\n    _hasCache(nativeTexture) {\n        return !!nativeTexture._tintCache;\n    }\n\n    _getCache(nativeTexture) {\n        if (!nativeTexture._tintCache) {\n            nativeTexture._tintCache = new C2dTintCache(nativeTexture);\n        }\n        return nativeTexture._tintCache;\n    }\n\n    gc(aggressive = false) {\n        const frame = this.stage.frameCounter;\n        let delta = 0;\n        this._cachedNativeTextures.forEach(texture => {\n            const cache = this._getCache(texture);\n            if (aggressive) {\n                delta += cache.memoryUsage;\n                cache.clear();\n            } else {\n                const before = cache.memoryUsage;\n                cache.cleanup(frame);\n                cache.releaseBlancoTextures();\n                delta += (cache.memoryUsage - before);\n            }\n        });\n\n        if (aggressive) {\n            this._cachedNativeTextures.clear();\n        }\n\n        if (delta) {\n            this._addMemoryUsage(delta);\n        }\n    }\n\n}\n\nclass C2dTintCache {\n\n    constructor(nativeTexture) {\n        this._tx = nativeTexture;\n        this._colors = new Map();\n        this._blancoTextures = null;\n        this._lastCleanupFrame = 0;\n        this._memTextures = 0;\n    }\n\n    get memoryUsage() {\n        return this._memTextures * this._tx.w * this._tx.h;\n    }\n\n    releaseBlancoTextures() {\n        this._memTextures -= this._blancoTextures.length;\n        this._blancoTextures = [];\n    }\n\n    clear() {\n        // Dereference the textures.\n        this._blancoTextures = null;\n        this._colors.clear();\n        this._memTextures = 0;\n    }\n\n    get(color) {\n        let item = this._colors.get(color);\n        if (!item) {\n            item = {lf: -1, tx: undefined, u: -1};\n            this._colors.set(color, item);\n        }\n        return item;\n    }\n\n    set(color, texture, frame) {\n        const item = this.get(color);\n        item.lf = frame;\n        item.tx = texture;\n        item.u = frame;\n        this._memTextures++;\n    }\n\n    cleanup(frame) {\n        // We only need to clean up once per frame.\n        if (this._lastCleanupFrame !== frame) {\n\n            // We limit blanco textures reuse to one frame only to prevent memory usage growth.\n            this._blancoTextures = [];\n\n            this._colors.forEach((item, color) => {\n                // Clean up entries that were not used last frame.\n                if (item.lf < frame - 1) {\n                    if (item.tx) {\n                        // Keep as reusable blanco texture.\n                        this._blancoTextures.push(item.tx);\n                    }\n                    this._colors.delete(color);\n                }\n            });\n\n            this._lastCleanupFrame = frame;\n        }\n    }\n\n    reuseTexture(frame) {\n        // Try to reuse textures, because creating them every frame is expensive.\n        this.cleanup(frame);\n        if (this._blancoTextures && this._blancoTextures.length) {\n            this._memTextures--;\n            return this._blancoTextures.pop();\n        }\n    }\n\n}\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport C2dCoreQuadList from \"./C2dCoreQuadList.mjs\";\nimport C2dCoreQuadOperation from \"./C2dCoreQuadOperation.mjs\";\nimport C2dCoreRenderExecutor from \"./C2dCoreRenderExecutor.mjs\";\nimport CoreRenderState from \"../../tree/core/CoreRenderState.mjs\";\nimport DefaultShader from \"./shaders/DefaultShader.mjs\";\nimport C2dShader from \"./C2dShader.mjs\";\nimport Renderer from \"../Renderer.mjs\";\nimport TextureTintManager from \"./C2dTextureTintManager.mjs\";\n\nexport default class C2dRenderer extends Renderer {\n\n    constructor(stage) {\n        super(stage);\n\n        this.tintManager = new TextureTintManager(stage);\n\n        this.setupC2d(this.stage.c2d.canvas);\n    }\n\n    destroy() {\n        this.tintManager.destroy();\n\n        this.tintManager = null;\n        delete this.tintManager;\n    }\n\n    _createDefaultShader(ctx) {\n        return new DefaultShader(ctx);\n    }\n\n    _getShaderBaseType() {\n        return C2dShader\n    }\n\n    _getShaderAlternative(shaderType) {\n        return shaderType.getC2d && shaderType.getC2d();\n    }\n\n    createCoreQuadList(ctx) {\n        return new C2dCoreQuadList(ctx);\n    }\n\n    createCoreQuadOperation(ctx, shader, shaderOwner, renderTextureInfo, scissor, index) {\n        return new C2dCoreQuadOperation(ctx, shader, shaderOwner, renderTextureInfo, scissor, index);\n    }\n\n    createCoreRenderExecutor(ctx) {\n        return new C2dCoreRenderExecutor(ctx);\n    }\n    \n    createCoreRenderState(ctx) {\n        return new CoreRenderState(ctx);\n    }\n\n    createRenderTexture(w, h, pw, ph) {\n        const canvas = document.createElement('canvas');\n        canvas.width = pw;\n        canvas.height = ph;\n        this.setupC2d(canvas);\n        return canvas;\n    }\n    \n    freeRenderTexture(nativeTexture) {\n        this.tintManager.delete(nativeTexture);\n    }\n\n    gc(aggressive) {\n        this.tintManager.gc(aggressive);\n    }\n\n    uploadTextureSource(textureSource, options) {\n        // For canvas, we do not need to upload.\n        if (options.source.buffer) {\n            // Convert RGBA buffer to canvas.\n            const canvas = document.createElement('canvas');\n            canvas.width = options.w;\n            canvas.height = options.h;\n\n            const imageData = new ImageData(new Uint8ClampedArray(options.source.buffer), options.w, options.h);\n            canvas.getContext('2d').putImageData(imageData, 0, 0);\n            return canvas;\n        }\n\n        return options.source;\n    }\n\n    freeTextureSource(textureSource) {\n        this.tintManager.delete(textureSource.nativeTexture);\n    }\n\n    addQuad(renderState, quads, index) {\n        // Render context changes while traversing so we save it by ref.\n        const elementCore = quads.quadElements[index];\n        quads.setRenderContext(index, elementCore._renderContext);\n        quads.setWhite(index, elementCore.isWhite());\n        quads.setSimpleTc(index, elementCore.hasSimpleTexCoords());\n    }\n\n    isRenderTextureReusable(renderState, renderTextureInfo) {\n        // @todo: check render coords/matrix, maybe move this to core?\n        return false;\n    }\n\n    finishRenderState(renderState) {\n    }\n\n    setupC2d(canvas) {\n        const ctx = canvas.getContext('2d');\n        canvas.ctx = ctx;\n\n        ctx._scissor = null;\n\n        // Save base state so we can restore the defaults later.\n        canvas.ctx.save();\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport WebGLShader from \"../../webgl/WebGLShader.mjs\";\n\nexport default class SparkShader extends WebGLShader {\n\n    enableAttribs() {\n        // Enables the attribs in the shader program.\n        let gl = this.gl;\n        gl.vertexAttribPointer(this._attrib(\"aVertexPosition\"), 2, gl.FLOAT, false, 20, 0);\n        gl.enableVertexAttribArray(this._attrib(\"aVertexPosition\"));\n\n        if (this._attrib(\"aTextureCoord\") !== -1) {\n            gl.vertexAttribPointer(this._attrib(\"aTextureCoord\"), 2, gl.FLOAT, false, 20, 2 * 4);\n            gl.enableVertexAttribArray(this._attrib(\"aTextureCoord\"));\n        }\n\n        if (this._attrib(\"aColor\") !== -1) {\n            // Some shaders may ignore the color.\n            gl.vertexAttribPointer(this._attrib(\"aColor\"), 4, gl.UNSIGNED_BYTE, true, 20, 4 * 4);\n            gl.enableVertexAttribArray(this._attrib(\"aColor\"));\n        }\n    }\n\n    disableAttribs() {\n        // Disables the attribs in the shader program.\n        let gl = this.gl;\n        gl.disableVertexAttribArray(this._attrib(\"aVertexPosition\"));\n\n        if (this._attrib(\"aTextureCoord\") !== -1) {\n            gl.disableVertexAttribArray(this._attrib(\"aTextureCoord\"));\n        }\n\n        if (this._attrib(\"aColor\") !== -1) {\n            gl.disableVertexAttribArray(this._attrib(\"aColor\"));\n        }\n    }\n\n    setupUniforms(operation) {\n        this._setUniform(\"projection\", this._getProjection(operation), this.gl.uniform2fv, false);\n    }\n\n    draw(operation) {\n        let gl = this.gl;\n\n        let length = operation.length;\n\n        if (length) {\n            let glTexture = operation.getTexture(0);\n            let pos = 0;\n            for (let i = 0; i < length; i++) {\n                let tx = operation.getTexture(i);\n                if (glTexture !== tx) {\n                    if (glTexture.options && glTexture.options.imageRef) {\n                        let elementPostion = (i > 0) ? (i - 1) : i;\n                        const precision = this.ctx.stage.getOption('precision');\n                        let vc = operation.getElementCore(elementPostion);\n                        this.ctx.stage.platform.paint(gl, glTexture.options.imageRef, vc._worldContext.px*precision, vc._worldContext.py*precision, vc._colorUl, vc);\n                    } else {\n                        gl.bindTexture(gl.TEXTURE_2D, glTexture);\n                        gl.drawElements(gl.TRIANGLES, 6 * (i - pos), gl.UNSIGNED_SHORT, (pos + operation.index) * 6 * 2);\n                    }\n                    glTexture = tx;\n                    pos = i;\n                }\n            }\n            if (pos < length) {\n                if (glTexture.options && glTexture.options.imageRef) {\n                    const precision = this.ctx.stage.getOption('precision');\n                    let vc = operation.getElementCore(pos);\n                    this.ctx.stage.platform.paint(gl, glTexture.options.imageRef, vc._worldContext.px*precision, vc._worldContext.py*precision, vc._colorUl, vc);\n                } else {\n                    gl.bindTexture(gl.TEXTURE_2D, glTexture);\n                    gl.drawElements(gl.TRIANGLES, 6 * (length - pos), gl.UNSIGNED_SHORT, (pos + operation.index) * 6 * 2);\n                }\n            }\n        }\n    }\n\n}\n\nSparkShader.vertexShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    attribute vec2 aVertexPosition;\n    attribute vec2 aTextureCoord;\n    attribute vec4 aColor;\n    uniform vec2 projection;\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    void main(void){\n        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);\n        vTextureCoord = aTextureCoord;\n        vColor = aColor;\n        gl_Position.y = -sign(projection.y) * gl_Position.y;\n    }\n`;\n\nSparkShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    void main(void){\n        gl_FragColor = texture2D(uSampler, vTextureCoord) * vColor;\n    }\n`;\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport WebGLRenderer from \"../webgl/WebGLRenderer.mjs\";\nimport SparkShader from \"./shaders/SparkShader.mjs\";\n\nexport default class SparkRenderer extends WebGLRenderer {\n\n    constructor(stage) {\n        super(stage);\n    }\n\n    _createDefaultShader(ctx) {\n        return new SparkShader(ctx);\n    }\n\n    createCoreRenderExecutor(ctx) {\n        global.beginDrawing();\n        let ret = super.createCoreRenderExecutor(ctx);\n        global.endDrawing();\n        return ret;\n    }\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class ImageWorker {\n\n    constructor(options = {}) {\n        this._items = new Map();\n        this._id = 0;\n\n        this._initWorker();\n    }\n\n    destroy() {\n        if (this._worker) {\n            this._worker.terminate();\n        }\n\n        this._items = null;\n        this._worker = null;\n\n        delete this._items;\n        delete this._worker;        \n    }\n\n    _initWorker() {\n        const code = `(${createWorker.toString()})()`;\n        const blob = new Blob([code.replace('\"use strict\";', '')]); // firefox adds \"use strict\"; to any function which might block worker execution so knock it off\n        const blobURL = (window.URL ? URL : webkitURL).createObjectURL(blob, {\n            type: 'application/javascript; charset=utf-8'\n        });\n        this._worker = new Worker(blobURL);\n\n        this._worker.postMessage({type: 'config', config: {path: window.location.href, protocol: window.location.protocol}});\n\n        this._worker.onmessage = (e) => {\n            if (e.data && e.data.id) {\n                const id = e.data.id;\n                const item = this._items.get(id);\n                if (item) {\n                    if (e.data.type == 'data') {\n                        this.finish(item, e.data.info);\n                    } else {\n                        this.error(item, e.data.info);\n                    }\n                }\n            }\n        }\n    }\n\n    create(src) {\n        const id = ++this._id;\n        const item = new ImageWorkerImage(this, id, src);\n        this._items.set(id, item);\n        this._worker.postMessage({type: \"add\", id: id, src: src});\n        return item;\n    }\n\n    cancel(image) {\n        this._worker.postMessage({type: \"cancel\", id: image.id});\n        this._items.delete(image.id);\n    }\n\n    error(image, info) {\n        image.error(info);\n        this._items.delete(image.id);\n    }\n\n    finish(image, info) {\n        image.load(info);\n        this._items.delete(image.id);\n    }\n\n}\n\nclass ImageWorkerImage {\n\n    constructor(manager, id, src) {\n        this._manager = manager;\n        this._id = id;\n        this._src = src;\n        this._onError = null;\n        this._onLoad = null;\n    }\n\n    get id() {\n        return this._id;\n    }\n\n    get src() {\n        return this._src;\n    }\n\n    set onError(f) {\n        this._onError = f;\n    }\n\n    set onLoad(f) {\n        this._onLoad = f;\n    }\n\n    cancel() {\n        this._manager.cancel(this);\n    }\n\n    load(info) {\n        if (this._onLoad) {\n            this._onLoad(info);\n        }\n    }\n\n    error(info) {\n        if (this._onError) {\n            this._onError(info);\n        }\n    }\n\n}\n\n/**\n * Notice that, within the createWorker function, we must only use ES5 code to keep it ES5-valid after babelifying, as\n *  the converted code of this section is converted to a blob and used as the js of the web worker thread.\n */\nconst createWorker = function() {\n\n    function ImageWorkerServer() {\n\n        this.items = new Map();\n\n        var t = this;\n        onmessage = function(e) {\n            t._receiveMessage(e);\n        }\n\n    }\n\n    ImageWorkerServer.isPathAbsolute = function(path) {\n        return /^(?:\\/|[a-z]+:\\/\\/)/.test(path) || path.substr(0, 5) == 'data:';\n    };\n\n    ImageWorkerServer.prototype._receiveMessage = function(e) {\n        if (e.data.type === 'config') {\n            this.config = e.data.config;\n\n            var base = this.config.path;\n            // the constructing of the basepath fails\n            // if location.hash contains a slash\n            var hasHashPath = /#.*?\\//;\n            if(hasHashPath.test(base)){\n                base = base.replace(/#.*$/,'');\n            }\n\n            var parts = base.split(\"/\");\n            parts.pop();\n            this._relativeBase = parts.join(\"/\") + \"/\";\n\n        } else if (e.data.type === 'add') {\n            this.add(e.data.id, e.data.src);\n        } else if (e.data.type === 'cancel') {\n            this.cancel(e.data.id);\n        }\n    };\n\n    ImageWorkerServer.prototype.add = function(id, src) {\n        // Convert relative URLs.\n        if (!ImageWorkerServer.isPathAbsolute(src)) {\n            src = this._relativeBase + src;\n        }\n\n        if (src.substr(0,2) === \"//\") {\n            // This doesn't work for image workers.\n            src = this.config.protocol + src;\n        }\n\n        var item = new ImageWorkerServerItem(id, src);\n        var t = this;\n        item.onFinish = function(result) {\n            t.finish(item, result);\n        };\n        item.onError = function(info) {\n            t.error(item, info);\n        };\n        this.items.set(id, item);\n        item.start();\n    };\n\n    ImageWorkerServer.prototype.cancel = function(id) {\n        var item = this.items.get(id);\n        if (item) {\n            item.cancel();\n            this.items.delete(id);\n        }\n    }\n\n    ImageWorkerServer.prototype.finish = function(item, {imageBitmap, hasAlphaChannel}) {\n        postMessage({\n            type: \"data\",\n            id: item.id,\n            info: {\n                imageBitmap,\n                hasAlphaChannel\n            }\n        }, [imageBitmap]);\n        this.items.delete(item.id);\n    };\n\n    ImageWorkerServer.prototype.error = function(item, {type, message}) {\n        postMessage({\n            type: \"error\",\n            id: item.id,\n            info: {\n                type,\n                message\n            }\n        });\n        this.items.delete(item.id);\n    };\n\n    ImageWorkerServer.isWPEBrowser = function() {\n        return (navigator.userAgent.indexOf(\"WPE\") !== -1);\n    };\n\n    function ImageWorkerServerItem(id, src) {\n\n        this._onError = undefined;\n        this._onFinish = undefined;\n        this._id = id;\n        this._src = src;\n        this._xhr = undefined;\n        this._mimeType = undefined;\n        this._canceled = false;\n\n    }\n\n    Object.defineProperty(ImageWorkerServerItem.prototype, 'id', {\n        get: function() {\n            return this._id;\n        }\n    });\n\n    Object.defineProperty(ImageWorkerServerItem.prototype, 'onFinish', {\n        get: function() {\n            return this._onFinish;\n        },\n        set: function(f) {\n            this._onFinish = f;\n        }\n    });\n\n    Object.defineProperty(ImageWorkerServerItem.prototype, 'onError', {\n        get: function() {\n            return this._onError;\n        },\n        set: function(f) {\n            this._onError = f;\n        }\n    });\n\n    ImageWorkerServerItem.prototype.start = function() {\n        this._xhr = new XMLHttpRequest();\n        this._xhr.open(\"GET\", this._src, true);\n        this._xhr.responseType = \"blob\";\n\n        var t = this;\n        this._xhr.onerror = function(oEvent) {\n            t.error({type: \"connection\", message: \"Connection error\"});\n        };\n\n        this._xhr.onload = function(oEvent) {\n            var blob = t._xhr.response;\n            t._mimeType = blob.type;\n\n            t._createImageBitmap(blob);\n        };\n\n        this._xhr.send();\n    };\n\n    ImageWorkerServerItem.prototype._createImageBitmap = function(blob) {\n        var t = this;\n        createImageBitmap(blob, {premultiplyAlpha: 'premultiply', colorSpaceConversion: 'none', imageOrientation: 'none'}).then(function(imageBitmap) {\n            t.finish({\n                imageBitmap,\n                hasAlphaChannel: t._hasAlphaChannel()\n            });\n        }).catch(function(e) {\n            t.error({type: \"parse\", message: \"Error parsing image data\"});\n        });\n    };\n\n    ImageWorkerServerItem.prototype._hasAlphaChannel = function() {\n        if (ImageWorkerServer.isWPEBrowser()) {\n            // When using unaccelerated rendering image (https://github.com/WebPlatformForEmbedded/WPEWebKit/blob/wpe-20170728/Source/WebCore/html/ImageBitmap.cpp#L52),\n            // everything including JPG images are in RGBA format. Upload is way faster when using an alpha channel.\n            // @todo: after hardware acceleration is fixed and re-enabled, JPG should be uploaded in RGB to get the best possible performance and memory usage.\n            return true;\n        } else {\n            return (this._mimeType.indexOf(\"image/png\") !== -1);\n        }\n    };\n\n    ImageWorkerServerItem.prototype.cancel = function() {\n        if (this._canceled) return;\n        if (this._xhr) {\n            this._xhr.abort();\n        }\n        this._canceled = true;\n    };\n\n    ImageWorkerServerItem.prototype.error = function(type, message) {\n        if (!this._canceled && this._onError) {\n            this._onError({type, message});\n        }\n    };\n\n    ImageWorkerServerItem.prototype.finish = function(info) {\n        if (!this._canceled && this._onFinish) {\n            this._onFinish(info);\n        }\n    };\n\n    var worker = new ImageWorkerServer();\n};\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Utils from \"../../tree/Utils.mjs\";\nimport ImageWorker from \"./ImageWorker.mjs\";\n\n/**\n * Platform-specific functionality.\n */\nexport default class WebPlatform {\n\n    init(stage) {\n        this.stage = stage;\n        this._looping = false;\n        this._awaitingLoop = false;\n\n        // Alternative handler to avoid RAF when idle\n        this._loopHandler = null;\n        this._idleLoopCounter = 0;\n        this._idleLoopDelay = 60;\n\n        if (this.stage.getOption(\"useImageWorker\")) {\n            if (!window.createImageBitmap || !window.Worker) {\n                console.warn(\"[Lightning] Can't use image worker because browser does not have createImageBitmap and Web Worker support\");\n            } else {\n                this._imageWorker = new ImageWorker();\n            }\n        }\n\n        this._registerVisibilityChangeHandler();\n    }\n\n    destroy() {\n        if (this._imageWorker) {\n            this._imageWorker.destroy();\n        }\n\n        clearInterval(this._loopHandler);\n\n        this._removeKeyHandler();\n        this._removeClickHandler();\n        this._removeHoverHandler();\n        this._removeScrollWheelHandler();\n        this._removeVisibilityChangeHandler();\n\n        this.stage = null;\n        delete this.stage;\n    }\n\n    startLoop() {\n        this._looping = true;\n        if (!this._awaitingLoop) {\n            this.loop();\n        }\n    }\n\n    stopLoop() {\n        this._looping = false;\n    }\n\n    switchLoop() {\n        if (this._idleLoopCounter < this._idleLoopDelay) {\n            this._idleLoopCounter++;\n            return;\n        }\n        if (!this.stage.ctx.hasRenderUpdates()) {\n            this.stopLoop();\n            this._loopHandler = setInterval(() => {\n                this.stage.updateFrame();\n                this.stage.idleFrame();\n                if (this.stage.ctx.hasRenderUpdates()) {\n                    clearInterval(this._loopHandler);\n                    this.startLoop();\n                };\n            }, 1000 / 60);\n        } else {\n            this._idleLoopCounter = 0;\n        }\n    }\n\n    loop() {\n        let self = this;\n        let lp = function () {\n            self._awaitingLoop = false;\n            if (self._looping) {\n                self.stage.updateFrame();\n                if (self.stage.getOption(\"pauseRafLoopOnIdle\")) {\n                    self.switchLoop();\n                }\n                self.stage.renderFrame();\n                requestAnimationFrame(lp);\n                self._awaitingLoop = true;\n            }\n        }\n        requestAnimationFrame(lp);\n    }\n\n    uploadCompressedGlTexture(gl, textureSource, source, options) {\n        const view = !source.pvr ? new DataView(source.mipmaps[0]) : source.mipmaps[0];\n        gl.compressedTexImage2D(\n            gl.TEXTURE_2D,\n            0,\n            source.glInternalFormat,\n            source.pixelWidth,\n            source.pixelHeight,\n            0,\n            view,\n        )\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    }\n\n    uploadGlTexture(gl, textureSource, source, options) {\n        if (source instanceof ImageData || source instanceof HTMLImageElement || source instanceof HTMLVideoElement || (window.ImageBitmap && source instanceof ImageBitmap)) {\n            // Web-specific data types.\n            gl.texImage2D(gl.TEXTURE_2D, 0, options.internalFormat, options.format, options.type, source);\n        } else if (source instanceof HTMLCanvasElement) {\n            if (Utils.isZiggo || this.stage.getOption(\"forceTxCanvasSource\")) {\n                // Ziggo EOS and Selene have issues with getImageData implementation causing artifacts.\n                gl.texImage2D(gl.TEXTURE_2D, 0, options.internalFormat, options.format, options.type, source);\n            } else if (source.width > 0 && source.height > 0) {\n                // Workaround for some browsers (e.g. Tizen) as they do not convert canvas data to texture correctly, sometimes causing artifacts.\n                // Width/Height check added because of https://github.com/rdkcentral/Lightning/issues/412\n                const ctx = source.getContext('2d');\n                gl.texImage2D(gl.TEXTURE_2D, 0, options.internalFormat, options.format, options.type, ctx.getImageData(0, 0, source.width, source.height));\n            }\n        } else {\n            gl.texImage2D(gl.TEXTURE_2D, 0, options.internalFormat, textureSource.w, textureSource.h, 0, options.format, options.type, source);\n        }\n    }\n\n    /**\n     * KTX File format specification\n     * https://www.khronos.org/registry/KTX/specs/1.0/ktxspec_v1.html\n     **/\n    handleKtxLoad(cb, src) {\n        var self = this;\n        return function () {\n            var arraybuffer = this.response;\n            var view = new DataView(arraybuffer);\n\n            // identifier, big endian\n            var targetIdentifier = 3632701469\n            if (targetIdentifier !== (view.getUint32(0) + view.getUint32(4) + view.getUint32(8))) {\n                cb('Parsing failed: identifier ktx mismatch:', src)\n            }\n\n            var littleEndian = (view.getUint32(12) === 16909060) ? true : false;\n            var data = {\n                glType: view.getUint32(16, littleEndian),\n                glTypeSize: view.getUint32(20, littleEndian),\n                glFormat: view.getUint32(24, littleEndian),\n                glInternalFormat: view.getUint32(28, littleEndian),\n                glBaseInternalFormat: view.getUint32(32, littleEndian),\n                pixelWidth: view.getUint32(36, littleEndian),\n                pixelHeight: view.getUint32(40, littleEndian),\n                pixelDepth: view.getUint32(44, littleEndian),\n                numberOfArrayElements: view.getUint32(48, littleEndian),\n                numberOfFaces: view.getUint32(52, littleEndian),\n                numberOfMipmapLevels: view.getUint32(56, littleEndian),\n                bytesOfKeyValueData: view.getUint32(60, littleEndian),\n                kvps: [],\n                mipmaps: [],\n                get width() { return this.pixelWidth },\n                get height() { return this.pixelHeight },\n            };\n\n            const props = (obj) => {\n                const p = [];\n                for (let v in obj) {\n                    p.push(obj[v]);\n                }\n                return p;\n            }\n\n            const formats = Object.values(self.stage.renderer.getCompressedTextureExtensions())\n                .filter((obj) => obj != null)\n                .map((obj) => props(obj))\n                .reduce((prev, current) => prev.concat(current));\n\n            if (!formats.includes(data.glInternalFormat)) {\n                console.warn(\"[Lightning] Unrecognized texture extension format:\", src, data.glInternalFormat, self.stage.renderer.getCompressedTextureExtensions());\n            }\n\n            var offset = 64\n            // Key Value Pairs of data start at byte offset 64\n            // But the only known kvp is the API version, so skipping parsing.\n            offset += data.bytesOfKeyValueData;\n\n            for (var i = 0; i < data.numberOfMipmapLevels; i++) {\n                var imageSize = view.getUint32(offset);\n                offset += 4;\n                data.mipmaps.push(view.buffer.slice(offset, imageSize));\n                offset += imageSize\n            }\n\n            cb(null, {\n                source: data,\n                renderInfo: { src: src, compressed: true },\n            })\n        }\n    }\n\n    handlePvrLoad(cb, src) {\n        return function () {\n            // pvr header length in 32 bits\n            const pvrHeaderLength = 13;\n            // for now only we only support: COMPRESSED_RGB_ETC1_WEBGL\n            const pvrFormatEtc1 = 0x8D64;\n            const pvrWidth = 7;\n            const pvrHeight = 6;\n            const pvrMipmapCount = 11;\n            const pvrMetadata = 12;\n            const arrayBuffer = this.response;\n            const header = new Int32Array(arrayBuffer, 0, pvrHeaderLength);\n            const dataOffset = header[pvrMetadata] + 52;\n            const pvrtcData = new Uint8Array(arrayBuffer, dataOffset);\n\n            var data = {\n                glInternalFormat: pvrFormatEtc1,\n                pixelWidth: header[pvrWidth],\n                pixelHeight: header[pvrHeight],\n                numberOfMipmapLevels: header[pvrMipmapCount],\n                mipmaps: [],\n                pvr: true,\n                get width() { return this.pixelWidth },\n                get height() { return this.pixelHeight },\n            };\n\n            let offset = 0\n            let width = data.pixelWidth;\n            let height = data.pixelHeight;\n\n            for (var i = 0; i < data.numberOfMipmapLevels; i++) {\n                const level = ((width + 3) >> 2) * ((height + 3) >> 2) * 8;\n                const view = new Uint8Array(arrayBuffer, pvrtcData.byteOffset + offset, level);\n                data.mipmaps.push(view);\n                offset += level;\n                width = width >> 1;\n                height = height >> 1;\n            }\n\n            cb(null, {\n                source: data,\n                renderInfo: { src: src, compressed: true },\n            })\n        }\n    }\n\n    loadSrcTexture({ src, hasAlpha }, cb) {\n        let cancelCb = undefined;\n        let isPng = (src.toLowerCase().indexOf(\".png\") >= 0) || src.substr(0, 21) == 'data:image/png;base64';\n        let isKtx = src.indexOf('.ktx') >= 0 || src.indexOf('type=etc') >= 0;\n        let isPvr = src.indexOf('.pvr') >= 0;\n        if (isKtx || isPvr) {\n            let request = new XMLHttpRequest();\n            request.addEventListener(\n                \"load\", isKtx ? this.handleKtxLoad(cb, src) : this.handlePvrLoad(cb, src)\n            );\n            request.open(\"GET\", src);\n            request.responseType = \"arraybuffer\";\n            request.send();\n            cancelCb = function () {\n                request.abort();\n            }\n        } else if (this._imageWorker) {\n            // WPE-specific image parser.\n            const image = this._imageWorker.create(src);\n            image.onError = function (err) {\n                return cb(\"Image load error\");\n            };\n            image.onLoad = function ({ imageBitmap, hasAlphaChannel }) {\n                cb(null, {\n                    source: imageBitmap,\n                    renderInfo: { src: src, compressed: false },\n                    hasAlpha: hasAlphaChannel,\n                    premultiplyAlpha: true\n                });\n            };\n            cancelCb = function () {\n                image.cancel();\n            }\n        } else {\n            let image = new Image();\n\n            // On the PS4 platform setting the `crossOrigin` attribute on\n            // images can cause CORS failures.\n            if (!(src.substr(0, 5) == \"data:\") && !Utils.isPS4) {\n                // Base64.\n                image.crossOrigin = \"Anonymous\";\n            }\n            image.onerror = function (err) {\n                // Ignore error message when cancelled.\n                if (image.src) {\n                    return cb(\"Image load error\");\n                }\n            };\n            image.onload = function () {\n                cb(null, {\n                    source: image,\n                    renderInfo: { src: src, compressed: false },\n                    hasAlpha: isPng || hasAlpha\n                });\n            };\n            image.src = src;\n\n            cancelCb = function () {\n                image.onerror = null;\n                image.onload = null;\n                image.removeAttribute('src');\n            }\n        }\n\n        return cancelCb;\n    }\n\n    createWebGLContext(w, h) {\n        let canvas = this.stage.getOption('canvas') || document.createElement('canvas');\n\n        if (w && h) {\n            canvas.width = w;\n            canvas.height = h;\n        }\n\n        let opts = {\n            alpha: true,\n            antialias: false,\n            premultipliedAlpha: true,\n            stencil: true,\n            preserveDrawingBuffer: false\n        };\n\n        let gl = canvas.getContext('webgl', opts) || canvas.getContext('experimental-webgl', opts) || canvas.getContext('webgl2', opts);\n\n        if (!gl) {\n            throw new Error('This browser does not support webGL.');\n        }\n\n        return gl;\n    }\n\n    createCanvasContext(w, h) {\n        let canvas = this.stage.getOption('canvas') || document.createElement('canvas');\n\n        if (w && h) {\n            canvas.width = w;\n            canvas.height = h;\n        }\n\n        let c2d = canvas.getContext('2d');\n        if (!c2d) {\n            throw new Error('This browser does not support 2d canvas.');\n        }\n\n        return c2d;\n    }\n\n    getHrTime() {\n        return window.performance ? window.performance.now() : (new Date()).getTime();\n    }\n\n    getDrawingCanvas() {\n        // We can't reuse this canvas because textures may load async.\n        return document.createElement('canvas');\n    }\n\n    getTextureOptionsForDrawingCanvas(canvas) {\n        let options = {};\n        options.source = canvas;\n        return options;\n    }\n\n    nextFrame(changes) {\n        /* WebGL blits automatically */\n    }\n\n    registerKeydownHandler(keyhandler) {\n        this._keydownListener = (e) => {\n            keyhandler(e);\n        };\n        window.addEventListener('keydown', this._keydownListener);\n    }\n\n    registerKeyupHandler(keyhandler) {\n        this._keyupListener = (e) => {\n            keyhandler(e);\n        };\n        window.addEventListener('keyup', this._keyupListener);\n    }\n\n    _removeKeyHandler() {\n        if (this._keydownListener) {\n            window.removeEventListener('keydown', this._keydownListener);\n        }\n\n        if (this._keyupListener) {\n            window.removeEventListener('keyup', this._keyupListener);\n        }\n    }\n\n    registerClickHandler(clickHandler) {\n        this._clickListener = e => {\n            clickHandler(e);\n        };\n        window.addEventListener('mousedown', this._clickListener);\n    }\n\n    _removeClickHandler() {\n        if (this._clickListener) {\n            window.removeEventListener('mousedown', this._clickListener);\n        }\n    }\n\n    registerHoverHandler(hoverHandler) {\n        this._hoverListener = e => {\n            hoverHandler(e);\n        };\n        window.addEventListener('mousemove', this._hoverListener);\n    }\n\n    _removeHoverHandler() {\n        if (this._hoverListener) {\n            window.removeEventListener('mousemove', this._hoverListener);\n        }\n    }\n\n    registerScrollWheelHandler(registerScrollWheelHandler) {\n        this._scrollWheelListener = e => {\n            registerScrollWheelHandler(e);\n        }\n        window.addEventListener('wheel', this._scrollWheelListener);\n    }\n\n    _removeScrollWheelHandler() {\n        if (this._scrollWheelListener) {\n            window.removeEventListener('wheel', this._scrollWheelListener);\n        }\n    }\n\n    /**\n     * Fix for issue reported at: https://github.com/WebPlatformForEmbedded/WPEWebKit/issues/882\n     */\n    _registerVisibilityChangeHandler() {\n        this._visibilityChangeHandler = () => {\n            if (document.visibilityState === 'visible') {\n                this.stage.root.core.setHasRenderUpdates(2);\n                this.stage.renderFrame();\n            }\n        }\n        document.addEventListener('visibilitychange', this._visibilityChangeHandler);\n    }\n\n    _removeVisibilityChangeHandler() {\n        if (this._visibilityChangeHandler) {\n            document.removeEventListener('visibilitychange', this._visibilityChangeHandler);\n        }\n    }\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport WebPlatform from \"./browser/WebPlatform.mjs\";\n\nexport default class PlatformLoader {\n    static load(options) {\n        if (options.platform) {\n            return options.platform;\n        } else {\n            return WebPlatform;\n        }\n    }\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nclass Utils {\n\n    static isFunction(value) {\n        return typeof value === 'function';\n    }\n\n    static isNumber(value) {\n        return typeof value === 'number';\n    }\n\n    static isInteger(value) {\n        return (typeof value === 'number' && (value % 1) === 0);\n    }\n\n    static isBoolean(value) {\n        return value === true || value === false;\n    }\n\n    static isString(value) {\n        return typeof value == 'string';\n    }\n\n    static isObject(value) {\n        let type = typeof value;\n        return !!value && (type == 'object' || type == 'function');\n    }\n\n    static isPlainObject(value) {\n        let type = typeof value;\n        return !!value && (type == 'object');\n    }\n\n    static isObjectLiteral(value){\n        return typeof value === 'object' && value && value.constructor === Object\n    }\n\n    static getArrayIndex(index, arr) {\n        return Utils.getModuloIndex(index, arr.length);\n    }\n\n    static equalValues(v1, v2) {\n        if ((typeof v1) !== (typeof v2)) return false\n        if (Utils.isObjectLiteral(v1)) {\n            return Utils.isObjectLiteral(v2) && Utils.equalObjectLiterals(v1, v2)\n        } else if (Array.isArray(v1)) {\n            return Array.isArray(v2) && Utils.equalArrays(v1, v2)\n        } else {\n            return v1 === v2\n        }\n    }\n\n    static equalObjectLiterals(obj1, obj2) {\n        let keys1 = Object.keys(obj1);\n        let keys2 = Object.keys(obj2);\n        if (keys1.length !== keys2.length) {\n            return false\n        }\n\n        for (let i = 0, n = keys1.length; i < n; i++) {\n            const k1 = keys1[i];\n            const k2 = keys2[i];\n            if (k1 !== k2) {\n                return false\n            }\n\n            const v1 = obj1[k1];\n            const v2 = obj2[k2];\n\n            if (!Utils.equalValues(v1, v2)) {\n                return false\n            }\n        }\n\n        return true;\n    }\n\n    static equalArrays(v1, v2) {\n        if (v1.length !== v2.length) {\n            return false\n        }\n        for (let i = 0, n = v1.length; i < n; i++) {\n            if (!this.equalValues(v1[i], v2[i])) {\n                return false\n            }\n        }\n\n        return true\n    }\n\n}\n\n/**\n * Maintains the state of a WebGLRenderingContext.\n */\nclass WebGLState {\n\n    constructor(id, gl) {\n        this._id = id;\n        this._gl = gl;\n        this._program = undefined;\n        this._buffers = new Map();\n        this._framebuffers = new Map();\n        this._renderbuffers = new Map();\n\n        // Contains vertex attribute definition arrays (enabled, size, type, normalized, stride, offset).\n        this._vertexAttribs = new Array(16);\n        this._nonDefaultFlags = new Set();\n        this._settings = new Map();\n        this._textures = new Array(8);\n        this._maxTexture = 0;\n        this._activeTexture = gl.TEXTURE0;\n        this._pixelStorei = new Array(5);\n    }\n\n    _getDefaultFlag(cap) {\n        return (cap === this._gl.DITHER);\n    }\n\n    setFlag(cap, v) {\n        const def = this._getDefaultFlag(cap);\n        if (v === def) {\n            return this._nonDefaultFlags.delete(cap);\n        } else {\n            if (!this._nonDefaultFlags.has(cap)) {\n                this._nonDefaultFlags.add(cap);\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }\n\n    setBuffer(target, buffer) {\n        const change = this._buffers.get(target) !== buffer;\n        this._buffers.set(target, buffer);\n\n        if (change && (target === this._gl.ARRAY_BUFFER)) {\n            // When the array buffer is changed all attributes are cleared.\n            this._vertexAttribs = [];\n        }\n\n        return change;\n    }\n\n    setFramebuffer(target, buffer) {\n        const change = this._framebuffers.get(target) !== buffer;\n        this._framebuffers.set(target, buffer);\n        return change;\n    }\n\n    setRenderbuffer(target, buffer) {\n        const change = this._renderbuffers.get(target) !== buffer;\n        this._renderbuffers.set(target, buffer);\n        return change;\n    }\n\n    setProgram(program) {\n        const change = this._program !== program;\n        this._program = program;\n        return change\n    }\n\n    setSetting(func, v) {\n        const s = this._settings.get(func);\n        const change = !s || !Utils.equalValues(s, v);\n        this._settings.set(func, v);\n        return change\n    }\n\n    disableVertexAttribArray(index) {\n        const va = this._vertexAttribs[index];\n        if (va && va[5]) {\n            va[5] = false;\n            return true;\n        }\n        return false;\n    }\n\n    enableVertexAttribArray(index) {\n        const va = this._vertexAttribs[index];\n        if (va) {\n            if (!va[0]) {\n                va[0] = true;\n                return true;\n            }\n        } else {\n            this._vertexAttribs[index] = [0, 0, 0, 0, 0, true];\n            return true;\n        }\n        return false;\n    }\n\n    vertexAttribPointer(index, props) {\n        let va = this._vertexAttribs[index];\n        let equal = false;\n        if (va) {\n            equal = va[0] === props[0] &&\n                va[1] === props[1] &&\n                va[2] === props[2] &&\n                va[3] === props[3] &&\n                va[4] === props[4];\n        }\n\n        if (equal) {\n            return false;\n        } else {\n            props[5] = va ? va[5] : false;\n            return true;\n        }\n    }\n\n    setActiveTexture(texture) {\n        const changed = this._activeTexture !== texture;\n        this._activeTexture = texture;\n        return changed;\n    }\n\n    bindTexture(target, texture) {\n        const activeIndex = WebGLState._getTextureIndex(this._activeTexture);\n        this._maxTexture = Math.max(this._maxTexture, activeIndex + 1);\n        const current = this._textures[activeIndex];\n        const targetIndex = WebGLState._getTextureTargetIndex(target);\n        if (current) {\n            if (current[targetIndex] === texture) {\n                return false;\n            }\n            current[targetIndex] = texture;\n            return true;\n        } else {\n            if (texture) {\n                this._textures[activeIndex] = [];\n                this._textures[activeIndex][targetIndex] = texture;\n                return true\n            } else {\n                return false\n            }\n        }\n    }\n\n    setPixelStorei(pname, param) {\n        const i = WebGLState._getPixelStoreiIndex(pname);\n        const change = !Utils.equalValues(this._pixelStorei[i], param);\n        this._pixelStorei[i] = param;\n        return change;\n    }\n\n    migrate(s) {\n        const t = this;\n\n        // Warning: migrate should call the original prototype methods directly.\n\n        this._migrateFlags(t, s);\n\n        // useProgram\n        if (s._program !== t._program) {\n            this._gl._useProgram(s._program);\n        }\n\n        this._migrateFramebuffers(t, s);\n        this._migrateRenderbuffers(t, s);\n\n        const buffersChanged = this._migrateBuffers(t, s);\n        this._migrateAttributes(t, s, buffersChanged);\n\n        this._migrateFlags(t, s);\n\n        this._migrateSettings(t, s);\n\n        this._migratePixelStorei(t, s);\n        \n        this._migrateTextures(t, s);\n        \n    }\n\n    _migratePixelStorei(t, s) {\n        for (let i = 0, n = t._pixelStorei.length; i < n; i++) {\n            if (t._pixelStorei[i] !== s._pixelStorei[i]) {\n                const value = s._pixelStorei[i] !== undefined ? s._pixelStorei[i] : WebGLState._getDefaultPixelStoreiByIndex(i);\n                this._gl._pixelStorei(WebGLState._getPixelStoreiByIndex(i), value);\n            }\n        }\n    }\n\n    _migrateTextures(t, s) {\n        const max = Math.max(t._maxTexture, s._maxTexture);\n\n        let activeTexture = t._activeTexture;\n\n        for (let i = 0; i < max; i++) {\n            const sTargets = s._textures[i];\n            const tTargets = t._textures[i];\n            const textureNumb = WebGLState._getTextureByIndex(i);\n\n            const targetMax = Math.max(tTargets ? tTargets.length : 0, sTargets ? sTargets.length : 0);\n            for (let j = 0, n = targetMax; j < n; j++) {\n                const target = WebGLState._getTextureTargetByIndex(j);\n                if (activeTexture !== textureNumb) {\n                    this._gl._activeTexture(textureNumb);\n                    activeTexture = textureNumb;\n                }\n\n                const texture = (sTargets && sTargets[j]) || null;\n                this._gl._bindTexture(target, texture);\n            }\n        }\n\n        if (s._activeTexture !== activeTexture) {\n            this._gl._activeTexture(s._activeTexture);\n        }\n    }\n\n    _migrateBuffers(t, s) {\n        s._buffers.forEach((framebuffer, target) => {\n            if (t._buffers.get(target) !== framebuffer) {\n                this._gl._bindBuffer(target, framebuffer);\n            }\n        });\n\n        t._buffers.forEach((buffer, target) => {\n            const b = s._buffers.get(target);\n            if (b === undefined) {\n                this._gl._bindBuffer(target, null);\n            }\n        });\n        return (s._buffers.get(this._gl.ARRAY_BUFFER) !== t._buffers.get(this._gl.ARRAY_BUFFER))\n    }\n\n    _migrateFramebuffers(t, s) {\n        s._framebuffers.forEach((framebuffer, target) => {\n            if (t._framebuffers.get(target) !== framebuffer) {\n                this._gl._bindFramebuffer(target, framebuffer);\n            }\n        });\n\n        t._framebuffers.forEach((framebuffer, target) => {\n            const fb = s._framebuffers.get(target);\n            if (fb === undefined) {\n                this._gl._bindFramebuffer(target, null);\n            }\n        });\n    }\n\n    _migrateRenderbuffers(t, s) {\n        s._renderbuffers.forEach((renderbuffer, target) => {\n            if (t._renderbuffers.get(target) !== renderbuffer) {\n                this._gl._bindRenderbuffer(target, renderbuffer);\n            }\n        });\n\n        t._renderbuffers.forEach((renderbuffer, target) => {\n            const fb = s._renderbuffers.get(target);\n            if (fb === undefined) {\n                this._gl._bindRenderbuffer(target, null);\n            }\n        });\n    }\n\n    _migrateAttributes(t, s, buffersChanged) {\n\n        if (!buffersChanged) {\n            t._vertexAttribs.forEach((attrib, index) => {\n                if (!s._vertexAttribs[index]) {\n                    // We can't 'delete' a vertex attrib so we'll disable it.\n                    this._gl._disableVertexAttribArray(index);\n                }\n            });\n\n            s._vertexAttribs.forEach((attrib, index) => {\n                this._gl._vertexAttribPointer(index, attrib[0], attrib[1], attrib[2], attrib[4]);\n                if (attrib[5]) {\n                    this._gl._enableVertexAttribArray(index);\n                } else {\n                    this._gl._disableVertexAttribArray(index);\n                }\n            });\n        } else {\n            // When buffers are changed, previous attributes were reset automatically.\n            s._vertexAttribs.forEach((attrib, index) => {\n                if (attrib[0]) {\n                    // Do not set vertex attrib pointer when it was just the default value.\n                    this._gl._vertexAttribPointer(index, attrib[0], attrib[1], attrib[2], attrib[3], attrib[4]);\n                }\n                if (attrib[5]) {\n                    this._gl._enableVertexAttribArray(index);\n                }\n            });\n        }\n    }\n\n    _migrateSettings(t, s) {\n        const defaults = this.constructor.getDefaultSettings();\n        t._settings.forEach((value, func) => {\n            const name = func.name || func.xname;\n            if (!s._settings.has(func)) {\n                let args = defaults.get(name);\n                if (Utils.isFunction(args)) {\n                    args = args(this._gl);\n                }\n                // We are actually setting the setting for optimization purposes.\n                s._settings.set(func, args);\n                func.apply(this._gl, args);\n            }\n        });\n        s._settings.forEach((value, func) => {\n            const tValue = t._settings.get(func);\n            if (!tValue || !Utils.equalValues(tValue, value)) {\n                func.apply(this._gl, value);\n            }\n        });\n    }\n\n    _migrateFlags(t, s) {\n        t._nonDefaultFlags.forEach(setting => {\n            if (!s._nonDefaultFlags.has(setting)) {\n                if (this._getDefaultFlag(setting)) {\n                    this._gl._enable(setting);\n                } else {\n                    this._gl._disable(setting);\n                }\n            }\n        });\n        s._nonDefaultFlags.forEach(setting => {\n            if (!t._nonDefaultFlags.has(setting)) {\n                if (this._getDefaultFlag(setting)) {\n                    this._gl._disable(setting);\n                } else {\n                    this._gl._enable(setting);\n                }\n            }\n        });\n    }\n\n    static getDefaultSettings() {\n        if (!this._defaultSettings) {\n            this._defaultSettings = new Map();\n            const d = this._defaultSettings;\n            const g = WebGLRenderingContext.prototype;\n            d.set(\"viewport\", function(gl) {return [0,0,gl.canvas.width, gl.canvas.height]});\n            d.set(\"scissor\", function(gl) {return [0,0,gl.canvas.width, gl.canvas.height]});\n            d.set(\"blendColor\", [0, 0, 0, 0]);\n            d.set(\"blendEquation\", [g.FUNC_ADD]);\n            d.set(\"blendEquationSeparate\", [g.FUNC_ADD, g.FUNC_ADD]);\n            d.set(\"blendFunc\", [g.ONE, g.ZERO]);\n            d.set(\"blendFuncSeparate\", [g.ONE, g.ZERO, g.ONE, g.ZERO]);\n            d.set(\"clearColor\", [0, 0, 0, 0]);\n            d.set(\"clearDepth\", [1]);\n            d.set(\"clearStencil\", [0]);\n            d.set(\"colorMask\", [true, true, true, true]);\n            d.set(\"cullFace\", [g.BACK]);\n            d.set(\"depthFunc\", [g.LESS]);\n            d.set(\"depthMask\", [true]);\n            d.set(\"depthRange\", [0, 1]);\n            d.set(\"frontFace\", [g.CCW]);\n            d.set(\"lineWidth\", [1]);\n            d.set(\"polygonOffset\", [0, 0]);\n            d.set(\"sampleCoverage\", [1, false]);\n            d.set(\"stencilFunc\", [g.ALWAYS, 0, 1]);\n            d.set(\"_stencilFuncSeparateFront\", [g.ALWAYS, 0, 1]);\n            d.set(\"_stencilFuncSeparateBack\", [g.ALWAYS, 0, 1]);\n            d.set(\"_stencilFuncSeparateFrontAndBack\", [g.ALWAYS, 0, 1]);\n            d.set(\"stencilMask\", [1]);\n            d.set(\"_stencilMaskSeparateFront\", [1]);\n            d.set(\"_stencilMaskSeparateBack\", [1]);\n            d.set(\"_stencilMaskSeparateFrontAndBack\", [1]);\n            d.set(\"stencilOp\", [g.KEEP, g.KEEP, g.KEEP]);\n            d.set(\"_stencilOpSeparateFront\", [g.KEEP, g.KEEP, g.KEEP]);\n            d.set(\"_stencilOpSeparateBack\", [g.KEEP, g.KEEP, g.KEEP]);\n            d.set(\"_stencilOpSeparateFrontAndBack\", [g.KEEP, g.KEEP, g.KEEP]);\n            d.set(\"vertexAttrib1f\", []);\n            d.set(\"vertexAttrib1fv\", []);\n            d.set(\"vertexAttrib2f\", []);\n            d.set(\"vertexAttrib2fv\", []);\n            d.set(\"vertexAttrib3f\", []);\n            d.set(\"vertexAttrib3fv\", []);\n            d.set(\"vertexAttrib4f\", []);\n            d.set(\"vertexAttrib4fv\", []);\n        }\n        return this._defaultSettings\n    }\n\n    static _getTextureTargetIndex(target) {\n        switch(target) {\n            case 0x0DE1:\n                /* TEXTURE_2D */\n                return 0;\n            case 0x8513:\n                /* TEXTURE_CUBE_MAP */\n                return 1;\n            default:\n                // Shouldn't happen.\n                throw new Error('Unknown texture target: ' + target);\n        }\n    }\n\n    static _getTextureTargetByIndex(index) {\n        if (!this._textureTargetIndices) {\n            this._textureTargetIndices = [0x0DE1, 0x8513];\n        }\n        return this._textureTargetIndices[index]\n    }\n\n    static _getTextureIndex(index) {\n        return index - 0x84C0 /* GL_TEXTURE0 */;\n    }\n\n    static _getTextureByIndex(index) {\n        return index + 0x84C0;\n    }\n\n    static _getPixelStoreiIndex(pname) {\n        switch(pname) {\n            case 0x0D05:\n                /* PACK_ALIGNMENT */\n                return 0;\n            case 0x0CF5:\n                /* UNPACK_ALIGNMENT */\n                return 1;\n            case 0x9240:\n                /* UNPACK_FLIP_Y_WEBGL */\n                return 2;\n            case 0x9241:\n                /* UNPACK_PREMULTIPLY_ALPHA_WEBGL */\n                return 3;\n            case 0x9243:\n                /* UNPACK_COLORSPACE_CONVERSION_WEBGL */\n                return 4;\n                //@todo: support WebGL2 properties, see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/pixelStorei\n            case 0x9245:\n                /* UNPACK_FLIP_BLUE_RED */\n                return 5;\n            default:\n                // Shouldn't happen.\n                throw new Error('Unknown pixelstorei: ' + pname);\n        }\n    }\n\n    static _getPixelStoreiByIndex(index) {\n        if (!this._pixelStoreiIndices) {\n            this._pixelStoreiIndices = [0x0D05, 0x0CF5, 0x9240, 0x9241, 0x9243];\n        }\n        return this._pixelStoreiIndices[index]\n    }\n\n    static _getDefaultPixelStoreiByIndex(index) {\n        if (!this._pixelStoreiDefaults) {\n            this._pixelStoreiDefaults = [4, 4, false, false, WebGLRenderingContext.prototype.BROWSER_DEFAULT_WEBGL];\n        }\n        return this._pixelStoreiDefaults[index]\n    }\n}\n\nclass WebGLStateManager {\n\n    _initStateManager(id = \"default\") {\n        this._states = {};\n        this._state = this._getState(id);\n    }\n\n    _getState(id) {\n        if (!this._states[id]) {\n            this._states[id] = new WebGLState(id, this);\n        }\n        return this._states[id];\n    }\n\n    switchState(id = \"default\") {\n        if (this._state._id !== id) {\n            const newState = this._getState(id);\n            this._state.migrate(newState);\n            this._state = newState;\n        }\n    }\n\n    $useProgram(program) {\n        if (this._state.setProgram(program))\n            this._useProgram(program);\n    }\n\n    $bindBuffer(target, fb) {\n        if (this._state.setBuffer(target, fb))\n            this._bindBuffer(target, fb);\n    }\n\n    $bindFramebuffer(target, fb) {\n        if (this._state.setFramebuffer(target, fb))\n            this._bindFramebuffer(target, fb);\n    }\n\n    $bindRenderbuffer(target, fb) {\n        if (this._state.setRenderbuffer(target, fb))\n            this._bindRenderbuffer(target, fb);\n    }\n\n    $enable(cap) {\n        if (this._state.setFlag(cap, true))\n            this._enable(cap);\n    }\n\n    $disable(cap) {\n        if (this._state.setFlag(cap, false))\n            this._disable(cap);\n    }\n\n    $viewport(x, y, w, h) {\n        if (this._state.setSetting(this._viewport, [x, y, w, h]))\n            this._viewport(x, y, w, h);\n    }\n\n    $scissor(x, y, w, h) {\n        if (this._state.setSetting(this._scissor, [x, y, w, h]))\n            this._scissor(x, y, w, h);\n    }\n\n    $disableVertexAttribArray(index) {\n        if (this._state.disableVertexAttribArray(index))\n            this._disableVertexAttribArray(index);\n    }\n\n    $enableVertexAttribArray(index) {\n        if (this._state.enableVertexAttribArray(index))\n            this._enableVertexAttribArray(index);\n    }\n\n    $vertexAttribPointer(index, size, type, normalized, stride, offset) {\n        if (this._state.vertexAttribPointer(index, [size, type, normalized, stride, offset]))\n            this._vertexAttribPointer(index, size, type, normalized, stride, offset);\n    }\n\n    $activeTexture(texture) {\n        if (this._state.setActiveTexture(texture))\n            this._activeTexture(texture);\n    }\n\n    $bindTexture(target, texture) {\n        if (this._state.bindTexture(target, texture))\n            this._bindTexture(target, texture);\n    }\n\n    $pixelStorei(pname, param) {\n        if (this._state.setPixelStorei(pname, param)) {\n            this._pixelStorei(pname, param);\n        }\n    }\n\n    $stencilFuncSeparate(face, func, ref, mask) {\n        let f;\n        switch(face) {\n            case this.FRONT:\n                f = this._stencilFuncSeparateFront;\n                break;\n            case this.BACK:\n                f = this._stencilFuncSeparateBack;\n                break;\n            case this.FRONT_AND_BACK:\n                f = this._stencilFuncSeparateFrontAndBack;\n                break;\n        }\n\n        if (this._state.setSetting(f, [func, ref, mask]))\n            f.apply(this, [func, ref, mask]);\n    }\n\n    _stencilFuncSeparateFront(func, ref, mask) {\n        this._stencilFuncSeparate(this.FRONT, func, ref, mask);\n    }\n\n    _stencilFuncSeparateBack(func, ref, mask) {\n        this._stencilFuncSeparate(this.BACK, func, ref, mask);\n    }\n\n    _stencilFuncSeparateFrontAndBack(func, ref, mask) {\n        this._stencilFuncSeparate(this.FRONT_AND_BACK, func, ref, mask);\n    }\n\n    $stencilMaskSeparate(face, mask) {\n        let f;\n        switch(face) {\n            case this.FRONT:\n                f = this._stencilMaskSeparateFront;\n                break;\n            case this.BACK:\n                f = this._stencilMaskSeparateBack;\n                break;\n            case this.FRONT_AND_BACK:\n                f = this._stencilMaskSeparateFrontAndBack;\n                break;\n        }\n\n        if (this._state.setSetting(f, [mask]))\n            f.apply(this, [mask]);\n    }\n\n    _stencilMaskSeparateFront(mask) {\n        this._stencilMaskSeparate(this.FRONT, mask);\n    }\n\n    _stencilMaskSeparateBack(mask) {\n        this._stencilMaskSeparate(this.BACK, mask);\n    }\n\n    _stencilMaskSeparateFrontAndBack(mask) {\n        this._stencilMaskSeparate(this.FRONT_AND_BACK, mask);\n    }\n\n    $stencilOpSeparate(face, fail, zfail, zpass) {\n        let f;\n        switch(face) {\n            case this.FRONT:\n                f = this._stencilOpSeparateFront;\n                break;\n            case this.BACK:\n                f = this._stencilOpSeparateBack;\n                break;\n            case this.FRONT_AND_BACK:\n                f = this._stencilOpSeparateFrontAndBack;\n                break;\n        }\n\n        if (this._state.setSetting(f, [fail, zfail, zpass]))\n            f.apply(this, [fail, zfail, zpass]);\n    }\n\n    _stencilOpSeparateFront(fail, zfail, zpass) {\n        this._stencilOpSeparate(this.FRONT, fail, zfail, zpass);\n    }\n\n    _stencilOpSeparateBack(fail, zfail, zpass) {\n        this._stencilOpSeparate(this.BACK, fail, zfail, zpass);\n    }\n\n    _stencilOpSeparateFrontAndBack(fail, zfail, zpass) {\n        this._stencilOpSeparate(this.FRONT_AND_BACK, fail, zfail, zpass);\n    }\n\n    $blendColor(red, green, blue, alpha) {\n        if (this._state.setSetting(this._blendColor, [red, green, blue, alpha]))\n            this._blendColor(red, green, blue, alpha);\n    }\n\n    $blendEquation(mode) {\n        if (this._state.setSetting(this._blendEquation, [mode]))\n            this._blendEquation(mode);\n    }\n\n    $blendEquationSeparate(modeRGB, modeAlpha) {\n        if (this._state.setSetting(this._blendEquationSeparate, [modeRGB, modeAlpha]))\n            this._blendEquationSeparate(modeRGB, modeAlpha);\n    }\n\n    $blendFunc(sfactor, dfactor) {\n        if (this._state.setSetting(this._blendFunc, [sfactor, dfactor]))\n            this._blendFunc(sfactor, dfactor);\n    }\n\n    $blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha) {\n        if (this._state.setSetting(this._blendFuncSeparate, [srcRGB, dstRGB, srcAlpha, dstAlpha]))\n            this._blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha);\n    }\n\n    $clearColor(red, green, blue, alpha) {\n        if (this._state.setSetting(this._clearColor, [red, green, blue, alpha]))\n            this._clearColor(red, green, blue, alpha);\n    }\n\n    $clearDepth(depth) {\n        if (this._state.setSetting(this._clearDepth, [depth]))\n            this._clearDepth(depth);\n    }\n\n    $clearStencil(s) {\n        if (this._state.setSetting(this._clearStencil, [s]))\n            this._clearStencil(s);\n    }\n\n    $colorMask(red, green, blue, alpha) {\n        if (this._state.setSetting(this._colorMask, [red, green, blue, alpha]))\n            this._colorMask(red, green, blue, alpha);\n    }\n\n    $cullFace(mode) {\n        if (this._state.setSetting(this._cullFace, [mode]))\n            this._cullFace(mode);\n    }\n\n    $depthFunc(func) {\n        if (this._state.setSetting(this._depthFunc, [func]))\n            this._depthFunc(func);\n    }\n\n    $depthMask(flag) {\n        if (this._state.setSetting(this._depthMask, [flag]))\n            this._depthMask(flag);\n    }\n\n    $depthRange(zNear, zFar) {\n        if (this._state.setSetting(this._depthRange, [zNear, zFar]))\n            this._depthRange(zNear, zFar);\n    }\n\n    $frontFace(mode) {\n        if (this._state.setSetting(this._frontFace, [mode]))\n            this._frontFace(mode);\n    }\n\n    $lineWidth(width) {\n        if (this._state.setSetting(this._lineWidth, [width]))\n            this._lineWidth(width);\n    }\n\n    $polygonOffset(factor, units) {\n        if (this._state.setSetting(this._polygonOffset, [factor, units]))\n            this._polygonOffset(factor, units);\n    }\n\n    $sampleCoverage(value, invert) {\n        if (this._state.setSetting(this._sampleCoverage, [value, invert]))\n            this._sampleCoverage(value, invert);\n    }\n\n    $stencilFunc(func, ref, mask) {\n        if (this._state.setSetting(this._stencilFunc, [func, ref, mask]))\n            this._stencilFunc(func, ref, mask);\n    }\n\n    $stencilMask(mask) {\n        if (this._state.setSetting(this._stencilMask, [mask]))\n            this._stencilMask(mask);\n    }\n\n    $stencilOp(fail, zfail, zpass) {\n        if (this._state.setSetting(this._stencilOp, [fail, zfail, zpass]))\n            this._stencilOp(fail, zfail, zpass);\n    }\n\n    $vertexAttrib1f(indx, x) {\n        if (this._state.setSetting(this._vertexAttrib1f, [indx, x]))\n            this._vertexAttrib1f(indx, x);\n    }\n\n    $vertexAttrib1fv(indx, values) {\n        if (this._state.setSetting(this._vertexAttrib1fv, [indx, values]))\n            this._vertexAttrib1fv(indx, values);\n    }\n\n    $vertexAttrib2f(indx, x, y) {\n        if (this._state.setSetting(this._vertexAttrib2f, [indx, x, y]))\n            this._vertexAttrib2f(indx, x, y);\n    }\n\n    $vertexAttrib2fv(indx, values) {\n        if (this._state.setSetting(this._vertexAttrib2fv, [indx, values]))\n            this._vertexAttrib2fv(indx, values);\n    }\n\n    $vertexAttrib3f(indx, x, y, z) {\n        if (this._state.setSetting(this._vertexAttrib3f, [indx, x, y, z]))\n            this._vertexAttrib3f(indx, x, y, z);\n    }\n\n    $vertexAttrib3fv(indx, values) {\n        if (this._state.setSetting(this._vertexAttrib3fv, [indx, values]))\n            this._vertexAttrib3fv(indx, values);\n    }\n\n    $vertexAttrib4f(indx, x, y, z, w) {\n        if (this._state.setSetting(this._vertexAttrib4f, [indx, x, y, z, w]))\n            this._vertexAttrib4f(indx, x, y, z, w);\n    }\n\n    $vertexAttrib4fv(indx, values) {\n        if (this._state.setSetting(this._vertexAttrib4fv, [indx, values]))\n            this._vertexAttrib4fv(indx, values);\n    }\n\n    /**\n     * Sets up the rendering context for context sharing.\n     * @param {WebGLRenderingContext} gl\n     * @param {string} id\n     */\n    static enable(gl, id = \"default\") {\n        const names = Object.getOwnPropertyNames(WebGLStateManager.prototype);\n        const WebGLRenderingContextProto = gl.__proto__;\n        names.forEach(name => {\n            if (name !== \"constructor\") {\n                const method = WebGLStateManager.prototype[name];\n                if (name.charAt(0) === \"$\") {\n                    name = name.substr(1);\n                }\n                if (gl[name] !== method) {\n                    if (gl[name]) {\n                        if (!gl[name].name) {\n                            // We do this for compatibility with the Chrome WebGL Inspector plugin.\n                            gl[name].xname = name;\n                        }\n                        gl['_' + name] = gl[name];\n                    }\n                    gl[name] = method;\n                }\n            }\n        });\n\n        WebGLStateManager.prototype._initStateManager.call(gl, id);\n\n        return gl;\n    }\n\n}\n\nexport default WebGLStateManager;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport TextureSource from \"./TextureSource.mjs\";\nimport Stage from './Stage.mjs';\n\nexport default class TextureManager {\n\n    constructor(stage) {\n        this.stage = stage;\n\n        /**\n         * The currently used amount of texture memory.\n         * @type {number}\n         */\n        this._usedMemory = 0;\n\n        /**\n         * All uploaded texture sources.\n         * @type {TextureSource[]}\n         */\n        this._uploadedTextureSources = [];\n\n        /**\n         * The texture source lookup id to texture source hashmap.\n         * @type {Map<String, TextureSource>}\n         */\n        this.textureSourceHashmap = new Map();\n\n    }\n\n    get usedMemory() {\n        return this._usedMemory;\n    }\n\n    destroy() {\n        for (let i = 0, n = this._uploadedTextureSources.length; i < n; i++) {\n            this._nativeFreeTextureSource(this._uploadedTextureSources[i]);\n        }\n        \n        this.textureSourceHashmap.clear();\n        this._usedMemory = 0;\n    }\n\n    getReusableTextureSource(id) {\n        return this.textureSourceHashmap.get(id);\n    }\n\n    getTextureSource(func, id) {\n        // Check if texture source is already known.\n        let textureSource = id ? this.textureSourceHashmap.get(id) : null;\n        if (!textureSource) {\n            // Create new texture source.\n            textureSource = new TextureSource(this, func);\n\n            if (id) {\n                textureSource.lookupId = id;\n                this.textureSourceHashmap.set(id, textureSource);\n            }\n        }\n\n        return textureSource;\n    }\n\n    uploadTextureSource(textureSource, options) {\n        if (textureSource.isLoaded()) return;\n\n        this._addMemoryUsage(textureSource.w * textureSource.h);\n\n        // Load texture.\n        const nativeTexture = this._nativeUploadTextureSource(textureSource, options);\n\n        textureSource._nativeTexture = nativeTexture;\n\n        // We attach w and h to native texture (we need it in CoreRenderState._isRenderTextureReusable).\n        nativeTexture.w = textureSource.w;\n        nativeTexture.h = textureSource.h;\n\n        nativeTexture.update = this.stage.frameCounter;\n\n        this._uploadedTextureSources.push(textureSource);\n        \n        this.addToLookupMap(textureSource);\n\n        // add VRAM tracking if using the webgl renderer\n        this._updateVramUsage(textureSource, 1);\n    }\n\n    _addMemoryUsage(delta) {\n        this._usedMemory += delta;\n        this.stage.addMemoryUsage(delta);\n    }\n\n    _updateVramUsage(textureSource, sign) {\n        const nativeTexture = textureSource.nativeTexture;\n        var usage;\n\n        // do nothing if webgl isn't even supported\n        if (!Stage.isWebglSupported())\n            return;\n\n        // or if there is no native texture\n        if (!textureSource.isLoaded())\n            return;\n\n        // or, finally, if there is no bytes per pixel specified\n        if (!nativeTexture.hasOwnProperty('bytesPerPixel') || isNaN(nativeTexture.bytesPerPixel))\n            return;\n\n        usage = sign * (textureSource.w * textureSource.h * nativeTexture.bytesPerPixel);\n\n        this.stage.addVramUsage(usage, textureSource.hasAlpha);\n    }\n\n    addToLookupMap(textureSource) {\n        const lookupId = textureSource.lookupId;\n        if (lookupId) {\n            if (!this.textureSourceHashmap.has(lookupId)) {\n                this.textureSourceHashmap.set(lookupId, textureSource);\n            }\n        }\n    }\n\n    gc() {\n        this.freeUnusedTextureSources();\n        this._cleanupLookupMap();\n    }\n    \n    freeUnusedTextureSources() {\n        let remainingTextureSources = [];\n        for (let i = 0, n = this._uploadedTextureSources.length; i < n; i++) {\n            let ts = this._uploadedTextureSources[i];\n            if (ts.allowCleanup()) {\n                this._freeManagedTextureSource(ts);\n            } else {\n                remainingTextureSources.push(ts);\n            }\n        }\n\n        this._uploadedTextureSources = remainingTextureSources;\n\n        this._cleanupLookupMap();\n    }\n\n    _freeManagedTextureSource(textureSource) {\n        if (textureSource.isLoaded()) {\n            this._nativeFreeTextureSource(textureSource);\n            this._addMemoryUsage(-textureSource.w * textureSource.h);\n\n            // add VRAM tracking if using the webgl renderer\n            this._updateVramUsage(textureSource, -1);\n        }\n\n        // Should be reloaded.\n        textureSource.loadingSince = null;\n    }\n\n    _cleanupLookupMap() {\n        // We keep those that still have value (are being loaded or already loaded, or are likely to be reused).\n        this.textureSourceHashmap.forEach((textureSource, lookupId) => {\n            if (!(textureSource.isLoaded() || textureSource.isLoading()) && !textureSource.isUsed()) {\n                this.textureSourceHashmap.delete(lookupId);\n            }\n        });\n    }\n\n    /**\n     * Externally free texture source.\n     * @param textureSource\n     */\n    freeTextureSource(textureSource) {\n        const index = this._uploadedTextureSources.indexOf(textureSource);\n        const managed = (index !== -1);\n\n        if (textureSource.isLoaded()) {\n            if (managed) {\n                this._addMemoryUsage(-textureSource.w * textureSource.h);\n                this._uploadedTextureSources.splice(index, 1);\n            }\n            this._nativeFreeTextureSource(textureSource);\n        }\n\n        // Should be reloaded.\n        textureSource.loadingSince = null;\n    }\n\n    _nativeUploadTextureSource(textureSource, options) {\n        return this.stage.renderer.uploadTextureSource(textureSource, options);\n    }\n\n    _nativeFreeTextureSource(textureSource) {\n        this.stage.renderer.freeTextureSource(textureSource);\n        textureSource.clearNativeTexture();\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Allows throttling of loading texture sources, keeping the app responsive.\n */\nexport default class TextureThrottler {\n\n    constructor(stage) {\n        this.stage = stage;\n\n        this.genericCancelCb = (textureSource) => {\n            this._remove(textureSource);\n        };\n\n        this._sources = [];\n        this._data = [];\n    }\n\n    destroy() {\n        this._sources = [];\n        this._data = [];\n        this.stage = null;\n\n        delete this._sources;\n        delete this._data;\n        delete this.stage;\n    }\n\n    processSome() {\n        if (this._sources.length) {\n            const start = Date.now();\n            do {\n                this._processItem();\n            } while(this._sources.length && (Date.now() - start < TextureThrottler.MAX_UPLOAD_TIME_PER_FRAME));\n        }\n    }\n\n    _processItem() {\n        const source = this._sources.pop();\n        const data = this._data.pop();\n        if (source.isLoading()) {\n            source.processLoadedSource(data);\n        }\n    }\n\n    add(textureSource, data) {\n        this._sources.push(textureSource);\n        this._data.push(data);\n    }\n\n    _remove(textureSource) {\n        const index = this._sources.indexOf(textureSource);\n        if (index >= 0) {\n            this._sources.splice(index, 1);\n            this._data.splice(index, 1);\n        }\n    }\n\n}\n\nTextureThrottler.MAX_UPLOAD_TIME_PER_FRAME = 10;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nexport default class CoreContext {\n\n    constructor(stage) {\n        this.stage = stage;\n\n        this.root = null;\n\n        this.updateTreeOrder = 0;\n\n        this.renderState = this.stage.renderer.createCoreRenderState(this);\n\n        this.renderExec = this.stage.renderer.createCoreRenderExecutor(this);\n        this.renderExec.init();\n\n        this._usedMemory = 0;\n        this._renderTexturePool = [];\n\n        this._renderTextureId = 1;\n\n        this._zSorts = [];\n\n        this.renderToTextureCount = 0;\n    }\n\n    get usedMemory() {\n        return this._usedMemory;\n    }\n\n    destroy() {\n        this._renderTexturePool.forEach(texture => this._freeRenderTexture(texture));\n        this._usedMemory = 0;\n\n        this.stage = null;\n        this.root = null;\n\n        this.renderState = null;\n        this.renderExec = null;\n        this._renderTexturePool = null;\n        this._zSorts = null;\n\n        delete this.stage;\n        delete this.root;\n        delete this.renderState;\n        delete this.renderExec;\n        delete this._renderTexturePool;\n        delete this._zSorts;\n    }\n\n    hasRenderUpdates() {\n        return !!this.root._parent._hasRenderUpdates;\n    }\n\n    render() {\n        // Clear flag to identify if anything changes before the next frame.\n        this.root._parent._hasRenderUpdates = 0;\n\n        this._render();\n    }\n\n    update() {\n        this._update();\n\n        // Due to the boundsVisibility flag feature (and onAfterUpdate hook), it is possible that other elements were\n        // changed during the update loop (for example due to the txLoaded event). We process these changes immediately\n        // (but not recursively to prevent infinite loops).\n        if (this.root._hasUpdates) {\n            this._update();\n        }\n\n        this._performForcedZSorts();\n    }\n\n    /**\n     * Certain ElementCore items may be forced to zSort to strip out references to prevent memleaks..\n     */\n    _performForcedZSorts() {\n        const n = this._zSorts.length;\n        if (n) {\n            // Forced z-sorts (ElementCore may force a z-sort in order to free memory/prevent memory leaks).\n            for (let i = 0, n = this._zSorts.length; i < n; i++) {\n                if (this._zSorts[i].zSort) {\n                    this._zSorts[i].sortZIndexedChildren();\n                }\n            }\n            this._zSorts = [];\n        }\n    }\n\n    _update() {\n        this.updateTreeOrder = 0;\n\n        this.root.update();\n    }\n\n    _render() {\n        const debugFrame = this.stage.getOption('debugFrame');\n        // Obtain a sequence of the quad operations.\n        this._fillRenderState();\n\n        if (this.stage.getOption('readPixelsBeforeDraw')) {\n            this._readPixels();\n        }\n\n        // Now run them with the render executor.\n        this._performRender();\n\n        if (debugFrame) {\n            console.log(`[Lightning] RTT Renders in frame: ${this.renderToTextureCount}`)\n        }\n\n        // Block OpenGL pipeline to prevent framebuffer flickering\n        // on certain devices\n        if (this.stage.getOption('readPixelsAfterDraw') &&\n            this.renderToTextureCount >= this.stage.getOption('readPixelsAfterDrawThreshold')\n        ) {\n            if (debugFrame) {\n                console.log(`[Lightning] readPixelsAfterDraw behavior triggered`)\n            }\n            this._readPixels();\n        }\n\n        this.renderToTextureCount = 0;\n    }\n\n    _readPixels() {\n        const pixels = new Uint8Array(4);\n        const gl = this.stage.gl;\n        gl.readPixels(0, 0, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\n    }\n\n    _fillRenderState() {\n        this.renderState.reset();\n        this.root.render();\n        this.renderState.finish();\n    }\n\n    _performRender() {\n        this.renderExec.execute();\n    }\n\n    _addMemoryUsage(delta) {\n        this._usedMemory += delta;\n        this.stage.addMemoryUsage(delta);\n    }\n\n    allocateRenderTexture(w, h) {\n        let prec = this.stage.getRenderPrecision();\n        let pw = Math.max(1, Math.round(w * prec));\n        let ph = Math.max(1, Math.round(h * prec));\n\n        // Search last item first, so that last released render texture is preferred (may cause memory cache benefits).\n        const n = this._renderTexturePool.length;\n        for (let i = n - 1; i >= 0; i--) {\n            const texture = this._renderTexturePool[i];\n            // We don't want to reuse the same render textures within the same frame because that will create gpu stalls.\n            if (texture.w === pw && texture.h === ph && (texture.update !== this.stage.frameCounter)) {\n                texture.f = this.stage.frameCounter;\n                this._renderTexturePool.splice(i, 1);\n                return texture;\n            }\n        }\n\n        const texture = this._createRenderTexture(w, h, pw, ph);\n        texture.precision = prec;\n        return texture;\n    }\n\n    releaseRenderTexture(texture) {\n        this._renderTexturePool.push(texture);\n    }\n\n    freeUnusedRenderTextures(maxAge = 60) {\n        // Clean up all textures that are no longer used.\n        // This cache is short-lived because it is really just meant to supply running shaders that are\n        // updated during a number of frames.\n        let limit = this.stage.frameCounter - maxAge;\n\n        this._renderTexturePool = this._renderTexturePool.filter(texture => {\n            if (texture.f <= limit) {\n                this._freeRenderTexture(texture);\n                return false;\n            }\n            return true;\n        });\n    }\n\n    _createRenderTexture(w, h, pw, ph) {\n        this._addMemoryUsage(pw * ph);\n\n        const texture = this.stage.renderer.createRenderTexture(w, h, pw, ph);\n        texture.id = this._renderTextureId++;\n        texture.f = this.stage.frameCounter;\n        texture.ow = w;\n        texture.oh = h;\n        texture.w = pw;\n        texture.h = ph;\n\n        return texture;\n    }\n\n    _freeRenderTexture(nativeTexture) {\n        this.stage.renderer.freeRenderTexture(nativeTexture);\n        this._addMemoryUsage(-nativeTexture.w * nativeTexture.h);\n    }\n\n    copyRenderTexture(renderTexture, nativeTexture, options) {\n        this.stage.renderer.copyRenderTexture(renderTexture, nativeTexture, options);\n    }\n\n    forceZSort(elementCore) {\n        this._zSorts.push(elementCore);\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport StageUtils from \"../tree/StageUtils.mjs\";\nimport Base from \"../tree/Base.mjs\";\n\nexport default class TransitionSettings {\n    constructor(stage) {\n        this.stage = stage;\n        this._timingFunction = 'ease';\n        this._timingFunctionImpl = StageUtils.getTimingFunction(this._timingFunction);\n        this.delay = 0;\n        this.duration = 0.2;\n        this.merger = null;\n    }\n\n    get timingFunction() {\n        return this._timingFunction;\n    }\n\n    set timingFunction(v) {\n        this._timingFunction = v;\n        this._timingFunctionImpl = StageUtils.getTimingFunction(v);\n    }\n\n    get timingFunctionImpl() {\n        return this._timingFunctionImpl;\n    }\n\n    patch(settings) {\n        Base.patchObject(this, settings);\n    }\n}\n\nTransitionSettings.prototype.isTransitionSettings = true;\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class TransitionManager {\n\n    constructor(stage) {\n        this.stage = stage;\n\n        this.stage.on('frameStart', () => this.progress());\n\n        /**\n         * All transitions that are running and attached.\n         * (we don't support transitions on un-attached elements to prevent memory leaks)\n         * @type {Set<Transition>}\n         */\n        this.active = new Set();\n\n        this.defaultTransitionSettings = new TransitionSettings(this.stage);\n    }\n\n    progress() {\n        if (this.active.size) {\n            let dt = this.stage.dt;\n\n            let filter = false;\n            this.active.forEach(function(a) {\n                a.progress(dt);\n                if (!a.isRunning()) {\n                    filter = true;\n                }\n            });\n\n            if (filter) {\n                this.active = new Set([...this.active].filter(t => (t.isRunning())));\n            }\n        }\n    }\n\n    createSettings(settings) {\n        const transitionSettings = new TransitionSettings();\n        Base.patchObject(transitionSettings, settings);\n        return transitionSettings;\n    }\n\n    addActive(transition) {\n        this.active.add(transition);\n    }\n\n    removeActive(transition) {\n        this.active.delete(transition);\n    }\n}\n\nimport Base from \"../tree/Base.mjs\";\nimport TransitionSettings from \"./TransitionSettings.mjs\";\nimport Transition from \"./Transition.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Utils from \"../tree/Utils.mjs\";\n\nexport default class MultiSpline {\n\n    constructor() {\n        this._clear();\n    }\n\n    _clear() {\n        this._p = [];\n        this._pe = [];\n        this._idp = [];\n        this._f = [];\n        this._v = [];\n        this._lv = [];\n        this._sm = [];\n        this._s = [];\n        this._ve = [];\n        this._sme = [];\n        this._se = [];\n\n        this._length = 0;\n    }\n\n    parse(rgba, def) {\n        let i, n;\n        if (!Utils.isObjectLiteral(def)) {\n            def = {0: def}\n        }\n\n        let defaultSmoothness = 0.5;\n\n        let items = [];\n        for (let key in def) {\n            if (def.hasOwnProperty(key)) {\n                let obj = def[key];\n                if (!Utils.isObjectLiteral(obj)) {\n                    obj = {v: obj}\n                }\n\n                let p = parseFloat(key);\n\n                if (key === \"sm\") {\n                    defaultSmoothness = obj.v;\n                } else if (!isNaN(p) && p >= 0 && p <= 2) {\n                    obj.p = p;\n\n                    obj.f = Utils.isFunction(obj.v);\n                    obj.lv = obj.f ? obj.v(0, 0) : obj.v;\n\n                    items.push(obj);\n                }\n            }\n        }\n\n        // Sort by progress value.\n        items = items.sort(function(a, b) {return a.p - b.p});\n\n        n = items.length;\n\n        for (i = 0; i < n; i++) {\n            let last = (i === n - 1);\n            if (!items[i].hasOwnProperty('pe')) {\n                // Progress.\n                items[i].pe = last ? (items[i].p <= 1 ? 1 : 2 /* support onetotwo stop */) : items[i + 1].p;\n            } else {\n                // Prevent multiple items at the same time.\n                const max = i < n - 1 ? items[i + 1].p : 1;\n                if (items[i].pe > max) {\n                    items[i].pe = max;\n                }\n            }\n            if (items[i].pe === items[i].p) {\n                items[i].idp = 0;\n            } else {\n                items[i].idp = 1 / (items[i].pe - items[i].p);\n            }\n        }\n\n        // Color merger: we need to split/combine RGBA components.\n\n        // Calculate bezier helper values.;\n        for (i = 0; i < n; i++) {\n            if (!items[i].hasOwnProperty('sm')) {\n                // Smoothness.;\n                items[i].sm = defaultSmoothness;\n            }\n            if (!items[i].hasOwnProperty('s')) {\n                // Slope.;\n                if (i === 0 || i === n - 1 || (items[i].p === 1 /* for onetotwo */)) {\n                    // Horizontal slope at start and end.;\n                    items[i].s = rgba ? [0, 0, 0, 0] : 0;\n                } else {\n                    const pi = items[i - 1];\n                    const ni = items[i + 1];\n                    if (pi.p === ni.p) {\n                        items[i].s = rgba ? [0, 0, 0, 0] : 0;\n                    } else {\n                        if (rgba) {\n                            const nc = MultiSpline.getRgbaComponents(ni.lv);\n                            const pc = MultiSpline.getRgbaComponents(pi.lv);\n                            const d = 1 / (ni.p - pi.p);\n                            items[i].s = [\n                                d * (nc[0] - pc[0]),\n                                d * (nc[1] - pc[1]),\n                                d * (nc[2] - pc[2]),\n                                d * (nc[3] - pc[3])\n                            ];\n                        } else {\n                            items[i].s = (ni.lv - pi.lv) / (ni.p - pi.p);\n                        }\n                    }\n                }\n            }\n        }\n\n        for (i = 0; i < n - 1; i++) {\n            // Calculate value function.;\n            if (!items[i].f) {\n\n                let last = (i === n - 1);\n                if (!items[i].hasOwnProperty('ve')) {\n                    items[i].ve = last ? items[i].lv : items[i + 1].lv;\n                }\n\n                // We can only interpolate on numeric values. Non-numeric values are set literally when reached time.\n                if (Utils.isNumber(items[i].v) && Utils.isNumber(items[i].lv)) {\n                    if (!items[i].hasOwnProperty('sme')) {\n                        items[i].sme = last ? defaultSmoothness : items[i + 1].sm;\n                    }\n                    if (!items[i].hasOwnProperty('se')) {\n                        items[i].se = last ? (rgba ? [0, 0, 0, 0] : 0) : items[i + 1].s;\n                    }\n\n                    // Generate spline.;\n                    if (rgba) {\n                        items[i].v = MultiSpline.getSplineRgbaValueFunction(items[i].v, items[i].ve, items[i].p, items[i].pe, items[i].sm, items[i].sme, items[i].s, items[i].se);\n                    } else {\n                        items[i].v = MultiSpline.getSplineValueFunction(items[i].v, items[i].ve, items[i].p, items[i].pe, items[i].sm, items[i].sme, items[i].s, items[i].se);\n                    }\n\n                    items[i].f = true;\n                }\n            }\n        }\n\n        if (this.length) {\n            this._clear();\n        }\n\n        for (i = 0, n = items.length; i < n; i++) {\n            this._add(items[i]);\n        }\n    }\n\n    _add(item) {\n        this._p.push(item.p || 0);\n        this._pe.push(item.pe || 0);\n        this._idp.push(item.idp || 0);\n        this._f.push(item.f || false);\n        this._v.push(item.hasOwnProperty('v') ? item.v : 0 /* v might be false or null */ );\n        this._lv.push(item.lv || 0);\n        this._sm.push(item.sm || 0);\n        this._s.push(item.s || 0);\n        this._ve.push(item.ve || 0);\n        this._sme.push(item.sme || 0);\n        this._se.push(item.se || 0);\n        this._length++;\n    }\n\n    _getItem(p) {\n        const n = this._length;\n        if (!n) {\n            return -1;\n        }\n\n        if (p < this._p[0]) {\n            return 0;\n        }\n\n        for (let i = 0; i < n; i++) {\n            if (this._p[i] <= p && p < this._pe[i]) {\n                return i;\n            }\n        }\n\n        return n - 1;\n    }\n\n    getValue(p) {\n        const i = this._getItem(p);\n        if (i === -1) {\n            return undefined;\n        } else {\n            if (this._f[i]) {\n                const o = Math.min(1, Math.max(0, (p - this._p[i]) * this._idp[i]));\n                return this._v[i](o);\n            } else {\n                return this._v[i];\n            }\n        }\n    }\n\n    get length() {\n        return this._length;\n    }\n\n    static getRgbaComponents(argb) {\n        let r = ((argb / 65536) | 0) % 256;\n        let g = ((argb / 256) | 0) % 256;\n        let b = argb % 256;\n        let a = ((argb / 16777216) | 0);\n        return [r, g, b, a];\n    };\n\n    static getSplineValueFunction(v1, v2, p1, p2, o1, i2, s1, s2) {\n        // Normalize slopes because we use a spline that goes from 0 to 1.\n        let dp = p2 - p1;\n        s1 *= dp;\n        s2 *= dp;\n\n        let helpers = MultiSpline.getSplineHelpers(v1, v2, o1, i2, s1, s2);\n        if (!helpers) {\n            return function (p) {\n                if (p === 0) return v1;\n                if (p === 1) return v2;\n\n                return v2 * p + v1 * (1 - p);\n            };\n        } else {\n            return function (p) {\n                if (p === 0) return v1;\n                if (p === 1) return v2;\n                return MultiSpline.calculateSpline(helpers, p);\n            };\n        }\n    };\n\n    static getSplineRgbaValueFunction(v1, v2, p1, p2, o1, i2, s1, s2) {\n        // Normalize slopes because we use a spline that goes from 0 to 1.\n        let dp = p2 - p1;\n        s1[0] *= dp;\n        s1[1] *= dp;\n        s1[2] *= dp;\n        s1[3] *= dp;\n        s2[0] *= dp;\n        s2[1] *= dp;\n        s2[2] *= dp;\n        s2[3] *= dp;\n\n        let cv1 = MultiSpline.getRgbaComponents(v1);\n        let cv2 = MultiSpline.getRgbaComponents(v2);\n\n        let helpers = [\n            MultiSpline.getSplineHelpers(cv1[0], cv2[0], o1, i2, s1[0], s2[0]),\n            MultiSpline.getSplineHelpers(cv1[1], cv2[1], o1, i2, s1[1], s2[1]),\n            MultiSpline.getSplineHelpers(cv1[2], cv2[2], o1, i2, s1[2], s2[2]),\n            MultiSpline.getSplineHelpers(cv1[3], cv2[3], o1, i2, s1[3], s2[3])\n        ];\n\n        if (!helpers[0]) {\n            return function (p) {\n                // Linear.\n                if (p === 0) return v1;\n                if (p === 1) return v2;\n\n                return MultiSpline.mergeColors(v2, v1, p);\n            };\n        } else {\n            return function (p) {\n                if (p === 0) return v1;\n                if (p === 1) return v2;\n\n                return MultiSpline.getArgbNumber([\n                    Math.min(255, MultiSpline.calculateSpline(helpers[0], p)),\n                    Math.min(255, MultiSpline.calculateSpline(helpers[1], p)),\n                    Math.min(255, MultiSpline.calculateSpline(helpers[2], p)),\n                    Math.min(255, MultiSpline.calculateSpline(helpers[3], p))\n                ]);\n            };\n        }\n\n    };\n\n    /**\n     * Creates helpers to be used in the spline function.\n     * @param {number} v1\n     *   From value.\n     * @param {number} v2\n     *   To value.\n     * @param {number} o1\n     *   From smoothness (0 = linear, 1 = smooth).\n     * @param {number} s1\n     *   From slope (0 = horizontal, infinite = vertical).\n     * @param {number} i2\n     *   To smoothness.\n     * @param {number} s2\n     *   To slope.\n     * @returns {Number[]}\n     *   The helper values to be supplied to the spline function.\n     *   If the configuration is actually linear, null is returned.\n     */\n    static getSplineHelpers(v1, v2, o1, i2, s1, s2) {\n        if (!o1 && !i2) {\n            // Linear.\n            return null;\n        }\n\n        // Cubic bezier points.\n        // http://cubic-bezier.com/\n        let csx = o1;\n        let csy = v1 + s1 * o1;\n        let cex = 1 - i2;\n        let cey = v2 - s2 * i2;\n\n        let xa = 3 * csx - 3 * cex + 1;\n        let xb = -6 * csx + 3 * cex;\n        let xc = 3 * csx;\n\n        let ya = 3 * csy - 3 * cey + v2 - v1;\n        let yb = 3 * (cey + v1) - 6 * csy;\n        let yc = 3 * (csy - v1);\n        let yd = v1;\n\n        return [xa, xb, xc, ya, yb, yc, yd];\n    };\n\n    /**\n     * Calculates the intermediate spline value based on the specified helpers.\n     * @param {number[]} helpers\n     *   Obtained from getSplineHelpers.\n     * @param {number} p\n     * @return {number}\n     */\n    static calculateSpline(helpers, p) {\n        let xa = helpers[0];\n        let xb = helpers[1];\n        let xc = helpers[2];\n        let ya = helpers[3];\n        let yb = helpers[4];\n        let yc = helpers[5];\n        let yd = helpers[6];\n\n        if (xa === -2 && ya === -2 && xc === 0 && yc === 0) {\n            // Linear.\n            return p;\n        }\n\n        // Find t for p.\n        let t = 0.5, cbx, dx;\n\n        for (let it = 0; it < 20; it++) {\n            // Cubic bezier function: f(t)=t*(t*(t*a+b)+c).\n            cbx = t * (t * (t * xa + xb) + xc);\n\n            dx = p - cbx;\n            if (dx > -1e-8 && dx < 1e-8) {\n                // Solution found!\n                return t * (t * (t * ya + yb) + yc) + yd;\n            }\n\n            // Cubic bezier derivative function: f'(t)=t*(t*(3*a)+2*b)+c\n            let cbxd = t * (t * (3 * xa) + 2 * xb) + xc;\n\n            if (cbxd > 1e-10 && cbxd < 1e-10) {\n                // Problematic. Fall back to binary search method.\n                break;\n            }\n\n            t += dx / cbxd;\n        }\n\n        // Fallback: binary search method. This is more reliable when there are near-0 slopes.\n        let minT = 0;\n        let maxT = 1;\n        for (let it = 0; it < 20; it++) {\n            t = 0.5 * (minT + maxT);\n\n            // Cubic bezier function: f(t)=t*(t*(t*a+b)+c)+d.\n            cbx = t * (t * (t * xa + xb) + xc);\n\n            dx = p - cbx;\n            if (dx > -1e-8 && dx < 1e-8) {\n                // Solution found!\n                return t * (t * (t * ya + yb) + yc) + yd;\n            }\n\n            if (dx < 0) {\n                maxT = t;\n            } else {\n                minT = t;\n            }\n        }\n\n        return t;\n    };\n\n    static mergeColors(c1, c2, p) {\n        let r1 = ((c1 / 65536) | 0) % 256;\n        let g1 = ((c1 / 256) | 0) % 256;\n        let b1 = c1 % 256;\n        let a1 = ((c1 / 16777216) | 0);\n\n        let r2 = ((c2 / 65536) | 0) % 256;\n        let g2 = ((c2 / 256) | 0) % 256;\n        let b2 = c2 % 256;\n        let a2 = ((c2 / 16777216) | 0);\n\n        let r = r1 * p + r2 * (1 - p);\n        let g = g1 * p + g2 * (1 - p);\n        let b = b1 * p + b2 * (1 - p);\n        let a = a1 * p + a2 * (1 - p);\n\n        return Math.round(a) * 16777216 + Math.round(r) * 65536 + Math.round(g) * 256 + Math.round(b);\n    };\n\n    static getArgbNumber(rgba) {\n        rgba[0] = Math.max(0, Math.min(255, rgba[0]));\n        rgba[1] = Math.max(0, Math.min(255, rgba[1]));\n        rgba[2] = Math.max(0, Math.min(255, rgba[2]));\n        rgba[3] = Math.max(0, Math.min(255, rgba[3]));\n        let v = ((rgba[3] | 0) << 24) + ((rgba[0] | 0) << 16) + ((rgba[1] | 0) << 8) + (rgba[2] | 0);\n        if (v < 0) {\n            v = 0xFFFFFFFF + v + 1;\n        }\n        return v;\n    };\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class AnimationActionSettings {\n\n    constructor(animationSettings) {\n\n        this.animationSettings = animationSettings;\n\n        /**\n         * The selector that selects the elements.\n         * @type {string}\n         */\n        this._selector = \"\";\n\n        /**\n         * The value items, ordered by progress offset.\n         * @type {MultiSpline}\n         * @private;\n         */\n        this._items = new MultiSpline();\n\n        /**\n         * The affected properties (paths).\n         * @private;\n         */\n        this._props = [];\n\n        /**\n         * Property setters, indexed according to props.\n         * @private;\n         */\n        this._propSetters = [];\n\n        this._resetValue = undefined;\n        this._hasResetValue = false;\n\n        this._hasColorProperty = undefined;\n    }\n\n    getResetValue() {\n        if (this._hasResetValue) {\n            return this._resetValue;\n        } else {\n            return this._items.getValue(0);\n        }\n    }\n\n    apply(element, p, factor) {\n        const elements = this.getAnimatedElements(element);\n\n        let v = this._items.getValue(p);\n\n        if (v === undefined || !elements.length) {\n            return;\n        }\n\n        if (factor !== 1) {\n            // Stop factor.;\n            let sv = this.getResetValue();\n\n            if (Utils.isNumber(v) && Utils.isNumber(sv)) {\n                if (this.hasColorProperty()) {\n                    v = StageUtils.mergeColors(v, sv, factor);\n                } else {\n                    v = StageUtils.mergeNumbers(v, sv, factor);\n                }\n            }\n        }\n\n        // Apply transformation to all components.;\n        const n = this._propSetters.length;\n\n        const m = elements.length;\n        for (let j = 0; j < m; j++) {\n            for (let i = 0; i < n; i++) {\n                this._propSetters[i](elements[j], v);\n            }\n        }\n    }\n    \n    getAnimatedElements(element) {\n        return element.select(this._selector);\n    }\n\n    reset(element) {\n        const elements = this.getAnimatedElements(element);\n\n        let v = this.getResetValue();\n\n        if (v === undefined || !elements.length) {\n            return;\n        }\n\n        // Apply transformation to all components.\n        const n = this._propSetters.length;\n\n        const m = elements.length;\n        for (let j = 0; j < m; j++) {\n            for (let i = 0; i < n; i++) {\n                this._propSetters[i](elements[j], v);\n            }\n        }\n    }\n    \n    set selector(v) {\n        this._selector = v;\n    }\n\n    set t(v) {\n        this.selector = v;\n    }\n\n    get resetValue() {\n        return this._resetValue;\n    }\n    \n    set resetValue(v) {\n        this._resetValue = v;\n        this._hasResetValue = (v !== undefined);\n    }\n\n    set rv(v) {\n        this.resetValue = v;\n    }\n\n    set value(v) {\n        this._items.parse(this.hasColorProperty(), v);\n    }\n\n    set v(v) {\n        this.value = v;\n    }\n\n    set properties(v) {\n        if (!Array.isArray(v)) {\n            v = [v];\n        }\n\n        this._props = [];\n\n        v.forEach((prop) => {\n            this._props.push(prop);\n            this._propSetters.push(Element.getSetter(prop));\n        });\n    }\n\n    set property(v) {\n        this._hasColorProperty = undefined;\n        this.properties = v;\n    }\n\n    set p(v) {\n        this.properties = v;\n    }\n\n    patch(settings) {\n        Base.patchObject(this, settings);\n    }\n\n    hasColorProperty() {\n        if (this._hasColorProperty === undefined) {\n            this._hasColorProperty = this._props.length ? Element.isColorProperty(this._props[0]) : false;\n        }\n        return this._hasColorProperty;\n    }\n}\n\nAnimationActionSettings.prototype.isAnimationActionSettings = true;\n\nimport MultiSpline from \"../tools/MultiSpline.mjs\";\nimport Element from \"../tree/Element.mjs\";\nimport StageUtils from \"../tree/StageUtils.mjs\";\nimport Utils from \"../tree/Utils.mjs\";\nimport Base from \"../tree/Base.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport StageUtils from \"../tree/StageUtils.mjs\";\nimport AnimationActionSettings from \"./AnimationActionSettings.mjs\";\nimport Base from \"../tree/Base.mjs\";\n\nexport default class AnimationSettings {\n    constructor() {\n        /**\n         * @type {AnimationActionSettings[]}\n         */\n        this._actions = [];\n\n        this.delay = 0;\n        this.duration = 1;\n\n        this.repeat = 0;\n        this.repeatOffset = 0;\n        this.repeatDelay = 0;\n\n        this.autostop = false;\n\n        this.stopMethod = AnimationSettings.STOP_METHODS.FADE;\n        this._stopTimingFunction = 'ease';\n        this._stopTimingFunctionImpl = StageUtils.getTimingFunction(this._stopTimingFunction);\n        this.stopDuration = 0;\n        this.stopDelay = 0;\n    }\n\n    get actions() {\n        return this._actions;\n    }\n\n    set actions(v) {\n        this._actions = [];\n        for (let i = 0, n = v.length; i < n; i++) {\n            const e = v[i];\n            if (!e.isAnimationActionSettings) {\n                const aas = new AnimationActionSettings(this);\n                aas.patch(e);\n                this._actions.push(aas);\n            } else {\n                this._actions.push(e);\n            }\n        }\n    }\n\n    /**\n     * Applies the animation to the specified element, for the specified progress between 0 and 1.\n     * @param {Element} element;\n     * @param {number} p;\n     * @param {number} factor;\n     */\n    apply(element, p, factor = 1) {\n        this._actions.forEach(function(action) {\n            action.apply(element, p, factor);\n        });\n    }\n\n    /**\n     * Resets the animation to the reset values.\n     * @param {Element} element;\n     */\n    reset(element) {\n        this._actions.forEach(function(action) {\n            action.reset(element);\n        });\n    }\n\n    get stopTimingFunction() {\n        return this._stopTimingFunction;\n    }\n\n    set stopTimingFunction(v) {\n        this._stopTimingFunction = v;\n        this._stopTimingFunctionImpl = StageUtils.getTimingFunction(v);\n    }\n\n    get stopTimingFunctionImpl() {\n        return this._stopTimingFunctionImpl;\n    }\n\n    patch(settings) {\n        Base.patchObject(this, settings);\n    }\n\n}\n\nAnimationSettings.STOP_METHODS = {\n    FADE: 'fade',\n    REVERSE: 'reverse',\n    FORWARD: 'forward',\n    IMMEDIATE: 'immediate',\n    ONETOTWO: 'onetotwo'\n};\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport EventEmitter from \"../EventEmitter.mjs\";\nimport AnimationSettings from \"./AnimationSettings.mjs\";\n\nexport default class Animation extends EventEmitter {\n\n    constructor(manager, settings, element) {\n        super();\n\n        this.manager = manager;\n\n        this._settings = settings;\n\n        this._element = element;\n\n        this._state = Animation.STATES.IDLE;\n\n        this._p = 0;\n        this._delayLeft = 0;\n        this._repeatsLeft = 0;\n\n        this._stopDelayLeft = 0;\n        this._stopP = 0;\n    }\n\n    start() {\n        if (this._element && this._element.attached) {\n            this._p = 0;\n            this._delayLeft = this.settings.delay;\n            this._repeatsLeft = this.settings.repeat;\n            this._state = Animation.STATES.PLAYING;\n            this.emit('start');\n            this.checkActive();\n        } else {\n            console.warn(\"[Lightning] Element must be attached before starting animation\");\n        }\n    }\n\n    play() {\n        if (this._state === Animation.STATES.PAUSED) {\n            // Continue.;\n            this._state = Animation.STATES.PLAYING;\n            this.checkActive();\n            this.emit('resume');\n        } else if (this._state == Animation.STATES.STOPPING && this.settings.stopMethod == AnimationSettings.STOP_METHODS.REVERSE) {\n            // Continue.;\n            this._state = Animation.STATES.PLAYING;\n            this.emit('stopContinue');\n        } else if (this._state != Animation.STATES.PLAYING && this._state != Animation.STATES.FINISHED) {\n            // Restart.;\n            this.start();\n        }\n    }\n\n    pause() {\n        if (this._state === Animation.STATES.PLAYING) {\n            this._state = Animation.STATES.PAUSED;\n            this.emit('pause');\n        }\n    }\n\n    replay() {\n        if (this._state == Animation.STATES.FINISHED) {\n            this.start();\n        } else {\n            this.play();\n        }\n    }\n\n    skipDelay() {\n        this._delayLeft = 0;\n        this._stopDelayLeft = 0;\n    }\n\n    finish() {\n        if (this._state === Animation.STATES.PLAYING) {\n            this._delayLeft = 0;\n            this._p = 1;\n        } else if (this._state === Animation.STATES.STOPPING) {\n            this._stopDelayLeft = 0;\n            this._p = 0;\n        }\n    }\n\n    stop() {\n        if (this._state === Animation.STATES.STOPPED || this._state === Animation.STATES.IDLE) return;\n\n        this._stopDelayLeft = this.settings.stopDelay || 0;\n\n        if (((this.settings.stopMethod === AnimationSettings.STOP_METHODS.IMMEDIATE) && !this._stopDelayLeft) || this._delayLeft > 0) {\n            // Stop upon next progress.;\n            this._state = Animation.STATES.STOPPING;\n            this.emit('stop');\n        } else {\n            if (this.settings.stopMethod === AnimationSettings.STOP_METHODS.FADE) {\n                this._stopP = 0;\n            }\n\n            this._state = Animation.STATES.STOPPING;\n            this.emit('stop');\n        }\n\n        this.checkActive();\n    }\n\n    stopNow() {\n        if (this._state !== Animation.STATES.STOPPED || this._state !== Animation.STATES.IDLE) {\n            this._state = Animation.STATES.STOPPING;\n            this._p = 0;\n            this.emit('stop');\n            this.reset();\n            this._state = Animation.STATES.STOPPED;\n            this.emit('stopFinish');\n        }\n    }\n\n    isPaused() {\n        return this._state === Animation.STATES.PAUSED;\n    }\n\n    isPlaying() {\n        return this._state === Animation.STATES.PLAYING;\n    }\n\n    isStopping() {\n        return this._state === Animation.STATES.STOPPING;\n    }\n\n    isFinished() {\n        return this._state === Animation.STATES.FINISHED;\n    }\n\n    checkActive() {\n        if (this.isActive()) {\n            this.manager.addActive(this);\n        }\n    }\n\n    isActive() {\n        return (this._state == Animation.STATES.PLAYING || this._state == Animation.STATES.STOPPING) && this._element && this._element.attached;\n    }\n\n    progress(dt) {\n        if (!this._element) return;\n        this._progress(dt);\n        this.apply();\n    }\n\n    _progress(dt) {\n        if (this._state == Animation.STATES.STOPPING) {\n            this._stopProgress(dt);\n            return;\n        }\n\n        if (this._state != Animation.STATES.PLAYING) {\n            return;\n        }\n\n        if (this._delayLeft > 0) {\n            this._delayLeft -= dt;\n\n            if (this._delayLeft < 0) {\n                dt = -this._delayLeft;\n                this._delayLeft = 0;\n\n                this.emit('delayEnd');\n            } else {\n                return;\n            }\n        }\n\n        if (this.settings.duration === 0) {\n            this._p = 1;\n        } else if (this.settings.duration > 0) {\n            this._p += dt / this.settings.duration;\n        }\n        if (this._p >= 1) {\n            // Finished!;\n            if (this.settings.repeat == -1 || this._repeatsLeft > 0) {\n                if (this._repeatsLeft > 0) {\n                    this._repeatsLeft--;\n                }\n                this._p = this.settings.repeatOffset;\n                this.emit('progress', this._p);\n                \n                if (this.settings.repeatDelay) {\n                    this._delayLeft = this.settings.repeatDelay;\n                }\n\n                this.emit('repeat', this._repeatsLeft);\n            } else {\n                this._p = 1;\n                this.emit('progress', this._p);\n                \n                this._state = Animation.STATES.FINISHED;\n                this.emit('finish');\n                if (this.settings.autostop) {\n                    this.stop();\n                }\n            }\n        } else {\n            this.emit('progress', this._p);\n        }\n    }\n    \n    _stopProgress(dt) {\n        let duration = this._getStopDuration();\n\n        if (this._stopDelayLeft > 0) {\n            this._stopDelayLeft -= dt;\n\n            if (this._stopDelayLeft < 0) {\n                dt = -this._stopDelayLeft;\n                this._stopDelayLeft = 0;\n\n                this.emit('stopDelayEnd');\n            } else {\n                return;\n            }\n        }\n        if (this.settings.stopMethod == AnimationSettings.STOP_METHODS.IMMEDIATE) {\n            this._state = Animation.STATES.STOPPED;\n            this.emit('stopFinish');\n        } else if (this.settings.stopMethod == AnimationSettings.STOP_METHODS.REVERSE) {\n            if (duration === 0) {\n                this._p = 0;\n            } else if (duration > 0) {\n                this._p -= dt / duration;\n            }\n\n            if (this._p <= 0) {\n                this._p = 0;\n                this._state = Animation.STATES.STOPPED;\n                this.emit('stopFinish');\n            }\n        } else if (this.settings.stopMethod == AnimationSettings.STOP_METHODS.FADE) {\n            this._progressStopTransition(dt);\n            if (this._stopP >= 1) {\n                this._p = 0;\n                this._state = Animation.STATES.STOPPED;\n                this.emit('stopFinish');\n            }\n        } else if (this.settings.stopMethod == AnimationSettings.STOP_METHODS.ONETOTWO) {\n            if (this._p < 2) {\n                if (duration === 0) {\n                    this._p = 2;\n                } else if (duration > 0) {\n                    if (this._p < 1) {\n                        this._p += dt / this.settings.duration;\n                    } else {\n                        this._p += dt / duration;\n                    }\n                }\n                if (this._p >= 2) {\n                    this._p = 2;\n                    this._state = Animation.STATES.STOPPED;\n                    this.emit('stopFinish');\n                } else {\n                    this.emit('progress', this._p);\n                }\n            }\n        } else if (this.settings.stopMethod == AnimationSettings.STOP_METHODS.FORWARD) {\n            if (this._p < 1) {\n                if (this.settings.duration == 0) {\n                    this._p = 1;\n                } else {\n                    this._p += dt / this.settings.duration;\n                }\n                if (this._p >= 1) {\n                    if (this.settings.stopMethod == AnimationSettings.STOP_METHODS.FORWARD) {\n                        this._p = 1;\n                        this._state = Animation.STATES.STOPPED;\n                        this.emit('stopFinish');\n                    } else {\n                        if (this._repeatsLeft > 0) {\n                            this._repeatsLeft--;\n                            this._p = 0;\n                            this.emit('repeat', this._repeatsLeft);\n                        } else {\n                            this._p = 1;\n                            this._state = Animation.STATES.STOPPED;\n                            this.emit('stopFinish');\n                        }\n                    }\n                } else {\n                    this.emit('progress', this._p);\n                }\n            }\n        }\n        \n    }\n    \n    _progressStopTransition(dt) {\n        if (this._stopP < 1) {\n            if (this._stopDelayLeft > 0) {\n                this._stopDelayLeft -= dt;\n\n                if (this._stopDelayLeft < 0) {\n                    dt = -this._stopDelayLeft;\n                    this._stopDelayLeft = 0;\n\n                    this.emit('delayEnd');\n                } else {\n                    return;\n                }\n            }\n            \n            const duration = this._getStopDuration();\n\n            if (duration == 0) {\n                this._stopP = 1;\n            } else {\n                this._stopP += dt / duration;\n            }\n            if (this._stopP >= 1) {\n                // Finished!;\n                this._stopP = 1;\n            }\n        }\n    }\n\n    _getStopDuration() {\n        return this.settings.stopDuration || this.settings.duration;\n    }\n\n    apply() {\n        if (this._state === Animation.STATES.STOPPED) {\n            this.reset();\n        } else {\n            let factor = 1;\n            if (this._state === Animation.STATES.STOPPING && this.settings.stopMethod === AnimationSettings.STOP_METHODS.FADE) {\n                factor = (1 - this.settings.stopTimingFunctionImpl(this._stopP));\n            }\n            this._settings.apply(this._element, this._p, factor);\n        }\n    }\n\n    reset() {\n        this._settings.reset(this._element);\n    }\n\n    get state() {\n        return this._state;\n    }\n\n    get p() {\n        return this._p;\n    }\n\n    get delayLeft() {\n        return this._delayLeft;\n    }\n\n    get element() {\n        return this._element;\n    }\n\n    get frame() {\n        return Math.round(this._p * this._settings.duration * 60);\n    }\n\n    get settings() {\n        return this._settings;\n    }\n\n}\n\nAnimation.STATES = {\n    IDLE: 0,\n    PLAYING: 1,\n    STOPPING: 2,\n    STOPPED: 3,\n    FINISHED: 4,\n    PAUSED: 5\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport default class AnimationManager {\n\n    constructor(stage) {\n        this.stage = stage;\n\n        this.stage.on('frameStart', () => this.progress());\n\n        /**\n         * All running animations on attached subjects.\n         * @type {Set<Animation>}\n         */\n        this.active = new Set();\n    }\n\n    progress() {\n        if (this.active.size) {\n            let dt = this.stage.dt;\n\n            let filter = false;\n            this.active.forEach(function(a) {\n                if (a.isActive()) {\n                    a.progress(dt);\n                } else {\n                    filter = true;\n                }\n            });\n\n            if (filter) {\n                this.active = new Set([...this.active].filter(t => t.isActive()));\n            }\n        }\n    }\n\n    createAnimation(element, settings) {\n        if (Utils.isObjectLiteral(settings)) {\n            // Convert plain object to proper settings object.\n            settings = this.createSettings(settings);\n        }\n\n        return new Animation(\n            this,\n            settings,\n            element\n        );\n    }\n\n    createSettings(settings) {\n        const animationSettings = new AnimationSettings();\n        Base.patchObject(animationSettings, settings);\n        return animationSettings;\n    }\n\n    addActive(transition) {\n        this.active.add(transition);\n    }\n}\n\nimport Base from \"../tree/Base.mjs\";\nimport Utils from \"../tree/Utils.mjs\";\nimport AnimationSettings from \"./AnimationSettings.mjs\";\nimport Animation from \"./Animation.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Texture from \"../tree/Texture.mjs\";\n\nexport default class RectangleTexture extends Texture {\n\n    _getLookupId() {\n        return '__whitepix';\n    }\n\n    _getSourceLoader() {\n        return function(cb) {\n            var whitePixel = new Uint8Array([255, 255, 255, 255]);\n            cb(null, {source: whitePixel, w: 1, h: 1, permanent: true});\n        }\n    }\n\n    isAutosizeTexture() {\n        return false;\n    }\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Application render tree.\n */\n\nimport EventEmitter from \"../EventEmitter.mjs\";\nimport Utils from \"./Utils.mjs\";\nimport WebGLRenderer from \"../renderer/webgl/WebGLRenderer.mjs\";\nimport C2dRenderer from \"../renderer/c2d/C2dRenderer.mjs\";\nimport SparkRenderer from \"../renderer/spark/SparkRenderer.mjs\";\nimport PlatformLoader from \"../platforms/PlatformLoader.mjs\";\nimport WebGLStateManager from \"../tools/WebGLStateManager.mjs\";\nimport Shader from \"./Shader.mjs\";\n\nexport default class Stage extends EventEmitter {\n\n    constructor(options = {}) {\n        super();\n        this._setOptions(options);\n\n        this._usedMemory = 0;\n        this._lastGcFrame = 0;\n\n        // attempt to track VRAM usage more accurately by accounting for different color channels\n        this._usedVramAlpha = 0;\n        this._usedVramNonAlpha = 0;\n\n        const platformType = Stage.platform ? Stage.platform : PlatformLoader.load(options);\n        this.platform = new platformType();\n\n        if (this.platform.init) {\n            this.platform.init(this);\n        }\n\n        this.gl = null;\n        this.c2d = null;\n\n        const context = this.getOption('context');\n        if (context) {\n            if (context.useProgram) {\n                this.gl = context;\n            } else {\n                this.c2d = context;\n            }\n        } else {\n            if (Utils.isWeb && (!Stage.isWebglSupported() || this.getOption('canvas2d'))) {\n                this.c2d = this.platform.createCanvasContext(this.getOption('w'), this.getOption('h'));\n            } else {\n                this.gl = this.platform.createWebGLContext(this.getOption('w'), this.getOption('h'));\n            }\n        }\n\n        if (this.gl) {\n            // Wrap in WebGLStateManager.\n            // This prevents unnecessary double WebGL commands from being executed, and allows context switching.\n            // Context switching is necessary when reusing the same context for Three.js.\n            // Note that the user must make sure that the WebGL context is untouched before creating the application,\n            //  when manually passing over a canvas or context in the options.\n            WebGLStateManager.enable(this.gl, \"lightning\")\n        }\n\n        this._mode = this.gl ? 0 : 1;\n\n        // Override width and height.\n        if (this.getCanvas()) {\n            if (this.getOption('devicePixelRatio') !== 1) {\n                const ratio = this.getOption('devicePixelRatio');\n                // set correct display sie\n                this.getCanvas().style.width = this._options['w'] / ratio  + 'px';\n                this.getCanvas().style.height = this._options['h'] / ratio + 'px';\n            }\n\n            // set display buffer size\n            this._options.w = this.getCanvas().width;\n            this._options.h = this.getCanvas().height;\n        }\n\n        if (this._mode === 0) {\n            if (Utils.isSpark) {\n                this._renderer = new SparkRenderer(this);\n            } else {\n                this._renderer = new WebGLRenderer(this);\n            }\n        } else {\n            this._renderer = new C2dRenderer(this);\n        }\n\n        this.setClearColor(this.getOption('clearColor'));\n\n        this.frameCounter = 0;\n\n        this.transitions = new TransitionManager(this);\n        this.animations = new AnimationManager(this);\n\n        this.textureManager = new TextureManager(this);\n        this.textureThrottler = new TextureThrottler(this);\n\n        this.startTime = 0;\n        this.currentTime = 0;\n        this.dt = 0;\n\n        // Preload rectangle texture, so that we can skip some border checks for loading textures.\n        this.rectangleTexture = new RectangleTexture(this);\n        this.rectangleTexture.load();\n\n        // Never clean up because we use it all the time.\n        this.rectangleTexture.source.permanent = true;\n\n        this.ctx = new CoreContext(this);\n\n        this._updateSourceTextures = new Set();\n    }\n\n    get renderer() {\n        return this._renderer;\n    }\n\n    static isWebglSupported() {\n        if (Utils.isNode) {\n            return true;\n        }\n\n        try {\n            return !!window.WebGLRenderingContext;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    /**\n     * Returns the rendering mode.\n     * @returns {number}\n     *  0: WebGL\n     *  1: Canvas2d\n     */\n    get mode() {\n        return this._mode;\n    }\n\n    isWebgl() {\n        return this.mode === 0;\n    }\n\n    isC2d() {\n        return this.mode === 1;\n    }\n\n    getOption(name) {\n        return this._options[name];\n    }\n\n    _setOptions(o) {\n        this._options = {};\n\n        let opt = (name, def) => {\n            let value = o[name];\n\n            if (value === undefined) {\n                this._options[name] = def;\n            } else {\n                this._options[name] = value;\n            }\n        }\n\n        opt('canvas', null);\n        opt('context', null);\n        opt('w', 1920);\n        opt('h', 1080);\n        opt('srcBasePath', null);\n        opt('memoryPressure', 24e6);\n        opt('bufferMemory', 2e6);\n        opt('textRenderIssueMargin', 0);\n        opt('fontSharp', { precision: 0.6666666667, fontSize: 24 })\n        opt('clearColor', [0, 0, 0, 0]);\n        opt('defaultFontFace', 'sans-serif');\n        opt('fixedDt', 0);\n        opt('useImageWorker', true);\n        opt('autostart', true);\n        opt('precision', 1);\n        opt('canvas2d', false);\n        opt('platform', null);\n        opt('readPixelsBeforeDraw', false);\n        opt('devicePixelRatio', 1)       \n        opt('readPixelsAfterDraw', false);\n        opt('readPixelsAfterDrawThreshold', 0);\n        opt('debugFrame', false);\n        opt('forceTxCanvasSource', false);\n        opt('pauseRafLoopOnIdle', false);\n        opt('RTL', false);\n\n        if (o['devicePixelRatio'] != null && o['devicePixelRatio'] !== 1) {\n            this._options['precision'] *= o['devicePixelRatio']\n            this._options['w'] *= o['devicePixelRatio']\n            this._options['h'] *= o['devicePixelRatio']\n        }\n    }\n\n    setApplication(app) {\n        this.application = app;\n    }\n\n    init() {\n\n        if (this.application.getOption('debug') && this.platform._imageWorker) {\n            console.log('[Lightning] Using image worker!');\n        }\n\n        if (this.application.getOption('debug') && this.c2d) {\n            console.log('[Lightning] Using canvas2d renderer');\n        }\n\n        this.application.setAsRoot();\n        if (this.getOption('autostart')) {\n            this.platform.startLoop();\n        }\n    }\n\n    destroy() {\n        this.platform.stopLoop();\n        this.platform.destroy();\n        this.ctx.destroy();\n        this.textureManager.destroy();\n        this._renderer.destroy();\n\n        // clear last rendered frame\n        if (this.gl) {\n            this.gl.clearColor(0.0, 0.0, 0.0, 0.0);\n            this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n        } else if (this.c2d) {\n            this.c2d.clearRect(\n                0, 0, this.c2d.canvas.width, this.c2d.canvas.height\n            );\n        }\n\n        this.gl = null;\n        this.c2d = null;\n        this.ctx = null;\n        this._options = null;\n        this.platform = null;\n        this.textureManager = null;\n        this._renderer = null;\n\n        delete this.gl;\n        delete this.c2d;\n        delete this.ctx;\n        delete this._options;\n        delete this.platform;\n        delete this.textureManager;\n        delete this._renderer;\n    }\n\n    stop() {\n        this.platform.stopLoop();\n    }\n\n    resume() {\n        this.platform.startLoop();\n    }\n\n    get root() {\n        return this.application;\n    }\n\n    getCanvas() {\n        return this._mode ? this.c2d.canvas : this.gl.canvas;\n    }\n\n    getRenderPrecision() {\n        return this._options.precision;\n    }\n\n    /**\n     * Marks a texture for updating it's source upon the next drawFrame.\n     * @param texture\n     */\n    addUpdateSourceTexture(texture) {\n        if (this._updatingFrame) {\n            // When called from the upload loop, we must immediately load the texture in order to avoid a 'flash'.\n            texture._performUpdateSource();\n        } else {\n            this._updateSourceTextures.add(texture);\n        }\n    }\n\n    removeUpdateSourceTexture(texture) {\n        if (this._updateSourceTextures) {\n            this._updateSourceTextures.delete(texture);\n        }\n    }\n\n    hasUpdateSourceTexture(texture) {\n        return (this._updateSourceTextures && this._updateSourceTextures.has(texture));\n    }\n\n\n    _performUpdateSource() {\n        if (this._updateSourceTextures.size) {\n            this._updateSourceTextures.forEach(texture => {\n                texture._performUpdateSource();\n            });\n            this._updateSourceTextures = new Set();\n        }\n    }\n\n    _calculateDt() {\n        this.startTime = this.currentTime;\n        this.currentTime = this.platform.getHrTime();\n\n        if (this._options.fixedDt) {\n            this.dt = this._options.fixedDt;\n        } else {\n            this.dt = (!this.startTime) ? .02 : .001 * (this.currentTime - this.startTime);\n        }\n    }\n\n    updateFrame() {\n        this._calculateDt();\n        this.emit('frameStart');\n        this._performUpdateSource();\n        this.emit('update');\n    }\n\n    idleFrame() {\n        this.textureThrottler.processSome();\n        this.emit('frameEnd');\n        this.frameCounter++;\n    }\n\n    renderFrame() {\n        const changes = this.ctx.hasRenderUpdates();\n\n        // Update may cause textures to be loaded in sync, so by processing them here we may be able to show them\n        // during the current frame already.\n        this.textureThrottler.processSome();\n\n        if (changes) {\n            this._updatingFrame = true;\n            this.ctx.update();\n            this.ctx.render();\n            this._updatingFrame = false;\n        }\n\n        this.platform.nextFrame(changes);\n\n        this.emit('frameEnd');\n\n        this.frameCounter++;\n    }\n\n    isUpdatingFrame() {\n        return this._updatingFrame;\n    }\n\n    drawFrame() {\n        // Maintain original functionality of `drawFrame()` while retaining the\n        // RAF mitigration feature from: https://github.com/rdkcentral/Lightning/pull/402\n        // The full functionality of this method is relied directly by our own unit tests and\n        // the unit tests of third party users\n        this.updateFrame();\n        this.renderFrame();\n    }\n\n    forceRenderUpdate() {\n        // Enforce re-rendering.\n        if (this.root) {\n            this.root.core._parent.setHasRenderUpdates(1);\n        }\n    }\n\n    setClearColor(clearColor) {\n        this.forceRenderUpdate();\n        if (clearColor === null) {\n            // Do not clear.\n            this._clearColor = null;\n        } else if (Array.isArray(clearColor)) {\n            this._clearColor = clearColor;\n        } else {\n            this._clearColor = StageUtils.getRgbaComponentsNormalized(clearColor);\n        }\n    }\n\n    getClearColor() {\n        return this._clearColor;\n    }\n\n    createElement(settings) {\n        if (settings) {\n            return this.element(settings);\n        } else {\n            return new Element(this);\n        }\n    }\n\n    createShader(settings) {\n        return Shader.create(this, settings);\n    }\n\n    element(settings) {\n        if (settings.isElement) return settings;\n\n        let element;\n        if (settings.type) {\n            element = new settings.type(this);\n        } else {\n            element = new Element(this);\n        }\n\n        element.patch(settings);\n\n        return element;\n    }\n\n    c(settings) {\n        return this.element(settings);\n    }\n\n    get w() {\n        return this._options.w;\n    }\n\n    get h() {\n        return this._options.h;\n    }\n\n    get coordsWidth() {\n        return this.w / this._options.precision;\n    }\n\n    get coordsHeight() {\n        return this.h / this._options.precision;\n    }\n\n    addMemoryUsage(delta) {\n        this._usedMemory += delta;\n        if (this._lastGcFrame !== this.frameCounter) {\n            if (this._usedMemory > this.getOption('memoryPressure')) {\n                this.gc(false);\n                if (this._usedMemory > this.getOption('memoryPressure') - 2e6) {\n                    // Too few released. Aggressive cleanup.\n                    this.gc(true);\n                }\n            }\n        }\n    }\n\n    get usedMemory() {\n        return this._usedMemory;\n    }\n\n    addVramUsage(delta, alpha) {\n        if (alpha) {\n            this._usedVramAlpha += delta;\n        }\n        else {\n            this._usedVramNonAlpha += delta;\n        }\n    }\n\n    get usedVramAlpha() {\n        return this._usedVramAlpha;\n    }\n\n    get usedVramNonAlpha() {\n        return this._usedVramNonAlpha;\n    }\n\n    get usedVram() {\n        return this._usedVramAlpha + this._usedVramNonAlpha;\n    }\n\n    gc(aggressive) {\n        if (this._lastGcFrame !== this.frameCounter) {\n            this._lastGcFrame = this.frameCounter;\n            const memoryUsageBefore = this._usedMemory;\n            this.gcTextureMemory(aggressive);\n            this.gcRenderTextureMemory(aggressive);\n            this.renderer.gc(aggressive);\n\n            if (this.application.getOption('debug')) {\n                console.log(`[Lightning] GC${aggressive ? \"[aggressive]\" : \"\"}! Frame ${this._lastGcFrame} Freed ${((memoryUsageBefore - this._usedMemory) / 1e6).toFixed(2)}MP from GPU memory. Remaining: ${(this._usedMemory / 1e6).toFixed(2)}MP`);\n                const other = this._usedMemory - this.textureManager.usedMemory - this.ctx.usedMemory;\n                console.log(`[Lightning] Textures: ${(this.textureManager.usedMemory / 1e6).toFixed(2)}MP, Render Textures: ${(this.ctx.usedMemory / 1e6).toFixed(2)}MP, Renderer caches: ${(other / 1e6).toFixed(2)}MP`);\n            }\n        }\n    }\n\n    gcTextureMemory(aggressive = false) {\n        if (aggressive && this.ctx.root.visible) {\n            // Make sure that ALL textures are cleaned;\n            this.ctx.root.visible = false;\n            this.textureManager.gc();\n            this.ctx.root.visible = true;\n        } else {\n            this.textureManager.gc();\n        }\n    }\n\n    gcRenderTextureMemory(aggressive = false) {\n        if (aggressive && this.root.visible) {\n            // Make sure that ALL render textures are cleaned;\n            this.root.visible = false;\n            this.ctx.freeUnusedRenderTextures(0);\n            this.root.visible = true;\n        } else {\n            this.ctx.freeUnusedRenderTextures(0);\n        }\n    }\n\n    getDrawingCanvas() {\n        return this.platform.getDrawingCanvas();\n    }\n\n    update() {\n        this.ctx.update()\n    }\n\n    addServiceProvider(serviceprovider) {\n        if (Utils.isSpark) {\n            this.platform.addServiceProvider(serviceprovider);\n        }\n    }\n\n    getChildrenByPosition(x, y) {\n        const children = [];\n        this.root.core.update();\n        this.root.core.collectAtCoord(x, y, children);\n\n        return children;\n    }\n}\n\nimport Element from \"./Element.mjs\";\nimport StageUtils from \"./StageUtils.mjs\";\nimport TextureManager from \"./TextureManager.mjs\";\nimport TextureThrottler from \"./TextureThrottler.mjs\";\nimport CoreContext from \"./core/CoreContext.mjs\";\nimport TransitionManager from \"../animation/TransitionManager.mjs\";\nimport AnimationManager from \"../animation/AnimationManager.mjs\";\nimport RectangleTexture from \"../textures/RectangleTexture.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Component from \"./Component.mjs\";\nimport Utils from \"../tree/Utils.mjs\";\n\nexport default class Application extends Component {\n\n    constructor(options = {}, properties) {\n        // Save options temporarily to avoid having to pass it through the constructor.\n        Application._temp_options = options;\n\n        // Booting flag is used to postpone updateFocusSettings;\n        Application.booting = true;\n        const stage = new Stage(options.stage);\n        super(stage, properties);\n        Application.booting = false;\n\n        this.__updateFocusCounter = 0;\n        this.__keypressTimers = new Map();\n        this.__hoveredChild = null;\n\n        // We must construct while the application is not yet attached.\n        // That's why we 'init' the stage later (which actually emits the attach event).\n        this.stage.init();\n\n        // Initially, the focus settings are updated after both the stage and application are constructed.\n        this.updateFocusSettings();\n\n        this.__keymap = this.getOption('keys');\n\n        if (this.__keymap) {\n            this.stage.platform.registerKeydownHandler((e) => {\n                this._receiveKeydown(e);\n            });\n\n            this.stage.platform.registerKeyupHandler((e) => {\n                this._receiveKeyup(e);\n            });\n        }\n\n        if (this.getOption(\"enablePointer\")) {\n            this.stage.platform.registerClickHandler((e) => {\n                this._receiveClick(e);\n            });\n\n            this.stage.platform.registerHoverHandler((e) => {\n                this._receiveHover(e);\n            });\n\n            this.stage.platform.registerScrollWheelHandler((e) => {\n                this._recieveScrollWheel(e);\n            });\n\n            this.cursor = 'default';\n        }\n    }\n\n    getOption(name) {\n        return this.__options[name];\n    }\n\n    _setOptions(o) {\n        this.__options = {};\n\n        let opt = (name, def) => {\n            let value = o[name];\n\n            if (value === undefined) {\n                this.__options[name] = def;\n            } else {\n                this.__options[name] = value;\n            }\n        }\n\n        opt('debug', false);\n        opt('keys', {\n            38: \"Up\",\n            40: \"Down\",\n            37: \"Left\",\n            39: \"Right\",\n            13: \"Enter\",\n            8: \"Back\",\n            27: \"Exit\"\n        });\n        opt('enablePointer', false);\n    }\n\n    __construct() {\n        this.stage.setApplication(this);\n\n        this._setOptions(Application._temp_options);\n        delete Application._temp_options;\n\n        super.__construct();\n    }\n\n    __init() {\n        super.__init();\n        this.__updateFocus();\n    }\n\n    updateFocusPath() {\n        this.__updateFocus();\n    }\n\n    __updateFocus() {\n        const notOverridden = this.__updateFocusRec();\n\n        if (!Application.booting && notOverridden) {\n            this.updateFocusSettings();\n        }\n    }\n\n    __updateFocusRec() {\n        const updateFocusId = ++this.__updateFocusCounter;\n        this.__updateFocusId = updateFocusId;\n\n        const newFocusPath = this.__getFocusPath();\n        const newFocusedComponent = newFocusPath[newFocusPath.length - 1];\n        const prevFocusedComponent = this._focusPath ? this._focusPath[this._focusPath.length - 1] : undefined;\n\n        if (!prevFocusedComponent) {\n            // Focus events.\n            this._focusPath = [];\n            for (let i = 0, n = newFocusPath.length; i < n; i++) {\n                this._focusPath.push(newFocusPath[i]);\n                this._focusPath[i]._focus(newFocusedComponent, undefined);\n                const focusOverridden = (this.__updateFocusId !== updateFocusId);\n                if (focusOverridden) {\n                    return false;\n                }\n            }\n            return true;\n        } else {\n            let m = Math.min(this._focusPath.length, newFocusPath.length);\n            let index;\n            for (index = 0; index < m; index++) {\n                if (this._focusPath[index] !== newFocusPath[index]) {\n                    break;\n                }\n            }\n\n            if (this._focusPath.length !== newFocusPath.length || index !== newFocusPath.length) {\n\n                if (this.getOption('debug')) {\n                    console.log('[Lightning] Focus changed: ' + newFocusedComponent.getLocationString());\n                }\n\n                // Unfocus events.\n                for (let i = this._focusPath.length - 1; i >= index; i--) {\n                    const unfocusedElement = this._focusPath.pop();\n                    unfocusedElement._unfocus(newFocusedComponent, prevFocusedComponent);\n                    const focusOverridden = (this.__updateFocusId !== updateFocusId);\n                    if (focusOverridden) {\n                        return false;\n                    }\n                }\n\n                // Focus events.\n                for (let i = index, n = newFocusPath.length; i < n; i++) {\n                    this._focusPath.push(newFocusPath[i]);\n                    this._focusPath[i]._focus(newFocusedComponent, prevFocusedComponent);\n                    const focusOverridden = (this.__updateFocusId !== updateFocusId);\n                    if (focusOverridden) {\n                        return false;\n                    }\n                }\n\n                // Focus changed events.\n                for (let i = 0; i < index; i++) {\n                    this._focusPath[i]._focusChange(newFocusedComponent, prevFocusedComponent);\n                }\n            }\n        }\n\n        return true;\n    }\n\n    updateFocusSettings() {\n        const focusedComponent = this._focusPath[this._focusPath.length - 1];\n\n        // Get focus settings. These can be used for dynamic application-wide settings that depend on the\n        // focus directly (such as the application background).\n        const focusSettings = {};\n        const defaultSetFocusSettings = Component.prototype._setFocusSettings;\n        for (let i = 0, n = this._focusPath.length; i < n; i++) {\n            if (this._focusPath[i]._setFocusSettings !== defaultSetFocusSettings) {\n                this._focusPath[i]._setFocusSettings(focusSettings);\n            }\n        }\n\n        const defaultHandleFocusSettings = Component.prototype._handleFocusSettings;\n        for (let i = 0, n = this._focusPath.length; i < n; i++) {\n            if (this._focusPath[i]._handleFocusSettings !== defaultHandleFocusSettings) {\n                this._focusPath[i]._handleFocusSettings(focusSettings, this.__prevFocusSettings, focusedComponent);\n            }\n        }\n\n        this.__prevFocusSettings = focusSettings;\n    }\n\n    _handleFocusSettings(settings, prevSettings, focused, prevFocused) {\n        // Override to handle focus-based settings.\n    }\n\n    __getFocusPath() {\n        const path = [this];\n        let current = this;\n        do {\n            const nextFocus = current._getFocused();\n            if (!nextFocus || (nextFocus === current)) {\n                // Found!;\n                break;\n            }\n\n\n            let ptr = nextFocus.cparent;\n            if (ptr === current) {\n                path.push(nextFocus);\n            } else {\n                // Not an immediate child: include full path to descendant.\n                const newParts = [nextFocus];\n                do {\n                    if (!ptr) {\n                        current._throwError(\"Return value for _getFocused must be an attached descendant component but its '\" + nextFocus.getLocationString() + \"'\");\n                    }\n                    newParts.push(ptr);\n                    ptr = ptr.cparent;\n                } while (ptr !== current);\n\n                // Add them reversed.\n                for (let i = 0, n = newParts.length; i < n; i++) {\n                    path.push(newParts[n - i - 1]);\n                }\n            }\n\n            current = nextFocus;\n        } while (true);\n\n        return path;\n    }\n\n    get focusPath() {\n        return this._focusPath;\n    }\n\n    /**\n     * Injects an event in the state machines, top-down from application to focused component.\n     */\n    focusTopDownEvent(events, ...args) {\n        const path = this.focusPath;\n        const n = path.length;\n\n        // Multiple events.\n        for (let i = 0; i < n; i++) {\n            const event = path[i]._getMostSpecificHandledMember(events);\n            if (event !== undefined) {\n                const returnValue = path[i][event](...args);\n                if (returnValue !== false) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Injects an event in the state machines, bottom-up from focused component to application.\n     */\n    focusBottomUpEvent(events, ...args) {\n        const path = this.focusPath;\n        const n = path.length;\n\n        // Multiple events.\n        for (let i = n - 1; i >= 0; i--) {\n            const event = path[i]._getMostSpecificHandledMember(events);\n            if (event !== undefined) {\n                const returnValue = path[i][event](...args);\n                if (returnValue !== false) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    _receiveKeydown(e) {\n        const obj = e;\n        const key = this.__keymap[e.keyCode];\n        const path = this.focusPath;\n\n        let keys;\n        if (key) {\n            keys = Array.isArray(key) ? key : [key];\n        }\n\n        if (keys) {\n            for (let i = 0, n = keys.length; i < n; i++) {\n                const hasTimer = this.__keypressTimers.has(keys[i]);\n                // prevent event from getting fired when the timeout is still active\n                if (path[path.length - 1].longpress && hasTimer) {\n                    return;\n                }\n\n                if (!this.stage.application.focusTopDownEvent([`_capture${keys[i]}`, \"_captureKey\"], obj)) {\n                    this.stage.application.focusBottomUpEvent([`_handle${keys[i]}`, \"_handleKey\"], obj);\n                }\n            }\n        } else {\n            if (!this.stage.application.focusTopDownEvent([\"_captureKey\"], obj)) {\n                this.stage.application.focusBottomUpEvent([\"_handleKey\"], obj);\n            }\n        }\n\n        this.updateFocusPath();\n\n        const consumer = path[path.length - 1];\n\n        if (keys && consumer.longpress) {\n            for (let i = 0, n = keys.length; i < n; i++) {\n                this._startLongpressTimer(keys[i], consumer);\n            }\n        }\n    }\n\n    /**\n     * Keyup listener\n     * To take away some confusion we add `Release` to the event to prevent ending up with method names like:\n     *  _handleLeftUp / _handleUpUp / _handleEnterUp etc\n     *\n     * @param e\n     * @private\n     */\n    _receiveKeyup(e) {\n        const obj = e;\n        const key = this.__keymap[e.keyCode];\n\n        let keys;\n        if (key) {\n            keys = Array.isArray(key) ? key : [key];\n        }\n\n        if (keys) {\n            for (let i = 0, n = keys.length; i < n; i++) {\n                if (!this.stage.application.focusTopDownEvent([`_capture${keys[i]}Release`, \"_captureKeyRelease\"], obj)) {\n                    this.stage.application.focusBottomUpEvent([`_handle${keys[i]}Release`, \"_handleKeyRelease\"], obj);\n                }\n            }\n        } else {\n            if (!this.stage.application.focusTopDownEvent([\"_captureKeyRelease\"], obj)) {\n                this.stage.application.focusBottomUpEvent([\"_handleKeyRelease\"], obj);\n            }\n        }\n\n        this.updateFocusPath();\n\n        if (keys) {\n            for (let i = 0, n = keys.length; i < n; i++) {\n                if (this.__keypressTimers.has(keys[i])) {\n                    // keyup has fired before end of timeout so we clear it\n                    clearTimeout(this.__keypressTimers.get(keys[i]));\n                    // delete so we can register it again\n                    this.__keypressTimers.delete(keys[i]);\n                }\n            }\n        }\n    }\n\n    /**\n     * Registers and starts a timer for the pressed key. Timer will be cleared when the key is released\n     * before the timer goes off.\n     *\n     * If key is not release (keyup) the longpress handler will be fired.\n     * Configuration can be via the Components template:\n     *\n     * static _template() {\n     *     return {\n     *         w:100, h:100,\n     *         longpress:{up:700, down:500}\n     *     }\n     * }     *\n     * // this will get called when up has been pressed for 700ms\n     * _handleUpLong() {\n     *\n     * }\n     *\n     * @param key\n     * @param element\n     * @private\n     */\n    _startLongpressTimer(key, element) {\n        const config = element.longpress;\n        const lookup = key.toLowerCase();\n\n        if (config[lookup]) {\n            const timeout = config[lookup];\n            if (!Utils.isNumber(timeout)) {\n                element._throwError(\"config value for longpress must be a number\");\n            } else {\n                this.__keypressTimers.set(key, setTimeout(() => {\n                    if (!this.stage.application.focusTopDownEvent([`_capture${key}Long`, \"_captureKey\"], {})) {\n                        this.stage.application.focusBottomUpEvent([`_handle${key}Long`, \"_handleKey\"], {});\n                    }\n\n                    this.__keypressTimers.delete(key);\n                }, timeout || 500 /* prevent 0ms */));\n            }\n        }\n        return;\n    }\n\n    _recieveScrollWheel(e) {\n        const obj = e;\n        const { clientX, clientY } = obj;\n\n        if (clientX <= this.stage.w && clientY <= this.stage.h) {\n            if (!this.fireTopDownScrollWheelHandler(\"_captureScroll\", obj)) {\n                this.fireBottomUpScrollWheelHandler(\"_handleScroll\", obj);\n            }\n        }\n    }\n\n    fireTopDownScrollWheelHandler(event, obj) {\n        let children = this.stage.application.children;\n        let affected = this._findChildren([], children).reverse();\n        let n = affected.length;\n\n        while (n--) {\n            const child = affected[n];\n            if (child && child[event]) {\n                child._captureScroll(obj);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    fireBottomUpScrollWheelHandler(event, obj) {\n        const { clientX, clientY } = obj;\n        const target = this._getTargetChild(clientX, clientY);\n        let child = target;\n\n        // Search tree bottom up for a handler\n        while (child !== null) {\n            if (child && child[event]) {\n                child._handleScroll(obj);\n                return true;\n            }\n            child = child.parent;\n        }\n        return false;\n    }\n\n    _receiveClick(e) {\n        const obj = e;\n        const { clientX, clientY } = obj;\n\n        if (clientX <= this.stage.w && clientY <= this.stage.h) {\n            this.stage.application.fireBottomUpClickHandler(obj);\n        }\n    }\n\n    fireBottomUpClickHandler(obj) {\n        const { clientX, clientY } = obj;\n        const target = this._getTargetChild(clientX, clientY);\n        const precision = this.stage.getRenderPrecision() / this.stage.getOption('devicePixelRatio');\n        let child = target;\n\n        // Search tree bottom up for a handler\n        while (child !== null) {\n            if (child && child[\"_handleClick\"]) {\n                const { px, py } = child.core._worldContext;\n                const cx = px * precision;\n                const cy = py * precision;\n\n                const localCoords = {\n                    x: clientX - cx,\n                    y: clientY - cy\n                }\n\n                const returnValue = child._handleClick(target, localCoords);\n                if (returnValue !== false) {\n                    break;\n                }\n            }\n            child = child.parent;\n        }\n    }\n\n    _receiveHover(e) {\n        const obj = e;\n        const { clientX, clientY } = obj;\n\n        if (clientX <= this.stage.w && clientY <= this.stage.h) {\n            this.stage.application.fireBottomUpHoverHandler(obj);\n        }\n    }\n\n    fireBottomUpHoverHandler(obj) {\n        const { clientX, clientY } = obj;\n        const target = this._getTargetChild(clientX, clientY);\n\n        // Only fire handlers when pointer target changes\n        if (target !== this.__hoveredChild) {\n\n            let hoveredBranch = new Set();\n            let newHoveredBranch = new Set();\n\n            if (target) {\n                newHoveredBranch = new Set(target.getAncestors());\n            }\n\n            if (this.__hoveredChild) {\n                hoveredBranch = new Set(this.__hoveredChild.getAncestors());\n                for (const elem of [...hoveredBranch].filter((e) => !newHoveredBranch.has(e))) {\n                    const c = Component.getComponent(elem);\n                    if (c[\"_handleUnhover\"]) {\n                        c._handleUnhover(elem);\n                    }\n                    if (elem.parent && elem.parent.cursor) {\n                        this.stage.getCanvas().style.cursor = elem.parent.cursor;\n                    }\n                }\n            }\n\n            this.__hoveredChild = target;\n\n            const diffBranch = [...newHoveredBranch].filter((e) => !hoveredBranch.has(e))\n            for (const elem of diffBranch) {\n                const c = Component.getComponent(elem);\n                if (c[\"_handleHover\"]) {\n                    c._handleHover(elem);\n                }\n            }\n\n            // New element hover cursor\n            const lastElement = diffBranch[0];\n            if (lastElement && lastElement.cursor) {\n                this.stage.getCanvas().style.cursor = lastElement.cursor;\n            }\n\n            // Rerun _handleHover for target element in case it's been hovered\n            // back from its child\n            if (diffBranch.length === 0 && target) {\n                const c = Component.getComponent(target);\n                if (c[\"_handleHover\"]) {\n                    c._handleHover(target);\n                }\n            }\n        }\n    }\n\n    _getTargetChild(clientX, clientY) {\n        let children = this.stage.application.children;\n        let affected = this._findChildren([], children);\n        let hoverableChildren = this._withinClickableRange(affected, clientX, clientY);\n\n        hoverableChildren.sort((a, b) => {\n            // Sort by zIndex and then id\n            if (a.zIndex > b.zIndex) {\n                return 1;\n            } else if (a.zIndex < b.zIndex) {\n                return -1;\n            } else {\n                return a.id > b.id ? 1 : -1;\n            }\n        });\n\n        if (hoverableChildren.length) {\n            // Assume target has highest zIndex (id when zIndex equal)\n            return hoverableChildren.slice(-1)[0];\n        } else {\n            return null;\n        }\n    }\n\n    _findChildren(bucket, children) {\n        let n = children.length;\n        while (n--) {\n            const child = children[n];\n            // only add active children\n            if (child.__active && child.collision) {\n                if (child.collision === true) {\n                    bucket.push(child);\n                }\n                if (child.hasChildren()) {\n                    this._findChildren(bucket, child.children);\n                }\n            }\n        }\n        return bucket;\n    }\n\n    _withinClickableRange(affectedChildren, cursorX, cursorY) {\n        let n = affectedChildren.length;\n        const candidates = [];\n\n        // loop through affected children\n        // and perform collision detection\n        while (n--) {\n            const child = affectedChildren[n];\n            const precision = this.stage.getRenderPrecision() / this.stage.getOption('devicePixelRatio');\n            const ctx = child.core._worldContext;\n\n            const cx = ctx.px * precision;\n            const cy = ctx.py * precision;\n            const cw = child.finalW * ctx.ta * precision;\n            const ch = child.finalH * ctx.td * precision;\n\n            if (cx > this.stage.w || cy > this.stage.h) {\n                continue;\n            }\n\n            if (child.parent.core._scissor) {\n                const scissor = child.parent.core._scissor.map((v) => v * precision);\n                if (!this._testCollision(cursorX, cursorY, ...scissor))\n                    continue\n            }\n\n            if (this._testCollision(cursorX, cursorY, cx, cy, cw, ch)) {\n                candidates.push(child);\n            }\n        }\n        return candidates;\n    }\n\n    _testCollision(px, py, cx, cy, cw, ch) {\n        if (px >= cx &&\n            px <= cx + cw &&\n            py >= cy &&\n            py <= cy + ch) {\n            return true;\n        }\n        return false;\n    }\n\n    destroy() {\n        if (!this._destroyed) {\n            this._destroy();\n            this.stage.destroy();\n            this._destroyed = true;\n        }\n    }\n\n    _destroy() {\n        // This forces the _detach, _disabled and _active events to be called.\n        this.stage.setApplication(undefined);\n        this._updateAttachedFlag();\n        this._updateEnabledFlag();\n\n        if (this.__keypressTimers.size) {\n            for (const timer of this.__keypressTimers.values()) {\n                clearTimeout(timer);\n            }\n\n            this.__keypressTimers.clear();\n        }\n    }\n\n    getCanvas() {\n        return this.stage.getCanvas();\n    }\n\n}\n\nimport Stage from \"../tree/Stage.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Texture from \"../tree/Texture.mjs\";\n\nexport default class StaticCanvasTexture extends Texture {\n\n    constructor(stage) {\n        super(stage);\n        this._factory = undefined;\n        this._lookupId = undefined;\n    }\n\n    set content({factory, lookupId = undefined}) {\n        this._factory = factory;\n        this._lookupId = lookupId;\n        this._changed();\n    }\n\n    _getIsValid() {\n        return !!this._factory;\n    }\n\n    _getLookupId() {\n        return this._lookupId;\n    }\n\n    _getSourceLoader() {\n        const f = this._factory;\n        return (cb) => {\n            return f((err, canvas) => {\n                if (err) {\n                    return cb(err);\n                }\n                cb(null, this.stage.platform.getTextureOptionsForDrawingCanvas(canvas));\n            }, this.stage);\n        }\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Utils from \"../tree/Utils.mjs\";\nimport StageUtils from \"../tree/StageUtils.mjs\";\nimport StaticCanvasTexture from \"../textures/StaticCanvasTexture.mjs\"\n\nexport default class Tools {\n\n    static getCanvasTexture(canvasFactory, lookupId) {\n        return {type: StaticCanvasTexture, content: {factory: canvasFactory, lookupId: lookupId}}\n    }\n\n    static getRoundRect(w, h, radius, strokeWidth, strokeColor, fill, fillColor) {\n        if (!Array.isArray(radius)){\n            // upper-left, upper-right, bottom-right, bottom-left.\n            radius = [radius, radius, radius, radius];\n        }\n\n        let factory = (cb, stage) => {\n            if (Utils.isSpark) {\n                stage.platform.createRoundRect(cb, stage, w, h, radius, strokeWidth, strokeColor, fill, fillColor);\n            } else {\n                cb(null, this.createRoundRect(stage, w, h, radius, strokeWidth, strokeColor, fill, fillColor));\n            }\n        };\n        let id = 'rect' + [w, h, strokeWidth, strokeColor, fill ? 1 : 0, fillColor].concat(radius).join(\",\");\n        return Tools.getCanvasTexture(factory, id);\n    }\n\n    static createRoundRect(stage, w, h, radius, strokeWidth, strokeColor, fill, fillColor) {\n        if (fill === undefined) fill = true;\n        if (strokeWidth === undefined) strokeWidth = 0;\n\n        let canvas = stage.platform.getDrawingCanvas();\n        let ctx = canvas.getContext('2d');\n        ctx.imageSmoothingEnabled = true;\n\n        canvas.width = w + strokeWidth + 2;\n        canvas.height = h + strokeWidth + 2;\n\n        ctx.beginPath();\n        let x = 0.5 * strokeWidth + 1, y = 0.5 * strokeWidth + 1;\n\n        ctx.moveTo(x + radius[0], y);\n        ctx.lineTo(x + w - radius[1], y);\n        ctx.arcTo(x + w, y, x + w, y + radius[1], radius[1]);\n        ctx.lineTo(x + w, y + h - radius[2]);\n        ctx.arcTo(x + w, y + h, x + w - radius[2], y + h, radius[2]);\n        ctx.lineTo(x + radius[3], y + h);\n        ctx.arcTo(x, y + h, x, y + h - radius[3], radius[3]);\n        ctx.lineTo(x, y + radius[0]);\n        ctx.arcTo(x, y, x + radius[0], y, radius[0]);\n        ctx.closePath();\n\n        if (fill) {\n            if (Utils.isNumber(fillColor)) {\n                ctx.fillStyle = StageUtils.getRgbaString(fillColor);\n            } else {\n                ctx.fillStyle = \"white\";\n            }\n            ctx.fill();\n        }\n\n        if (strokeWidth) {\n            if (Utils.isNumber(strokeColor)) {\n                ctx.strokeStyle = StageUtils.getRgbaString(strokeColor);\n            } else {\n                ctx.strokeStyle = \"white\";\n            }\n            ctx.lineWidth = strokeWidth;\n            ctx.stroke();\n        }\n\n        return canvas;\n    }\n\n    static getShadowRect(w, h, radius = 0, blur = 5, margin = blur * 2) {\n        if (!Array.isArray(radius)){\n            // upper-left, upper-right, bottom-right, bottom-left.\n            radius = [radius, radius, radius, radius];\n        }\n\n        let factory = (cb, stage) => {\n            if (Utils.isSpark) {\n                stage.platform.createShadowRect(cb, stage, w, h, radius, blur, margin);\n            } else {\n                cb(null, this.createShadowRect(stage, w, h, radius, blur, margin));\n            }\n        };\n        let id = 'shadow' + [w, h, blur, margin].concat(radius).join(\",\");\n        return Tools.getCanvasTexture(factory, id);\n    }\n\n    static createShadowRect(stage, w, h, radius, blur, margin) {\n        let canvas = stage.platform.getDrawingCanvas();\n        let ctx = canvas.getContext('2d');\n        ctx.imageSmoothingEnabled = true;\n\n        canvas.width = w + margin * 2;\n        canvas.height = h + margin * 2;\n\n        // WpeWebKit bug: we experienced problems without this with shadows in noncompositedwebgl mode.\n        ctx.globalAlpha = 0.01;\n        ctx.fillRect(0, 0, 0.01, 0.01);\n        ctx.globalAlpha = 1.0;\n\n        ctx.shadowColor = StageUtils.getRgbaString(0xFFFFFFFF);\n        ctx.fillStyle = StageUtils.getRgbaString(0xFFFFFFFF);\n        ctx.shadowBlur = blur;\n        ctx.shadowOffsetX = (w + 10) + margin;\n        ctx.shadowOffsetY = margin;\n\n        ctx.beginPath();\n        const x = -(w + 10);\n        const y = 0;\n\n        ctx.moveTo(x + radius[0], y);\n        ctx.lineTo(x + w - radius[1], y);\n        ctx.arcTo(x + w, y, x + w, y + radius[1], radius[1]);\n        ctx.lineTo(x + w, y + h - radius[2]);\n        ctx.arcTo(x + w, y + h, x + w - radius[2], y + h, radius[2]);\n        ctx.lineTo(x + radius[3], y + h);\n        ctx.arcTo(x, y + h, x, y + h - radius[3], radius[3]);\n        ctx.lineTo(x, y + radius[0]);\n        ctx.arcTo(x, y, x + radius[0], y, radius[0]);\n        ctx.closePath();\n        ctx.fill();\n\n        return canvas;\n    }\n\n    static getSvgTexture(url, w, h) {\n        let factory = (cb, stage) => {\n            if (Utils.isSpark) {\n                stage.platform.createSvg(cb, stage, url, w, h);\n            } else {\n                this.createSvg(cb, stage, url, w, h);\n            }\n        };\n        let id = 'svg' + [w, h, url].join(\",\");\n        return Tools.getCanvasTexture(factory, id);\n    }\n\n    static createSvg(cb, stage, url, w, h) {\n        let canvas = stage.platform.getDrawingCanvas();\n        let ctx = canvas.getContext('2d');\n        ctx.imageSmoothingEnabled = true;\n\n        let img = new Image();\n        img.onload = () => {\n            canvas.width = w;\n            canvas.height = h;\n            ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n            cb(null, canvas);\n        }\n        img.onerror = (err) => {\n            cb(err);\n        }\n\n        // On the PS4 platform setting the `crossOrigin` attribute on images\n        // can cause CORS failures.\n        if (!Utils.isPS4) {\n            img.crossOrigin = \"Anonymous\";\n        }\n\n        img.src = url;\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Utils from \"../tree/Utils.mjs\";\n\nexport default class ObjMerger {\n\n    static isMf(f) {\n        return Utils.isFunction(f) && f.__mf;\n    }\n\n    static mf(f) {\n        // Set as merge function.\n        f.__mf = true;\n        return f;\n    }\n\n    static merge(a, b) {\n        const aks = Object.keys(a);\n        const bks = Object.keys(b);\n\n        if (!bks.length) {\n            return a;\n        }\n\n        // Create index array for all elements.\n        const ai = {};\n        const bi = {};\n        for (let i = 0, n = bks.length; i < n; i++) {\n            const key = bks[i];\n            ai[key] = -1;\n            bi[key] = i;\n        }\n        for (let i = 0, n = aks.length; i < n; i++) {\n            const key = aks[i];\n            ai[key] = i;\n            if (bi[key] === undefined) {\n                bi[key] = -1;\n            }\n        }\n\n        const aksl = aks.length;\n\n        const result = {};\n        for (let i = 0, n = bks.length; i < n; i++) {\n            const key = bks[i];\n\n            // Prepend all items in a that are not in b - before the now added b attribute.\n            const aIndex = ai[key];\n            let curIndex = aIndex;\n            while(--curIndex >= 0) {\n                const akey = aks[curIndex];\n                if (bi[akey] !== -1) {\n                    // Already found? Stop processing.\n                    // Not yet found but exists in b? Also stop processing: wait until we find it in b.\n                    break;\n                }\n            }\n            while(++curIndex < aIndex) {\n                const akey = aks[curIndex];\n                result[akey] = a[akey];\n            }\n\n            const bv = b[key];\n            const av = a[key];\n            let r;\n            if (this.isMf(bv)) {\n                r = bv(av);\n            } else {\n                if (!Utils.isObjectLiteral(av) || !Utils.isObjectLiteral(bv)) {\n                    r = bv;\n                } else {\n                    r = ObjMerger.merge(av, bv);\n                }\n            }\n\n            // When marked as undefined, property is deleted.\n            if (r !== undefined) {\n                result[key] = r;\n            }\n        }\n\n        // Append remaining final items in a.\n        let curIndex = aksl;\n        while(--curIndex >= 0) {\n            const akey = aks[curIndex];\n            if (bi[akey] !== -1) {\n                break;\n            }\n        }\n        while(++curIndex < aksl) {\n            const akey = aks[curIndex];\n            result[akey] = a[akey];\n        }\n\n        return result;\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Manages the list of children for an element.\n */\n\nimport ObjectList from \"../tree/ObjectList.mjs\";\n\nexport default class ObjectListProxy extends ObjectList {\n\n    constructor(target) {\n        super();\n        this._target = target;\n    }\n\n    onAdd(item, index) {\n        this._target.addAt(item, index);\n    }\n\n    onRemove(item, index) {\n        this._target.removeAt(index);\n    }\n\n    onSync(removed, added, order) {\n        this._target._setByArray(order);\n    }\n\n    onSet(item, index) {\n        this._target.setAt(item, index);\n    }\n\n    onMove(item, fromIndex, toIndex) {\n        this._target.setAt(item, toIndex);\n    }\n\n    createItem(object) {\n        return this._target.createItem(object);\n    }\n\n    isItem(object) {\n        return this._target.isItem(object);\n    }\n\n}\n\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Manages the list of children for an element.\n */\n\nimport ObjectListProxy from \"./ObjectListProxy.mjs\";\n\nexport default class ObjectListWrapper extends ObjectListProxy {\n\n    constructor(target, wrap) {\n        super(target);\n        this._wrap = wrap;\n    }\n\n    wrap(item) {\n        let wrapper = this._wrap(item);\n        item._wrapper = wrapper;\n        return wrapper;\n    }\n\n    onAdd(item, index) {\n        item = this.wrap(item);\n        super.onAdd(item, index);\n    }\n\n    onRemove(item, index) {\n        super.onRemove(item, index);\n    }\n\n    onSync(removed, added, order) {\n        added.forEach(a => this.wrap(a));\n        order = order.map(a => a._wrapper);\n        super.onSync(removed, added, order);\n    }\n\n    onSet(item, index) {\n        item = this.wrap(item);\n        super.onSet(item, index);\n    }\n\n    onMove(item, fromIndex, toIndex) {\n        super.onMove(item, fromIndex, toIndex);\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Texture from \"../tree/Texture.mjs\";\n\nexport default class NoiseTexture extends Texture {\n\n    _getLookupId() {\n        return '__noise';\n    }\n\n    _getSourceLoader() {\n        const gl = this.stage.gl;\n        return function(cb) {\n            const noise = new Uint8Array(128 * 128 * 4);\n            for (let i = 0; i < 128 * 128 * 4; i+=4) {\n                const v = Math.floor(Math.random() * 256);\n                noise[i] = v;\n                noise[i+1] = v;\n                noise[i+2] = v;\n                noise[i+3] = 255;\n            }\n            const texParams = {}\n\n            if (gl) {\n                texParams[gl.TEXTURE_WRAP_S] = gl.REPEAT;\n                texParams[gl.TEXTURE_WRAP_T] = gl.REPEAT;\n                texParams[gl.TEXTURE_MIN_FILTER] = gl.NEAREST;\n                texParams[gl.TEXTURE_MAG_FILTER] = gl.NEAREST;\n            }\n\n            cb(null, {source: noise, w: 128, h: 128, texParams: texParams});\n        }\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Texture from \"../tree/Texture.mjs\";\n\nexport default class HtmlTexture extends Texture {\n\n    constructor(stage) {\n        super(stage);\n        this._htmlElement = undefined;\n        this._scale = 1;\n    }\n\n    set htmlElement(v) {\n        this._htmlElement = v;\n        this._changed();\n    }\n\n    get htmlElement() {\n        return this._htmlElement;\n    }\n\n    set scale(v) {\n        this._scale = v;\n        this._changed();\n    }\n\n    get scale() {\n        return this._scale;\n    }\n\n    set html(v) {\n        if (!v) {\n            this.htmlElement = undefined;\n        } else {\n            const d = document.createElement('div');\n            d.innerHTML = \"<div>\" + v + \"</div>\";\n            this.htmlElement = d.firstElementChild;\n        }\n    }\n\n    get html() {\n        return this._htmlElement.innerHTML;\n    }\n\n    _getIsValid() {\n        return this.htmlElement;\n    }\n\n    _getLookupId() {\n        return this._scale + \":\" + this._htmlElement.innerHTML;\n    }\n\n    _getSourceLoader() {\n        const htmlElement = this._htmlElement;\n        const scale = this._scale;\n        return function(cb) {\n            if (!window.html2canvas) {\n                return cb(new Error(\"Please include html2canvas (https://html2canvas.hertzen.com/)\"));\n            }\n\n            const area = HtmlTexture.getPreloadArea();\n            area.appendChild(htmlElement);\n\n            html2canvas(htmlElement, {backgroundColor: null, scale: scale}).then(function(canvas) {\n                area.removeChild(htmlElement);\n                if (canvas.height === 0) {\n                    return cb(new Error(\"Canvas height is 0\"));\n                }\n                cb(null, {source: canvas, width: canvas.width, height: canvas.height});\n            }).catch(e => {\n                console.error('[Lightning]', e);\n            });\n        }\n    }\n\n    static getPreloadArea() {\n        if (!this._preloadArea) {\n            // Preload area must be included in document body and must be visible to trigger html element rendering.\n            this._preloadArea = document.createElement('div');\n            if (this._preloadArea.attachShadow) {\n                // Use a shadow DOM if possible to prevent styling from interfering.\n                this._preloadArea.attachShadow({mode: 'closed'});\n            }\n            this._preloadArea.style.opacity = 0;\n            this._preloadArea.style.pointerEvents = 'none';\n            this._preloadArea.style.position = 'fixed';\n            this._preloadArea.style.display = 'block';\n            this._preloadArea.style.top = '100vh';\n            this._preloadArea.style.overflow = 'hidden';\n            document.body.appendChild(this._preloadArea);\n        }\n        return this._preloadArea;\n    }\n}\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Texture from \"../tree/Texture.mjs\";\n\nexport default class StaticTexture extends Texture {\n\n    constructor(stage, options) {\n        super(stage);\n\n        this._options = options;\n    }\n\n    set options(v) {\n        if (this._options !== v) {\n            this._options = v;\n            this._changed();\n        }\n    }\n\n    get options() {\n        return this._options;\n    }\n\n    _getIsValid() {\n        return !!this._options;\n    }\n\n    _getSourceLoader() {\n        return (cb) => {\n            cb(null, this._options);\n        }\n    }\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Component from \"../application/Component.mjs\";\n\nexport default class ListComponent extends Component {\n\n    constructor(stage) {\n        super(stage);\n\n        this._wrapper = super._children.a({});\n\n        this._reloadVisibleElements = false;\n\n        this._visibleItems = new Set();\n\n        this._index = 0;\n\n        this._started = false;\n\n        /**\n         * The transition definition that is being used when scrolling the items.\n         * @type TransitionSettings\n         */\n        this._scrollTransitionSettings = this.stage.transitions.createSettings({});\n\n        /**\n         * The scroll area size in pixels per item.\n         */\n        this._itemSize = 100;\n\n        this._viewportScrollOffset = 0;\n\n        this._itemScrollOffset = 0;\n\n        /**\n         * Should the list jump when scrolling between end to start, or should it be continuous, like a carrousel?\n         */\n        this._roll = false;\n\n        /**\n         * Allows restricting the start scroll position.\n         */\n        this._rollMin = 0;\n\n        /**\n         * Allows restricting the end scroll position.\n         */\n        this._rollMax = 0;\n\n        /**\n         * Definition for a custom animation that is applied when an item is (partially) selected.\n         * @type AnimationSettings\n         */\n        this._progressAnimation = null;\n\n        /**\n         * Inverts the scrolling direction.\n         * @type {boolean}\n         * @private\n         */\n        this._invertDirection = false;\n\n        /**\n         * Layout the items horizontally or vertically?\n         * @type {boolean}\n         * @private\n         */\n        this._horizontal = true;\n\n        this.itemList = new ListItems(this);\n    }\n\n    _allowChildrenAccess() {\n        return false;\n    }\n\n    get items() {\n        return this.itemList.get();\n    }\n\n    set items(children) {\n        this.itemList.patch(children);\n    }\n\n    start() {\n        this._wrapper.transition(this.property, this._scrollTransitionSettings);\n        this._scrollTransition = this._wrapper.transition(this.property);\n        this._scrollTransition.on('progress', p => this.update());\n\n        this.setIndex(0, true, true);\n\n        this._started = true;\n\n        this.update();\n    }\n\n    setIndex(index, immediate = false, closest = false) {\n        let nElements = this.length;\n        if (!nElements) return;\n\n        this.emit('unfocus', this.getElement(this.realIndex), this._index, this.realIndex);\n\n        if (closest) {\n            // Scroll to same offset closest to the index.\n            let offset = Utils.getModuloIndex(index, nElements);\n            let o = Utils.getModuloIndex(this.index, nElements);\n            let diff = offset - o;\n            if (diff > 0.5 * nElements) {\n                diff -= nElements;\n            } else if (diff < -0.5 * nElements) {\n                diff += nElements;\n            }\n            this._index += diff;\n        } else {\n            this._index = index;\n        }\n\n        if (this._roll || (this.viewportSize > this._itemSize * nElements)) {\n            this._index = Utils.getModuloIndex(this._index, nElements);\n        }\n\n        let direction = (this._horizontal ^ this._invertDirection ? -1 : 1);\n        let value = direction * this._index * this._itemSize;\n\n        if (this._roll) {\n            let min, max, scrollDelta;\n            if (direction == 1) {\n                max = (nElements - 1) * this._itemSize;\n                scrollDelta = this._viewportScrollOffset * this.viewportSize - this._itemScrollOffset * this._itemSize;\n\n                max -= scrollDelta;\n\n                min = this.viewportSize - (this._itemSize + scrollDelta);\n\n                if (this._rollMin) min -= this._rollMin;\n                if (this._rollMax) max += this._rollMax;\n\n                value = Math.max(Math.min(value, max), min);\n            } else {\n                max = (nElements * this._itemSize - this.viewportSize);\n                scrollDelta = this._viewportScrollOffset * this.viewportSize - this._itemScrollOffset * this._itemSize;\n\n                max += scrollDelta;\n\n                let min = scrollDelta;\n\n                if (this._rollMin) min -= this._rollMin;\n                if (this._rollMax) max += this._rollMax;\n\n                value = Math.min(Math.max(-max, value), -min);\n            }\n        }\n\n        this._scrollTransition.start(value);\n\n        if (immediate) {\n            this._scrollTransition.finish();\n        }\n\n        this.emit('focus', this.getElement(this.realIndex), this._index, this.realIndex);\n    }\n\n    getAxisPosition() {\n        let target = -this._scrollTransition._targetValue;\n\n        let direction = (this._horizontal ^ this._invertDirection ? -1 : 1);\n        let value = -direction * this._index * this._itemSize;\n\n        return this._viewportScrollOffset * this.viewportSize + (value - target);\n    }\n\n    update() {\n        if (!this._started) return;\n\n        let nElements = this.length;\n        if (!nElements) return;\n\n        let direction = (this._horizontal ^ this._invertDirection ? -1 : 1);\n\n        // Map position to index value.\n        let v = (this._horizontal ? this._wrapper.x : this._wrapper.y);\n\n        let viewportSize = this.viewportSize;\n        let scrollDelta = this._viewportScrollOffset * viewportSize - this._itemScrollOffset * this._itemSize;\n        v += scrollDelta;\n\n        let s, e, ps, pe;\n        if (direction == -1) {\n            s = Math.floor(-v / this._itemSize);\n            ps = 1 - ((-v / this._itemSize) - s);\n            e = Math.floor((viewportSize - v) / this._itemSize);\n            pe = (((viewportSize - v) / this._itemSize) - e);\n        } else {\n            s = Math.ceil(v / this._itemSize);\n            ps = 1 + (v / this._itemSize) - s;\n            e = Math.ceil((v - viewportSize) / this._itemSize);\n            pe = e - ((v - viewportSize) / this._itemSize);\n        }\n        if (this._roll || (viewportSize > this._itemSize * nElements)) {\n            // Don't show additional items.\n            if (e >= nElements) {\n                e = nElements - 1;\n                pe = 1;\n            }\n            if (s >= nElements) {\n                s = nElements - 1;\n                ps = 1;\n            }\n            if (e <= -1) {\n                e = 0;\n                pe = 1;\n            }\n            if (s <= -1) {\n                s = 0;\n                ps = 1;\n            }\n        }\n\n        let offset = -direction * s * this._itemSize;\n\n        let item;\n        for (let index = s; (direction == -1 ? index <= e : index >= e); (direction == -1 ? index++ : index--)) {\n            let realIndex = Utils.getModuloIndex(index, nElements);\n\n            let element = this.getElement(realIndex);\n            item = element.parent;\n            this._visibleItems.delete(item);\n            if (this._horizontal) {\n                item.x = offset + scrollDelta;\n            } else {\n                item.y = offset + scrollDelta;\n            }\n\n            let wasVisible = item.visible;\n            item.visible = true;\n\n            if (!wasVisible || this._reloadVisibleElements) {\n                // Turned visible.\n                this.emit('visible', index, realIndex);\n            }\n\n\n\n            if (this._progressAnimation) {\n                let p = 1;\n                if (index == s) {\n                    p = ps;\n                } else if (index == e) {\n                    p = pe;\n                }\n\n                // Use animation to progress.\n                this._progressAnimation.apply(element, p);\n            }\n\n            offset += this._itemSize;\n        }\n\n        // Handle item visibility.\n        let self = this;\n        this._visibleItems.forEach(function(invisibleItem) {\n            invisibleItem.visible = false;\n            self._visibleItems.delete(invisibleItem);\n        });\n\n        for (let index = s; (direction == -1 ? index <= e : index >= e); (direction == -1 ? index++ : index--)) {\n            let realIndex = Utils.getModuloIndex(index, nElements);\n            this._visibleItems.add(this.getWrapper(realIndex));\n        }\n\n        this._reloadVisibleElements = false;\n    }\n\n    setPrevious() {\n        this.setIndex(this._index - 1);\n    }\n\n    setNext() {\n        this.setIndex(this._index + 1);\n    }\n\n    getWrapper(index) {\n        return this._wrapper.children[index];\n    }\n\n    getElement(index) {\n        let e = this._wrapper.children[index];\n        return e ? e.children[0] : null;\n    }\n\n    reload() {\n        this._reloadVisibleElements = true;\n        this.update();\n    }\n\n    get element() {\n        let e = this._wrapper.children[this.realIndex];\n        return e ? e.children[0] : null;\n    }\n\n    get length() {\n        return this._wrapper.children.length;\n    }\n\n    get property() {\n        return this._horizontal ? 'x' : 'y';\n    }\n\n    get viewportSize() {\n        return this._horizontal ? this.w : this.h;\n    }\n\n    get index() {\n        return this._index;\n    }\n\n    get realIndex() {\n        return Utils.getModuloIndex(this._index, this.length);\n    }\n\n    get itemSize() {\n        return this._itemSize;\n    }\n\n    set itemSize(v) {\n        this._itemSize = v;\n        this.update();\n    }\n\n    get viewportScrollOffset() {\n        return this._viewportScrollOffset;\n    }\n\n    set viewportScrollOffset(v) {\n        this._viewportScrollOffset = v;\n        this.update();\n    }\n\n    get itemScrollOffset() {\n        return this._itemScrollOffset;\n    }\n\n    set itemScrollOffset(v) {\n        this._itemScrollOffset = v;\n        this.update();\n    }\n\n    get scrollTransitionSettings() {\n        return this._scrollTransitionSettings;\n    }\n\n    set scrollTransitionSettings(v) {\n        this._scrollTransitionSettings.patch(v);\n    }\n\n    set scrollTransition(v) {\n        this._scrollTransitionSettings.patch(v);\n    }\n\n    get scrollTransition() {\n        return this._scrollTransition;\n    }\n\n    get progressAnimation() {\n        return this._progressAnimation;\n    }\n\n    set progressAnimation(v) {\n        if (Utils.isObjectLiteral(v)) {\n            this._progressAnimation = this.stage.animations.createSettings(v);\n        } else {\n            this._progressAnimation = v;\n        }\n        this.update();\n    }\n\n    get roll() {\n        return this._roll;\n    }\n\n    set roll(v) {\n        this._roll = v;\n        this.update();\n    }\n\n    get rollMin() {\n        return this._rollMin;\n    }\n\n    set rollMin(v) {\n        this._rollMin = v;\n        this.update();\n    }\n\n    get rollMax() {\n        return this._rollMax;\n    }\n\n    set rollMax(v) {\n        this._rollMax = v;\n        this.update();\n    }\n\n    get invertDirection() {\n        return this._invertDirection;\n    }\n\n    set invertDirection(v) {\n        if (!this._started) {\n            this._invertDirection = v;\n        }\n    }\n\n    get horizontal() {\n        return this._horizontal;\n    }\n\n    set horizontal(v) {\n        if (v !== this._horizontal) {\n            if (!this._started) {\n                this._horizontal = v;\n            }\n        }\n    }\n\n}\n\nimport ObjectListWrapper from \"../tools/ObjectListWrapper.mjs\";\nclass ListItems extends ObjectListWrapper {\n    constructor(list) {\n        let wrap = (item => {\n            let parent = item.stage.createElement();\n            parent.add(item);\n            parent.visible = false;\n            return parent;\n        })\n\n        super(list._wrapper._children, wrap);\n        this.list = list;\n    }\n\n    onAdd(item, index) {\n        super.onAdd(item, index);\n        this.checkStarted(index);\n    }\n\n    checkStarted(index) {\n        this.list._reloadVisibleElements = true;\n        if (!this.list._started) {\n            this.list.start();\n        } else {\n            if (this.list.length === 1) {\n                this.list.setIndex(0, true, true);\n            } else {\n                if (this.list._index >= this.list.length) {\n                    this.list.setIndex(0);\n                }\n            }\n            this.list.update();\n        }\n    }\n\n    onRemove(item, index) {\n        super.onRemove(item, index);\n        let ri = this.list.realIndex;\n        if (ri === index) {\n            if (ri === this.list.length) {\n                ri--;\n            }\n            if (ri >= 0) {\n                this.list.setIndex(ri);\n            }\n        } else if (ri > index) {\n            this.list.setIndex(ri - 1);\n        }\n\n        this.list._reloadVisibleElements = true;\n    }\n\n    onSet(item, index) {\n        super.onSet(item, index);\n        this.checkStarted(index);\n    }\n\n    onSync(removed, added, order) {\n        super.onSync(removed, added, order);\n        this.checkStarted(0);\n    }\n\n    get _signalProxy() {\n        return true;\n    }\n\n}\n\nimport Utils from \"../tree/Utils.mjs\";\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\n\nexport default class LinearBlurShader extends DefaultShader {\n\n    constructor(context) {\n        super(context);\n\n        this._direction = new Float32Array([1, 0]);\n        this._kernelRadius = 1;\n    }\n\n    get x() {\n        return this._direction[0];\n    }\n\n    set x(v) {\n        this._direction[0] = v;\n        this.redraw();\n    }\n\n    get y() {\n        return this._direction[1];\n    }\n\n    set y(v) {\n        this._direction[1] = v;\n        this.redraw();\n    }\n\n    get kernelRadius() {\n        return this._kernelRadius;\n    }\n\n    set kernelRadius(v) {\n        this._kernelRadius = v;\n        this.redraw();\n    }\n\n\n    useDefault() {\n        return (this._kernelRadius === 0);\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        this._setUniform(\"direction\", this._direction, this.gl.uniform2fv);\n        this._setUniform(\"kernelRadius\", this._kernelRadius, this.gl.uniform1i);\n\n        const w = operation.getRenderWidth();\n        const h = operation.getRenderHeight();\n        this._setUniform(\"resolution\", new Float32Array([w, h]), this.gl.uniform2fv);\n    }\n}\n\nLinearBlurShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    uniform vec2 resolution;\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    uniform vec2 direction;\n    uniform int kernelRadius;\n    \n    vec4 blur1(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\n        vec4 color = vec4(0.0);\n        vec2 off1 = vec2(1.3333333333333333) * direction;\n        color += texture2D(image, uv) * 0.29411764705882354;\n        color += texture2D(image, uv + (off1 / resolution)) * 0.35294117647058826;\n        color += texture2D(image, uv - (off1 / resolution)) * 0.35294117647058826;\n        return color; \n    }\n    \n    vec4 blur2(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\n        vec4 color = vec4(0.0);\n        vec2 off1 = vec2(1.3846153846) * direction;\n        vec2 off2 = vec2(3.2307692308) * direction;\n        color += texture2D(image, uv) * 0.2270270270;\n        color += texture2D(image, uv + (off1 / resolution)) * 0.3162162162;\n        color += texture2D(image, uv - (off1 / resolution)) * 0.3162162162;\n        color += texture2D(image, uv + (off2 / resolution)) * 0.0702702703;\n        color += texture2D(image, uv - (off2 / resolution)) * 0.0702702703;\n        return color;\n    }\n    \n    vec4 blur3(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\n        vec4 color = vec4(0.0);\n        vec2 off1 = vec2(1.411764705882353) * direction;\n        vec2 off2 = vec2(3.2941176470588234) * direction;\n        vec2 off3 = vec2(5.176470588235294) * direction;\n        color += texture2D(image, uv) * 0.1964825501511404;\n        color += texture2D(image, uv + (off1 / resolution)) * 0.2969069646728344;\n        color += texture2D(image, uv - (off1 / resolution)) * 0.2969069646728344;\n        color += texture2D(image, uv + (off2 / resolution)) * 0.09447039785044732;\n        color += texture2D(image, uv - (off2 / resolution)) * 0.09447039785044732;\n        color += texture2D(image, uv + (off3 / resolution)) * 0.010381362401148057;\n        color += texture2D(image, uv - (off3 / resolution)) * 0.010381362401148057;\n        return color;\n    }    \n\n    void main(void){\n        if (kernelRadius == 1) {\n            gl_FragColor = blur1(uSampler, vTextureCoord, resolution, direction) * vColor;\n        } else if (kernelRadius == 2) {\n            gl_FragColor = blur2(uSampler, vTextureCoord, resolution, direction) * vColor;\n        } else {\n            gl_FragColor = blur3(uSampler, vTextureCoord, resolution, direction) * vColor;\n        }\n    }\n`;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\n\n/**\n * 4x4 box blur shader which works in conjunction with a 50% rescale.\n */\nexport default class BoxBlurShader extends DefaultShader {\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        const dx = 1.0 / operation.getTextureWidth(0);\n        const dy = 1.0 / operation.getTextureHeight(0);\n        this._setUniform(\"stepTextureCoord\", new Float32Array([dx, dy]), this.gl.uniform2fv);\n    }\n\n}\n\nBoxBlurShader.vertexShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    uniform vec2 stepTextureCoord;\n    attribute vec2 aVertexPosition;\n    attribute vec2 aTextureCoord;\n    attribute vec4 aColor;\n    uniform vec2 projection;\n    varying vec4 vColor;\n    varying vec2 vTextureCoordUl;\n    varying vec2 vTextureCoordUr;\n    varying vec2 vTextureCoordBl;\n    varying vec2 vTextureCoordBr;\n    void main(void){\n        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);\n        vTextureCoordUl = aTextureCoord - stepTextureCoord;\n        vTextureCoordBr = aTextureCoord + stepTextureCoord;\n        vTextureCoordUr = vec2(vTextureCoordBr.x, vTextureCoordUl.y);\n        vTextureCoordBl = vec2(vTextureCoordUl.x, vTextureCoordBr.y);\n        vColor = aColor;\n        gl_Position.y = -sign(projection.y) * gl_Position.y;\n    }\n`;\n\nBoxBlurShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoordUl;\n    varying vec2 vTextureCoordUr;\n    varying vec2 vTextureCoordBl;\n    varying vec2 vTextureCoordBr;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    void main(void){\n        vec4 color = 0.25 * (texture2D(uSampler, vTextureCoordUl) + texture2D(uSampler, vTextureCoordUr) + texture2D(uSampler, vTextureCoordBl) + texture2D(uSampler, vTextureCoordBr));\n        gl_FragColor = color * vColor;\n    }\n`;\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\n\nexport default class BlurShader extends DefaultShader {\n\n    constructor(context) {\n        super(context);\n        this._kernelRadius = 1;\n    }\n\n    get kernelRadius() {\n        return this._kernelRadius;\n    }\n\n    set kernelRadius(v) {\n        this._kernelRadius = v;\n        this.redraw();\n    }\n\n    useDefault() {\n        return this._amount === 0;\n    }\n\n    _beforeDrawEl({target}) {\n        target.ctx.filter = \"blur(\" + this._kernelRadius + \"px)\";\n    }\n\n    _afterDrawEl({target}) {\n        target.ctx.filter = \"none\";\n    }\n\n}\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Component from \"../application/Component.mjs\";\nimport LinearBlurShader from \"../renderer/webgl/shaders/LinearBlurShader.mjs\";\nimport BoxBlurShader from \"../renderer/webgl/shaders/BoxBlurShader.mjs\";\nimport DefaultShader from \"../renderer/webgl/shaders/DefaultShader.mjs\";\nimport C2dBlurShader from \"../renderer/c2d/shaders/BlurShader.mjs\";\nimport Shader from \"../tree/Shader.mjs\";\nimport MultiSpline from \"../tools/MultiSpline.mjs\";\n\nexport default class FastBlurComponent extends Component {\n    static _template() {\n        return {}\n    }\n\n    get wrap() {\n        return this.tag(\"Wrap\");\n    }\n\n    set content(v) {\n        return this.wrap.content = v;\n    }\n\n    get content() {\n        return this.wrap.content;\n    }\n\n    set padding(v) {\n        this.wrap._paddingX = v;\n        this.wrap._paddingY = v;\n        this.wrap._updateBlurSize();\n    }\n\n    set paddingX(v) {\n        this.wrap._paddingX = v;\n        this.wrap._updateBlurSize();\n    }\n\n    set paddingY(v) {\n        this.wrap._paddingY = v;\n        this.wrap._updateBlurSize();\n    }\n\n    set amount(v) {\n        return this.wrap.amount = v;\n    }\n\n    get amount() {\n        return this.wrap.amount;\n    }\n\n    _onResize() {\n        this.wrap.w = this.renderWidth;\n        this.wrap.h = this.renderHeight;\n    }\n\n    get _signalProxy() {\n        return true;\n    }\n\n    _build() {\n        this.patch({\n            Wrap: {type: this.stage.gl ? WebGLFastBlurComponent : C2dFastBlurComponent}\n        });\n    }\n\n}\n\n\nclass C2dFastBlurComponent extends Component {\n\n    static _template() {\n        return {\n            forceZIndexContext: true,\n            rtt: true,\n            Textwrap: {shader: {type: C2dBlurShader}, Content: {}}\n        }\n    }\n\n    constructor(stage) {\n        super(stage);\n        this._textwrap = this.sel(\"Textwrap\");\n        this._wrapper = this.sel(\"Textwrap>Content\");\n\n        this._amount = 0;\n        this._paddingX = 0;\n        this._paddingY = 0;\n\n    }\n\n    static getSpline() {\n        if (!this._multiSpline) {\n            this._multiSpline = new MultiSpline();\n            this._multiSpline.parse(false, {0: 0, 0.25: 1.5, 0.5: 5.5, 0.75: 18, 1: 39});\n        }\n        return this._multiSpline;\n    }\n\n    get content() {\n        return this.sel('Textwrap>Content');\n    }\n\n    set content(v) {\n        this.sel('Textwrap>Content').patch(v, true);\n    }\n\n    set padding(v) {\n        this._paddingX = v;\n        this._paddingY = v;\n        this._updateBlurSize();\n    }\n\n    set paddingX(v) {\n        this._paddingX = v;\n        this._updateBlurSize();\n    }\n\n    set paddingY(v) {\n        this._paddingY = v;\n        this._updateBlurSize();\n    }\n\n    _updateBlurSize() {\n        let w = this.renderWidth;\n        let h = this.renderHeight;\n\n        let paddingX = this._paddingX;\n        let paddingY = this._paddingY;\n\n        this._wrapper.x = paddingX;\n        this._textwrap.x = -paddingX;\n\n        this._wrapper.y = paddingY;\n        this._textwrap.y = -paddingY;\n\n        this._textwrap.w = w + paddingX * 2;\n        this._textwrap.h = h + paddingY * 2;\n    }\n\n    get amount() {\n        return this._amount;\n    }\n\n    /**\n     * Sets the amount of blur. A value between 0 and 4. Goes up exponentially for blur.\n     * Best results for non-fractional values.\n     * @param v;\n     */\n    set amount(v) {\n        this._amount = v;\n        this._textwrap.shader.kernelRadius = C2dFastBlurComponent._amountToKernelRadius(v);\n    }\n\n    static _amountToKernelRadius(v) {\n        return C2dFastBlurComponent.getSpline().getValue(Math.min(1, v * 0.25));\n    }\n\n    get _signalProxy() {\n        return true;\n    }\n\n}\n\nclass WebGLFastBlurComponent extends Component {\n\n    static _template() {\n        const onUpdate = function(element, elementCore) {\n            if ((elementCore._recalc & (2 + 128))) {\n                const w = elementCore.w;\n                const h = elementCore.h;\n                let cur = elementCore;\n                do {\n                    cur = cur._children[0];\n                    cur._element.w = w;\n                    cur._element.h = h;\n                } while(cur._children);\n            }\n        };\n\n        return {\n            Textwrap: {rtt: true, forceZIndexContext: true, renderOffscreen: true, Content: {}},\n            Layers: {\n                L0: {rtt: true, onUpdate: onUpdate, renderOffscreen: true, visible: false, Content: {shader: {type: BoxBlurShader}}},\n                L1: {rtt: true, onUpdate: onUpdate, renderOffscreen: true, visible: false, Content: {shader: {type: BoxBlurShader}}},\n                L2: {rtt: true, onUpdate: onUpdate, renderOffscreen: true, visible: false, Content: {shader: {type: BoxBlurShader}}},\n                L3: {rtt: true, onUpdate: onUpdate, renderOffscreen: true, visible: false, Content: {shader: {type: BoxBlurShader}}}\n            },\n            Result: {shader: {type: FastBlurOutputShader}, visible: false}\n        }\n    }\n\n    get _signalProxy() {\n        return true;\n    }\n\n    constructor(stage) {\n        super(stage);\n        this._textwrap = this.sel(\"Textwrap\");\n        this._wrapper = this.sel(\"Textwrap>Content\");\n        this._layers = this.sel(\"Layers\");\n        this._output = this.sel(\"Result\");\n\n        this._amount = 0;\n        this._paddingX = 0;\n        this._paddingY = 0;\n    }\n\n    _buildLayers() {\n        const filterShaderSettings = [{x:1,y:0,kernelRadius:1},{x:0,y:1,kernelRadius:1},{x:1.5,y:0,kernelRadius:1},{x:0,y:1.5,kernelRadius:1}];\n        const filterShaders = filterShaderSettings.map(s => {\n            const shader = Shader.create(this.stage, Object.assign({type: LinearBlurShader}, s));\n            return shader;\n        });\n\n        this._setLayerTexture(this.getLayerContents(0), this._textwrap.getTexture(), []);\n        this._setLayerTexture(this.getLayerContents(1), this.getLayer(0).getTexture(), [filterShaders[0], filterShaders[1]]);\n\n        // Notice that 1.5 filters should be applied before 1.0 filters.\n        this._setLayerTexture(this.getLayerContents(2), this.getLayer(1).getTexture(), [filterShaders[0], filterShaders[1], filterShaders[2], filterShaders[3]]);\n        this._setLayerTexture(this.getLayerContents(3), this.getLayer(2).getTexture(), [filterShaders[0], filterShaders[1], filterShaders[2], filterShaders[3]]);\n    }\n\n    _setLayerTexture(element, texture, steps) {\n        if (!steps.length) {\n            element.texture = texture;\n        } else {\n            const step = steps.pop();\n            const child = element.stage.c({rtt: true, shader: step});\n\n            // Recurse.\n            this._setLayerTexture(child, texture, steps);\n\n            element.childList.add(child);\n        }\n        return element;\n    }\n\n    get content() {\n        return this.sel('Textwrap>Content');\n    }\n\n    set content(v) {\n        this.sel('Textwrap>Content').patch(v, true);\n    }\n\n    set padding(v) {\n        this._paddingX = v;\n        this._paddingY = v;\n        this._updateBlurSize();\n    }\n\n    set paddingX(v) {\n        this._paddingX = v;\n        this._updateBlurSize();\n    }\n\n    set paddingY(v) {\n        this._paddingY = v;\n        this._updateBlurSize();\n    }\n\n    getLayer(i) {\n        return this._layers.sel(\"L\" + i);\n    }\n\n    getLayerContents(i) {\n        return this.getLayer(i).sel(\"Content\");\n    }\n\n    _onResize() {\n        this._updateBlurSize();\n    }\n\n    _updateBlurSize() {\n        let w = this.renderWidth;\n        let h = this.renderHeight;\n\n        let paddingX = this._paddingX;\n        let paddingY = this._paddingY;\n\n        let fw = w + paddingX * 2;\n        let fh = h + paddingY * 2;\n        this._textwrap.w = fw;\n        this._wrapper.x = paddingX;\n        this.getLayer(0).w = this.getLayerContents(0).w = fw / 2;\n        this.getLayer(1).w = this.getLayerContents(1).w = fw / 4;\n        this.getLayer(2).w = this.getLayerContents(2).w = fw / 8;\n        this.getLayer(3).w = this.getLayerContents(3).w = fw / 16;\n        this._output.x = -paddingX;\n        this._textwrap.x = -paddingX;\n        this._output.w = fw;\n\n        this._textwrap.h = fh;\n        this._wrapper.y = paddingY;\n        this.getLayer(0).h = this.getLayerContents(0).h = fh / 2;\n        this.getLayer(1).h = this.getLayerContents(1).h = fh / 4;\n        this.getLayer(2).h = this.getLayerContents(2).h = fh / 8;\n        this.getLayer(3).h = this.getLayerContents(3).h = fh / 16;\n        this._output.y = -paddingY;\n        this._textwrap.y = -paddingY;\n        this._output.h = fh;\n\n        this.w = w;\n        this.h = h;\n    }\n\n    /**\n     * Sets the amount of blur. A value between 0 and 4. Goes up exponentially for blur.\n     * Best results for non-fractional values.\n     * @param v;\n     */\n    set amount(v) {\n        this._amount = v;\n        this._update();\n    }\n\n    get amount() {\n        return this._amount;\n    }\n\n    _update() {\n        let v = Math.min(4, Math.max(0, this._amount));\n        if (v === 0) {\n            this._textwrap.renderToTexture = false;\n            this._output.shader.otherTextureSource = null;\n            this._output.visible = false;\n        } else {\n            this._textwrap.renderToTexture = true;\n            this._output.visible = true;\n\n            this.getLayer(0).visible = (v > 0);\n            this.getLayer(1).visible = (v > 1);\n            this.getLayer(2).visible = (v > 2);\n            this.getLayer(3).visible = (v > 3);\n\n            if (v <= 1) {\n                this._output.texture = this._textwrap.getTexture();\n                this._output.shader.otherTextureSource = this.getLayer(0).getTexture();\n                this._output.shader.a = v;\n            } else if (v <= 2) {\n                this._output.texture = this.getLayer(0).getTexture();\n                this._output.shader.otherTextureSource = this.getLayer(1).getTexture();\n                this._output.shader.a = v - 1;\n            } else if (v <= 3) {\n                this._output.texture = this.getLayer(1).getTexture();\n                this._output.shader.otherTextureSource = this.getLayer(2).getTexture();\n                this._output.shader.a = v - 2;\n            } else if (v <= 4) {\n                this._output.texture = this.getLayer(2).getTexture();\n                this._output.shader.otherTextureSource = this.getLayer(3).getTexture();\n                this._output.shader.a = v - 3;\n            }\n        }\n    }\n\n    set shader(s) {\n        super.shader = s;\n        if (!this.renderToTexture) {\n            console.warn(\"[Lightning] Please enable renderToTexture to use with a shader.\");\n        }\n    }\n\n    _firstActive() {\n        this._buildLayers();\n    }\n\n}\n\n/**\n * Shader that combines two textures into one output.\n */\nclass FastBlurOutputShader extends DefaultShader {\n\n    constructor(ctx) {\n        super(ctx);\n\n        this._a = 0;\n        this._otherTextureSource = null;\n    }\n\n    get a() {\n        return this._a;\n    }\n\n    set a(v) {\n        this._a = v;\n        this.redraw();\n    }\n\n    set otherTextureSource(v) {\n        this._otherTextureSource = v;\n        this.redraw();\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        this._setUniform(\"a\", this._a, this.gl.uniform1f);\n        this._setUniform(\"uSampler2\", 1, this.gl.uniform1i);\n    }\n\n    beforeDraw(operation) {\n        let glTexture = this._otherTextureSource ? this._otherTextureSource.nativeTexture : null;\n\n        let gl = this.gl;\n        gl.activeTexture(gl.TEXTURE1);\n        gl.bindTexture(gl.TEXTURE_2D, glTexture);\n        gl.activeTexture(gl.TEXTURE0);\n    }\n}\n\nFastBlurOutputShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    uniform sampler2D uSampler2;\n    uniform float a;\n    void main(void){\n        if (a == 1.0) {\n            gl_FragColor = texture2D(uSampler2, vTextureCoord) * vColor;\n        } else {\n            gl_FragColor = ((1.0 - a) * texture2D(uSampler, vTextureCoord) + (a * texture2D(uSampler2, vTextureCoord))) * vColor;\n        }\n    }\n`;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Component from \"../application/Component.mjs\";\nimport LinearBlurShader from \"../renderer/webgl/shaders/LinearBlurShader.mjs\";\nimport BoxBlurShader from \"../renderer/webgl/shaders/BoxBlurShader.mjs\";\nimport DefaultShader from \"../renderer/webgl/shaders/DefaultShader.mjs\";\n\nexport default class BloomComponent extends Component {\n\n    static _template() {\n        const onUpdate = function(element, elementCore) {\n            if ((elementCore._recalc & (2 + 128))) {\n                const w = elementCore.w;\n                const h = elementCore.h;\n                let cur = elementCore;\n                do {\n                    cur = cur._children[0];\n                    cur._element.w = w;\n                    cur._element.h = h;\n                } while(cur._children);\n            }\n        };\n\n        return {\n            Textwrap: {rtt: true, forceZIndexContext: true, renderOffscreen: true,\n                BloomBase: {shader: {type: BloomBaseShader},\n                    Content: {}\n                }\n            },\n            Layers: {\n                L0: {rtt: true, onUpdate: onUpdate, scale: 2, pivot: 0, visible: false, Content: {shader: {type: BoxBlurShader}}},\n                L1: {rtt: true, onUpdate: onUpdate, scale: 4, pivot: 0, visible: false, Content: {shader: {type: BoxBlurShader}}},\n                L2: {rtt: true, onUpdate: onUpdate, scale: 8, pivot: 0, visible: false, Content: {shader: {type: BoxBlurShader}}},\n                L3: {rtt: true, onUpdate: onUpdate, scale: 16, pivot: 0, visible: false, Content: {shader: {type: BoxBlurShader}}}\n            }\n        }\n    }\n\n    get _signalProxy() {\n        return true;\n    }\n\n    constructor(stage) {\n        super(stage);\n        this._textwrap = this.sel(\"Textwrap\");\n        this._wrapper = this.sel(\"Textwrap.Content\");\n        this._layers = this.sel(\"Layers\");\n\n        this._amount = 0;\n        this._paddingX = 0;\n        this._paddingY = 0;\n    }\n\n    _build() {\n        const filterShaderSettings = [{x:1,y:0,kernelRadius:3},{x:0,y:1,kernelRadius:3},{x:1.5,y:0,kernelRadius:3},{x:0,y:1.5,kernelRadius:3}];\n        const filterShaders = filterShaderSettings.map(s => {\n            const shader = this.stage.createShader(Object.assign({type: LinearBlurShader}, s));\n            return shader;\n        });\n\n        this._setLayerTexture(this.getLayerContents(0), this._textwrap.getTexture(), []);\n        this._setLayerTexture(this.getLayerContents(1), this.getLayer(0).getTexture(), [filterShaders[0], filterShaders[1]]);\n\n        // Notice that 1.5 filters should be applied before 1.0 filters.\n        this._setLayerTexture(this.getLayerContents(2), this.getLayer(1).getTexture(), [filterShaders[0], filterShaders[1], filterShaders[2], filterShaders[3]]);\n        this._setLayerTexture(this.getLayerContents(3), this.getLayer(2).getTexture(), [filterShaders[0], filterShaders[1], filterShaders[2], filterShaders[3]]);\n    }\n\n    _setLayerTexture(element, texture, steps) {\n        if (!steps.length) {\n            element.texture = texture;\n        } else {\n            const step = steps.pop();\n            const child = element.stage.c({rtt: true, shader: step});\n\n            // Recurse.\n            this._setLayerTexture(child, texture, steps);\n\n            element.childList.add(child);\n        }\n        return element;\n    }\n\n    get content() {\n        return this.sel('Textwrap.Content');\n    }\n\n    set content(v) {\n        this.sel('Textwrap.Content').patch(v);\n    }\n\n    set padding(v) {\n        this._paddingX = v;\n        this._paddingY = v;\n        this._updateBlurSize();\n    }\n\n    set paddingX(v) {\n        this._paddingX = v;\n        this._updateBlurSize();\n    }\n\n    set paddingY(v) {\n        this._paddingY = v;\n        this._updateBlurSize();\n    }\n\n    getLayer(i) {\n        return this._layers.sel(\"L\" + i);\n    }\n\n    getLayerContents(i) {\n        return this.getLayer(i).sel(\"Content\");\n    }\n\n    _onResize() {\n        this._updateBlurSize();\n    }\n\n    _updateBlurSize() {\n        let w = this.renderWidth;\n        let h = this.renderHeight;\n\n        let paddingX = this._paddingX;\n        let paddingY = this._paddingY;\n\n        let fw = w + paddingX * 2;\n        let fh = h + paddingY * 2;\n        this._textwrap.w = fw;\n        this._wrapper.x = paddingX;\n        this.getLayer(0).w = this.getLayerContents(0).w = fw / 2;\n        this.getLayer(1).w = this.getLayerContents(1).w = fw / 4;\n        this.getLayer(2).w = this.getLayerContents(2).w = fw / 8;\n        this.getLayer(3).w = this.getLayerContents(3).w = fw / 16;\n        this._textwrap.x = -paddingX;\n\n        this._textwrap.h = fh;\n        this._wrapper.y = paddingY;\n        this.getLayer(0).h = this.getLayerContents(0).h = fh / 2;\n        this.getLayer(1).h = this.getLayerContents(1).h = fh / 4;\n        this.getLayer(2).h = this.getLayerContents(2).h = fh / 8;\n        this.getLayer(3).h = this.getLayerContents(3).h = fh / 16;\n        this._textwrap.y = -paddingY;\n\n        this.w = w;\n        this.h = h;\n    }\n\n    /**\n     * Sets the amount of blur. A value between 0 and 4. Goes up exponentially for blur.\n     * Best results for non-fractional values.\n     * @param v;\n     */\n    set amount(v) {\n        this._amount = v;\n        this._update();\n    }\n\n    get amount() {\n        return this._amount;\n    }\n\n    _update() {\n        let v = Math.min(4, Math.max(0, this._amount));\n        if (v > 0) {\n            this.getLayer(0).visible = (v > 0);\n            this.getLayer(1).visible = (v > 1);\n            this.getLayer(2).visible = (v > 2);\n            this.getLayer(3).visible = (v > 3);\n        }\n    }\n\n    set shader(s) {\n        super.shader = s;\n        if (!this.renderToTexture) {\n            console.warn(\"[Lightning] Please enable renderToTexture to use with a shader.\");\n        }\n    }\n\n    _firstActive() {\n        this._build();\n    }\n\n}\n\nclass BloomBaseShader extends DefaultShader {\n}\n\nBloomBaseShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    void main(void){\n        vec4 color = texture2D(uSampler, vTextureCoord) * vColor;\n        float m = max(max(color.r, color.g), color.b);\n        float c = max(0.0, (m - 0.80)) * 5.0;\n        color = color * c;\n        gl_FragColor = color;\n    }\n`;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Component from \"../application/Component.mjs\";\n\nexport default class SmoothScaleComponent extends Component {\n\n    static _template() {\n        return {\n            ContentWrap: {renderOffscreen: true, forceZIndexContext: true, onAfterUpdate: SmoothScaleComponent._updateDimensions,\n                Content: {}\n            },\n            Scale: {visible: false}\n        }\n    }\n\n    constructor(stage) {\n        super(stage);\n\n        this._smoothScale = 1;\n        this._iterations = 0;\n    }\n\n    get content() {\n        return this.tag('Content');\n    }\n\n    set content(v) {\n        this.tag('Content').patch(v, true);\n    }\n\n    get smoothScale() {\n        return this._smoothScale;\n    }\n\n    set smoothScale(v) {\n        if (this._smoothScale !== v) {\n            let its = 0;\n            while(v < 0.5 && its < 12) {\n                its++;\n                v = v * 2;\n            }\n\n            this.scale = v;\n            this._setIterations(its);\n\n            this._smoothScale = v;\n        }\n    }\n\n    _setIterations(its) {\n        if (this._iterations !== its) {\n            const scalers = this.sel(\"Scale\").childList;\n            const content = this.sel(\"ContentWrap\");\n            while (scalers.length < its) {\n                const first = scalers.length === 0;\n                const texture = (first ? content.getTexture() : scalers.last.getTexture());\n                scalers.a({rtt: true, renderOffscreen: true, texture: texture});\n            }\n\n            SmoothScaleComponent._updateDimensions(this.tag(\"ContentWrap\"), true);\n\n            const useScalers = (its > 0);\n            this.patch({\n                ContentWrap: {renderToTexture: useScalers},\n                Scale: {visible: useScalers}\n            });\n\n            for (let i = 0, n = scalers.length; i < n; i++) {\n                scalers.getAt(i).patch({\n                    visible: i < its,\n                    renderOffscreen: i !== its - 1\n                });\n            }\n            this._iterations = its;\n        }\n    }\n\n    static _updateDimensions(contentWrap, force) {\n        const content = contentWrap.children[0];\n        let w = content.renderWidth;\n        let h = content.renderHeight;\n        if (w !== contentWrap.w || h !== contentWrap.h || force) {\n            contentWrap.w = w;\n            contentWrap.h = h;\n\n            const scalers = contentWrap.parent.tag(\"Scale\").children;\n            for (let i = 0, n = scalers.length; i < n; i++) {\n                w = w * 0.5;\n                h = h * 0.5;\n                scalers[i].w = w;\n                scalers[i].h = h;\n            }\n        }\n    }\n\n    get _signalProxy() {\n        return true;\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Component from \"../application/Component.mjs\";\n\nexport default class BorderComponent extends Component {\n\n    static _template() {\n        return {\n            Content: {},\n            Borders: {\n                Top: {rect: true, visible: false, mountY: 1},\n                Right: {rect: true, visible: false},\n                Bottom: {rect: true, visible: false},\n                Left: {rect: true, visible: false, mountX: 1}\n            }\n        };\n    }\n\n    get _signalProxy() {\n        return true;\n    }\n\n    constructor(stage) {\n        super(stage);\n\n        this._borderTop = this.tag(\"Top\");\n        this._borderRight = this.tag(\"Right\");\n        this._borderBottom = this.tag(\"Bottom\");\n        this._borderLeft = this.tag(\"Left\");\n\n        this.onAfterUpdate = function (element) {\n            const content = element.childList.first;\n            let w = element.core.w || content.renderWidth;\n            let h = element.core.h || content.renderHeight;\n            element._borderTop.w = w;\n            element._borderBottom.y = h;\n            element._borderBottom.w = w;\n            element._borderLeft.h = h + element._borderTop.h + element._borderBottom.h;\n            element._borderLeft.y = -element._borderTop.h;\n            element._borderRight.x = w;\n            element._borderRight.h = h + element._borderTop.h + element._borderBottom.h;\n            element._borderRight.y = -element._borderTop.h;\n        };\n\n        this.borderWidth = 1;\n    }\n\n    get content() {\n        return this.sel('Content');\n    }\n\n    set content(v) {\n        this.sel('Content').patch(v, true);\n    }\n\n    get borderWidth() {\n        return this.borderWidthTop;\n    }\n\n    get borderWidthTop() {\n        return this._borderTop.h;\n    }\n\n    get borderWidthRight() {\n        return this._borderRight.w;\n    }\n\n    get borderWidthBottom() {\n        return this._borderBottom.h;\n    }\n\n    get borderWidthLeft() {\n        return this._borderLeft.w;\n    }\n\n    set borderWidth(v) {\n        this.borderWidthTop = v;\n        this.borderWidthRight = v;\n        this.borderWidthBottom = v;\n        this.borderWidthLeft = v;\n    }\n\n    set borderWidthTop(v) {\n        this._borderTop.h = v;\n        this._borderTop.visible = (v > 0);\n    }\n\n    set borderWidthRight(v) {\n        this._borderRight.w = v;\n        this._borderRight.visible = (v > 0);\n    }\n\n    set borderWidthBottom(v) {\n        this._borderBottom.h = v;\n        this._borderBottom.visible = (v > 0);\n    }\n\n    set borderWidthLeft(v) {\n        this._borderLeft.w = v;\n        this._borderLeft.visible = (v > 0);\n    }\n\n    get colorBorder() {\n        return this.colorBorderTop;\n    }\n\n    get colorBorderTop() {\n        return this._borderTop.color;\n    }\n\n    get colorBorderRight() {\n        return this._borderRight.color;\n    }\n\n    get colorBorderBottom() {\n        return this._borderBottom.color;\n    }\n\n    get colorBorderLeft() {\n        return this._borderLeft.color;\n    }\n\n    set colorBorder(v) {\n        this.colorBorderTop = v;\n        this.colorBorderRight = v;\n        this.colorBorderBottom = v;\n        this.colorBorderLeft = v;\n    }\n\n    set colorBorderTop(v) {\n        this._borderTop.color = v;\n    }\n\n    set colorBorderRight(v) {\n        this._borderRight.color = v;\n    }\n\n    set colorBorderBottom(v) {\n        this._borderBottom.color = v;\n    }\n\n    set colorBorderLeft(v) {\n        this._borderLeft.color = v;\n    }\n\n    get borderTop() {\n        return this._borderTop;\n    }\n\n    set borderTop(settings) {\n        this.borderTop.patch(settings);\n    }\n\n    get borderRight() {\n        return this._borderRight;\n    }\n\n    set borderRight(settings) {\n        this.borderRight.patch(settings);\n    }\n\n    get borderBottom() {\n        return this._borderBottom;\n    }\n\n    set borderBottom(settings) {\n        this.borderBottom.patch(settings);\n    }\n\n    get borderLeft() {\n        return this._borderLeft;\n    }\n\n    set borderLeft(settings) {\n        this.borderLeft.patch(settings);\n    }\n\n    set borders(settings) {\n        this.borderTop = settings;\n        this.borderLeft = settings;\n        this.borderBottom = settings;\n        this.borderRight = settings;\n    }\n\n}\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport C2dDefaultShader from \"../../c2d/shaders/DefaultShader.mjs\";\nimport WebGLDefaultShader from \"../../webgl/shaders/DefaultShader.mjs\";\n\nexport class WebGLGrayscaleShader extends WebGLDefaultShader {\n\n    constructor(context) {\n        super(context);\n        this._amount = 1;\n    }\n\n    static getC2d() {\n        return C2dGrayscaleShader;\n    }\n\n\n    set amount(v) {\n        this._amount = v;\n        this.redraw();\n    }\n\n    get amount() {\n        return this._amount;\n    }\n\n    useDefault() {\n        return this._amount === 0;\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        this._setUniform(\"amount\", this._amount, this.gl.uniform1f);\n    }\n\n}\n\nWebGLGrayscaleShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    uniform float amount;\n    void main(void){\n        vec4 color = texture2D(uSampler, vTextureCoord) * vColor;\n        float grayness = 0.2 * color.r + 0.6 * color.g + 0.2 * color.b;\n        gl_FragColor = vec4(amount * vec3(grayness, grayness, grayness) + (1.0 - amount) * color.rgb, color.a);\n    }\n`;\n\nexport class C2dGrayscaleShader extends C2dDefaultShader {\n\n    constructor(context) {\n        super(context);\n        this._amount = 1;\n    }\n\n    static getWebGL() {\n        return WebGLGrayscaleShader;\n    }\n\n\n    set amount(v) {\n        this._amount = v;\n        this.redraw();\n    }\n\n    get amount() {\n        return this._amount;\n    }\n\n    useDefault() {\n        return this._amount === 0;\n    }\n\n    _beforeDrawEl({target}) {\n        target.ctx.filter = \"grayscale(\" + this._amount + \")\";\n    }\n\n    _afterDrawEl({target}) {\n        target.ctx.filter = \"none\";\n    }\n\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport NoiseTexture from \"../../../textures/NoiseTexture.mjs\";\nimport DefaultShader from \"./DefaultShader.mjs\";\n\n/**\n * This shader can be used to fix a problem that is known as 'gradient banding'.\n */\nexport default class DitheringShader extends DefaultShader {\n\n    constructor(ctx) {\n        super(ctx);\n\n        this._noiseTexture = new NoiseTexture(ctx.stage);\n\n        this._graining = 1/256;\n\n        this._random = false;\n    }\n\n    set graining(v) {\n        this._graining = v;\n        this.redraw();\n    }\n\n    set random(v) {\n        this._random = v;\n        this.redraw();\n    }\n\n    setExtraAttribsInBuffer(operation) {\n        // Make sure that the noise texture is uploaded to the GPU.\n        this._noiseTexture.load();\n\n        let offset = operation.extraAttribsDataByteOffset / 4;\n        let floats = operation.quads.floats;\n\n        let length = operation.length;\n\n        for (let i = 0; i < length; i++) {\n\n            // Calculate noise texture coordinates so that it spans the full element.\n            let brx = operation.getElementWidth(i) / this._noiseTexture.getRenderWidth();\n            let bry = operation.getElementHeight(i) / this._noiseTexture.getRenderHeight();\n\n            let ulx = 0;\n            let uly = 0;\n            if (this._random) {\n                ulx = Math.random();\n                uly = Math.random();\n\n                brx += ulx;\n                bry += uly;\n\n                if (Math.random() < 0.5) {\n                    // Flip for more randomness.\n                    const t = ulx;\n                    ulx = brx;\n                    brx = t;\n                }\n\n                if (Math.random() < 0.5) {\n                    // Flip for more randomness.\n                    const t = uly;\n                    uly = bry;\n                    bry = t;\n                }\n            }\n\n            // Specify all corner points.\n            floats[offset] = ulx;\n            floats[offset + 1] = uly;\n\n            floats[offset + 2] = brx;\n            floats[offset + 3] = uly;\n\n            floats[offset + 4] = brx;\n            floats[offset + 5] = bry;\n\n            floats[offset + 6] = ulx;\n            floats[offset + 7] = bry;\n\n            offset += 8;\n        }\n    }\n\n    beforeDraw(operation) {\n        let gl = this.gl;\n        gl.vertexAttribPointer(this._attrib(\"aNoiseTextureCoord\"), 2, gl.FLOAT, false, 8, this.getVertexAttribPointerOffset(operation));\n\n        let glTexture = this._noiseTexture.source.nativeTexture;\n        gl.activeTexture(gl.TEXTURE1);\n        gl.bindTexture(gl.TEXTURE_2D, glTexture);\n        gl.activeTexture(gl.TEXTURE0);\n    }\n\n    getExtraAttribBytesPerVertex() {\n        return 8;\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        this._setUniform(\"uNoiseSampler\", 1, this.gl.uniform1i);\n        this._setUniform(\"graining\", 2 * this._graining, this.gl.uniform1f);\n    }\n\n    enableAttribs() {\n        super.enableAttribs();\n        let gl = this.gl;\n        gl.enableVertexAttribArray(this._attrib(\"aNoiseTextureCoord\"));\n    }\n\n    disableAttribs() {\n        super.disableAttribs();\n        let gl = this.gl;\n        gl.disableVertexAttribArray(this._attrib(\"aNoiseTextureCoord\"));\n    }\n\n    useDefault() {\n        return this._graining === 0;\n    }\n\n    afterDraw(operation) {\n        if (this._random) {\n            this.redraw();\n        }\n    }\n\n}\n\nDitheringShader.vertexShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    attribute vec2 aVertexPosition;\n    attribute vec2 aTextureCoord;\n    attribute vec2 aNoiseTextureCoord;\n    attribute vec4 aColor;\n    uniform vec2 projection;\n    varying vec2 vTextureCoord;\n    varying vec2 vNoiseTextureCoord;\n    varying vec4 vColor;\n    void main(void){\n        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);\n        vTextureCoord = aTextureCoord;\n        vNoiseTextureCoord = aNoiseTextureCoord;\n        vColor = aColor;\n        gl_Position.y = -sign(projection.y) * gl_Position.y;\n    }\n`;\n\nDitheringShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec2 vNoiseTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    uniform sampler2D uNoiseSampler;\n    uniform float graining;\n    void main(void){\n        vec4 noise = texture2D(uNoiseSampler, vNoiseTextureCoord);\n        vec4 color = texture2D(uSampler, vTextureCoord);\n        gl_FragColor = (color * vColor) + graining * (noise.r - 0.5);\n    }\n`;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Utils from \"../../../tree/Utils.mjs\";\nimport DefaultShader from \"./DefaultShader.mjs\";\n\nexport default class CircularPushShader extends DefaultShader {\n\n    constructor(ctx) {\n        super(ctx);\n\n        this._inputValue = 0;\n\n        this._maxDerivative = 0.01;\n\n        this._normalizedValue = 0;\n\n        // The offset between buckets. A value between 0 and 1.\n        this._offset = 0;\n\n        this._amount = 0.1;\n\n        this._aspectRatio = 1;\n\n        this._offsetX = 0;\n\n        this._offsetY = 0;\n\n        this.buckets = 100;\n    }\n\n    get aspectRatio() {\n        return this._aspectRatio;\n    }\n\n    set aspectRatio(v) {\n        this._aspectRatio = v;\n        this.redraw();\n    }\n\n    get offsetX() {\n        return this._offsetX;\n    }\n\n    set offsetX(v) {\n        this._offsetX = v;\n        this.redraw();\n    }\n\n    get offsetY() {\n        return this._offsetY;\n    }\n\n    set offsetY(v) {\n        this._offsetY = v;\n        this.redraw();\n    }\n\n    set amount(v) {\n        this._amount = v;\n        this.redraw();\n    }\n\n    get amount() {\n        return this._amount;\n    }\n\n    set inputValue(v) {\n        this._inputValue = v;\n    }\n\n    get inputValue() {\n        return this._inputValue;\n    }\n\n    set maxDerivative(v) {\n        this._maxDerivative = v;\n    }\n\n    get maxDerivative() {\n        return this._maxDerivative;\n    }\n\n    set buckets(v) {\n        if (v > 100) {\n            console.warn(\"[Lightning] CircularPushShader: supports max 100 buckets\");\n            v = 100;\n        }\n\n        // This should be set before starting.\n        this._buckets = v;\n\n        // Init values array in the correct length.\n        this._values = new Uint8Array(this._getValues(v));\n\n        this.redraw();\n    }\n\n    get buckets() {\n        return this._buckets;\n    }\n\n    _getValues(n) {\n        const v = [];\n        for (let i = 0; i < n; i++) {\n            v.push(this._inputValue);\n        }\n        return v;\n    }\n\n    /**\n     * Progresses the shader with the specified (fractional) number of buckets.\n     * @param {number} o;\n     *   A number from 0 to 1 (1 = all buckets).\n     */\n    progress(o) {\n        this._offset += o * this._buckets;\n        const full = Math.floor(this._offset);\n        this._offset -= full;\n        this._shiftBuckets(full);\n        this.redraw();\n    }\n\n    _shiftBuckets(n) {\n        for (let i = this._buckets - 1; i >= 0; i--) {\n            const targetIndex = i - n;\n            if (targetIndex < 0) {\n                this._normalizedValue = Math.min(this._normalizedValue + this._maxDerivative, Math.max(this._normalizedValue - this._maxDerivative, this._inputValue));\n                this._values[i] = 255 * this._normalizedValue;\n            } else {\n                this._values[i] = this._values[targetIndex];\n            }\n        }\n    }\n\n    set offset(v) {\n        this._offset = v;\n        this.redraw();\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        this._setUniform(\"aspectRatio\", this._aspectRatio, this.gl.uniform1f);\n        this._setUniform(\"offsetX\", this._offsetX, this.gl.uniform1f);\n        this._setUniform(\"offsetY\", this._offsetY, this.gl.uniform1f);\n        this._setUniform(\"amount\", this._amount, this.gl.uniform1f);\n        this._setUniform(\"offset\", this._offset, this.gl.uniform1f);\n        this._setUniform(\"buckets\", this._buckets, this.gl.uniform1f);\n        this._setUniform(\"uValueSampler\", 1, this.gl.uniform1i);\n    }\n\n    useDefault() {\n        return this._amount === 0;\n    }\n\n    beforeDraw(operation) {\n        const gl = this.gl;\n        gl.activeTexture(gl.TEXTURE1);\n        if (!this._valuesTexture) {\n            this._valuesTexture = gl.createTexture();\n            gl.bindTexture(gl.TEXTURE_2D, this._valuesTexture);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n            if (Utils.isNode) {\n                gl.pixelStorei(gl.UNPACK_FLIP_BLUE_RED, false);\n            }\n            gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\n        } else {\n            gl.bindTexture(gl.TEXTURE_2D, this._valuesTexture);\n        }\n\n        // Upload new values.\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.ALPHA, this._buckets, 1, 0, gl.ALPHA, gl.UNSIGNED_BYTE, this._values);\n        gl.activeTexture(gl.TEXTURE0);\n    }\n\n    cleanup() {\n        if (this._valuesTexture) {\n            this.gl.deleteTexture(this._valuesTexture);\n        }\n    }\n\n\n}\n\nCircularPushShader.vertexShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    attribute vec2 aVertexPosition;\n    attribute vec2 aTextureCoord;\n    attribute vec4 aColor;\n    uniform vec2 projection;\n    uniform float offsetX;\n    uniform float offsetY;\n    uniform float aspectRatio;\n    varying vec2 vTextureCoord;\n    varying vec2 vPos;\n    varying vec4 vColor;\n    void main(void){\n        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);\n        vTextureCoord = aTextureCoord;\n        vPos = vTextureCoord * 2.0 - 1.0;\n        vPos.y = vPos.y * aspectRatio;\n        vPos.y = vPos.y + offsetY;\n        vPos.x = vPos.x + offsetX;\n        vColor = aColor;\n        gl_Position.y = -sign(projection.y) * gl_Position.y;\n    }\n`;\n\nCircularPushShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    varying vec2 vPos;\n    uniform float amount;\n    uniform float offset;\n    uniform float values[100];\n    uniform float buckets;\n    uniform sampler2D uSampler;\n    uniform sampler2D uValueSampler;\n    void main(void){\n        float l = length(vPos);\n        float m = (l * buckets * 0.678 - offset) / buckets;\n        float f = texture2D(uValueSampler, vec2(m, 0.0)).a * amount;\n        vec2 unit = vPos / l;\n        gl_FragColor = texture2D(uSampler, vTextureCoord - f * unit) * vColor;\n    }\n`;\n\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\n\nexport default class InversionShader extends DefaultShader {\n\n    constructor(context) {\n        super(context);\n        this._amount = 1;\n    }\n\n    set amount(v) {\n        this._amount = v;\n        this.redraw();\n    }\n\n    get amount() {\n        return this._amount;\n    }\n\n    useDefault() {\n        return this._amount === 0;\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        this._setUniform(\"amount\", this._amount, this.gl.uniform1f);\n    }\n\n}\n\nInversionShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    uniform float amount;\n    void main(void){\n        vec4 color = texture2D(uSampler, vTextureCoord);\n        color.rgb = color.rgb * (1.0 - amount) + amount * (1.0 * color.a - color.rgb); \n        gl_FragColor = color * vColor;\n    }\n`;\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport StageUtils from \"../../../tree/StageUtils.mjs\";\nimport DefaultShader from \"./DefaultShader.mjs\";\n\nexport default class OutlineShader extends DefaultShader {\n\n    constructor(ctx) {\n        super(ctx);\n        this._width = 5;\n        this._col = 0xFFFFFFFF;\n        this._color = [1,1,1,1];\n    }\n\n    set width(v) {\n        this._width = v;\n        this.redraw();\n    }\n\n    get color() {\n        return this._col;\n    }\n\n    set color(v) {\n        if (this._col !== v) {\n            const col = StageUtils.getRgbaComponentsNormalized(v);\n            col[0] = col[0] * col[3];\n            col[1] = col[1] * col[3];\n            col[2] = col[2] * col[3];\n\n            this._color = col;\n\n            this.redraw();\n\n            this._col = v;\n        }\n    }\n\n    useDefault() {\n        return (this._width === 0 || this._col[3] === 0);\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        let gl = this.gl;\n        this._setUniform(\"color\", new Float32Array(this._color), gl.uniform4fv);\n    }\n\n    enableAttribs() {\n        super.enableAttribs();\n        this.gl.enableVertexAttribArray(this._attrib(\"aCorner\"));\n    }\n\n    disableAttribs() {\n        super.disableAttribs();\n        this.gl.disableVertexAttribArray(this._attrib(\"aCorner\"));\n    }\n\n    setExtraAttribsInBuffer(operation) {\n        let offset = operation.extraAttribsDataByteOffset / 4;\n        let floats = operation.quads.floats;\n\n        let length = operation.length;\n\n        for (let i = 0; i < length; i++) {\n\n            const elementCore = operation.getElementCore(i);\n\n            // We are setting attributes such that if the value is < 0 or > 1, a border should be drawn.\n            const ddw = this._width / elementCore.w;\n            const dw = ddw / (1 - 2 * ddw);\n            const ddh = this._width / elementCore.h;\n            const dh = ddh / (1 - 2 * ddh);\n\n            // Specify all corner points.\n            floats[offset] = -dw;\n            floats[offset + 1] = -dh;\n\n            floats[offset + 2] = 1 + dw;\n            floats[offset + 3] = -dh;\n\n            floats[offset + 4] = 1 + dw;\n            floats[offset + 5] = 1 + dh;\n\n            floats[offset + 6] = -dw;\n            floats[offset + 7] = 1 + dh;\n\n            offset += 8;\n        }\n    }\n\n    beforeDraw(operation) {\n        let gl = this.gl;\n        gl.vertexAttribPointer(this._attrib(\"aCorner\"), 2, gl.FLOAT, false, 8, this.getVertexAttribPointerOffset(operation));\n    }\n\n    getExtraAttribBytesPerVertex() {\n        return 8;\n    }\n\n}\n\nOutlineShader.vertexShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    attribute vec2 aVertexPosition;\n    attribute vec2 aTextureCoord;\n    attribute vec4 aColor;\n    attribute vec2 aCorner;\n    uniform vec2 projection;\n    varying vec2 vTextureCoord;\n    varying vec2 vCorner;\n    varying vec4 vColor;\n    void main(void){\n        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);\n        vTextureCoord = aTextureCoord;\n        vCorner = aCorner;\n        vColor = aColor;\n        gl_Position.y = -sign(projection.y) * gl_Position.y;\n    }\n`;\n\nOutlineShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    varying vec2 vCorner;\n    uniform vec4 color;\n    uniform sampler2D uSampler;\n    void main(void){\n        vec2 m = min(vCorner, 1.0 - vCorner);\n        float value = step(0.0, min(m.x, m.y));\n        gl_FragColor = mix(color, texture2D(uSampler, vTextureCoord) * vColor, value);\n    }\n`;\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\n\n/**\n * @see https://github.com/pixijs/pixi-filters/tree/master/filters/pixelate/src\n */\nexport default class PixelateShader extends DefaultShader {\n\n    constructor(ctx) {\n        super(ctx);\n\n        this._size = new Float32Array([4, 4]);\n    }\n\n    get x() {\n        return this._size[0];\n    }\n\n    set x(v) {\n        this._size[0] = v;\n        this.redraw();\n    }\n\n    get y() {\n        return this._size[1];\n    }\n\n    set y(v) {\n        this._size[1] = v;\n        this.redraw();\n    }\n\n    get size() {\n        return this._size[0];\n    }\n\n    set size(v) {\n        this._size[0] = v;\n        this._size[1] = v;\n        this.redraw();\n    }\n\n    useDefault() {\n        return ((this._size[0] === 0) && (this._size[1] === 0));\n    }\n\n    static getWebGLImpl() {\n        return WebGLPixelateShaderImpl;\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        let gl = this.gl;\n        this._setUniform(\"size\", new Float32Array(this._size), gl.uniform2fv);\n    }\n\n    getExtraAttribBytesPerVertex() {\n        return 8;\n    }\n\n    enableAttribs() {\n        super.enableAttribs();\n        this.gl.enableVertexAttribArray(this._attrib(\"aTextureRes\"));\n    }\n\n    disableAttribs() {\n        super.disableAttribs();\n        this.gl.disableVertexAttribArray(this._attrib(\"aTextureRes\"));\n    }\n\n    setExtraAttribsInBuffer(operation) {\n        let offset = operation.extraAttribsDataByteOffset / 4;\n        let floats = operation.quads.floats;\n\n        let length = operation.length;\n        for (let i = 0; i < length; i++) {\n            let w = operation.quads.getTextureWidth(operation.index + i);\n            let h = operation.quads.getTextureHeight(operation.index + i);\n\n            floats[offset] = w;\n            floats[offset + 1] = h;\n            floats[offset + 2] = w;\n            floats[offset + 3] = h;\n            floats[offset + 4] = w;\n            floats[offset + 5] = h;\n            floats[offset + 6] = w;\n            floats[offset + 7] = h;\n\n            offset += 8;\n        }\n    }\n\n    beforeDraw(operation) {\n        let gl = this.gl;\n        gl.vertexAttribPointer(this._attrib(\"aTextureRes\"), 2, gl.FLOAT, false, this.getExtraAttribBytesPerVertex(), this.getVertexAttribPointerOffset(operation));\n    }\n}\n\nPixelateShader.vertexShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    attribute vec2 aVertexPosition;\n    attribute vec2 aTextureCoord;\n    attribute vec4 aColor;\n    attribute vec2 aTextureRes;\n    uniform vec2 projection;\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    varying vec2 vTextureRes;\n    void main(void){\n        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);\n        vTextureCoord = aTextureCoord;\n        vColor = aColor;\n        vTextureRes = aTextureRes;\n        gl_Position.y = -sign(projection.y) * gl_Position.y;\n    }\n`;\n\nPixelateShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    varying vec2 vTextureRes;\n\n    uniform vec2 size;\n    uniform sampler2D uSampler;\n    \n    vec2 mapCoord( vec2 coord )\n    {\n        coord *= vTextureRes.xy;\n        return coord;\n    }\n    \n    vec2 unmapCoord( vec2 coord )\n    {\n        coord /= vTextureRes.xy;\n        return coord;\n    }\n    \n    vec2 pixelate(vec2 coord, vec2 size)\n    {\n        return floor( coord / size ) * size;\n    }\n    \n    void main(void)\n    {\n        vec2 coord = mapCoord(vTextureCoord);\n        coord = pixelate(coord, size);\n        coord = unmapCoord(coord);\n        gl_FragColor = texture2D(uSampler, coord) * vColor;\n    }\n`;\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\n\nexport default class RadialFilterShader extends DefaultShader {\n    constructor(context) {\n        super(context);\n        this._radius = 0;\n        this._cutoff = 1;\n    }\n\n    set radius(v) {\n        this._radius = v;\n        this.redraw();\n    }\n\n    get radius() {\n        return this._radius;\n    }\n\n    set cutoff(v) {\n        this._cutoff = v;\n        this.redraw();\n    }\n\n    get cutoff() {\n        return this._cutoff;\n    }\n    \n    useDefault() {\n        return this._radius === 0;\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        // We substract half a pixel to get a better cutoff effect.\n        this._setUniform(\"radius\", 2 * (this._radius - 0.5) / operation.getRenderWidth(), this.gl.uniform1f);\n        this._setUniform(\"cutoff\", 0.5 * operation.getRenderWidth() / this._cutoff, this.gl.uniform1f);\n    }\n\n}\n\nRadialFilterShader.vertexShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    attribute vec2 aVertexPosition;\n    attribute vec2 aTextureCoord;\n    attribute vec4 aColor;\n    uniform vec2 projection;\n    varying vec2 pos;\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    void main(void){\n        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);\n        vTextureCoord = aTextureCoord;\n        vColor = aColor;\n        gl_Position.y = -sign(projection.y) * gl_Position.y;\n        pos = gl_Position.xy;\n    }\n`;\n\nRadialFilterShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec2 pos;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    uniform float radius;\n    uniform float cutoff;\n    void main(void){\n        vec4 color = texture2D(uSampler, vTextureCoord);\n        float f = max(0.0, min(1.0, 1.0 - (length(pos) - radius) * cutoff));\n        gl_FragColor = texture2D(uSampler, vTextureCoord) * vColor * f;\n    }\n`;\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\nimport StageUtils from \"../../../tree/StageUtils.mjs\";\n\nexport default class RoundedRectangleShader extends DefaultShader {\n    constructor(context) {\n        super(context);\n        this._blend = 0;\n        this._radius = [1, 1, 1, 1];\n        this._stroke = 0;\n        this._fc = 0x00ffffff;\n        this._fillColor = this._getNormalizedColor(0xffffffff);\n        this._strokeColor = this._getNormalizedColor(0x00ffffff);\n    }\n\n    set blend(p) {\n        this._blend = Math.min(Math.max(p, 0), 1);\n    }\n\n    set radius(v) {\n        if(Array.isArray(v)) {\n            if(v.length === 2) {\n                this._radius = [v[0], v[1], v[0], v[1]];\n            }\n            else if(v.length === 3) {\n                this._radius = [v[0], v[1], v[2], this._radius[3]];\n            }\n            else if (v.length === 4) {\n                this._radius = v;\n            }\n            else {\n                this._radius = [v[0], v[0], v[0], v[0]];\n            }\n        }\n        else {\n            this._radius = [v, v, v, v];\n        }\n        this.redraw();\n    }\n\n    get radius() {\n        return this._radius;\n    }\n\n    set topLeft(num) {\n        this._radius[0] = num;\n        this.redraw();\n    }\n\n    get topLeft() {\n        return this._radius[0];\n    }\n\n    set topRight(num) {\n        this._radius[1] = num;\n        this.redraw();\n    }\n\n    get topRight() {\n        return this._radius[1];\n    }\n\n    set bottomRight(num) {\n        this._radius[2] = num;\n        this.redraw();\n    }\n\n    get bottomRight() {\n        return this._radius[2];\n    }\n\n    set bottomLeft(num) {\n        this._radius[3] = num;\n        this.redraw();\n    }\n\n    get bottomLeft() {\n        return this._radius[4];\n    }\n\n    set strokeColor(argb) {\n        this._sc = argb;\n        this._strokeColor = this._getNormalizedColor(argb);\n        this.redraw();\n    }\n\n    get strokeColor() {\n        return this._sc;\n    }\n\n    set fillColor(argb) {\n        this._fc = argb;\n        this._fillColor = this._getNormalizedColor(argb);\n        this.redraw();\n    }\n\n    get fillColor() {\n        return this._fc;\n    }\n\n    set stroke(num) {\n        this._stroke = num;\n        this.redraw();\n    }\n\n    get stroke() {\n        return this._stroke;\n    }\n\n    _getNormalizedColor(color) {\n        const col = StageUtils.getRgbaComponentsNormalized(color);\n        col[0] *= col[3];\n        col[1] *= col[3];\n        col[2] *= col[3];\n        return new Float32Array(col);\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        const owner = operation.shaderOwner;\n        const renderPrecision = this.ctx.stage.getRenderPrecision();\n        const _radius = this._radius.map((r) => (r + 0.5) * renderPrecision)\n        this._setUniform('radius', new Float32Array(_radius), this.gl.uniform4fv);\n        this._setUniform('alpha', operation.getElementCore(0).renderContext.alpha, this.gl.uniform1f);\n        this._setUniform('blend', this._blend, this.gl.uniform1f);\n        this._setUniform('strokeColor', this._strokeColor, this.gl.uniform4fv);\n        this._setUniform('fillColor', this._fillColor, this.gl.uniform4fv);\n        this._setUniform('stroke',  this._stroke * renderPrecision, this.gl.uniform1f);\n        this._setUniform('resolution', new Float32Array([owner._w * renderPrecision, owner._h * renderPrecision]), this.gl.uniform2fv);\n    }\n}\n\nRoundedRectangleShader.vertexShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    attribute vec2 aVertexPosition;\n    attribute vec2 aTextureCoord;\n\n    attribute vec4 aColor;\n    uniform vec2 projection;\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n\n    void main(void){\n        gl_Position = vec4(aVertexPosition.x * projection.x - 1.0, aVertexPosition.y * -abs(projection.y) + 1.0, 0.0, 1.0);\n        vTextureCoord = aTextureCoord;\n        vColor = aColor;\n        gl_Position.y = -sign(projection.y) * gl_Position.y;\n    }\n`;\n\nRoundedRectangleShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n\n    #define PI 3.14159265359\n\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n\n    uniform sampler2D uSampler;\n    uniform vec2 resolution;\n    uniform vec4 radius;\n    uniform float stroke;\n    uniform vec4 strokeColor;\n    uniform vec4 fillColor;\n    uniform float alpha;\n    uniform float fill;\n    uniform float blend;\n    \n    float boxDist(vec2 p, vec2 size, float radius){\n        size -= vec2(radius);\n        vec2 d = abs(p) - size;\n        return min(max(d.x, d.y), 0.0) + length(max(d, 0.0)) - radius;\n    }\n    \n    float fillMask(float dist){\n        return clamp(-dist, 0.0, 1.0);\n    }\n    \n    float innerBorderMask(float dist, float width){\n        float alpha1 = clamp(dist + width, 0.0, 1.0);\n        float alpha2 = clamp(dist, 0.0, 1.0);\n        return alpha1 - alpha2;\n    }\n\n    void main() {\n        vec2 halfRes = 0.5 * resolution.xy;\n        float r = 0.0;\n        if (vTextureCoord.x < 0.5 && vTextureCoord.y < 0.5) {\n            r = radius[0];\n        } else if (vTextureCoord.x >= 0.5 && vTextureCoord.y < 0.5) {\n            r = radius[1];\n        } else if (vTextureCoord.x >= 0.5 && vTextureCoord.y >= 0.5) {\n            r = radius[2];\n        } else {\n            r = radius[3];\n        }\n        \n        float b = boxDist(vTextureCoord.xy * resolution - halfRes, halfRes - 0.005, r);\n        vec4 tex = texture2D(uSampler, vTextureCoord) * vColor;\n        vec4 blend = mix(vec4(1.0) * alpha, tex, blend);     \n        vec4 layer1 = mix(vec4(0.0), tex * fillColor, fillMask(b));\n        gl_FragColor = mix(layer1, blend * strokeColor, innerBorderMask(b, stroke));\n    }\n`;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from './DefaultShader.mjs';\n\nexport default class FadeOutShader extends DefaultShader {\n    constructor(context) {\n        super(context);\n        this._fade = [0, 0, 0, 0];\n    }\n\n    set top(num) {\n        this._fade[0] = num;\n        this.redraw();\n    }\n\n    get top() {\n        return this._fade[0];\n    }\n\n    set right(num) {\n        this._fade[1] = num;\n        this.redraw();\n    }\n\n    get right() {\n        return this._fade[1];\n    }\n\n    set bottom(num) {\n        this._fade[2] = num;\n        this.redraw();\n    }\n\n    get bottom() {\n        return this._fade[2];\n    }\n\n    set left(num) {\n        this._fade[3] = num;\n        this.redraw();\n    }\n\n    get left() {\n        return this._fade[3];\n    }\n\n    set fade(v) {\n        if(Array.isArray(v)) {\n            if(v.length === 2) {\n                this._fade = [v[0], v[1], v[0], v[1]];\n            }\n            else if(v.length === 3) {\n                this._fade = [v[0], v[1], v[2], this._fade[3]];\n            }\n            else if (v.length === 4) {\n                this._fade = v;\n            }\n            else {\n                this._fade = [v[0], v[0], v[0], v[0]];\n            }\n        }\n        else {\n            this._fade = [v, v, v, v];\n        }\n        this.redraw();\n    }\n\n    get fade() {\n        return this._fade;\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        const owner = operation.shaderOwner;\n\n        const renderPrecision = this.ctx.stage.getRenderPrecision();\n        const fade = this._fade.map((f) => f * renderPrecision);\n        this._setUniform('fade',  new Float32Array(fade), this.gl.uniform4fv);\n        this._setUniform('resolution', new Float32Array([owner._w * renderPrecision, owner._h * renderPrecision]), this.gl.uniform2fv);\n    }\n}\n\nFadeOutShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    uniform vec2 resolution;\n    uniform vec4 fade;\n    \n    void main() {\n        vec4 color = texture2D(uSampler, vTextureCoord) * vColor;\n        vec2 halfRes = 0.5 * resolution.xy;\n        vec2 point = vTextureCoord.xy * resolution.xy;\n        \n        vec2 pos1;\n        vec2 pos2;\n        vec2 d;\n        float c;\n        float t = 0.0;\n             \n        if(fade[0] > 0.0) {\n            pos1 = vec2(point.x, point.y);\n            pos2 = vec2(point.x, point.y + fade[0]);\n            d = pos2 - pos1;\n            c = dot(pos1, d) / dot(d, d);\n            t = smoothstep(0.0, 1.0, clamp(c, 0.0, 1.0));\n            color = mix(vec4(0.0), color, t);\n        }\n        \n        if(fade[1] > 0.0) {\n            vec2 pos1 = vec2(point.x - resolution.x - fade[1], vTextureCoord.y);\n            vec2 pos2 = vec2(point.x - resolution.x, vTextureCoord.y);\n            d = pos1 - pos2;\n            c = dot(pos2, d) / dot(d, d);\n            t = smoothstep(0.0, 1.0, clamp(c, 0.0, 1.0));\n            color = mix(vec4(0.0), color, t);\n        }\n        \n        if(fade[2] > 0.0) {\n            vec2 pos1 = vec2(vTextureCoord.x, point.y - resolution.y - fade[2]);\n            vec2 pos2 = vec2(vTextureCoord.x, point.y - resolution.y);\n            d = pos1 - pos2;\n            c = dot(pos2, d) / dot(d, d);\n            t = smoothstep(0.0, 1.0, clamp(c, 0.0, 1.0));\n            color = mix(vec4(0.0), color, t);\n        }\n        \n        if(fade[3] > 0.0) {\n            pos1 = vec2(point.x, point.y);\n            pos2 = vec2(point.x + fade[3], point.y);\n            d = pos2 - pos1;\n            c = dot(pos1, d) / dot(d, d);\n            t = smoothstep(0.0, 1.0, clamp(c, 0.0, 1.0));\n            color = mix(vec4(0.0), color, t);\n        }\n        \n        gl_FragColor = color;\n    }\n`;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\n\nexport default class VignetteShader extends DefaultShader {\n    constructor(context) {\n        super(context);\n        this._magnitude = 1.3;\n        this._intensity = 0.7;\n        this._pivot = [0.5, 0.5];\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n\n        this._setUniform(\"magnitude\", this._magnitude , this.gl.uniform1f);\n        this._setUniform(\"intensity\", this._intensity, this.gl.uniform1f);\n        this._setUniform('pivot', new Float32Array(this._pivot), this.gl.uniform2fv);\n        this.redraw()\n    }\n\n    set pivot(v) {\n        if(Array.isArray(v)) {\n            this._pivot = v;\n        }\n        else {\n            this._pivot = [v, v];\n        }\n        this.redraw();\n    }\n\n    get pivotX() {\n        return this._pivot[0];\n    }\n\n    set pivotX(v) {\n        this._pivot[0] = v;\n        this.redraw();\n    }\n\n    get pivotY() {\n        return this._pivot[1];\n    }\n\n    set pivotY(v) {\n        this._pivot[1] = v;\n        this.redraw();\n    }\n\n    get intensity() {\n        return this._intensity;\n    }\n\n    set intensity(v) {\n        this._intensity = v;\n        this.redraw();\n    }\n\n    get magnitude() {\n        return this._magnitude;\n\n    }\n\n    set magnitude(v) {\n        this._magnitude = v;\n        this.redraw();\n    }\n}\n\nVignetteShader.vertexShaderSource = DefaultShader.vertexShaderSource;\n\nVignetteShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n\n    uniform float magnitude;\n    uniform float intensity;\n    uniform vec2 pivot;\n\n    void main() {\n        vec2 uv = vTextureCoord.xy - pivot + vec2(0.5);\n        uv.x = clamp(uv.x, 0.0, 1.0);\n        uv.y = clamp(uv.y, 0.0, 1.0);\n   \n        uv *=  1.00 - uv.yx;\n        float vig = uv.x * uv.y * 25.0 * intensity;\n        vig = pow(vig, 0.45 * magnitude);\n        vec4 fragColor = vec4(vig) * vColor;\n        gl_FragColor = texture2D(uSampler, vTextureCoord) * fragColor;\n\n    }\n`\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\nimport StageUtils from '../../../tree/StageUtils.mjs'\n\nexport default class SpinnerShader extends DefaultShader {\n\n    constructor(ctx) {\n        super(ctx);\n        this._radius = 100;\n        this._width = 50;\n        this._period = 1;\n        this._angle = 0.5;\n        this._smooth = 0.005;\n        this._color = 0xffffffff;\n        this._backgroundColor = 0xff000000;\n        this._time = Date.now();\n    }\n\n    set radius(v) {\n        this._radius = v;\n        this.redraw();\n    }\n\n    set width(v) {\n        this._width = v;\n        this.redraw();\n    }\n\n    set period(v) {\n        this._period = v;\n        this.redraw();\n    }\n\n    set angle(v) {\n        this._angle = v\n        this.redraw();\n    }\n\n    set smooth(v) {\n        this._smooth = v;\n        this.redraw();\n    }\n\n    set color(v) {\n        this._color = v;\n        this.redraw();\n    }\n\n    set backgroundColor(v) {\n        this._backgroundColor = v;\n        this.redraw();\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        const owner = operation.shaderOwner\n\n        this._setUniform(\"iTime\", Date.now() - this._time, this.gl.uniform1f);\n\n        const renderPrecision = this.ctx.stage.getRenderPrecision();\n        this._setUniform('radius', this._radius * renderPrecision, this.gl.uniform1f);\n        this._setUniform('width', this._width * renderPrecision, this.gl.uniform1f);\n        this._setUniform('period', this._period, this.gl.uniform1f);\n        this._setUniform('angle', this._angle, this.gl.uniform1f);\n        this._setUniform('smooth', this._smooth, this.gl.uniform1f);\n        this._setUniform('color', new Float32Array(StageUtils.getRgbaComponentsNormalized(this._color)), this.gl.uniform4fv);\n        this._setUniform('backgroundColor', new Float32Array(StageUtils.getRgbaComponentsNormalized(this._backgroundColor)), this.gl.uniform4fv);\n        this._setUniform('resolution', new Float32Array([owner._w * renderPrecision, owner._h * renderPrecision]), this.gl.uniform2fv)\n\n        this.redraw()\n    }\n}\n\nSpinnerShader.vertexShaderSource = DefaultShader.vertexShaderSource;\n\nSpinnerShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n\n    uniform float iTime;\n    uniform float radius;\n    uniform float width;\n    uniform float period;\n    uniform float angle;\n    uniform float smooth;\n    uniform vec2 resolution;\n\n    uniform vec4 color;\n    uniform vec4 backgroundColor;\n\n    float ratio = resolution.y / resolution.x;\n\n    vec2 transpose_pos(vec2 pos) {\n        if (ratio < 1.) {\n            float diff = 0.5 - pos.x;\n            pos.x = 0.5 - diff / ratio;\n        } else {\n            float diff = 0.5 - pos.y;\n            pos.y = 0.5 - diff * ratio;\n        }\n        return pos;\n    }\n\n    float get_angle(vec2 pos) {\n        pos = transpose_pos(pos);\n        float a = atan(pos.y - 0.5, pos.x - 0.5);\n        a = (1.0+a/3.14159)/2.0;\n        \n        return a;\n    }\n\n    float dist(vec2 pos1, vec2 pos2) {\n        pos1 = transpose_pos(pos1);\n        return distance(pos1, pos2);\n    }\n\n    void main()\n    {\n        vec2 fragCoord = vTextureCoord;\n        vec4 fragColor = vColor;\n        \n        vec2 st = vTextureCoord;\n        float pct = dist(st, vec2(0.5));\n\n        float a = get_angle(st);\n        float t = iTime / 1000.0 / period;\n\n        float inner = max((radius - width) / resolution.x, (radius - width) / resolution.y);\n        float outer = max(radius / resolution.x, radius / resolution.y);\n\n        float x1 = mod(t, 1.0);\n        float x2 = mod(t + angle, 1.0);\n\n        if (x1 < x2) {\n            if (a > x1 && a < x2) {\n                float val = (1.0 - (x2 - a) / angle) * smoothstep(0.0, 3. * smooth, (x2 - a));\n                fragColor = mix(backgroundColor, color, val);\n            } else {\n                fragColor = backgroundColor;\n            }\n        } else {\n            if (a < x2) {\n                float val = (1.0 - (x2 - a) / angle) * smoothstep(0.0, 3. * smooth, (x2 - a));\n                fragColor = mix(backgroundColor, color, val);\n            } else if (a > x1) {\n                float val = (1.0 - (1.0 + x2 - a) / angle) * smoothstep(0.0, 3. * smooth, (1.0 + x2 - a));\n                fragColor = mix(backgroundColor, color, val);\n            } else {\n                fragColor = backgroundColor;\n            }\n        }\n\n        float s = smoothstep(inner, inner + smooth + 0.00001, pct) * (1.0 - smoothstep(outer, outer + smooth + 0.00001, pct));\n        gl_FragColor = texture2D(uSampler, fragCoord) * vColor * (1. - s * fragColor.a) + fragColor * s;\n    }\n`;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\n\nexport default class HoleShader extends DefaultShader {\n\n    constructor(context) {\n        super(context);\n        this._x = 0;\n        this._y = 0;\n        this._w = 0;\n        this._h = 0;\n        this._radius = 0;\n    }\n\n    get x() {\n        return this._x;\n    }\n\n    set x(v) {\n        this._x = v;\n        this.redraw();\n    }\n\n    get y() {\n        return this._y;\n    }\n\n    set y(v) {\n        this._y = v;\n        this.redraw();\n    }\n\n    get w() {\n        return this._w;\n    }\n\n    set w(v) {\n        this._w = v;\n        this.redraw();\n    }\n\n    get h() {\n        return this._h;\n    }\n\n    set h(v) {\n        this._h = v;\n        this.redraw();\n    }\n\n    get radius() {\n        return this._radius;\n    }\n\n    set radius(v) {\n        this._radius = v;\n        this.redraw();\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n\n        const owner = operation.shaderOwner;\n        const renderPrecision = this.ctx.stage.getRenderPrecision()\n\n        this._setUniform(\"x\", this._x * renderPrecision, this.gl.uniform1f);\n        this._setUniform(\"y\", this._y * renderPrecision, this.gl.uniform1f);\n        this._setUniform(\"w\", this._w * renderPrecision, this.gl.uniform1f);\n        this._setUniform(\"h\", this._h * renderPrecision, this.gl.uniform1f);\n        this._setUniform('radius',  (this._radius + .5) * renderPrecision, this.gl.uniform1f);\n        this._setUniform('resolution', new Float32Array([owner._w * renderPrecision, owner._h * renderPrecision]), this.gl.uniform2fv);\n    }\n\n    useDefault() {\n        return (this._x === 0 && this._y === 0 && this._w === 0 && this._h === 0)\n    }\n}\n\nHoleShader.vertexShaderSource = DefaultShader.vertexShaderSource;\n\nHoleShader.fragmentShaderSource = `\n   #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    uniform float x;\n    uniform float y;\n    uniform float w;\n    uniform float h;\n    uniform vec2 resolution;\n    uniform float radius;\n\n    float roundBox(vec2 p, vec2 b, float r) {\n        float d = length(max(abs(p)-b+r, 0.1))-r;\n        return smoothstep(1.0, 0.0, d);\n    }\n\n    void main(void){\n        vec4 color = texture2D(uSampler, vTextureCoord);\n        vec2 pos = vTextureCoord.xy * resolution - vec2(x, y) - vec2(w, h) / 2.0;\n        vec2 size = vec2(w, h) / 2.0;\n        float b = roundBox(pos, size, radius);\n        gl_FragColor = mix(color, vec4(0.0), b) * vColor;\n    }\n`;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\nimport StageUtils from \"../../../tree/StageUtils.mjs\";\n\nexport default class RadialGradientShader extends DefaultShader {\n    constructor(context) {\n        super(context);\n        this._pivot = [0, 0];\n        this._ic = 0xffffffff;\n        this._normalizedIC = this._getNormalizedColor(this._ic);\n        this._oc = 0x00ffffff;\n        this._normalizedOC = this._getNormalizedColor(this._oc);\n        this._radius = 0;\n    }\n\n    set radiusX(v) {\n        this.radius = v;\n    }\n\n    get radiusX() {\n        return this._radius;\n    }\n\n    set radiusY(v) {\n        this._radiusY = v;\n        this.redraw();\n    }\n\n    get radiusY() {\n        return this._radiusY;\n    }\n\n    set radius(v) {\n        this._radius = v;\n        this.redraw();\n    }\n\n    set innerColor(argb) {\n        this._ic = argb;\n        this._normalizedIC = this._getNormalizedColor(argb);\n        this.redraw();\n    }\n\n    get innerColor() {\n        return this._ic;\n    }\n\n    set outerColor(argb) {\n        this._oc = argb;\n        this._normalizedOC = this._getNormalizedColor(argb);\n        this.redraw();\n    }\n\n    set color(argb) {\n        this.innerColor = argb;\n    }\n\n    get color() {\n        return this.innerColor;\n    }\n\n    get outerColor() {\n        return this._ic;\n    }\n\n    set x(f) {\n        this._x = f;\n        this.redraw();\n    }\n\n    set y(f) {\n        this._y = f;\n        this.redraw();\n    }\n\n    set pivot(v) {\n        if(Array.isArray(v) && v.length === 2) {\n            this._pivot = v;\n        }\n        else if(Array.isArray(v)) {\n            this._pivot = [v[0], v[1] || v[0]];\n        }\n        else {\n            this._pivot = [v, v];\n        }\n        this.redraw();\n    }\n\n    get pivot() {\n        return this._pivot[0];\n    }\n\n    set pivotY(f) {\n        this._pivot[1] = f;\n        this.redraw();\n    }\n\n    get pivotY() {\n        return this._pivot[1];\n    }\n\n    set pivotX(f) {\n        this._pivot[0] = f;\n        this.redraw();\n    }\n\n    get pivotX() {\n        return this._pivot[0];\n    }\n\n    _getNormalizedColor(color) {\n        const col = StageUtils.getRgbaComponentsNormalized(color);\n        col[0] *= col[3];\n        col[1] *= col[3];\n        col[2] *= col[3];\n        return new Float32Array(col);\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        const owner = operation.shaderOwner;\n\n        if(this._x) {\n            this._pivot[0] = this._x / owner.w;\n        }\n        if(this._y) {\n            this._pivot[1] = this._y / owner.h;\n        }\n\n        if(this._radius === 0) {\n            this._radius = owner.w * 0.5;\n        }\n\n        this._setUniform('innerColor', this._normalizedIC, this.gl.uniform4fv);\n        this._setUniform('fill', StageUtils.getRgbaComponentsNormalized(this._oc)[3], this.gl.uniform1f);\n        this._setUniform('outerColor', this._normalizedOC, this.gl.uniform4fv);\n        this._setUniform('pivot', new Float32Array(this._pivot),  this.gl.uniform2fv);\n        this._setUniform('resolution', new Float32Array([owner._w, owner._h]),  this.gl.uniform2fv);\n        this._setUniform('alpha', operation.getElementCore(0).renderContext.alpha, this.gl.uniform1f);\n        this._setUniform('radius',  this._radius, this.gl.uniform1f);\n        this._setUniform('radiusY',  (this._radiusY || this._radius), this.gl.uniform1f);\n    }\n}\n\nRadialGradientShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    \n    #define PI 3.14159265359\n    \n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n    uniform vec2 resolution;\n    uniform vec2 pivot;\n    uniform vec4 innerColor;\n    uniform vec4 outerColor;\n    uniform float radius;\n    uniform float radiusY;\n    uniform float alpha;\n    uniform float fill;\n    uniform float aspectRatio;\n    \n    void main() {\n        vec2 point = vTextureCoord.xy * resolution;\n        vec2 projection = vec2(pivot.x * resolution.x, pivot.y * resolution.y);\n        float d = length((point - projection) / vec2(radius * 2.0, radiusY * 2.0));\n        vec4 color = mix(texture2D(uSampler, vTextureCoord) * vColor, outerColor * alpha, fill);\n        gl_FragColor = mix(innerColor * alpha, color, smoothstep(0.0, 1.0, d));\n    }\n`;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\n\nexport default class Light3dShader extends DefaultShader {\n\n    constructor(ctx) {\n        super(ctx);\n\n        this._strength = 0.5;\n        this._ambient = 0.5;\n        this._fudge = 0.4;\n\n        this._rx = 0;\n        this._ry = 0;\n\n        this._z = 0;\n        this._pivotX = NaN;\n        this._pivotY = NaN;\n        this._pivotZ = 0;\n\n        this._lightY = 0;\n        this._lightZ = 0;\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n\n        let vr = operation.shaderOwner;\n        let element = vr.element;\n\n        let pivotX = isNaN(this._pivotX) ? element.pivotX * vr.w : this._pivotX;\n        let pivotY = isNaN(this._pivotY) ? element.pivotY * vr.h : this._pivotY;\n        let coords = vr.getRenderTextureCoords(pivotX, pivotY);\n\n        // Counter normal rotation.\n\n        let rz = -Math.atan2(vr._renderContext.tc, vr._renderContext.ta);\n\n        let gl = this.gl;\n        this._setUniform(\"pivot\", new Float32Array([coords[0], coords[1], this._pivotZ]), gl.uniform3fv);\n        this._setUniform(\"rot\", new Float32Array([this._rx, this._ry, rz]), gl.uniform3fv);\n\n        this._setUniform(\"z\", this._z, gl.uniform1f);\n        this._setUniform(\"lightY\", this.lightY, gl.uniform1f);\n        this._setUniform(\"lightZ\", this.lightZ, gl.uniform1f);\n        this._setUniform(\"strength\", this._strength, gl.uniform1f);\n        this._setUniform(\"ambient\", this._ambient, gl.uniform1f);\n        this._setUniform(\"fudge\", this._fudge, gl.uniform1f);\n    }\n\n    set strength(v) {\n        this._strength = v;\n        this.redraw();\n    }\n\n    get strength() {\n        return this._strength;\n    }\n\n    set ambient(v) {\n        this._ambient = v;\n        this.redraw();\n    }\n\n    get ambient() {\n        return this._ambient;\n    }\n\n    set fudge(v) {\n        this._fudge = v;\n        this.redraw();\n    }\n\n    get fudge() {\n        return this._fudge;\n    }\n\n    get rx() {\n        return this._rx;\n    }\n\n    set rx(v) {\n        this._rx = v;\n        this.redraw();\n    }\n\n    get ry() {\n        return this._ry;\n    }\n\n    set ry(v) {\n        this._ry = v;\n        this.redraw();\n    }\n\n    get z() {\n        return this._z;\n    }\n\n    set z(v) {\n        this._z = v;\n        this.redraw();\n    }\n\n    get pivotX() {\n        return this._pivotX;\n    }\n\n    set pivotX(v) {\n        this._pivotX = v + 1;\n        this.redraw();\n    }\n\n    get pivotY() {\n        return this._pivotY;\n    }\n\n    set pivotY(v) {\n        this._pivotY = v + 1;\n        this.redraw();\n    }\n\n    get lightY() {\n        return this._lightY;\n    }\n\n    set lightY(v) {\n        this._lightY = v;\n        this.redraw();\n    }\n\n    get pivotZ() {\n        return this._pivotZ;\n    }\n\n    set pivotZ(v) {\n        this._pivotZ = v;\n        this.redraw();\n    }\n\n    get lightZ() {\n        return this._lightZ;\n    }\n\n    set lightZ(v) {\n        this._lightZ = v;\n        this.redraw();\n    }\n\n    useDefault() {\n        return (this._rx === 0 && this._ry === 0 && this._z === 0 && this._strength === 0 && this._ambient === 1);\n    }\n\n}\n\nLight3dShader.vertexShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    attribute vec2 aVertexPosition;\n    attribute vec2 aTextureCoord;\n    attribute vec4 aColor;\n    uniform vec2 projection;\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n\n    uniform float fudge;\n    uniform float strength;\n    uniform float ambient;\n    uniform float z;\n    uniform float lightY;\n    uniform float lightZ;\n    uniform vec3 pivot;\n    uniform vec3 rot;\n    varying vec3 pos;\n\n    void main(void) {\n        pos = vec3(aVertexPosition.xy, z);\n        \n        pos -= pivot;\n        \n        // Undo XY rotation\n        mat2 iRotXy = mat2( cos(rot.z), sin(rot.z), \n                           -sin(rot.z), cos(rot.z));\n        pos.xy = iRotXy * pos.xy;\n        \n        // Perform 3d rotations\n        gl_Position.x = cos(rot.x) * pos.x - sin(rot.x) * pos.z;\n        gl_Position.y = pos.y;\n        gl_Position.z = sin(rot.x) * pos.x + cos(rot.x) * pos.z;\n        \n        pos.x = gl_Position.x;\n        pos.y = cos(rot.y) * gl_Position.y - sin(rot.y) * gl_Position.z;\n        pos.z = sin(rot.y) * gl_Position.y + cos(rot.y) * gl_Position.z;\n        \n        // Redo XY rotation\n        iRotXy[0][1] = -iRotXy[0][1];\n        iRotXy[1][0] = -iRotXy[1][0];\n        pos.xy = iRotXy * pos.xy; \n\n        // Undo translate to pivot position\n        pos.xyz += pivot;\n\n        pos = vec3(pos.x * projection.x - 1.0, pos.y * -abs(projection.y) + 1.0, pos.z * projection.x);\n        \n        // Set depth perspective\n        float perspective = 1.0 + fudge * pos.z;\n\n        pos.z += lightZ * projection.x;\n\n        // Map coords to gl coordinate space.\n        // Set z to 0 because we don't want to perform z-clipping\n        gl_Position = vec4(pos.xy, 0.0, perspective);\n\n        // Correct light source position.\n        pos.y += lightY * abs(projection.y);\n\n        vTextureCoord = aTextureCoord;\n        vColor = aColor;\n        \n        gl_Position.y = -sign(projection.y) * gl_Position.y;\n    }\n`;\n\nLight3dShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    varying vec3 pos;\n    uniform sampler2D uSampler;\n    uniform float ambient;\n    uniform float strength;\n    void main(void){\n        vec4 rgba = texture2D(uSampler, vTextureCoord);\n        float d = length(pos);\n        float n = 1.0 / max(0.1, d);\n        rgba.rgb = rgba.rgb * (strength * n + ambient);\n        gl_FragColor = rgba * vColor;\n    }\n`;\n\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\n\nexport default class PerspectiveShader extends DefaultShader {\n\n    constructor(ctx) {\n        super(ctx);\n\n        this._fudge = 0.2;\n        this._rx = 0;\n        this._ry = 0;\n        this._z = 1.0;\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n\n        const vr = operation.shaderOwner;\n        const element = vr.element;\n\n        const pivotX = element.pivotX * vr.w;\n        const pivotY = element.pivotY * vr.h;\n        const coords = vr.getRenderTextureCoords(pivotX, pivotY);\n\n        // Counter normal rotation.\n        const rz = -Math.atan2(vr._renderContext.tc, vr._renderContext.ta);\n\n        const gl = this.gl;\n        this._setUniform(\"pivot\", new Float32Array([coords[0], coords[1], 0]), gl.uniform3fv);\n        this._setUniform(\"rot\", new Float32Array([this._rx, this._ry, rz]), gl.uniform3fv);\n        this._setUniform(\"z\", this._z, gl.uniform1f);\n        this._setUniform(\"fudge\", this._fudge, gl.uniform1f);\n    }\n\n    set fudge(v) {\n        this._fudge = v;\n        this.redraw();\n    }\n\n    get fudge() {\n        return this._fudge;\n    }\n\n    get rx() {\n        return this._rx;\n    }\n\n    set rx(v) {\n        this._rx = v;\n        this.redraw();\n    }\n\n    get ry() {\n        return this._ry;\n    }\n\n    set ry(v) {\n        this._ry = v;\n        this.redraw();\n    }\n\n    get z() {\n        return this._z;\n    }\n\n    set z(v) {\n        this._z = v;\n        this.redraw();\n    }\n\n    useDefault() {\n        return (this._rx === 0 && this._ry === 0 && this._z === 0);\n    }\n\n}\n\nPerspectiveShader.vertexShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    attribute vec2 aVertexPosition;\n    attribute vec2 aTextureCoord;\n    attribute vec4 aColor;\n    uniform vec2 projection;\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n\n    uniform float z;\n    uniform vec3 pivot;\n    uniform vec3 rot;\n    varying vec3 pos;\n\n    void main(void) {\n        pos = vec3(aVertexPosition.xy, z);\n        \n        pos -= pivot;\n        \n        // Undo XY rotation\n        mat2 iRotXy = mat2( cos(rot.z), sin(rot.z), \n                           -sin(rot.z), cos(rot.z));\n        pos.xy = iRotXy * pos.xy;\n        \n        // Perform 3d rotations\n        gl_Position.x = cos(rot.x) * pos.x - sin(rot.x) * pos.z;\n        gl_Position.y = pos.y;\n        gl_Position.z = sin(rot.x) * pos.x + cos(rot.x) * pos.z;\n        \n        pos.x = gl_Position.x;\n        pos.y = cos(rot.y) * gl_Position.y - sin(rot.y) * gl_Position.z;\n        pos.z = sin(rot.y) * gl_Position.y + cos(rot.y) * gl_Position.z;\n        \n        // Redo XY rotation\n        iRotXy[0][1] = -iRotXy[0][1];\n        iRotXy[1][0] = -iRotXy[1][0];\n        pos.xy = iRotXy * pos.xy; \n\n        // Undo translate to pivot position\n        pos.xyz += pivot;\n\n        pos = vec3(pos.x * projection.x - 1.0, pos.y * -abs(projection.y) + 1.0, pos.z * projection.x);\n        \n        // Map coords to gl coordinate space.\n        // Set z to 0 because we don't want to perform z-clipping\n        gl_Position = vec4(pos.xy, 0.0, z);\n\n        vTextureCoord = aTextureCoord;\n        vColor = aColor;\n        \n        gl_Position.y = -sign(projection.y) * gl_Position.y;\n    }\n`;\n\nPerspectiveShader.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    uniform sampler2D uSampler;\n\n    uniform vec3 rot;\n    uniform float fudge;\n\n    void main(void) {\n        vec2 coords = vTextureCoord;\n\n        coords.xy -= vec2(0.5);\n        coords.y = coords.y + (sign(rot[0]) * 0.5 - coords.x) * sin(rot[0]) * fudge * coords.y;\n        coords.x = coords.x + (sign(rot[1]) * 0.5 - coords.y) * sin(rot[1]) * fudge * coords.x;\n        coords.xy += vec2(0.5);\n\n        if (coords.x < 0.0 || coords.x > 1.0 || coords.y < 0.0 || coords.y > 1.0) {\n            gl_FragColor = vec4(0.0);\n        } else {\n            gl_FragColor = texture2D(uSampler, coords) * vColor;\n        }\n    }\n`;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\n\nexport default class MagnifierShader extends DefaultShader {\n\tconstructor(context) {\n\t  super(context);\n\t  this._x = 0;\n\t  this._y = 0;\n\t  this._w = 0;\n\t  this._h = 0;\n\t  this._radius = 0;\n\t  this._magnification = 0.6;\n\t}\n  \n\tget x() {\n\t  return this._x;\n\t}\n  \n\tset x(v) {\n\t  this._x = v;\n\t  this.redraw();\n\t}\n  \n\tget y() {\n\t  return this._y;\n\t}\n  \n\tset y(v) {\n\t  this._y = v;\n\t  this.redraw();\n\t}\n  \n\tget w() {\n\t  return this._w;\n\t}\n  \n\tset w(v) {\n\t  this._w = v;\n\t  this.redraw();\n\t}\n  \n\tget h() {\n\t  return this._h;\n\t}\n  \n\tset h(v) {\n\t  this._h = v;\n\t  this.redraw();\n\t}\n  \n\tget magnification() {\n\t  return this._magnification;\n\t}\n  \n\tset magnification(v) {\n\t  this._magnification = v;\n\t  this.redraw();\n\t}\n  \n\tget radius() {\n\t  return this._radius;\n\t}\n  \n\tset radius(v) {\n\t  this._radius = v;\n\t  this.redraw();\n\t}\n  \n\tsetupUniforms(operation) {\n\t  super.setupUniforms(operation);\n  \n\t  const owner = operation.shaderOwner;\n\t  const renderPrecision = this.ctx.stage.getRenderPrecision();\n\t  this._setUniform('x', this._x * renderPrecision, this.gl.uniform1f);\n\t  this._setUniform('y', this._y * renderPrecision, this.gl.uniform1f);\n\t  this._setUniform('w', this._w * renderPrecision, this.gl.uniform1f);\n\t  this._setUniform('h', this._h * renderPrecision, this.gl.uniform1f);\n\t  this._setUniform('magnification', this._magnification, this.gl.uniform1f);\n\t  this._setUniform(\n\t\t'radius',\n\t\t(this._radius + 0.5) * renderPrecision,\n\t\tthis.gl.uniform1f\n\t  );\n\t  this._setUniform(\n\t\t'resolution',\n\t\tnew Float32Array([\n\t\t  owner._w * renderPrecision,\n\t\t  owner._h * renderPrecision\n\t\t]),\n\t\tthis.gl.uniform2fv\n\t  );\n\t}\n \n\tuseDefault() {\n\t  return this._w === 0 && this._h === 0;\n\t}\n  }\n  \n  MagnifierShader.vertexShaderSource = DefaultShader.vertexShaderSource;\n  \n  MagnifierShader.fragmentShaderSource = `\n\t  #ifdef GL_ES\n\t\t# ifdef GL_FRAGMENT_PRECISION_HIGH\n\t\tprecision highp float;\n\t\t# else\n\t\tprecision lowp float;\n\t\t# endif\n\t  #endif\n\n\t  varying vec2 vTextureCoord;\n\t  varying vec4 vColor;\n\t  uniform sampler2D uSampler;\n\t  uniform float x;\n\t  uniform float y;\n\t  uniform float w;\n\t  uniform float h;\n\t  uniform vec2 resolution;\n\t  uniform float radius;\n\t  uniform float magnification;\n  \n\t  float roundBox(vec2 p, vec2 b, float r) {\n\t\t  float d = length(max(abs(p)-b+r, 0.1))-r;\n\t\t  return smoothstep(1.0, 0.0, d);\n\t  }\n\n\t  float inside(vec2 v) {\n\t\tvec2 s = step(vec2(0.0, 0.0), v) - step(vec2(1.0, 1.0), v);\n\t\treturn s.x * s.y;   \n      }\n  \n\t  void main(void) {\n\t\tvec4 color = texture2D(uSampler, vTextureCoord);\n\t\tvec2 pos = vTextureCoord.xy * resolution - vec2(x, y) - vec2(w, h) / 2.0;\n\t\tvec2 size = vec2(w, h) / 2.0;\n\t\tfloat b = roundBox(pos, size, radius);\n\t\tvec2 pos2 = (vTextureCoord.xy * magnification * resolution + vec2(x, y) * magnification) / resolution;\n\t\tgl_FragColor = mix(color, texture2D(uSampler, pos2) * inside(pos2), b) * vColor;\n\t  }\n  `;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport DefaultShader from \"./DefaultShader.mjs\";\nimport StageUtils from \"../../../tree/StageUtils.mjs\";\n\nexport default class SpinnerShader2 extends DefaultShader {\n    constructor(context) {\n        super(context);\n        this._period = 1;\n        this._stroke = 0;\n        this._showDot = true;\n        this._clockwise = true;\n        this._bc = 0xff000000;\n        this._normalizedBC = this._getNormalizedColor(this._bc);\n        this._c = 0xffffffff;\n        this._normalizedC = this._getNormalizedColor(this._c);\n    }\n\n    set radius(v) {\n        if(v === 0) {\n            v = 1;\n        }\n        this._radius = v;\n    }\n\n    set stroke(value) {\n        this._stroke = Math.abs(value);\n    }\n\n    get stroke() {\n        return this._stroke;\n    }\n\n    set color(argb) {\n        this._c = argb;\n        this._normalizedC = this._getNormalizedColor(argb);\n    }\n\n    get color() {\n        return this._c;\n    }\n\n    set backgroundColor(argb) {\n        this._bc = argb;\n        this._normalizedBC = this._getNormalizedColor(argb);\n    }\n\n    get backgroundColor() {\n        return this._sc;\n    }\n\n    set showDot(bool) {\n        this._showDot = bool;\n    }\n\n    get showDot() {\n        return this._showDot;\n    }\n\n    set clockwise(bool) {\n        this._clockwise = bool;\n    }\n\n    get clockwise() {\n        return this._clockwise;\n    }\n\n    set period(v) {\n        this._period = v;\n    }\n\n    get period() {\n        return this._period;\n    }\n\n    _getNormalizedColor(color) {\n        const col = StageUtils.getRgbaComponentsNormalized(color);\n        col[0] *= col[3];\n        col[1] *= col[3];\n        col[2] *= col[3];\n        return new Float32Array(col);\n    }\n\n    setupUniforms(operation) {\n        super.setupUniforms(operation);\n        const owner = operation.shaderOwner;\n        const radius = this._radius || (owner._w / 2);\n\n        if(this._stroke === 0) {\n            this._stroke = radius * 0.33;\n        }\n\n        this._setUniform('resolution', new Float32Array([owner._w, owner._h]),  this.gl.uniform2fv);\n        this._setUniform('color', this._normalizedC, this.gl.uniform4fv);\n        this._setUniform('backgroundColor', this._normalizedBC, this.gl.uniform4fv);\n        this._setUniform('stroke',  this._stroke, this.gl.uniform1f);\n        this._setUniform('radius',  radius, this.gl.uniform1f);\n        this._setUniform('direction',  this._clockwise ? -1 : 1, this.gl.uniform1f);\n        this._setUniform('showDot', !!this._showDot, this.gl.uniform1f);\n        this._setUniform('time', Date.now() - SpinnerShader2.spinSync, this.gl.uniform1f);\n        this._setUniform('period', this._period, this.gl.uniform1f);\n        this._setUniform('alpha', operation.getElementCore(0).renderContext.alpha, this.gl.uniform1f);\n\n        if(this._sc !== this._bc || this._stroke !== radius * 0.5) {\n            this.redraw();\n        }\n    }\n}\n\nSpinnerShader2.spinSync = Date.now();\n\nSpinnerShader2.fragmentShaderSource = `\n    #ifdef GL_ES\n    # ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n    # else\n    precision lowp float;\n    # endif\n    #endif\n    \n    #define PI 3.14159265359\n    \n    varying vec2 vTextureCoord;\n    varying vec4 vColor;\n    \n    uniform sampler2D uSampler;\n    uniform vec2 resolution;\n    uniform vec4 color;\n    uniform vec4 backgroundColor;\n    uniform float direction;\n    uniform float radius;\n    uniform float time;\n    uniform float stroke;\n    uniform float showDot;\n    uniform float period;\n    uniform float alpha;\n    \n    float circleDist(vec2 p, float radius){\n        return length(p) - radius;\n    }\n    \n    float fillMask(float dist){\n        return clamp(-dist, 0.0, 1.0);\n    }\n    \n    void main() {\n        vec2 halfRes = 0.5 * resolution.xy;\n        vec2 center = vTextureCoord.xy * resolution - halfRes;\n        \n        float c = max(-circleDist(center, radius - stroke), circleDist(center, radius));\n        float rot = -(time / 1000.0 / period) * 6.0 * direction;\n        center *= mat2(cos(rot), sin(rot), -sin(rot), cos(rot));\n        \n        float a = direction * atan(center.x, center.y) * PI * 0.05 + 0.45;\n        \n        float strokeRad = stroke * 0.5;\n        a = mix(a, max(a, fillMask(circleDist(vec2(center.x, center.y + (radius - strokeRad)), strokeRad))), showDot);\n        vec4 base = mix(vec4(0.0), backgroundColor * alpha, fillMask(c));\n        gl_FragColor = mix(base, color * alpha, fillMask(c) * a);\n    }\n`;\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2020 Metrological\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Application from \"./application/Application.mjs\";\nimport Component from \"./application/Component.mjs\";\nimport Base from \"./tree/Base.mjs\";\nimport Utils from \"./tree/Utils.mjs\";\nimport StageUtils from \"./tree/StageUtils.mjs\";\nimport Element from \"./tree/Element.mjs\";\nimport ElementCore from \"./tree/core/ElementCore.mjs\";\nimport ElementTexturizer from \"./tree/core/ElementTexturizer.mjs\";\nimport Texture from \"./tree/Texture.mjs\";\n\nimport Tools from \"./tools/Tools.mjs\";\nimport ObjMerger from \"./tools/ObjMerger.mjs\";\nimport ObjectListProxy from \"./tools/ObjectListProxy.mjs\";\nimport ObjectListWrapper from \"./tools/ObjectListWrapper.mjs\";\n\nimport RectangleTexture from \"./textures/RectangleTexture.mjs\";\nimport NoiseTexture from \"./textures/NoiseTexture.mjs\";\nimport TextTexture from \"./textures/TextTexture.mjs\";\nimport ImageTexture from \"./textures/ImageTexture.mjs\";\nimport HtmlTexture from \"./textures/HtmlTexture.mjs\";\nimport StaticTexture from \"./textures/StaticTexture.mjs\";\nimport StaticCanvasTexture from \"./textures/StaticCanvasTexture.mjs\";\nimport SourceTexture from \"./textures/SourceTexture.mjs\";\n\nimport ListComponent from \"./components/ListComponent.mjs\";\nimport FastBlurComponent from \"./components/FastBlurComponent.mjs\";\nimport BloomComponent from \"./components/BloomComponent.mjs\";\nimport SmoothScaleComponent from \"./components/SmoothScaleComponent.mjs\";\nimport BorderComponent from \"./components/BorderComponent.mjs\";\nimport EventEmitter from \"./EventEmitter.mjs\";\n\nimport WebGLShader from \"./renderer/webgl/WebGLShader.mjs\";\nimport WebGLDefaultShader from \"./renderer/webgl/shaders/DefaultShader.mjs\";\nimport { WebGLGrayscaleShader } from \"./renderer/common/shaders/GrayscaleShader.mjs\";\nimport BoxBlurShader from \"./renderer/webgl/shaders/BoxBlurShader.mjs\";\nimport DitheringShader from \"./renderer/webgl/shaders/DitheringShader.mjs\";\nimport CircularPushShader from \"./renderer/webgl/shaders/CircularPushShader.mjs\";\nimport InversionShader from \"./renderer/webgl/shaders/InversionShader.mjs\";\nimport LinearBlurShader from \"./renderer/webgl/shaders/LinearBlurShader.mjs\";\nimport OutlineShader from \"./renderer/webgl/shaders/OutlineShader.mjs\";\nimport PixelateShader from \"./renderer/webgl/shaders/PixelateShader.mjs\";\nimport RadialFilterShader from \"./renderer/webgl/shaders/RadialFilterShader.mjs\";\nimport RoundedRectangleShader from \"./renderer/webgl/shaders/RoundedRectangleShader.mjs\";\nimport FadeOutShader from \"./renderer/webgl/shaders/FadeOutShader.mjs\";\nimport VignetteShader from \"./renderer/webgl/shaders/VignetteShader.mjs\";\nimport SpinnerShader from \"./renderer/webgl/shaders/SpinnerShader.mjs\";\nimport HoleShader from \"./renderer/webgl/shaders/HoleShader.mjs\";\nimport RadialGradientShader from \"./renderer/webgl/shaders/RadialGradientShader.mjs\";\nimport Light3dShader from \"./renderer/webgl/shaders/Light3dShader.mjs\";\nimport PerspectiveShader from \"./renderer/webgl/shaders/PerspectiveShader.mjs\";\nimport MagnifierShader from \"./renderer/webgl/shaders/MagnifierShader.mjs\";\n\nimport C2dShader from \"./renderer/c2d/C2dShader.mjs\";\nimport C2dDefaultShader from \"./renderer/c2d/shaders/DefaultShader.mjs\";\nimport { C2dGrayscaleShader } from \"./renderer/common/shaders/GrayscaleShader.mjs\";\nimport C2dBlurShader from \"./renderer/c2d/shaders/BlurShader.mjs\";\n\nimport Stage from \"./tree/Stage.mjs\";\nimport SpinnerShader2 from './renderer/webgl/shaders/SpinnerShader2.mjs';\n\nconst lightning = {\n    Application,\n    Component,\n    Base,\n    Utils,\n    StageUtils,\n    Element,\n    Tools,\n    Stage,\n    ElementCore,\n    ElementTexturizer,\n    Texture,\n    EventEmitter,\n    shaders: {\n        Grayscale: WebGLGrayscaleShader,\n        BoxBlur: BoxBlurShader,\n        Dithering: DitheringShader,\n        CircularPush: CircularPushShader,\n        Inversion: InversionShader,\n        LinearBlur: LinearBlurShader,\n        Outline: OutlineShader,\n        Pixelate: PixelateShader,\n        RadialFilter: RadialFilterShader,\n        RoundedRectangle: RoundedRectangleShader,\n        Spinner2: SpinnerShader2,\n        FadeOut: FadeOutShader,\n        Hole: HoleShader,\n        Vignette: VignetteShader,\n        Spinner: SpinnerShader,\n        RadialGradient: RadialGradientShader,\n        Light3d: Light3dShader,\n        Perspective: PerspectiveShader,\n        Magnifier: MagnifierShader,\n        WebGLShader,\n        WebGLDefaultShader,\n        C2dShader,\n        C2dDefaultShader,\n        c2d: {\n            Grayscale: C2dGrayscaleShader,\n            Blur: C2dBlurShader\n        }\n    },\n    textures: {\n        RectangleTexture,\n        NoiseTexture,\n        TextTexture,\n        ImageTexture,\n        HtmlTexture,\n        StaticTexture,\n        StaticCanvasTexture,\n        SourceTexture\n    },\n    components: {\n        FastBlurComponent,\n        BloomComponent,\n        SmoothScaleComponent,\n        BorderComponent,\n        ListComponent\n    },\n    tools: {\n        ObjMerger,\n        ObjectListProxy,\n        ObjectListWrapper\n    }\n};\n\nif (Utils.isWeb) {\n    window.lng = lightning;\n}\n\nexport default lightning;\n"],"names":["StageUtils","v1","v2","p","r","g","b","a","color","toFixed","Math","floor","argb","rgba","max","min","v","c1","c2","r1","g1","b1","a1","r2","g2","b2","a2","round","c","t","n","length","i","alpha","deg","PI","d","xc","xb","xa","yc","yb","ya","time","cbx","cbxd","dx","it","minT","maxT","str","getTimingBezier","s","indexOf","parts","substr","split","console","warn","parseFloat","isNaN","Utils","value","isObjectLiteral","Array","isArray","getDeepClone","obj","keys","Object","clone","obj1","obj2","type","constructor","index","arr","getModuloIndex","len","ceil","isFunction","isObject","equalObjectLiterals","equalArrays","keys1","keys2","k1","k2","equalValues","result","forEach","push","iterator","iteratorResult","next","done","charcode","isWeb","window","sparkscene","isWPE","navigator","userAgent","isSpark","isNode","isPS4","isZiggo","Base","name","settings","error","names","patchObjectProperty","setter","setSetting","defaultSetter","charAt","__local","func","SpacingCalculator","mode","numberOfItems","remainingSpace","itemGaps","spacePerGap","spacingBefore","spacingBetween","getSpacing","Error","ContentAligner","layout","_layout","_totalCrossAxisSize","_lines","_getTotalCrossAxisSize","crossAxisSize","_getSpacing","lines","_flexContainer","alignContent","growSize","currentPos","crossAxisLayoutOffset","aligner","createItemAligner","finalCrossAxisLayoutSize","crossAxisLayoutSize","setCrossAxisLayoutSize","setCrossAxisLayoutOffset","align","recursiveResizeOccured","setItemPositions","total","line","FlexUtils","item","horizontal","target","parent","getParent","flexParent","getAxisLayoutSize","getTotalPadding","w","h","funcW","_allowRelAxisSizeFunction","getParentAxisSizeWithPadding","originalWidth","funcH","originalHeight","_flex","isAxisFitToContents","x","y","pos","size","minSize","getPlainAxisMinSize","flexItemMinSize","isFlexItemEnabled","_flexItem","_getMinSizeSetting","hasLimitedMinSize","isFlexEnabled","getAxisMinSize","isShrinkable","flexItem","shrink","getRelAxisSize","isMainAxis","_horizontal","resizeMainAxis","resizeCrossAxis","setAxisLayoutSize","flex","paddingLeft","paddingTop","paddingRight","paddingBottom","marginLeft","marginTop","marginRight","marginBottom","SizeShrinker","_line","_amountRemaining","_shrunkSize","amount","totalShrinkAmount","_getTotalShrinkAmount","items","amountPerShrink","startIndex","endIndex","shrinkAmount","isShrinkableItem","_getMainAxisMinSize","_getMainAxisLayoutSize","maxShrink","isFullyShrunk","finalSize","_resizeMainAxis","abs","SizeGrower","_grownSize","totalGrowAmount","_getTotalGrowAmount","amountPerGrow","growAmount","grow","isGrowableItem","maxSize","_getMainAxisMaxSizeSetting","maxGrow","isFullyGrown","ItemPositioner","lineLayout","_setMainAxisLayoutPos","_getMainAxisLayoutSizeWithPaddingAndMargin","_availableSpace","justifyContent","ItemAligner","_crossAxisLayoutSize","_crossAxisLayoutOffset","_alignItemsSetting","_recursiveResizeOccured","_isCrossAxisFitToContents","offset","alignItems","_alignItem","alignSelf","_preventStretch","_hasRelCrossAxisSize","_resetCrossAxisLayoutSize","_alignItemFlexStart","_alignItemFlexEnd","_alignItemFlexCenter","_alignItemStretch","_setCrossAxisLayoutPos","itemCrossAxisSize","_getCrossAxisLayoutSizeWithPaddingAndMargin","center","mainAxisLayoutSizeBeforeResize","_getCrossAxisMargin","_getCrossAxisPadding","crossAxisMinSizeSetting","_getCrossAxisMinSizeSetting","crossAxisMaxSizeSetting","_getCrossAxisMaxSizeSetting","crossAxisMaxSizeSettingEnabled","_resizeCrossAxis","mainAxisLayoutSizeAfterResize","recursiveResize","hasFixedCrossAxisSize","_hasFixedCrossAxisSize","forceStretch","LineLayout","availableSpace","_setItemSizes","_calcLayoutInfo","_growItemSizes","_shrinkItemSizes","grower","getGrownSize","shrinker","getShrunkSize","positioner","position","_calcCrossAxisMaxLayoutSize","mainAxisMinSize","_getMainAxisMinSizeWithPaddingAndMargin","noSpecifiedCrossAxisSize","isCrossAxisFitToContents","resizingCrossAxis","shouldFitToContents","isWrapping","_crossAxisMaxLayoutSize","_getCrossAxisMaxLayoutSize","crossAxisMaxSize","LineLayouter","_mainAxisMinSize","_crossAxisMinSize","_mainAxisContentSize","_getCrossAxisMinSize","_setup","wrap","_layoutFlexItem","itemMainAxisSize","isOverflowing","_curMainAxisPos","_mainAxisSize","_layoutLine","_addToMainAxisPos","flexLayout","updateTreeLayout","_resetLayoutSize","mainAxisSize","_maxMainAxisPos","_getAvailableMainAxisLayoutSpace","performLayout","resizingMainAxis","isMainAxisFitToContents","crossAxisMinSize","itemCrossAxisMinSize","_getCrossAxisMinSizeWithPaddingAndMargin","getMainAxisMinSize","ItemCoordinatesUpdater","_isReverse","_reverse","_horizontalPaddingOffset","_getHorizontalPaddingOffset","_verticalPaddingOffset","_getVerticalPaddingOffset","parentFlex","getParentFlexContainer","updater","_finalizeItemAndChildren","_finalizeRoot","_finalizeItems","getAxisLayoutPos","_getHorizontalPadding","_getVerticalPadding","clearRecalcFlag","setLayout","validCache","_validateItemCache","_finalizeItem","_finalizeItemChildren","recalc","dimensionsMatchPreviousResult","performResizeMainAxis","performResizeCrossAxis","_reverseMainAxisLayoutPos","_getHorizontalMarginOffset","_getVerticalMarginOffset","_reversed","_recalc","endPos","_getMainAxisLayoutPos","reversedPos","FlexLayout","flexContainer","_lineLayouter","_resizingMainAxis","_resizingCrossAxis","_cachedMainAxisSizeAfterLayout","_cachedCrossAxisSizeAfterLayout","_shrunk","isSubTree","_updateSubTreeLayout","updateItemCoords","_performUpdateLayoutTree","_performUpdateLayoutTreeFromCache","_setInitialAxisSizes","_layoutAxes","_refreshLayoutCache","sizeMightHaveChanged","enableLocalRecalcFlag","finalize","_layoutMainAxis","_getMainAxisBasis","_getCrossAxisBasis","_layoutCrossAxis","_layoutLines","_fitMainAxisSizeToContents","layoutLines","mainAxisContentSize","init","totalCrossAxisSize","_fitCrossAxisSizeToContents","_hasFixedMainAxisBasis","_hasFixedCrossAxisBasis","isZeroAxisSize","_checkValidCacheMainAxisResize","isFinalMainAxisSize","targetMainAxisSize","canIgnoreCacheMiss","isShrinking","ctr","getPaddingOffset","set","FlexContainer","_item","Layout","_wrap","_alignItems","_justifyContent","_alignContent","_paddingLeft","_paddingTop","_paddingRight","_paddingBottom","changedDimensions","changedContents","f","direction","_changedContents","ALIGN_ITEMS","join","ALIGN_CONTENT","JUSTIFY_CONTENT","_changedDimensions","patchObject","FlexItem","_ctr","_grow","_shrink","SHRINK_AUTO","_alignSelf","undefined","_minWidth","_minHeight","_maxWidth","_maxHeight","_marginLeft","_marginTop","_marginRight","_marginBottom","parseInt","_changed","_getDefaultShrink","_resetHorizontalAxisLayoutSize","_resetVerticalAxisLayoutSize","_getMaxSizeSetting","setAxisLayoutPos","resizeAxis","getTotalMargin","getMarginOffset","_getMainAxisPadding","_getMainAxisMargin","_getCrossAxisLayoutSize","FlexTarget","_target","_enabled","_originalX","_originalY","_originalWidth","_originalHeight","_flexItemDisabled","_items","isChanged","layoutTree","_disableFlex","_enableFlex","patch","_ensureFlexItem","_checkEnabled","_clearFlexItemsCache","_enableChildrenAsFlexItems","_disableChildrenAsFlexItems","children","_children","child","_enableFlexItem","_disableFlexItem","_parent","_resetOffsets","enabled","isEnabled","_enable","_disable","_setupTargetForFlex","enableFlexLayout","_restoreTargetToNonFlex","disableFlexLayout","setDimensions","_x","_y","_w","_h","from","to","isFlexContainer","_changedChildren","_getFlexItems","visible","isFlexItem","originalX","originalY","funcX","funcY","changeWidth","changeHeight","_updateRecalc","changeExternalWidth","changeExternalHeight","newRecalcFlags","getNewRecalcFlags","_updateRecalcBottomUp","triggerLayout","flags","childRecalc","newRecalc","_getRecalcFromChangedChildRecalc","mainAxisRecalcFlag","crossAxisRecalcFlag","crossAxisDimensionsChangedInChild","mainAxisDimensionsChangedInChild","mainAxisIsWrapping","crossAxisIsFitToContents","isWidthDynamic","isHeightDynamic","shrunk","localRecalc","combinedRecalc","TextureSource","manager","loader","id","stage","textures","Set","_activeTextureCount","lookupId","_cancelCb","loadingSince","_nativeTexture","permanent","renderInfo","_isResultTexture","_loadError","_imageRef","_hasAlpha","has","add","delete","becomesUsed","becomesUnused","cb","texture","elements","element","active","isUsed","load","cancel","isLoading","free","forceSync","isResultTexture","Date","getTime","err","options","destroyed","onError","source","isUpdatingFrame","throttle","textureThrottler","genericCancelCb","processLoadedSource","setSource","hasAlpha","width","height","imageRef","flipTextureY","_flipTextureY","_isNativeTexture","hasOwnProperty","uploadTextureSource","onLoad","update","frameCounter","forEachActiveElement","forceRenderUpdate","_updateTextureCoords","newNativeTexture","prevNativeTexture","onTextureSourceLoaded","_setDisplayedTexture","forEachEnabledElement","_updateDimensions","e","onTextureSourceLoadError","isLoaded","freeTextureSource","WebGLTexture","prototype","isTextureSource","ElementTexturizer","elementCore","_element","_core","ctx","lazy","_colorize","_renderTexture","_renderTextureReused","_resultTextureSource","_renderOffscreen","empty","updateRenderToTextureEnabled","setHasRenderUpdates","_setRecalc","textureManager","updateResultTexture","hasEnabledElements","resultTexture","getResultTexture","nativeTexture","replaceNativeTexture","core","_hasRenderUpdates","release","releaseRenderTexture","allocateRenderTexture","ElementCore","_onUpdate","_pRecalc","_worldContext","ElementCoreContext","_hasUpdates","_localAlpha","_onAfterCalcs","_onAfterUpdate","_localPx","_localPy","_localTa","_localTb","_localTc","_localTd","_isComplex","_dimsUnknown","_clipping","_zSort","_outOfBounds","_displayedTextureSource","_zContextUsage","_zIndexedChildren","_renderContext","renderState","_scissor","_shaderOwner","_updateTreeOrder","_colorUl","_colorUr","_colorBl","_colorBr","_optFlags","_funcX","_funcY","_funcW","_funcH","_scaleX","_scaleY","_pivotX","_pivotY","_mountX","_mountY","_rotation","_alpha","_visible","_ulx","_uly","_brx","_bry","_zIndex","_forceZIndexContext","_zParent","_isRoot","_zIndexResort","_shader","_renderToTextureEnabled","_texturizer","_useRenderToTexture","_boundsMargin","_recBoundsMargin","_withinBoundsMargin","_viewport","_clipbox","render","_renderSimple","hasFlexLayout","_disableFuncX","setOriginalXWithoutUpdatingLayout","_updateLocalTranslateDelta","forceLayout","_triggerRecalcTranslate","_disableFuncY","setOriginalYWithoutUpdatingLayout","_updateLocalTransform","scaleX","_updateLocalTranslate","prev","_updateLocalAlpha","_updateEnabledFlag","setVisible","_sr","sin","_cr","cos","_setLocalTransform","_recalcLocalTranslate","pivotXMul","pivotYMul","px","isRTL","py","dy","_addLocalTranslate","_setLocalAlpha","_setHasUpdates","prevIsZContext","isZContext","prevParent","setParent","setZParent","findZContext","disableZContext","enableZContext","enableZSort","newShaderOwner","_setShaderOwnerRecursive","force","forceZSort","splice","removed","added","order","fromIndex","toIndex","isEstimate","ulx","uly","brx","bry","textureSource","root","coordsWidth","coordsHeight","newZParent","decZContextUsage","hadZContextUsage","incZContextUsage","zIndex","prevZContext","results","_getZIndexedDescs","isAncestorOf","_getZIndexedDescsRec","sortZIndexedChildren","slice","prevShader","shader","defaultShader","texturizer","_enableRenderToTexture","_disableRenderToTexture","_setShaderOwnerChildrenRecursive","_renderAdvanced","_stashedTexCoords","_stashedColors","layoutFlexTree","_applyRelativeDimFuncs","pw","calculatedX","parentW","__parent","getOption","ta","td","tb","tc","pr","_hasRenderContext","updateTreeOrder","useRenderToTexture","mustRenderToTexture","bboxW","bboxH","sx","sy","ex","ey","rComplex","nx","ny","isSquare","area","lx","ly","_disableWithinBoundsMargin","withinMargin","renderOffscreen","_enableWithinBoundsMargin","isIdentity","IDENTITY","updateOutOfBounds","changedDims","onDimensionsChanged","setShader","activeShader","setScissor","addQuad","hasRenderUpdates","mustRenderChildren","renderTextureInfo","prevRenderTextureInfo","hasRenderTexture","renderToTextureCount","cleared","ignore","cache","hasResultTexture","isCachingTexturizer","setRenderTextureInfo","finishedRenderTexture","reuseTextureAsRenderTexture","renderTextureReused","getRenderTexture","setTexturizer","_stashTexCoords","colorize","_stashColors","_unstashColors","_unstashTexCoords","ptr","m","j","sort","mergeResult","relX","relY","inBound","inScissor","collectAtCoord","tx","ty","getCornerPoints","sc","_ensureLayout","EventEmitter","_hasEventListeners","listener","_eventFunction","_eventListeners","current","combiner","wrapper","arg1","arg2","arg3","off","__originalFunc","on","listeners","l","map","object","addAsMixin","cls","once","removeListener","emit","listenerCount","removeAllListeners","Shader","coreContext","_initialized","_elements","cleanup","renderer","createShader","isShader","isValidShaderType","Texture","_activeCount","_source","_resizeMode","_precision","mw","mh","clipping","_mustUpdate","hasUpdateSourceTexture","_performUpdateSource","removeUpdateSourceTexture","addTexture","incActiveCount","removeTexture","decActiveCount","_checkForNewerReusableTextureSource","incActiveTextureCount","_applyResizeMode","reusable","_getReusableTextureSource","_replaceTextureSource","decActiveTextureCount","_getIsValid","_updateSource","addUpdateSourceTexture","_getTextureSource","_getLookupId","getTextureSource","_getSourceLoader","getReusableTextureSource","newSource","oldSource","loadError","clipX","clipY","_applyResizeCover","_applyResizeContain","_updatePrecision","_updateClipping","scaleY","scale","desiredSize","choppedOffPixels","_clearResizeMode","self","displayedTexture","onDisplayedTextureClippingChanged","onPrecisionChanged","nonDefaults","precision","isAutosizeTexture","getRenderWidth","getRenderHeight","isTexture","ImageTexture","_src","src","fc","charCodeAt","platform","loadSrcTexture","TextTextureRenderer","canvas","_stage","_canvas","_context","getContext","_settings","font","getFontSetting","fontFace","fontStyle","fontSize","getPrecision","fontWeight","textBaseline","document","fonts","fontSetting","check","text","catch","then","loadPromise","_load","drawText","_draw","offsetY","lineHeight","wordWrapWidth","cutSx","cutEx","cutSy","cutEy","letterSpacing","textIndent","setFontProperties","innerWidth","textOverflow","wordWrap","suffix","maxLinesSuffix","wrapWord","linesInfo","wrapText","maxLines","usedLines","otherLines","measureText","al","remainingText","moreTextLines","maxLineWidth","lineWidths","lineWidth","baselineOffset","_calculateRenderInfo","textAlign","globalAlpha","fillRect","translate","linePositionX","linePositionY","drawLines","verticalAlign","highlight","highlightColor","hlHeight","highlightHeight","highlightOffset","hlPaddingLeft","highlightPaddingLeft","hlPaddingRight","highlightPaddingRight","fillStyle","getRgbaString","drawLine","prevShadowSettings","shadow","shadowColor","shadowOffsetX","shadowOffsetY","shadowBlur","textColor","fillText","textSplit","word","suffixWidth","wordLen","wordWidth","cutoffIndex","truncWordWidth","substring","indent","space","TextTextureRendererAdvanced","baseFont","fontBaselineRatio","wordBreak","wrapWidth","tokenize","parse","measure","reduce","acc","concat","resetFontStyle","lineNo","lineNum","baselineOffsetInPx","vaOffset","firstWord","lastWord","shift","isSpace","pop","lastLineText","filter","spl","alignLine","canvasWidth","canvasHeight","hlColor","hlOffset","defaultColor","currentColor","letters","tokenizeString","tokens","italic","bold","colorStack","colorRegexp","test","matched","exec","o","parsed","applyFontStyle","breakIndex","_getBreakIndex","_objectSpread","totalWidth","initialX","prevWidth","prevX","TextTexture","_text","_fontStyle","_fontBaselineRatio","_fontSize","_fontWeight","_fontFace","_wordWrap","_wordWrapWidth","_wordBreak","_textOverflow","_lineHeight","_textBaseline","_textAlign","_verticalAlign","_offsetY","_maxLines","_maxLinesSuffix","_textColor","_shadow","_shadowColor","_shadowOffsetX","_shadowOffsetY","_shadowBlur","_highlight","_highlightHeight","_highlightColor","_highlightOffset","_highlightPaddingLeft","_highlightPaddingRight","_cutSx","_cutEx","_cutSy","_cutEy","_advancedRenderer","_letterSpacing","_textIndent","toString","advancedRenderer","args","cloneArgs","gl","getDrawingCanvas","draw","texParams","sharpCfg","sharpen","isBoolean","getRenderPrecision","TEXTURE_MAG_FILTER","NEAREST","assign","getTextureOptionsForDrawingCanvas","proto","SourceTexture","_textureSource","Transition","property","_getter","getGetter","_setter","getSetter","_merger","merger","getMerger","_startValue","_targetValue","_p","_delayLeft","targetValue","isAttached","_updateDrawValue","reset","delay","removeActive","stop","addActive","getDrawValue","attached","dt","delayLeft","duration","invokeListeners","timingFunctionImpl","_timingFunctionImpl","startValue","isTransition","ObjectList","_refs","addAt","currentIndex","createItem","setAt","ref","onAdd","existingItem","getByRef","replace","prevItem","getIndex","onMove","onSet","removeAt","onRemove","onSync","isItem","_setByObject","_setByArray","refs","_getRefs","crefs","cref","idx","array","same","_equalsArray","marker","newItems","_setItems","prevItems","get","ElementChildList","prevChildList","childList","removeChildAt","_setParent","_connectParent","addChildAt","gc","syncChildren","setChildAt","moveChild","createElement","isElement","Element","__id","__start","__core","__ref","__attached","__enabled","__active","__texture","__displayedTexture","__tags","__treeTags","__tagRoot","__childList","isUcChar","_throwError","removeTag","clearRef","_addTag","setRef","setAsRoot","_updateAttachedFlag","isRoot","_unsetTagsParent","_setTagsParent","_updateCollision","depth","levels","getDepth","getAncestor","o1","o2","l1","l2","_isEnabled","withinBoundsMargin","newAttached","_isAttached","_onSetup","_onAttach","_onDetach","newEnabled","_onEnabled","_setEnabledFlag","_onDisabled","_unsetEnabledFlag","addElement","_setActiveFlag","_unsetActiveFlag","removeElement","filters","_enableTexture","_onActive","_disableTexture","_hasTexturizer","deactivate","_onInactive","_getRenderWidth","_getRenderHeight","_enableTextureError","prevTexture","prevSource","displayedTextureSource","sourceChanged","setDisplayedTextureSource","unknownSize","_onResize","tx1","ty1","tx2","ty2","iw","ih","rw","rh","ph","tempty","setTextureCoords","tag","parentTreeTags","tags","iteratorToArray","tagSet","_loop","comp","Map","_loop2","setToArray","removes","adds","hasTag","currentTags","addTag","list","mtag","values","_tag","res","_getByTag","level","resn","path","select","selectors","_select","pointIdx","arrowIdx","isRef","_selectChilds","subPath","localTags","getTags","getLocationString","getSettings","getPrettyString","getNonDefaults","childArray","missing","pivotX","pivotY","pivot","mountX","mountY","mount","rotation","colorUl","colorUr","colorBl","colorBr","forceZIndexContext","clipbox","tnd","renderToTexture","renderToTextureLazy","colorizeResultTexture","boundsMargin","offsetX","disableFuncW","disableFuncH","_collision","collision","setTags","_allowChildrenAccess","rectangleTexture","enableTextTexture","isString","onUpdate","onAfterCalcs","onAfterUpdate","create","rtt","paths","firstCharCode","remove","message","animations","createAnimation","_getTransition","_setTransition","transition","setSmooth","_transitions","finish","transitions","defaultTransitionSettings","isTransitionSettings","_removeTransition","createSettings","start","tree","hasChildren","collectChildren","getProperties","colorKeys","JSON","stringify","k","childStr","isEmpty","propertyPath","getter","PROP_GETTERS","Function","PROP_SETTERS","toLowerCase","isColorProperty","mergeColors","mergeNumbers","getAt","properties","props","key","getBoolean","StateMachine","setupStateMachine","event","_hasMethod","_state","__path","statePath","currentStatePath","state","_sm","getStateByPath","currentState","__level","stateAtLevel","_getStateAtLevel","member","setStateId","_setStateCounter","_setStateId","newState","_stateMap","prevState","hasDifferentEnterMethod","$enter","hasDifferentExitMethod","$exit","sharedState","_getSharedState","context","sharedLevel","exitStates","_getStatesUntilLevel","__setState","_callExit","stateChangeOverridden","enterStates","reverse","_callEnter","_changedState","_onStateChange","hasParent","apply","_stateIndex","__index","_routedType","memberNames","cur","memberName","alias","StateMachineType","getStateMemberAlias","targetConstructor","router","setPrototypeOf","_initStateMachine","stateMachineType","states","state1","state2","state1Array","_getAncestorStates","state2Array","_type","_router","_createRouter","_getStateMap","_addStateMemberDelegatorsToRouter","arguments","_isRouter","original","_mixinStateMachineMethods","getOwnPropertyNames","descriptor","getOwnPropertyDescriptor","defineProperty","members","_getAllMemberNames","_addMemberRouter","statePaths","descriptors","aliases","_getDescriptor","descType","_getDescriptorType","_addMethodRouter","_addGetterSetterRouters","isValid","curState","getPrototypeOf","code","supportsSpread","_supportsSpread","functionBody","_getGetterRouter","_getSetterRouter","stateMap","_getStateMemberNames","_getStateMemberNamesForType","_isStateLocalMember","_createStateMap","_addState","parentState","__state","__name","_addStaticStateProperty","parentPath","_states","isInheritedFromParent","subStates","subState","stateName","_getStateName","isClassStateLevel","__supportsSpread","Component","tagRoot","__initialized","__firstActive","__firstEnable","__signals","__passSignals","__construct","getTemplateFunc","_build","__onStateChange","_getState","application","updateFocusPath","propObj","targetObj","targetProp","prop","propDependencies","propName","__func","__obj","__prop","__init","_attach","_detach","_firstEnable","_firstActive","_active","_inactive","_construct","_init","newTarget","prevTarget","_focusPath","cparent","ancestor","getSharedAncestor","isComponent","_signal","signalParent","_getParentSignalHandler","fireEvent","passSignal","_getSignalHandler","_signalProxy","startsWith","_doFireAncestors","fire","__propertyBinding","hasName","parseTemplate","_template","loc","store","rid","parseTemplateRec","cursor","childCursor","propKey","parseTemplatePropRec","shaderCursor","parsePropertyBindings","isNumber","subs","collectSubComponents","getComponent","CoreQuadList","quadTextures","quadElements","dataLength","WebGLCoreQuadList","byteSize","data","ArrayBuffer","floats","Float32Array","uints","Uint32Array","CoreQuadOperation","shaderOwner","scissor","quads","getTexture","getElementCore","getElement","renderWidth","renderHeight","getTextureWidth","getTextureHeight","WebGLCoreQuadOperation","extraAttribsDataByteOffset","getAttribsDataByteOffset","coords","getRenderTextureCoords","renderExec","_projection","projection","CoreRenderExecutor","_bindRenderTexture","_setScissor","_clearRenderTexture","_reset","qops","quadOperations","_processQuadOperation","quadOperation","_setupQuadOperation","_execQuadOperation","op","_renderQuadOperation","renderTexture","WebGLCoreRenderExecutor","_attribsBuffer","createBuffer","maxQuads","byteLength","allIndices","Uint16Array","_quadsBuffer","bindBuffer","ELEMENT_ARRAY_BUFFER","bufferData","STATIC_DRAW","deleteBuffer","blendFunc","ONE","ONE_MINUS_SRC_ALPHA","enable","BLEND","disable","DEPTH_TEST","_stopShaderProgram","_setupBuffers","ARRAY_BUFFER","DYNAMIC_DRAW","_useShaderProgram","addEmpty","beforeDraw","afterDraw","operation","hasSameProgram","_currentShaderProgram","stopProgram","useProgram","setupUniforms","bindFramebuffer","FRAMEBUFFER","viewport","framebuffer","glClearColor","getClearColor","clearColor","clear","COLOR_BUFFER_BIT","SCISSOR_TEST","CoreRenderState","getDefaultShader","createCoreQuadList","_renderTextureInfo","_realShader","_check","_texturizerTemporary","_quadOperation","_temporaryTexturizers","_isCachingTexturizer","owner","useDefault","_cacheTexturizer","_createQuadOperation","_hasChanges","_finishQuadOperation","_isRenderTextureReusable","isRenderTextureReusable","q","createCoreQuadOperation","finishRenderState","WebGLShaderProgram","vertexShaderSource","fragmentShaderSource","_program","_uniformLocations","_attributeLocations","_currentUniformValues","createProgram","glVertShader","_glCompile","VERTEX_SHADER","glFragShader","FRAGMENT_SHADER","attachShader","linkProgram","getProgramParameter","LINK_STATUS","VALIDATE_STATUS","getError","getProgramInfoLog","deleteProgram","deleteShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","location","getUniformLocation","getAttribLocation","glFunction","_valueEquals","clonedValue","_valueClone","isMatrix","uniformMatrix2fv","uniformMatrix3fv","uniformMatrix4fv","call","WebGLShader","shaderPrograms","glProgram","initialize","compile","setUniformValue","beforeUsage","enableAttribs","afterUsage","disableAttribs","other","getExtraAttribBytesPerVertex","getProjection","_getProjection","DefaultShader","vertexAttribPointer","_attrib","FLOAT","enableVertexAttribArray","UNSIGNED_BYTE","disableVertexAttribArray","_setUniform","uniform2fv","glTexture","bindTexture","TEXTURE_2D","drawElements","TRIANGLES","UNSIGNED_SHORT","Renderer","_defaultShader","aggressive","_createDefaultShader","shaderType","_getShaderBaseType","convertedShaderType","_getShaderAlternative","WebGLRenderer","_compressedTextureExtensions","astc","getExtension","etc1","s3tc","pvrtc","shaderProgram","destroy","getWebGL","createTexture","texImage2D","RGBA","texParameteri","LINEAR","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","params","format","internalFormat","createFramebuffer","framebufferTexture2D","COLOR_ATTACHMENT0","deleteFramebuffer","deleteTexture","fmt","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","RGB","UNSIGNED_BYTE_5_6_5","compressed","premultiplyAlpha","flipBlueRed","texOptions","pixelStorei","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_FLIP_BLUE_RED","uploadCompressedGlTexture","uploadGlTexture","cloneObjShallow","bytesPerPixel","_getBytesPerPixel","mca","mergeColorAlpha","cx","cy","extra","setExtraAttribsInBuffer","copyTexSubImage2D","ow","oh","C2dCoreQuadList","renderContexts","modes","C2dCoreQuadOperation","getRenderContext","getSimpleTc","getWhite","C2dCoreRenderExecutor","_mainRenderTexture","getCanvas","_getContext","setTransform","clearRect","getRgbaStringFromArray","globalCompositeOperation","beginPath","rect","closePath","fill","restore","save","_equalScissorAreas","_restoreContext","clip","C2dShader","_rectangleTexture","_tintManager","tintManager","vc","rc","white","stc","info","_setColorGradient","_beforeDrawEl","_afterDrawEl","sourceX","sourceY","sourceW","sourceH","mergeMultiColorsEqual","rgb","tintTexture","getTintTexture","drawImage","transparency","gradient","createLinearGradient","addColorStop","getRgbString","C2dTextureTintManager","_usedMemory","_cachedNativeTextures","delta","addMemoryUsage","_hasCache","_getCache","prevMemUsage","memoryUsage","_addMemoryUsage","frame","lf","u","_tintTexture","before","reuseTexture","after","col","_tintCache","C2dTintCache","releaseBlancoTextures","_tx","_colors","_blancoTextures","_lastCleanupFrame","_memTextures","C2dRenderer","TextureTintManager","setupC2d","c2d","getC2d","buffer","imageData","ImageData","Uint8ClampedArray","putImageData","setRenderContext","setWhite","isWhite","setSimpleTc","hasSimpleTexCoords","SparkShader","elementPostion","paint","SparkRenderer","global","beginDrawing","ret","endDrawing","ImageWorker","_id","_initWorker","_worker","terminate","createWorker","blob","Blob","blobURL","URL","webkitURL","createObjectURL","Worker","postMessage","config","href","protocol","onmessage","ImageWorkerImage","image","_manager","_onError","_onLoad","ImageWorkerServer","_receiveMessage","isPathAbsolute","base","hasHashPath","_relativeBase","ImageWorkerServerItem","onFinish","imageBitmap","hasAlphaChannel","isWPEBrowser","_onFinish","_xhr","_mimeType","_canceled","XMLHttpRequest","open","responseType","onerror","oEvent","onload","response","_createImageBitmap","send","createImageBitmap","colorSpaceConversion","imageOrientation","_hasAlphaChannel","abort","WebPlatform","_looping","_awaitingLoop","_loopHandler","_idleLoopCounter","_idleLoopDelay","_imageWorker","_registerVisibilityChangeHandler","clearInterval","_removeKeyHandler","_removeClickHandler","_removeHoverHandler","_removeScrollWheelHandler","_removeVisibilityChangeHandler","loop","stopLoop","setInterval","updateFrame","idleFrame","startLoop","lp","switchLoop","renderFrame","requestAnimationFrame","view","pvr","DataView","mipmaps","compressedTexImage2D","glInternalFormat","pixelWidth","pixelHeight","HTMLImageElement","HTMLVideoElement","ImageBitmap","HTMLCanvasElement","getImageData","arraybuffer","targetIdentifier","getUint32","littleEndian","glType","glTypeSize","glFormat","glBaseInternalFormat","pixelDepth","numberOfArrayElements","numberOfFaces","numberOfMipmapLevels","bytesOfKeyValueData","kvps","formats","getCompressedTextureExtensions","includes","imageSize","pvrHeaderLength","pvrFormatEtc1","pvrWidth","pvrHeight","pvrMipmapCount","pvrMetadata","arrayBuffer","header","Int32Array","dataOffset","pvrtcData","Uint8Array","byteOffset","cancelCb","isPng","isKtx","isPvr","request","addEventListener","handleKtxLoad","handlePvrLoad","Image","crossOrigin","removeAttribute","opts","antialias","premultipliedAlpha","stencil","preserveDrawingBuffer","performance","now","changes","keyhandler","_keydownListener","_keyupListener","removeEventListener","clickHandler","_clickListener","hoverHandler","_hoverListener","registerScrollWheelHandler","_scrollWheelListener","_visibilityChangeHandler","visibilityState","PlatformLoader","WebGLState","_gl","_buffers","_framebuffers","_renderbuffers","_vertexAttribs","_nonDefaultFlags","_textures","_maxTexture","_activeTexture","TEXTURE0","_pixelStorei","cap","DITHER","def","_getDefaultFlag","change","program","va","equal","changed","activeIndex","_getTextureIndex","targetIndex","_getTextureTargetIndex","pname","param","_getPixelStoreiIndex","_migrateFlags","_useProgram","_migrateFramebuffers","_migrateRenderbuffers","buffersChanged","_migrateBuffers","_migrateAttributes","_migrateSettings","_migratePixelStorei","_migrateTextures","_getDefaultPixelStoreiByIndex","_getPixelStoreiByIndex","activeTexture","sTargets","tTargets","textureNumb","_getTextureByIndex","targetMax","_getTextureTargetByIndex","_bindTexture","_bindBuffer","_bindFramebuffer","fb","renderbuffer","_bindRenderbuffer","attrib","_disableVertexAttribArray","_vertexAttribPointer","_enableVertexAttribArray","defaults","getDefaultSettings","xname","tValue","setting","_defaultSettings","WebGLRenderingContext","FUNC_ADD","ZERO","BACK","LESS","CCW","ALWAYS","KEEP","_textureTargetIndices","_pixelStoreiIndices","_pixelStoreiDefaults","BROWSER_DEFAULT_WEBGL","WebGLStateManager","migrate","setProgram","setBuffer","setFramebuffer","setRenderbuffer","setFlag","normalized","stride","setActiveTexture","setPixelStorei","face","mask","FRONT","_stencilFuncSeparateFront","_stencilFuncSeparateBack","FRONT_AND_BACK","_stencilFuncSeparateFrontAndBack","_stencilFuncSeparate","_stencilMaskSeparateFront","_stencilMaskSeparateBack","_stencilMaskSeparateFrontAndBack","_stencilMaskSeparate","fail","zfail","zpass","_stencilOpSeparateFront","_stencilOpSeparateBack","_stencilOpSeparateFrontAndBack","_stencilOpSeparate","red","green","blue","_blendColor","_blendEquation","modeRGB","modeAlpha","_blendEquationSeparate","sfactor","dfactor","_blendFunc","srcRGB","dstRGB","srcAlpha","dstAlpha","_blendFuncSeparate","_clearColor","_clearDepth","_clearStencil","_colorMask","_cullFace","_depthFunc","flag","_depthMask","zNear","zFar","_depthRange","_frontFace","_lineWidth","factor","units","_polygonOffset","invert","_sampleCoverage","_stencilFunc","_stencilMask","_stencilOp","indx","_vertexAttrib1f","_vertexAttrib1fv","_vertexAttrib2f","_vertexAttrib2fv","z","_vertexAttrib3f","_vertexAttrib3fv","_vertexAttrib4f","_vertexAttrib4fv","__proto__","method","_initStateManager","TextureManager","_uploadedTextureSources","textureSourceHashmap","_nativeFreeTextureSource","_nativeUploadTextureSource","addToLookupMap","_updateVramUsage","sign","usage","Stage","isWebglSupported","addVramUsage","freeUnusedTextureSources","_cleanupLookupMap","remainingTextureSources","ts","allowCleanup","_freeManagedTextureSource","managed","clearNativeTexture","TextureThrottler","_remove","_sources","_data","_processItem","MAX_UPLOAD_TIME_PER_FRAME","CoreContext","createCoreRenderState","createCoreRenderExecutor","_renderTexturePool","_renderTextureId","_zSorts","_freeRenderTexture","_render","_update","_performForcedZSorts","zSort","debugFrame","_fillRenderState","_readPixels","_performRender","log","pixels","readPixels","execute","prec","_createRenderTexture","maxAge","limit","createRenderTexture","freeRenderTexture","copyRenderTexture","TransitionSettings","_timingFunction","getTimingFunction","TransitionManager","progress","isRunning","transitionSettings","MultiSpline","_clear","_pe","_idp","_f","_v","_lv","_s","_ve","_sme","_se","_length","defaultSmoothness","lv","last","pe","idp","sm","pi","ni","nc","getRgbaComponents","pc","ve","sme","se","getSplineRgbaValueFunction","getSplineValueFunction","_add","_getItem","p1","p2","i2","s1","s2","dp","helpers","getSplineHelpers","calculateSpline","cv1","cv2","getArgbNumber","csx","csy","cex","cey","yd","AnimationActionSettings","animationSettings","_selector","_props","_propSetters","_resetValue","_hasResetValue","_hasColorProperty","getValue","getAnimatedElements","sv","getResetValue","hasColorProperty","selector","resetValue","isAnimationActionSettings","AnimationSettings","_actions","repeat","repeatOffset","repeatDelay","autostop","stopMethod","STOP_METHODS","FADE","_stopTimingFunction","_stopTimingFunctionImpl","stopDuration","stopDelay","aas","action","REVERSE","FORWARD","IMMEDIATE","ONETOTWO","Animation","STATES","IDLE","_repeatsLeft","_stopDelayLeft","_stopP","PLAYING","checkActive","PAUSED","STOPPING","FINISHED","play","STOPPED","isActive","_progress","_stopProgress","_getStopDuration","_progressStopTransition","stopTimingFunctionImpl","AnimationManager","RectangleTexture","whitePixel","_setOptions","_lastGcFrame","_usedVramAlpha","_usedVramNonAlpha","platformType","createCanvasContext","createWebGLContext","_mode","ratio","style","_options","_renderer","setClearColor","startTime","currentTime","_updateSourceTextures","opt","app","_updatingFrame","getHrTime","fixedDt","_calculateDt","processSome","nextFrame","getRgbaComponentsNormalized","memoryUsageBefore","gcTextureMemory","gcRenderTextureMemory","usedMemory","freeUnusedRenderTextures","serviceprovider","addServiceProvider","Application","_temp_options","booting","__updateFocusCounter","__keypressTimers","__hoveredChild","updateFocusSettings","__keymap","registerKeydownHandler","_receiveKeydown","registerKeyupHandler","_receiveKeyup","registerClickHandler","_receiveClick","registerHoverHandler","_receiveHover","_recieveScrollWheel","__options","setApplication","__updateFocus","notOverridden","__updateFocusRec","updateFocusId","__updateFocusId","newFocusPath","__getFocusPath","newFocusedComponent","prevFocusedComponent","_focus","focusOverridden","unfocusedElement","_unfocus","_focusChange","focusedComponent","focusSettings","defaultSetFocusSettings","_setFocusSettings","defaultHandleFocusSettings","_handleFocusSettings","__prevFocusSettings","prevSettings","focused","prevFocused","nextFocus","_getFocused","newParts","events","focusPath","_getMostSpecificHandledMember","returnValue","keyCode","hasTimer","longpress","focusTopDownEvent","focusBottomUpEvent","consumer","_startLongpressTimer","clearTimeout","lookup","timeout","setTimeout","clientX","clientY","fireTopDownScrollWheelHandler","fireBottomUpScrollWheelHandler","affected","_findChildren","_captureScroll","_getTargetChild","_handleScroll","fireBottomUpClickHandler","localCoords","_handleClick","fireBottomUpHoverHandler","hoveredBranch","newHoveredBranch","getAncestors","elem","_handleUnhover","diffBranch","_handleHover","lastElement","hoverableChildren","_withinClickableRange","bucket","affectedChildren","cursorX","cursorY","candidates","cw","finalW","ch","finalH","_testCollision","_destroyed","_destroy","timer","StaticCanvasTexture","_factory","_lookupId","factory","Tools","canvasFactory","content","radius","strokeWidth","strokeColor","fillColor","createRoundRect","getCanvasTexture","imageSmoothingEnabled","moveTo","lineTo","arcTo","strokeStyle","stroke","blur","margin","createShadowRect","url","createSvg","img","ObjMerger","__mf","aks","bks","ai","bi","aksl","aIndex","curIndex","akey","bv","av","isMf","merge","ObjectListProxy","ObjectListWrapper","_wrapper","NoiseTexture","noise","random","REPEAT","HtmlTexture","_htmlElement","_scale","innerHTML","htmlElement","firstElementChild","html2canvas","getPreloadArea","appendChild","backgroundColor","removeChild","_preloadArea","attachShadow","opacity","pointerEvents","display","top","overflow","body","StaticTexture","ListComponent","_reloadVisibleElements","_visibleItems","_index","_started","_scrollTransitionSettings","_itemSize","_viewportScrollOffset","_itemScrollOffset","_roll","_rollMin","_rollMax","_progressAnimation","_invertDirection","itemList","ListItems","_scrollTransition","setIndex","immediate","closest","nElements","realIndex","diff","viewportSize","scrollDelta","ps","wasVisible","invisibleItem","getWrapper","checkStarted","ri","LinearBlurShader","_direction","_kernelRadius","redraw","uniform1i","BoxBlurShader","BlurShader","_amount","FastBlurComponent","_paddingX","_paddingY","_updateBlurSize","Wrap","WebGLFastBlurComponent","C2dFastBlurComponent","_textwrap","sel","paddingX","paddingY","kernelRadius","_amountToKernelRadius","Textwrap","C2dBlurShader","Content","_multiSpline","getSpline","_layers","_output","filterShaderSettings","filterShaders","_setLayerTexture","getLayerContents","getLayer","steps","step","fw","fh","otherTextureSource","_buildLayers","Layers","L0","L1","L2","L3","Result","FastBlurOutputShader","_a","_otherTextureSource","uniform1f","TEXTURE1","BloomComponent","BloomBase","BloomBaseShader","SmoothScaleComponent","_smoothScale","_iterations","its","_setIterations","scalers","first","useScalers","ContentWrap","Scale","contentWrap","BorderComponent","_borderTop","_borderRight","_borderBottom","_borderLeft","borderWidth","borderWidthTop","borderWidthRight","borderWidthBottom","borderWidthLeft","colorBorderTop","colorBorderRight","colorBorderBottom","colorBorderLeft","borderTop","borderRight","borderBottom","borderLeft","Borders","Top","Right","Bottom","Left","WebGLGrayscaleShader","C2dGrayscaleShader","WebGLDefaultShader","C2dDefaultShader","DitheringShader","_noiseTexture","_graining","_random","getElementWidth","getElementHeight","getVertexAttribPointerOffset","CircularPushShader","_inputValue","_maxDerivative","_normalizedValue","_offset","_aspectRatio","_offsetX","buckets","_buckets","_values","_getValues","full","_shiftBuckets","_valuesTexture","ALPHA","InversionShader","OutlineShader","_width","_col","_color","uniform4fv","ddw","dw","ddh","dh","PixelateShader","_size","WebGLPixelateShaderImpl","RadialFilterShader","_radius","_cutoff","RoundedRectangleShader","_blend","_stroke","_fc","_fillColor","_getNormalizedColor","_strokeColor","num","_sc","renderPrecision","renderContext","FadeOutShader","_fade","fade","VignetteShader","_magnitude","_intensity","_pivot","SpinnerShader","_period","_angle","_smooth","_backgroundColor","_time","HoleShader","RadialGradientShader","_ic","_normalizedIC","_oc","_normalizedOC","_radiusY","innerColor","Light3dShader","_strength","_ambient","_fudge","_rx","_ry","_z","NaN","_pivotZ","_lightY","_lightZ","vr","rz","atan2","uniform3fv","lightY","lightZ","PerspectiveShader","MagnifierShader","_magnification","SpinnerShader2","_showDot","_clockwise","_bc","_normalizedBC","_c","_normalizedC","bool","spinSync","lightning","shaders","Grayscale","BoxBlur","Dithering","CircularPush","Inversion","LinearBlur","Outline","Pixelate","RadialFilter","RoundedRectangle","Spinner2","FadeOut","Hole","Vignette","Spinner","RadialGradient","Light3d","Perspective","Magnifier","Blur","components","tools","lng"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAmBqBA;;;;;;MAEjB,OAAA,SAAA,aAAoBC,IAAIC,IAAIC,GAAG;AACpBF,eAAAA,KAAKE,IAAID,MAAM,IAAIC;AAAAA,MAC7B;AAAA;;MAED,OAAA,SAAA,IAAWC,GAAGC,GAAGC,GAAG;AAChB,gBAAQF,KAAK,OAAOC,KAAK,KAAKC,IAAK,MAAM;AAAA,MAC5C;AAAA;;MAED,OAAA,SAAA,KAAYF,GAAGC,GAAGC,GAAGC,GAAG;AACpB,gBAAQH,KAAK,OAAOC,KAAK,KAAKC,KAAOC,IAAI,MAAO,KAAK;AAAA,MACxD;AAAA;;MAED,OAAA,SAAA,aAAoBC,OAAO;AACnBJ,YAAAA,KAAMI,QAAQ,QAAS,KAAK;AAC5BH,YAAAA,KAAMG,QAAQ,MAAO,KAAK;AAC9B,YAAIF,IAAIE,QAAQ;AACT,eAAA,SAASJ,IAAI,MAAMC,IAAI,MAAMC,IAAI;AAAA,MAC3C;AAAA;;MAED,OAAA,SAAA,cAAqBE,OAAO;AACpBJ,YAAAA,KAAMI,QAAQ,QAAS,KAAK;AAC5BH,YAAAA,KAAMG,QAAQ,MAAO,KAAK;AAC9B,YAAIF,IAAIE,QAAQ;AACZD,YAAAA,KAAMC,QAAQ,WAAY,KAAK;AAC5B,eAAA,UAAUJ,IAAI,MAAMC,IAAI,MAAMC,IAAI,MAAMC,EAAEE,QAAQ,CAAV,IAAe;AAAA,MACjE;AAAA;;MAED,OAAA,SAAA,uBAA8BD,OAAO;AACjC,YAAIJ,IAAIM,KAAKC,MAAMH,MAAM,CAAD,IAAM,GAAtB;AACR,YAAIH,IAAIK,KAAKC,MAAMH,MAAM,CAAD,IAAM,GAAtB;AACR,YAAIF,IAAII,KAAKC,MAAMH,MAAM,CAAD,IAAM,GAAtB;AACR,YAAID,IAAIG,KAAKC,MAAMH,MAAM,CAAD,IAAM,GAAtB,IAA6B;AAC9B,eAAA,UAAUJ,IAAI,MAAMC,IAAI,MAAMC,IAAI,MAAMC,EAAEE,QAAQ,CAAV,IAAe;AAAA,MACjE;AAAA;;MAED,OAAA,SAAA,4BAAmCG,MAAM;AACjCR,YAAAA,KAAMQ,OAAO,QAAS,KAAK;AAC3BP,YAAAA,KAAMO,OAAO,MAAO,KAAK;AAC7B,YAAIN,IAAIM,OAAO;AACf,YAAIL,IAAMK,OAAO,WAAY;AAC7B,eAAO,CAACR,IAAI,KAAKC,IAAI,KAAKC,IAAI,KAAKC,IAAI,GAAhC;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,2BAAkCK,MAAM;AAChCR,YAAAA,KAAMQ,OAAO,QAAS,KAAK;AAC3BP,YAAAA,KAAMO,OAAO,MAAO,KAAK;AAC7B,YAAIN,IAAIM,OAAO;AACf,eAAO,CAACR,IAAI,KAAKC,IAAI,KAAKC,IAAI,GAAvB;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,kBAAyBM,MAAM;AACvBR,YAAAA,KAAMQ,OAAO,QAAS,KAAK;AAC3BP,YAAAA,KAAMO,OAAO,MAAO,KAAK;AAC7B,YAAIN,IAAIM,OAAO;AACf,YAAIL,IAAMK,OAAO,WAAY;AACtB,eAAA,CAACR,GAAGC,GAAGC,GAAGC,CAAV;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,cAAqBM,MAAM;AACvBA,aAAK,CAAD,IAAMH,KAAKI,IAAI,GAAGJ,KAAKK,IAAI,KAAKF,KAAK,CAAD,CAAlB,CAAZ;AACVA,aAAK,CAAD,IAAMH,KAAKI,IAAI,GAAGJ,KAAKK,IAAI,KAAKF,KAAK,CAAD,CAAlB,CAAZ;AACVA,aAAK,CAAD,IAAMH,KAAKI,IAAI,GAAGJ,KAAKK,IAAI,KAAKF,KAAK,CAAD,CAAlB,CAAZ;AACVA,aAAK,CAAD,IAAMH,KAAKI,IAAI,GAAGJ,KAAKK,IAAI,KAAKF,KAAK,CAAD,CAAlB,CAAZ;AACV,YAAIG,MAAMH,KAAK,CAAD,IAAM,MAAM,QAAQA,KAAK,CAAD,IAAM,MAAM,QAAQA,KAAK,CAAD,IAAM,MAAM,MAAMA,KAAK,CAAD,IAAM;AACtFG,YAAAA,IAAI,GAAG;AACPA,cAAI,aAAaA,IAAI;AAAA,QACxB;AACD,eAAOA;AAAAA,MACV;AAAA;;MAED,OAAA,SAAA,YAAmBC,IAAIC,IAAIf,GAAG;AACtBgB,YAAAA,MAAOF,KAAK,QAAS,KAAK;AAC1BG,YAAAA,MAAOH,KAAK,MAAO,KAAK;AAC5B,YAAII,KAAKJ,KAAK;AACd,YAAIK,KAAOL,KAAK,WAAY;AAExBM,YAAAA,MAAOL,KAAK,QAAS,KAAK;AAC1BM,YAAAA,MAAON,KAAK,MAAO,KAAK;AAC5B,YAAIO,KAAKP,KAAK;AACd,YAAIQ,KAAOR,KAAK,WAAY;AAExBd,YAAAA,IAAIe,KAAKhB,IAAIoB,MAAM,IAAIpB;AACvBE,YAAAA,IAAIe,KAAKjB,IAAIqB,MAAM,IAAIrB;AACvBG,YAAAA,IAAIe,KAAKlB,IAAIsB,MAAM,IAAItB;AACvBI,YAAAA,IAAIe,KAAKnB,IAAIuB,MAAM,IAAIvB;AAE3B,eAAOO,KAAKiB,MAAMpB,CAAX,IAAgB,WAAWG,KAAKiB,MAAMvB,CAAX,IAAgB,QAAQM,KAAKiB,MAAMtB,CAAX,IAAgB,MAAMK,KAAKiB,MAAMrB,CAAX;AAAA,MACnF;AAAA;;aAED,SAAwBsB,iBAAAA,GAAGzB,GAAG;AACtBC,YAAAA,IAAI,GAAGC,IAAI,GAAGC,IAAI,GAAGC,IAAI,GAAGsB,IAAI;AACpC,YAAIC,IAAIF,EAAEG;AACL,iBAAIC,IAAI,GAAGA,IAAIF,GAAGE,KAAK;AACxB,cAAIb,MAAOS,EAAEI,CAAD,IAAM,QAAS,KAAK;AAChC,cAAIZ,MAAOQ,EAAEI,CAAD,IAAM,MAAO,KAAK;AAC9B,cAAIX,KAAKO,EAAEI,CAAD,IAAM;AACZV,cAAAA,KAAOM,EAAEI,CAAD,IAAM,WAAY;AAC9B5B,eAAKe,KAAKhB,EAAE6B,CAAD;AACX3B,eAAKe,KAAKjB,EAAE6B,CAAD;AACX1B,eAAKe,KAAKlB,EAAE6B,CAAD;AACXzB,eAAKe,KAAKnB,EAAE6B,CAAD;AACXH,eAAK1B,EAAE6B,CAAD;AAAA,QACT;AAEDH,YAAI,IAAIA;AACR,eAAOnB,KAAKiB,MAAMpB,IAAIsB,CAAf,IAAoB,WAAWnB,KAAKiB,MAAMvB,IAAIyB,CAAf,IAAoB,QAAQnB,KAAKiB,MAAMtB,IAAIwB,CAAf,IAAoB,MAAMnB,KAAKiB,MAAMrB,IAAIuB,CAAf;AAAA,MAC/F;AAAA;;MAED,OAAA,SAAA,sBAA6BD,GAAG;AACxBxB,YAAAA,IAAI,GAAGC,IAAI,GAAGC,IAAI,GAAGC,IAAI,GAAGsB,IAAI;AACpC,YAAIC,IAAIF,EAAEG;AACL,iBAAIC,IAAI,GAAGA,IAAIF,GAAGE,KAAK;AACxB,cAAIb,MAAOS,EAAEI,CAAD,IAAM,QAAS,KAAK;AAChC,cAAIZ,MAAOQ,EAAEI,CAAD,IAAM,MAAO,KAAK;AAC9B,cAAIX,KAAKO,EAAEI,CAAD,IAAM;AACZV,cAAAA,KAAOM,EAAEI,CAAD,IAAM,WAAY;AAC9B5B,eAAKe;AACLd,eAAKe;AACLd,eAAKe;AACLd,eAAKe;AACLO,eAAK;AAAA,QACR;AAEDA,YAAI,IAAIA;AACR,eAAOnB,KAAKiB,MAAMpB,IAAIsB,CAAf,IAAoB,WAAWnB,KAAKiB,MAAMvB,IAAIyB,CAAf,IAAoB,QAAQnB,KAAKiB,MAAMtB,IAAIwB,CAAf,IAAoB,MAAMnB,KAAKiB,MAAMrB,IAAIuB,CAAf;AAAA,MAC/F;AAAA;;aAED,SAAuBD,gBAAAA,GAAGK,OAAO;AACzB1B,YAAAA,KAAMqB,IAAI,WAAW,KAAKK,QAAS;AACvC,iBAAYL,KAAK,KAAM,OAAQrB,IAAK,MAAO,SACnCqB,IAAI,SAAUrB,IAAK,MAAO,YACzBqB,IAAI,QAAS,MAAMrB,IAAK,MAAO,aACnCA,KAAK;AAAA,MACb;AAAA;;MAED,OAAA,SAAA,IAAW2B,KAAK;AACZ,eAAOA,OAAOxB,KAAKyB,KAAK;AAAA,MAC3B;AAAA;;MAED,OAAA,SAAA,gBAAuB5B,GAAGD,GAAGsB,GAAGQ,GAAG;AAC3BC,YAAAA,KAAK,IAAM9B;AACf,YAAI+B,KAAK,KAAOV,IAAIrB,KAAK8B;AACzB,YAAIE,KAAK,IAAMF,KAAKC;AAChBE,YAAAA,KAAK,IAAMlC;AACf,YAAImC,KAAK,KAAOL,IAAI9B,KAAKkC;AACzB,YAAIE,KAAK,IAAMF,KAAKC;AAEb,eAAA,SAAUE,MAAM;AACfA,cAAAA,QAAQ,GAAK;AACb,mBAAO;AAAA,UACV;AACGA,cAAAA,QAAQ,GAAG;AACX,mBAAO;AAAA,UACV;AAEGd,cAAAA,IAAI,KAAKe,KAAKC,MAAMC;AAEnB,mBAAIC,KAAK,GAAGA,KAAK,IAAIA,MAAM;AAC5BH,kBAAMf,KAAKA,KAAKA,IAAIU,KAAKD,MAAMD;AAC/BS,iBAAKH,OAAOC;AACRE,gBAAAA,KAAK,SAASA,KAAK,MAAM;AACzB,qBAAOjB,KAAKA,KAAKA,IAAIa,KAAKD,MAAMD;AAAAA,YACnC;AAGDK,mBAAOhB,KAAKA,KAAK,IAAIU,MAAM,IAAID,MAAMD;AAErC,gBAAIQ,OAAO,SAASA,OAAO,OAAO;AAE9B;AAAA,YACH;AAEDhB,iBAAKiB,KAAKD;AAAAA,UACb;AAGGG,cAAAA,OAAO;AACPC,cAAAA,OAAO;AACN,mBAAIF,MAAK,GAAGA,MAAK,IAAIA,OAAM;AAC5BlB,gBAAI,OAAOmB,OAAOC;AAElBL,kBAAMf,KAAKA,KAAKA,IAAIU,KAAKD,MAAMD;AAE/BS,iBAAKH,OAAOC;AACRE,gBAAAA,KAAK,SAASA,KAAK,MAAM;AAEzB,qBAAOjB,KAAKA,KAAKA,IAAIa,KAAKD,MAAMD;AAAAA,YACnC;AAEGM,gBAAAA,KAAK,GAAG;AACRG,qBAAOpB;AAAAA,YACV,OAAM;AACHmB,qBAAOnB;AAAAA,YACV;AAAA,UACJ;AAAA,QAEJ;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,kBAAyBqB,KAAK;AAC1B,gBAAQA,KAAR;AAAA,UACI,KAAK;AACM,mBAAA,SAAUP,MAAM;AACnB,qBAAOA;AAAAA,YACV;AAAA,UACL,KAAK;AACM3C,mBAAAA,YAAWmD,gBAAgB,MAAM,KAAK,MAAM,CAA5C;AAAA,UACX,KAAK;AACMnD,mBAAAA,YAAWmD,gBAAgB,MAAM,GAAG,GAAK,CAAzC;AAAA,UACX,KAAK;AACMnD,mBAAAA,YAAWmD,gBAAgB,GAAG,GAAG,MAAM,CAAvC;AAAA,UACX,KAAK;AACMnD,mBAAAA,YAAWmD,gBAAgB,MAAM,GAAG,MAAM,CAA1C;AAAA,UACX,KAAK;AACD,mBAAO,WAAY;AACf,qBAAO;AAAA,YACV;AAAA,UACL,KAAK;AACM,mBAAA,SAAUR,MAAM;AACnB,qBAAOA,SAAS,IAAI,IAAI;AAAA,YAC3B;AAAA,UACL;AACQS,gBAAAA,IAAI;AACJF,gBAAAA,OAAOA,IAAIG,QAAQD,CAAZ,MAAmB,GAAG;AACzBE,kBAAAA,QAAQJ,IAAIK,OAAOH,EAAErB,QAAQmB,IAAInB,SAASqB,EAAErB,SAAS,CAA7C,EAAgDyB,MAAM,GAAtD;AACZ,kBAAIF,MAAMvB,WAAW,GAAG;AACpB0B,wBAAQC,KAAK,0CAA0CR,GAAvD;AAGO,uBAAA,SAAUP,MAAM;AACnB,yBAAOA;AAAAA,gBACV;AAAA,cACJ;AACGpC,kBAAAA,IAAIoD,WAAWL,MAAM,CAAD,CAAN;AACdhD,kBAAAA,IAAIqD,WAAWL,MAAM,CAAD,CAAN;AACd1B,kBAAAA,IAAI+B,WAAWL,MAAM,CAAD,CAAN;AACdlB,kBAAAA,IAAIuB,WAAWL,MAAM,CAAD,CAAN;AAClB,kBAAIM,MAAMrD,CAAD,KAAOqD,MAAMtD,CAAD,KAAOsD,MAAMhC,CAAD,KAAOgC,MAAMxB,CAAD,GAAK;AAC9CqB,wBAAQC,KAAK,0CAA0CR,GAAvD;AAEO,uBAAA,SAAUP,MAAM;AACnB,yBAAOA;AAAAA,gBACV;AAAA,cACJ;AAEM3C,qBAAAA,YAAWmD,gBAAgB5C,GAAGD,GAAGsB,GAAGQ,CAApC;AAAA,YACV,OAAM;AACHqB,sBAAQC,KAAK,0CAA0CR,GAAvD;AAEO,qBAAA,SAAUP,MAAM;AACnB,uBAAOA;AAAAA,cACV;AAAA,YACJ;AAAA,QApDT;AAAA,MAsDH;AAAA;;;MChQgBkB;;;;;;MAEjB,OAAA,SAAA,WAAkBC,OAAO;AACd,eAAA,OAAOA,UAAU;AAAA,MAC3B;AAAA;;MAED,OAAA,SAAA,SAAgBA,OAAO;AACZ,eAAA,OAAOA,UAAU;AAAA,MAC3B;AAAA;;MAED,OAAA,SAAA,UAAiBA,OAAO;AACZ,eAAA,OAAOA,UAAU,YAAaA,QAAQ,MAAO;AAAA,MACxD;AAAA;;MAED,OAAA,SAAA,UAAiBA,OAAO;AACpB,eAAOA,UAAU,QAAQA,UAAU;AAAA,MACtC;AAAA;;MAED,OAAA,SAAA,SAAgBA,OAAO;AACZ,eAAA,OAAOA,UAAU;AAAA,MAC3B;AAAA;;MAED,OAAA,SAAA,MAAa9C,GAAG;AACZ,YAAI6C,OAAME,gBAAgB/C,CAAtB,KAA4BgD,MAAMC,QAAQjD,CAAd,GAAkB;AAC9C,iBAAO6C,OAAMK,aAAalD,CAAnB;AAAA,QACV,OAAM;AAEH,iBAAOA;AAAAA,QACV;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,gBAAuBmD,KAAK;AACxB,YAAIC,OAAOC,OAAOD,KAAKD,GAAZ;AACPG,YAAAA,QAAQ,CAAA;AACZ,iBAAStC,IAAI,GAAGA,IAAIoC,KAAKrC,QAAQC,KAAK;AAClCsC,gBAAMF,KAAKpC,CAAD,CAAL,IAAYmC,IAAIC,KAAKpC,CAAD,CAAL;AAAA,QACvB;AACD,eAAOsC;AAAAA,MACV;AAAA;;aAED,SAAaC,MAAAA,MAAMC,MAAM;AACrB,YAAIJ,OAAOC,OAAOD,KAAKI,IAAZ;AACX,iBAASxC,IAAI,GAAGA,IAAIoC,KAAKrC,QAAQC,KAAK;AAClCuC,eAAKH,KAAKpC,CAAD,CAAL,IAAYwC,KAAKJ,KAAKpC,CAAD,CAAL;AAAA,QACvB;AACD,eAAOuC;AAAAA,MACV;AAAA;;MAED,OAAA,SAAA,SAAgBT,OAAO;AACfW,YAAAA,OAAO,OAAOX;AACX,eAAA,CAAC,CAACA,UAAUW,SAAS,YAAYA,SAAS;AAAA,MACpD;AAAA;;MAED,OAAA,SAAA,cAAqBX,OAAO;AACpBW,YAAAA,OAAO,OAAOX;AAClB,eAAO,CAAC,CAACA,SAAUW,SAAS;AAAA,MAC/B;AAAA;;MAED,OAAA,SAAA,gBAAuBX,OAAM;AAClB,eAAA,OAAOA,UAAU,YAAYA,SAASA,MAAMY,gBAAgBL;AAAAA,MACtE;AAAA;;aAED,SAAqBM,cAAAA,OAAOC,KAAK;AACtBf,eAAAA,OAAMgB,eAAeF,OAAOC,IAAI7C,MAAhC;AAAA,MACV;AAAA;;aAED,SAAsB4C,eAAAA,OAAOG,KAAK;AAC9B,YAAIA,QAAQ;AAAG,iBAAOH;AACfA,eAAAA,QAAQ,GAAG;AACdA,mBAASjE,KAAKqE,KAAK,CAACJ,QAAQG,GAAnB,IAA0BA;AAAAA,QACtC;AACDH,gBAAQA,QAAQG;AAChB,eAAOH;AAAAA,MACV;AAAA;;MAED,OAAA,SAAA,aAAoBR,KAAK;AACjBnC,YAAAA,GAAGJ;AACP,YAAIiC,OAAMmB,WAAWb,GAAjB,GAAuB;AAEvB,iBAAOA;AAAAA,QACV;AACD,YAAIH,MAAMC,QAAQE,GAAd,GAAoB;AACpBvC,cAAI,CAAA;AACJ,cAAIwC,OAAOC,OAAOD,KAAKD,GAAZ;AACX,eAAKnC,IAAI,GAAGA,IAAIoC,KAAKrC,QAAQC,KAAK;AAC9BJ,cAAEwC,KAAKpC,CAAD,CAAL,IAAY6B,OAAMK,aAAaC,IAAIC,KAAKpC,CAAD,CAAL,CAAtB;AAAA,UAChB;AACD,iBAAOJ;AAAAA,QANX,WAOWiC,OAAMoB,SAASd,GAAf,GAAqB;AAC5BvC,cAAI,CAAA;AACJ,cAAIwC,QAAOC,OAAOD,KAAKD,GAAZ;AACX,eAAKnC,IAAI,GAAGA,IAAIoC,MAAKrC,QAAQC,KAAK;AAC9BJ,cAAEwC,MAAKpC,CAAD,CAAL,IAAY6B,OAAMK,aAAaC,IAAIC,MAAKpC,CAAD,CAAL,CAAtB;AAAA,UAChB;AACD,iBAAOJ;AAAAA,QACV,OAAM;AACH,iBAAOuC;AAAAA,QACV;AAAA,MACJ;AAAA;;aAED,SAAmBlE,YAAAA,IAAIC,IAAI;AACvB,YAAK,OAAOD,OAAS,OAAOC;AAAK,iBAAO;AACxC,YAAI2D,OAAME,gBAAgB9D,EAAtB,GAA2B;AAC3B,iBAAO4D,OAAME,gBAAgB7D,EAAtB,KAA6B2D,OAAMqB,oBAAoBjF,IAAIC,EAA9B;AAAA,QADxC,WAEW8D,MAAMC,QAAQhE,EAAd,GAAmB;AAC1B,iBAAO+D,MAAMC,QAAQ/D,EAAd,KAAqB2D,OAAMsB,YAAYlF,IAAIC,EAAtB;AAAA,QAC/B,OAAM;AACID,iBAAAA,OAAOC;AAAAA,QACjB;AAAA,MACJ;AAAA;;aAED,SAA2BqE,oBAAAA,MAAMC,MAAM;AACnC,YAAIY,QAAQf,OAAOD,KAAKG,IAAZ;AACZ,YAAIc,QAAQhB,OAAOD,KAAKI,IAAZ;AACZ,YAAIY,MAAMrD,WAAWsD,MAAMtD,QAAQ;AAC/B,iBAAO;AAAA,QACV;AAED,iBAASC,IAAI,GAAGF,IAAIsD,MAAMrD,QAAQC,IAAIF,GAAGE,KAAK;AAC1C,cAAMsD,KAAKF,MAAMpD,CAAD;AAChB,cAAMuD,KAAKF,MAAMrD,CAAD;AACZsD,cAAAA,OAAOC,IAAI;AACX,mBAAO;AAAA,UACV;AAED,cAAMtF,KAAKsE,KAAKe,EAAD;AACf,cAAMpF,KAAKsE,KAAKe,EAAD;AAEX,cAAA,CAAC1B,OAAM2B,YAAYvF,IAAIC,EAAtB,GAA2B;AAC5B,mBAAO;AAAA,UACV;AAAA,QACJ;AAED,eAAO;AAAA,MACV;AAAA;;aAED,SAAmBD,YAAAA,IAAIC,IAAI;AACvB,YAAID,GAAG8B,WAAW7B,GAAG6B,QAAQ;AACzB,iBAAO;AAAA,QACV;AACD,iBAASC,IAAI,GAAGF,IAAI7B,GAAG8B,QAAQC,IAAIF,GAAGE,KAAK;AACvC,cAAI,CAAC,KAAKwD,YAAYvF,GAAG+B,CAAD,GAAK9B,GAAG8B,CAAD,CAA1B,GAAgC;AACjC,mBAAO;AAAA,UACV;AAAA,QACJ;AAED,eAAO;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,WAAkBoB,GAAG;AACbqC,YAAAA,SAAS,CAAA;AACbrC,UAAEsC,QAAQ,SAAU5B,OAAO;AACvB2B,iBAAOE,KAAK7B,KAAZ;AAAA,QACH,CAFD;AAGA,eAAO2B;AAAAA,MACV;AAAA;;MAED,OAAA,SAAA,gBAAuBG,UAAU;AACzBH,YAAAA,SAAS,CAAA;AACb,YAAII,iBAAiBD,SAASE;AAC9B,eAAO,CAACD,eAAeE,MAAM;AACzBN,iBAAOE,KAAKE,eAAe/B,KAA3B;AACA+B,2BAAiBD,SAASE;QAC7B;AACD,eAAOL;AAAAA,MACV;AAAA;;MAED,OAAA,SAAA,SAAgBO,UAAU;AACtB,eAAOA,YAAY,MAAMA,YAAY;AAAA,MACxC;AAAA;;;AAILnC,UAAMoC,QAAS,OAAOC,WAAW,eAAiB,OAAOC,eAAe;AACxEtC,UAAMuC,QAAQvC,QAAMoC,SAAUI,UAAUC,UAAUjD,QAAQ,KAA5B,MAAuC;AACrEQ,UAAM0C,UAAW,OAAOJ,eAAe;AAClC,UAACK,SAAU,OAAON,WAAW,eAAgBrC,QAAM0C;AACxD1C,UAAM4C,QAAQ5C,QAAMoC,SAAUI,UAAUC,UAAUjD,QAAQ,eAA5B,MAAiD;AAC/EQ,UAAM6C,UAAU7C,QAAMoC,UAAUI,UAAUC,UAAUjD,QAAQ,QAA5B,MAA0C,MAAMgD,UAAUC,UAAUjD,QAAQ,QAA5B,MAA0C;MClLrGsD;;;;;;MAEjB,OAAA,SAAA,cAAqBxC,KAAKyC,MAAM9C,OAAO;AACnCK,YAAIyC,IAAD,IAAS9C;AAAAA,MACf;AAAA;;aAED,SAAmBK,YAAAA,KAAK0C,UAAU;AAC9B,YAAI,CAAChD,QAAME,gBAAgB8C,QAAtB,GAAiC;AAClCpD,kBAAQqD,MAAM,6CAAd;AAAA,QACH,OAAM;AACH,cAAIC,QAAQ1C,OAAOD,KAAKyC,QAAZ;AACZ,mBAAS7E,IAAI,GAAGF,IAAIiF,MAAMhF,QAAQC,IAAIF,GAAGE,KAAK;AAC1C,gBAAI4E,OAAOG,MAAM/E,CAAD;AAEXgF,iBAAAA,oBAAoB7C,KAAKyC,MAAMC,SAASD,IAAD,CAA5C;AAAA,UACH;AAAA,QACJ;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,oBAA2BzC,KAAKyC,MAAM9C,OAAO;AACrCmD,YAAAA,SAAS9C,IAAI+C,cAAcP,MAAKQ;AAEpC,YAAIP,KAAKQ,OAAO,CAAZ,MAAmB,KAAK;AAEpBR,cAAAA,SAAS,YAAY;AACrBnD,oBAAQqD,MAAM,4CAA4CF,OAAO,kBAAjE;AAAA,UACH;AAAA,QACJ,WAAUA,SAAS,QAAQ;AAEpB/C,cAAAA,QAAMmB,WAAWlB,KAAjB,KAA2BA,MAAMuD,SAAS;AAE1CvD,oBAAQA,MAAMuD,QAAQlD,GAAd;AAAA,UACX;AAED8C,iBAAO9C,KAAKyC,MAAM9C,KAAZ;AAAA,QACT;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,MAAawD,MAAM;AAEfA,aAAKD,UAAU;AAAA,MAClB;AAAA;;;MCzCgBE;;;;;;MAEjB,OAAA,SAAA,WAAkBC,MAAMC,eAAeC,gBAAgB;AACnD,YAAMC,WAAYF,gBAAgB;AAClC,YAAIG;AAEAC,YAAAA,eAAeC;AAEnB,gBAAON,MAAP;AAAA,UACI,KAAK;AACDK,4BAAgB;AAChBC,6BAAiB;AACjB;AAAA,UACJ,KAAK;AACDD,4BAAgBH;AAChBI,6BAAiB;AACjB;AAAA,UACJ,KAAK;AACDD,4BAAgBH,iBAAiB;AACjCI,6BAAiB;AACjB;AAAA,UACJ,KAAK;AACDD,4BAAgB;AAChBC,6BAAiBpH,KAAKI,IAAI,GAAG4G,cAAZ,IAA8BC;AAC/C;AAAA,UACJ,KAAK;AACGD,gBAAAA,iBAAiB,GAAG;AACb,qBAAA,KAAKK,WAAW,UAAUN,eAAeC,cAAzC;AAAA,YACV,OAAM;AACHE,4BAAcF,kBAAkBC,WAAW;AAC3CE,8BAAgB,MAAMD;AACtBE,+BAAiBF;AAAAA,YACpB;AACD;AAAA,UACJ,KAAK;AACGF,gBAAAA,iBAAiB,GAAG;AACb,qBAAA,KAAKK,WAAW,UAAUN,eAAeC,cAAzC;AAAA,YACV,OAAM;AACHE,4BAAcF,kBAAkBC,WAAW;AAC3CE,8BAAgBD;AAChBE,+BAAiBF;AAAAA,YACpB;AACD;AAAA,UACJ,KAAK;AACDC,4BAAgB;AAChBC,6BAAiB;AACjB;AAAA,UACJ;AACI,kBAAM,IAAIE,MAAM,mBAAmBR,IAA7B;AAAA,QAxCd;AA2CO,eAAA;AAAA,UAACK;AAAAA,UAAeC;AAAAA,QAAhB;AAAA,MACV;AAAA;;;MClDgBG;AAEjB,aAAAA,gBAAYC,QAAQ;AAAA,sBAAA,MAAAD,eAAA;AACXE,WAAAA,UAAUD;AACVE,WAAAA,sBAAsB;AAAA,IAC9B;;;WAED,SAAa,MAAA;AACF,eAAA,KAAKD,QAAQE;AAAAA,MACvB;AAAA;;aAED,SAAO,OAAA;AACH,aAAKD,sBAAsB,KAAKE;MACnC;AAAA;;aAED,SAAQ,QAAA;AACJ,YAAMC,gBAAgB,KAAKJ,QAAQI;AACnC,YAAMb,iBAAiBa,gBAAgB,KAAKH;AAE5C,YAAA,oBAAwC,KAAKI,YAAYd,cAAjB,GAAjCG,kCAAAA,eAAeC,mCAAAA;AAEhBW,YAAAA,QAAQ,KAAKJ;AAEnB,YAAMb,OAAO,KAAKW,QAAQO,eAAeC;AACrCC,YAAAA,WAAW;AACXpB,YAAAA,SAAS,aAAaiB,MAAM1G,UAAW2F,iBAAiB,GAAI;AAC5DkB,qBAAWlB,iBAAiBe,MAAM1G;AAAAA,QACrC;AAEG8G,YAAAA,aAAahB;AACjB,iBAAS7F,IAAI,GAAGF,IAAI2G,MAAM1G,QAAQC,IAAIF,GAAGE,KAAK;AACpC8G,cAAAA,wBAAwBD;AACxBE,cAAAA,UAAUN,MAAMzG,CAAD,EAAIgH,kBAAT;AAEZC,cAAAA,2BAA2BR,MAAMzG,CAAD,EAAIkH,sBAAsBN;AAE9DG,kBAAQI,uBAAuBF,wBAA/B;AACAF,kBAAQK,yBAAyBN,qBAAjC;AAEAC,kBAAQM,MAAR;AAEIN,cAAAA,QAAQO,wBAAwB;AAChCb,kBAAMzG,CAAD,EAAIuH;UACZ;AAEDV,wBAAcI;AACdJ,wBAAcf;AAAAA,QACjB;AAAA,MACJ;AAAA;;WAED,SAAyB,MAAA;AACrB,eAAO,KAAKM;AAAAA,MACf;AAAA;;aAED,SAAyB,yBAAA;AACfK,YAAAA,QAAQ,KAAKJ;AACfmB,YAAAA,QAAQ;AACZ,iBAASxH,IAAI,GAAGF,IAAI2G,MAAM1G,QAAQC,IAAIF,GAAGE,KAAK;AAC1C,cAAMyH,OAAOhB,MAAMzG,CAAD;AAClBwH,mBAASC,KAAKP;AAAAA,QACjB;AACD,eAAOM;AAAAA,MACV;AAAA;;MAED,OAAA,SAAA,YAAY9B,gBAAgB;AACxB,YAAMF,OAAO,KAAKW,QAAQO,eAAeC;AACzC,YAAMlB,gBAAgB,KAAKY,OAAOtG;AAC3BwF,eAAAA,kBAAkBQ,WAAWP,MAAMC,eAAeC,cAAlD;AAAA,MACV;AAAA;;;MCtEgBgC;;;;;;aAEjB,SAAoCC,6BAAAA,MAAMC,YAAY;AAClD,YAAMC,SAASF,KAAKE;AACpB,YAAMC,SAASD,OAAOE;AAClB,YAAA,CAACD,QAAQ;AACT,iBAAO;AAAA,QACV,OAAM;AACH,cAAME,aAAaL,KAAKK;AACxB,cAAIA,YAAY;AAEZ,mBAAO,KAAKC,kBAAkBD,YAAYJ,UAAnC,IAAiD,KAAKM,gBAAgBF,YAAYJ,UAAjC;AAAA,UAC3D,OAAM;AAEIA,mBAAAA,aAAaE,OAAOK,IAAIL,OAAOM;AAAAA,UACzC;AAAA,QACJ;AAAA,MACJ;AAAA;;aAED,SAAsBT,eAAAA,MAAMC,YAAY;AACpC,YAAIA,YAAY;AACRD,cAAAA,KAAKU,OAAO;AACZ,gBAAI,KAAKC,0BAA0BX,MAAM,IAArC,GAA4C;AACrCA,qBAAAA,KAAKU,MAAM,KAAKE,6BAA6BZ,MAAM,IAAxC,CAAX;AAAA,YACV,OAAM;AACH,qBAAO;AAAA,YACV;AAAA,UACJ,OAAM;AACIA,mBAAAA,KAAKa;AAAAA,UACf;AAAA,QACJ,OAAM;AACCb,cAAAA,KAAKc,OAAO;AACZ,gBAAI,KAAKH,0BAA0BX,MAAM,KAArC,GAA6C;AACtCA,qBAAAA,KAAKc,MAAM,KAAKF,6BAA6BZ,MAAM,KAAxC,CAAX;AAAA,YACV,OAAM;AACH,qBAAO;AAAA,YACV;AAAA,UACJ,OAAM;AACIA,mBAAAA,KAAKe;AAAAA,UACf;AAAA,QACJ;AAAA,MACJ;AAAA;;aAED,SAAiCf,0BAAAA,MAAMC,YAAY;AAC/C,YAAMI,aAAaL,KAAKK;AACxB,YAAIA,cAAcA,WAAWW,MAAMxC,QAAQyC,oBAAoBhB,UAA7C,GAA0D;AAExE,iBAAO;AAAA,QACV;AACD,eAAO;AAAA,MACV;AAAA;;aAED,SAAsBD,eAAAA,MAAMC,YAAY;AACpC,YAAIA,YAAY;AACL,iBAAA,CAACD,KAAKa,iBAAiB,CAACb,KAAKU;AAAAA,QACvC,OAAM;AACI,iBAAA,CAACV,KAAKe,kBAAkB,CAACf,KAAKc;AAAAA,QACxC;AAAA,MACJ;AAAA;;aAED,SAAwBd,iBAAAA,MAAMC,YAAY;AAC/BA,eAAAA,aAAaD,KAAKkB,IAAIlB,KAAKmB;AAAAA,MACrC;AAAA;;aAED,SAAyBnB,kBAAAA,MAAMC,YAAY;AAChCA,eAAAA,aAAaD,KAAKQ,IAAIR,KAAKS;AAAAA,MACrC;AAAA;;MAED,OAAA,SAAA,iBAAwBT,MAAMC,YAAYmB,KAAK;AAC3C,YAAInB,YAAY;AACZD,eAAKkB,IAAIE;AAAAA,QACZ,OAAM;AACHpB,eAAKmB,IAAIC;AAAAA,QACZ;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,kBAAyBpB,MAAMC,YAAYoB,MAAM;AAC7C,YAAIpB,YAAY;AACZD,eAAKQ,IAAIa;AAAAA,QACZ,OAAM;AACHrB,eAAKS,IAAIY;AAAAA,QACZ;AAAA,MACJ;AAAA;;aAED,SAAsBrB,eAAAA,MAAMC,YAAY;AAChCqB,YAAAA,UAAU,KAAKC,oBAAoBvB,MAAMC,UAA/B;AAEVuB,YAAAA,kBAAkB;AACtB,YAAIxB,KAAKyB,qBAAqB;AAC1BD,4BAAkBxB,KAAK0B,UAAUC,mBAAmB1B,UAAlC;AAAA,QACrB;AAED,YAAM2B,oBAAqBJ,kBAAkB;AAC7C,YAAII,mBAAmB;AACnBN,oBAAUvK,KAAKI,IAAImK,SAASE,eAAlB;AAAA,QACb;AACD,eAAOF;AAAAA,MACV;AAAA;;aAED,SAA2BtB,oBAAAA,MAAMC,YAAY;AACzC,YAAID,KAAK6B,iBAAiB;AACf7B,iBAAAA,KAAKgB,MAAMxC,QAAQsD,eAAe7B,UAAlC;AAAA,QACV,OAAM;AACG8B,cAAAA,eAAgB/B,KAAKgC,SAASC,WAAW;AAC/C,cAAIF,cAAc;AACd,mBAAO;AAAA,UACV,OAAM;AACH,mBAAO,KAAKG,eAAelC,MAAMC,UAA1B;AAAA,UACV;AAAA,QACJ;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,WAAkBD,MAAMC,YAAYoB,MAAM;AACtC,YAAIrB,KAAK6B,iBAAiB;AAChBM,cAAAA,aAAcnC,KAAKgB,MAAMoB,gBAAgBnC;AAC/C,cAAIkC,YAAY;AACZnC,iBAAKgB,MAAMxC,QAAQ6D,eAAehB,IAAlC;AAAA,UACH,OAAM;AACHrB,iBAAKgB,MAAMxC,QAAQ8D,gBAAgBjB,IAAnC;AAAA,UACH;AAAA,QACJ,OAAM;AACH,eAAKkB,kBAAkBvC,MAAMC,YAAYoB,IAAzC;AAAA,QACH;AAAA,MACJ;AAAA;;aAGD,SAAwBrB,iBAAAA,MAAMC,YAAY;AACtC,YAAID,KAAK6B,iBAAiB;AACtB,cAAMW,OAAOxC,KAAKgB;AAClB,cAAIf,YAAY;AACLuC,mBAAAA,KAAKC;AAAAA,UACf,OAAM;AACID,mBAAAA,KAAKE;AAAAA,UACf;AAAA,QACJ,OAAM;AACH,iBAAO;AAAA,QACV;AAAA,MACJ;AAAA;;aAED,SAAuB1C,gBAAAA,MAAMC,YAAY;AACrC,YAAID,KAAK6B,iBAAiB;AACtB,cAAMW,OAAOxC,KAAKgB;AAClB,cAAIf,YAAY;AACZ,mBAAOuC,KAAKG,eAAeH,KAAKC;AAAAA,UACnC,OAAM;AACH,mBAAOD,KAAKE,aAAaF,KAAKI;AAAAA,UACjC;AAAA,QACJ,OAAM;AACH,iBAAO;AAAA,QACV;AAAA,MACJ;AAAA;;aAED,SAAuB5C,gBAAAA,MAAMC,YAAY;AACrC,YAAM+B,WAAWhC,KAAKgC;AACtB,YAAIA,UAAU;AACV,cAAI/B,YAAY;AACL+B,mBAAAA,SAASa;AAAAA,UACnB,OAAM;AACIb,mBAAAA,SAASc;AAAAA,UACnB;AAAA,QACJ,OAAM;AACH,iBAAO;AAAA,QACV;AAAA,MACJ;AAAA;;aAED,SAAsB9C,eAAAA,MAAMC,YAAY;AACpC,YAAM+B,WAAWhC,KAAKgC;AACtB,YAAIA,UAAU;AACV,cAAI/B,YAAY;AACZ,mBAAO+B,SAASe,cAAcf,SAASa;AAAAA,UAC1C,OAAM;AACH,mBAAOb,SAASc,YAAYd,SAASgB;AAAAA,UACxC;AAAA,QACJ,OAAM;AACH,iBAAO;AAAA,QACV;AAAA,MACJ;AAAA;;;MChLgBC;AAEjB,aAAAA,cAAYnD,MAAM;AAAA,sBAAA,MAAAmD,aAAA;AACTC,WAAAA,QAAQpD;AACRqD,WAAAA,mBAAmB;AACnBC,WAAAA,cAAc;AAAA,IACtB;;;MAED,OAAA,SAAA,OAAOC,QAAQ;AACND,aAAAA,cAAc;AAEdD,aAAAA,mBAAmBE;AACxB,YAAIC,oBAAoB,KAAKC;AAC7B,YAAID,mBAAmB;AACnB,cAAME,QAAQ,KAAKN,MAAMM;AACtB,aAAA;AACC,gBAAIC,kBAAkB,KAAKN,mBAAmBG;AAC9C,qBAASjL,IAAI,KAAK6K,MAAMQ,YAAYrL,KAAK,KAAK6K,MAAMS,UAAUtL,KAAK;AAC/D,kBAAM2H,OAAOwD,MAAMnL,CAAD;AAClB,kBAAM2J,WAAWhC,KAAKgC;AACtB,kBAAM4B,eAAe5B,SAASC;AAC9B,kBAAM4B,mBAAoBD,eAAe;AACzC,kBAAIC,kBAAkB;AAClB,oBAAI5B,UAAS2B,eAAeH;AAC5B,oBAAMnC,UAAUU,SAAS8B;AACzB,oBAAMzC,OAAOW,SAAS+B;AAClB1C,oBAAAA,OAAOC,SAAS;AAChB,sBAAM0C,YAAY3C,OAAOC;AACzB,sBAAM2C,gBAAiBhC,WAAU+B;AACjC,sBAAIC,eAAe;AACfhC,oBAAAA,UAAS+B;AAGTV,yCAAqBM;AAAAA,kBACxB;AAED,sBAAMM,YAAY7C,OAAOY;AACzBD,2BAASmC,gBAAgBD,SAAzB;AAEKd,uBAAAA,eAAenB;AACfkB,uBAAAA,oBAAoBlB;AAErBlL,sBAAAA,KAAKqN,IAAI,KAAKjB,gBAAd,IAAkC,MAAO;AACzC;AAAA,kBACH;AAAA,gBACJ;AAAA,cACJ;AAAA,YACJ;AAAA,UACJ,SAAOG,qBAAsBvM,KAAKqN,IAAI,KAAKjB,gBAAd,IAAkC;AAAA,QACnE;AAAA,MACJ;AAAA;;aAED,SAAwB,wBAAA;AAChBtD,YAAAA,QAAQ;AACZ,YAAM2D,QAAQ,KAAKN,MAAMM;AACzB,iBAASnL,IAAI,KAAK6K,MAAMQ,YAAYrL,KAAK,KAAK6K,MAAMS,UAAUtL,KAAK;AAC/D,cAAM2H,OAAOwD,MAAMnL,CAAD;AAClB,cAAM2J,WAAWhC,KAAKgC;AAElBA,cAAAA,SAASC,QAAQ;AACjB,gBAAMX,UAAUU,SAAS8B;AACzB,gBAAMzC,OAAOW,SAAS+B;AAGlB1C,gBAAAA,OAAOC,SAAS;AAChBzB,uBAASmC,SAASC;AAAAA,YACrB;AAAA,UACJ;AAAA,QACJ;AACD,eAAOpC;AAAAA,MACV;AAAA;;aAED,SAAgB,gBAAA;AACZ,eAAO,KAAKuD;AAAAA,MACf;AAAA;;;MC1EgBiB;AAEjB,aAAAA,YAAYvE,MAAM;AAAA,sBAAA,MAAAuE,WAAA;AACTnB,WAAAA,QAAQpD;AACRqD,WAAAA,mBAAmB;AACnBmB,WAAAA,aAAa;AAAA,IACrB;;;MAED,OAAA,SAAA,KAAKjB,QAAQ;AACJiB,aAAAA,aAAa;AAEbnB,aAAAA,mBAAmBE;AACxB,YAAIkB,kBAAkB,KAAKC;AAC3B,YAAID,iBAAiB;AACjB,cAAMf,QAAQ,KAAKN,MAAMM;AACtB,aAAA;AACC,gBAAIiB,gBAAgB,KAAKtB,mBAAmBoB;AAC5C,qBAASlM,IAAI,KAAK6K,MAAMQ,YAAYrL,KAAK,KAAK6K,MAAMS,UAAUtL,KAAK;AAC/D,kBAAM2H,OAAOwD,MAAMnL,CAAD;AAClB,kBAAM2J,WAAWhC,KAAKgC;AACtB,kBAAM0C,aAAa1C,SAAS2C;AAC5B,kBAAMC,iBAAkBF,aAAa;AACrC,kBAAIE,gBAAgB;AAChB,oBAAID,QAAOD,aAAaD;AACxB,oBAAMI,UAAU7C,SAAS8C;AACzB,oBAAMzD,OAAOW,SAAS+B;AAClBc,oBAAAA,UAAU,GAAG;AACTxD,sBAAAA,QAAQwD,SAAS;AAEjBF,oBAAAA,QAAO;AAAA,kBACV,OAAM;AACH,wBAAMI,UAAUF,UAAUxD;AAC1B,wBAAM2D,eAAgBL,SAAQI;AAC9B,wBAAIC,cAAc;AACdL,sBAAAA,QAAOI;AAGPR,yCAAmBG;AAAAA,oBACtB;AAAA,kBACJ;AAAA,gBACJ;AAEGC,oBAAAA,QAAO,GAAG;AACV,sBAAMT,YAAY7C,OAAOsD;AACzB3C,2BAASmC,gBAAgBD,SAAzB;AAEKI,uBAAAA,cAAcK;AACdxB,uBAAAA,oBAAoBwB;AAErB5N,sBAAAA,KAAKqN,IAAI,KAAKjB,gBAAd,IAAkC,MAAO;AACzC;AAAA,kBACH;AAAA,gBACJ;AAAA,cACJ;AAAA,YACJ;AAAA,UACJ,SAAOoB,mBAAoBxN,KAAKqN,IAAI,KAAKjB,gBAAd,IAAkC;AAAA,QACjE;AAAA,MACJ;AAAA;;aAED,SAAsB,sBAAA;AACdtD,YAAAA,QAAQ;AACZ,YAAM2D,QAAQ,KAAKN,MAAMM;AACzB,iBAASnL,IAAI,KAAK6K,MAAMQ,YAAYrL,KAAK,KAAK6K,MAAMS,UAAUtL,KAAK;AAC/D,cAAM2H,OAAOwD,MAAMnL,CAAD;AAClB,cAAM2J,WAAWhC,KAAKgC;AAElBA,cAAAA,SAAS2C,MAAM;AACf,gBAAME,UAAU7C,SAAS8C;AACzB,gBAAMzD,OAAOW,SAAS+B;AAGtB,gBAAIc,YAAY,KAAKxD,OAAOwD,SAAS;AACjChF,uBAASmC,SAAS2C;AAAAA,YACrB;AAAA,UACJ;AAAA,QACJ;AACD,eAAO9E;AAAAA,MACV;AAAA;;aAED,SAAe,eAAA;AACX,eAAO,KAAKyE;AAAAA,MACf;AAAA;;;MC/EgBW;AAEjB,aAAAA,gBAAYC,YAAY;AAAA,sBAAA,MAAAD,eAAA;AACf/B,WAAAA,QAAQgC;AAAAA,IAChB;;;WAED,SAAc,MAAA;AACH,eAAA,KAAKhC,MAAM1E;AAAAA,MACrB;AAAA;;aAED,SAAW,WAAA;AACiC,YAAA,oBAAA,KAAKK,YAA7C,GAAOX,kCAAAA,eAAeC,mCAAAA;AAElBe,YAAAA,aAAahB;AAEjB,YAAMsF,QAAQ,KAAKN,MAAMM;AACzB,iBAASnL,IAAI,KAAK6K,MAAMQ,YAAYrL,KAAK,KAAK6K,MAAMS,UAAUtL,KAAK;AAC/D,cAAM2H,OAAOwD,MAAMnL,CAAD;AAElB2H,eAAKgC,SAASmD,sBAAsBjG,UAApC;AACAA,wBAAcc,KAAKgC,SAASoD;AAC5BlG,wBAAcf;AAAAA,QACjB;AAAA,MACJ;AAAA;;aAED,SAAc,cAAA;AACV,YAAMJ,iBAAiB,KAAKmF,MAAMmC;AAClC,YAAIxH,OAAO,KAAKW,QAAQO,eAAeuG;AACvC,YAAMxH,gBAAgB,KAAKoF,MAAMpF;AAE1BF,eAAAA,kBAAkBQ,WAAWP,MAAMC,eAAeC,cAAlD;AAAA,MACV;AAAA;;;MCjCgBwH;AAEjB,aAAAA,aAAYzF,MAAM;AAAA,sBAAA,MAAAyF,YAAA;AACTrC,WAAAA,QAAQpD;AACR0F,WAAAA,uBAAuB;AACvBC,WAAAA,yBAAyB;AACzBC,WAAAA,qBAAqB;AACrBC,WAAAA,0BAA0B;AAC1BC,WAAAA,4BAA4B;AAAA,IACpC;;;WAED,SAAc,MAAA;AACH,eAAA,KAAK1C,MAAM1E;AAAAA,MACrB;AAAA;;WAED,SAAqB,MAAA;AACV,eAAA,KAAKA,QAAQO;AAAAA,MACvB;AAAA;;MAED,OAAA,SAAA,uBAAuBsC,MAAM;AACpBmE,aAAAA,uBAAuBnE;AAAAA,MAC/B;AAAA;;MAED,OAAA,SAAA,yBAAyBwE,QAAQ;AACxBJ,aAAAA,yBAAyBI;AAAAA,MACjC;AAAA;;aAED,SAAQ,QAAA;AACJ,aAAKH,qBAAqB,KAAK3G,eAAe+G;AAE9C,aAAKF,4BAA4B,KAAKpH,QAAQyC,oBAAoB,CAAC,KAAKlC,eAAeqD,WAAtD;AAE5BuD,aAAAA,0BAA0B;AAC/B,YAAMnC,QAAQ,KAAKN,MAAMM;AACzB,iBAASnL,IAAI,KAAK6K,MAAMQ,YAAYrL,KAAK,KAAK6K,MAAMS,UAAUtL,KAAK;AAC/D,cAAM2H,OAAOwD,MAAMnL,CAAD;AACb0N,eAAAA,WAAW/F,IAAhB;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAA6B,MAAA;AACzB,eAAO,KAAK2F;AAAAA,MACf;AAAA;;MAED,OAAA,SAAA,WAAW3F,MAAM;AACb,YAAMgC,WAAWhC,KAAKgC;AACtB,YAAItC,QAAQsC,SAASgE,aAAa,KAAKN;AAEnChG,YAAAA,UAAU,aAAa,KAAKuG,gBAAgBjE,QAArB,GAAgC;AACvDtC,kBAAQ;AAAA,QACX;AAED,YAAIA,UAAU,aAAa,CAAC,KAAKkG,2BAA2B;AACxD,cAAI5D,SAASkE,wBAAwB;AAEjClE,qBAASmE,0BAAT;AAAA,UACH;AAAA,QACJ;AAED,gBAAOzG,OAAP;AAAA,UACI,KAAK;AACI0G,iBAAAA,oBAAoBpE,QAAzB;AACA;AAAA,UACJ,KAAK;AACIqE,iBAAAA,kBAAkBrE,QAAvB;AACA;AAAA,UACJ,KAAK;AACIsE,iBAAAA,qBAAqBtE,QAA1B;AACA;AAAA,UACJ,KAAK;AACIuE,iBAAAA,kBAAkBvE,QAAvB;AACA;AAAA,QAZR;AAAA,MAcH;AAAA;;MAED,OAAA,SAAA,oBAAoBA,UAAU;AAC1BA,iBAASwE,uBAAuB,KAAKf,sBAArC;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,kBAAkBzD,UAAU;AACxB,YAAMyE,oBAAoBzE,SAAS0E;AACnC1E,iBAASwE,uBAAuB,KAAKf,0BAA0B,KAAKD,uBAAuBiB,kBAA3F;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,qBAAqBzE,UAAU;AAC3B,YAAMyE,oBAAoBzE,SAAS0E;AAC7BC,YAAAA,UAAU,KAAKnB,uBAAuBiB,qBAAqB;AACjEzE,iBAASwE,uBAAuB,KAAKf,yBAAyBkB,MAA9D;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,kBAAkB3E,UAAU;AACxBA,iBAASwE,uBAAuB,KAAKf,sBAArC;AAEA,YAAMmB,iCAAiC5E,SAAS+B;AAChD,YAAI1C,OAAO,KAAKmE,uBAAuBxD,SAAS6E,wBAAwB7E,SAAS8E;AAEjF,YAAMC,0BAA0B/E,SAASgF;AACrCD,YAAAA,0BAA0B,GAAG;AAC7B1F,iBAAOtK,KAAKI,IAAIkK,MAAM0F,uBAAf;AAAA,QACV;AAED,YAAME,0BAA0BjF,SAASkF;AACzC,YAAMC,iCAAkCF,0BAA0B;AAClE,YAAIE,gCAAgC;AAChC9F,iBAAOtK,KAAKK,IAAIiK,MAAM4F,uBAAf;AAAA,QACV;AAEDjF,iBAASoF,iBAAiB/F,IAA1B;AACA,YAAMgG,gCAAgCrF,SAAS+B;AAE/C,YAAMuD,kBAAmBD,kCAAkCT;AAC3D,YAAIU,iBAAiB;AAQZ3B,eAAAA,0BAA0B;AAAA,QAClC;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,gBAAgB3D,UAAU;AACtB,YAAMuF,wBAAwBvF,SAASwF;AACvC,YAAMC,eAAgBzF,SAASgE,cAAc;AACtCuB,eAAAA,yBAAyB,CAACE;AAAAA,MACpC;AAAA;;;MC1HgBC;AAEjB,aAAAA,YAAYnJ,QAAQmF,YAAYC,UAAUgE,gBAAgB;AAAA,sBAAA,MAAAD,WAAA;AACjDlJ,WAAAA,UAAUD;AACf,WAAKiF,QAAQjF,OAAOiF;AACfE,WAAAA,aAAaA;AACbC,WAAAA,WAAWA;AACX0B,WAAAA,kBAAkBsC;AAAAA,IAC1B;;;aAED,SAAgB,gBAAA;AACZ,aAAKC,cAAL;AACA,aAAKhI,iBAAL;AACA,aAAKiI,gBAAL;AAAA,MACH;AAAA;;aAED,SAAgB,gBAAA;AACZ,YAAI,KAAKxC,kBAAkB,GAAG;AACrByC,eAAAA,eAAe,KAAKzC,eAAzB;AAAA,QACH,WAAU,KAAKA,kBAAkB,GAAG;AACjC,eAAK0C,iBAAiB,CAAC,KAAK1C,eAA5B;AAAA,QACH;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,eAAehC,QAAQ;AACnB,YAAM2E,SAAS,IAAI3D,WAAW,IAAf;AACf2D,eAAOrD,KAAKtB,MAAZ;AACA,aAAKgC,mBAAmB2C,OAAOC;MAClC;AAAA;;MAED,OAAA,SAAA,iBAAiB5E,QAAQ;AACrB,YAAM6E,WAAW,IAAIjF,aAAa,IAAjB;AACjBiF,iBAASjG,OAAOoB,MAAhB;AACA,aAAKgC,mBAAmB6C,SAASC;MACpC;AAAA;;aAED,SAAmB,mBAAA;AACf,YAAMC,aAAa,IAAInD,eAAe,IAAnB;AACnBmD,mBAAWC,SAAX;AAAA,MACH;AAAA;;aAED,SAAoB,oBAAA;AAChB,eAAO,IAAI9C,YAAY,IAAhB;AAAA,MACV;AAAA;;aAED,SAAkB,kBAAA;AACd,aAAK+C,4BAAL;AAAA,MACH;AAAA;;aAED,SAAqB,qBAAA;AACbC,YAAAA,kBAAkB;AACtB,iBAASlQ,IAAI,KAAKqL,YAAYrL,KAAK,KAAKsL,UAAUtL,KAAK;AACnD,cAAM2H,OAAO,KAAKwD,MAAMnL,CAAX;AACbkQ,6BAAmBvI,KAAKgC,SAASwG;QACpC;AACD,eAAOD;AAAAA,MACV;AAAA;;WAED,SAAoB,MAAA;AAChB,eAAO,KAAK5E,WAAW,KAAKD,aAAa;AAAA,MAC5C;AAAA;;WAED,SAA0B,MAAA;AAChB+E,YAAAA,2BAA4B,KAAKjK,QAAQkK,yBAAb,KAA2C,CAAC,KAAKlK,QAAQmK;AAC3F,YAAMC,sBAAuB,KAAKpK,QAAQqK,WAAb,KAA6BJ;AAC1D,YAAIG,qBAAqB;AACrB,iBAAO,KAAKE;AAAAA,QACf,OAAM;AACI,iBAAA,KAAKtK,QAAQI;AAAAA,QACvB;AAAA,MACJ;AAAA;;aAED,SAA8B,8BAAA;AAC1B,aAAKkK,0BAA0B,KAAKC;MACvC;AAAA;;aAED,SAA6B,6BAAA;AACrBC,YAAAA,mBAAmB;AACvB,iBAAS3Q,IAAI,KAAKqL,YAAYrL,KAAK,KAAKsL,UAAUtL,KAAK;AACnD,cAAM2H,OAAO,KAAKwD,MAAMnL,CAAX;AACb2Q,6BAAmBjS,KAAKI,IAAI6R,kBAAkBhJ,KAAKgC,SAAS0E,4CAAd,CAA3B;AAAA,QACtB;AACD,eAAOsC;AAAAA,MACV;AAAA;;;MCnFgBC;AAEjB,aAAAA,cAAY1K,QAAQ;AAAA,sBAAA,MAAA0K,aAAA;AACXzK,WAAAA,UAAUD;AACV2K,WAAAA,mBAAmB;AACnBC,WAAAA,oBAAoB;AACpBC,WAAAA,uBAAuB;AAAA,IAC/B;;;WAED,SAAY,MAAA;AACR,eAAO,KAAK1K;AAAAA,MACf;AAAA;;WAED,SAAsB,MAAA;AAClB,YAAI,KAAKwK,qBAAqB,IAAI;AAC9B,eAAKA,mBAAmB,KAAKpF;QAChC;AACD,eAAO,KAAKoF;AAAAA,MACf;AAAA;;WAED,SAAuB,MAAA;AACnB,YAAI,KAAKC,sBAAsB,IAAI;AAC/B,eAAKA,oBAAoB,KAAKE;QACjC;AACD,eAAO,KAAKF;AAAAA,MACf;AAAA;;WAED,SAA0B,MAAA;AACtB,eAAO,KAAKC;AAAAA,MACf;AAAA;;aAED,SAAc,cAAA;AACV,aAAKE,OAAL;AACA,YAAM9F,QAAQ,KAAKhF,QAAQgF;AAC3B,YAAM+F,OAAO,KAAK/K,QAAQqK,WAAb;AAETnF,YAAAA,aAAa;AACjB,YAAIrL;AACJ,YAAMF,IAAIqL,MAAMpL;AACXC,aAAAA,IAAI,GAAGA,IAAIF,GAAGE,KAAK;AACpB,cAAM2H,OAAOwD,MAAMnL,CAAD;AAEbmR,eAAAA,gBAAgBxJ,IAArB;AAGA,cAAMyJ,mBAAmBzJ,KAAKgC,SAASoD,2CAAd;AAEzB,cAAImE,QAASlR,IAAIqL,YAAa;AACpBgG,gBAAAA,gBAAiB,KAAKC,kBAAkBF,mBAAmB,KAAKG;AACtE,gBAAIF,eAAe;AACf,mBAAKG,YAAYnG,YAAYrL,IAAI,CAAjC;AACKsR,mBAAAA,kBAAkB;AACvBjG,2BAAarL;AAAAA,YAChB;AAAA,UACJ;AAEIyR,eAAAA,kBAAkBL,gBAAvB;AAAA,QACH;AAEG/F,YAAAA,aAAarL,GAAG;AAChB,eAAKwR,YAAYnG,YAAYrL,IAAI,CAAjC;AAAA,QACH;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,gBAAgB2H,MAAM;AAClB,YAAIA,KAAK6B,iBAAiB;AACtB7B,eAAK+J,WAAWC;QACnB,OAAM;AACHhK,eAAKgC,SAASiI;QACjB;AAAA,MACJ;AAAA;;aAED,SAAS,SAAA;AACL,aAAKL,gBAAgB,KAAKpL,QAAQ0L;AAC7BP,aAAAA,kBAAkB;AAClBQ,aAAAA,kBAAkB;AAClBzL,aAAAA,SAAS;AAETwK,aAAAA,mBAAmB;AACnBC,aAAAA,oBAAoB;AACpBC,aAAAA,uBAAuB;AAAA,MAC/B;AAAA;;MAED,OAAA,SAAA,kBAAkBK,kBAAkB;AAC3BE,aAAAA,mBAAmBF;AACxB,YAAI,KAAKE,kBAAkB,KAAKQ,iBAAiB;AACxCA,eAAAA,kBAAkB,KAAKR;AAAAA,QAC/B;AAAA,MACJ;AAAA;;aAED,SAAYjG,YAAAA,YAAYC,UAAU;AAC9B,YAAMgE,iBAAiB,KAAKyC;AAC5B,YAAMtK,OAAO,IAAI4H,WAAW,KAAKlJ,SAASkF,YAAYC,UAAUgE,cAAnD;AACb7H,aAAKuK,cAAL;AACA,aAAK3L,OAAO1C,KAAK8D,IAAjB;AAEI,YAAA,KAAKsJ,yBAAyB,KAAM,KAAKO,kBAAkB,KAAKP,sBAAuB;AAClFA,eAAAA,uBAAuB,KAAKO;AAAAA,QACpC;AAAA,MACJ;AAAA;;aAED,SAAmC,mCAAA;AAC3B,YAAA,CAAC,KAAKnL,QAAQ8L,oBAAoB,KAAK9L,QAAQ+L,2BAA2B;AAC1E,iBAAO;AAAA,QACV,OAAM;AACH,iBAAO,KAAKX,gBAAgB,KAAKD;AAAAA,QACpC;AAAA,MACJ;AAAA;;aAED,SAAuB,uBAAA;AACfa,YAAAA,mBAAmB;AACvB,YAAMhH,QAAQ,KAAKhF,QAAQgF;AAC3B,iBAASnL,IAAI,GAAGF,IAAIqL,MAAMpL,QAAQC,IAAIF,GAAGE,KAAK;AAC1C,cAAM2H,OAAOwD,MAAMnL,CAAD;AAClB,cAAMoS,uBAAuBzK,KAAKgC,SAAS0I,yCAAd;AAC7BF,6BAAmBzT,KAAKI,IAAIqT,kBAAkBC,oBAA3B;AAAA,QACtB;AACD,eAAOD;AAAAA,MACV;AAAA;;aAED,SAAsB,sBAAA;AAClB,YAAI,KAAK9L,OAAOtG,WAAW,GAAG;AAC1B,iBAAO,KAAKsG,OAAO,CAAZ,EAAeiM,mBAAf;AAAA,QACV,OAAM;AAEI,iBAAA,KAAKnM,QAAQ0L;AAAAA,QACvB;AAAA,MACJ;AAAA;;;MClIgBU;AAEjB,aAAAA,wBAAYrM,QAAQ;AAAA,sBAAA,MAAAqM,uBAAA;AACXpM,WAAAA,UAAUD;AACf,WAAKsM,aAAa,KAAK9L,eAAe+L;AACtC,WAAKC,2BAA2B,KAAKvM,QAAQwM,4BAAb;AAChC,WAAKC,yBAAyB,KAAKzM,QAAQ0M,0BAAb;AAAA,IACjC;;;WAED,SAAqB,MAAA;AACV,eAAA,KAAK1M,QAAQO;AAAAA,MACvB;AAAA;;aAED,SAAW,WAAA;AACP,YAAMoM,aAAa,KAAK3M,QAAQ4M,uBAAb;AACnB,YAAID,YAAY;AAENE,cAAAA,UAAU,IAAIT,wBAAuBO,WAAW3M,OAAtC;AAChB6M,kBAAQC,yBAAyB,KAAKvM,eAAeiB,IAArD;AAAA,QACH,OAAM;AACH,eAAKuL,cAAL;AACA,eAAKC,eAAL;AAAA,QACH;AAAA,MACJ;AAAA;;aAED,SAAgB,gBAAA;AACZ,YAAMxL,OAAO,KAAKjB,eAAeiB;AAC7BkB,YAAAA,IAAInB,UAAU0L,iBAAiBzL,MAAM,IAAjC;AACJmB,YAAAA,IAAIpB,UAAU0L,iBAAiBzL,MAAM,KAAjC;AACJQ,YAAAA,IAAIT,UAAUO,kBAAkBN,MAAM,IAAlC;AACJS,YAAAA,IAAIV,UAAUO,kBAAkBN,MAAM,KAAlC;AAERQ,aAAK,KAAKhC,QAAQkN;AAClBjL,aAAK,KAAKjC,QAAQmN;AAElB3L,aAAK4L,gBAAL;AAEA5L,aAAK6L,UAAU3K,GAAGC,GAAGX,GAAGC,CAAxB;AAAA,MACH;AAAA;;aAED,SAAiB,iBAAA;AACb,YAAM+C,QAAQ,KAAKhF,QAAQgF;AAC3B,iBAASnL,IAAI,GAAGF,IAAIqL,MAAMpL,QAAQC,IAAIF,GAAGE,KAAK;AAC1C,cAAM2H,OAAOwD,MAAMnL,CAAD;AAClB,cAAMyT,aAAa,KAAKC,mBAAmB/L,IAAxB;AAGdgM,eAAAA,cAAchM,IAAnB;AAEI,cAAA,CAAC8L,YAAY;AACRG,iBAAAA,sBAAsBjM,IAA3B;AAAA,UACH;AAAA,QACJ;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,mBAAmBA,MAAM;AACrB,YAAIA,KAAKkM,WAAW,GAAG;AACnB,cAAIlM,KAAK6B,iBAAiB;AACtB,gBAAMtD,SAASyB,KAAKgB,MAAMxC;AAEpB2N,gBAAAA,gCAAiCnM,KAAKQ,MAAMR,KAAKE,OAAOM,KAAKR,KAAKS,MAAMT,KAAKE,OAAOO;AAC1F,gBAAI0L,+BAA+B;AAE/B,qBAAO;AAAA,YACV,OAAM;AACH,kBAAMvN,gBAAgBL,OAAOK;AAC7BL,qBAAO6N,sBAAsB7N,OAAO2L,YAApC;AACA3L,qBAAO8N,uBAAuBzN,aAA9B;AAAA,YACH;AAAA,UACJ;AAAA,QACJ;AACD,eAAO;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,yBAAyBoB,MAAM;AACtBgM,aAAAA,cAAchM,IAAnB;AACKiM,aAAAA,sBAAsBjM,IAA3B;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,cAAcA,MAAM;AACZ,YAAA,KAAK6K,YAAY;AACZyB,eAAAA,0BAA0BtM,IAA/B;AAAA,QACH;AAEGkB,YAAAA,IAAInB,UAAU0L,iBAAiBzL,MAAM,IAAjC;AACJmB,YAAAA,IAAIpB,UAAU0L,iBAAiBzL,MAAM,KAAjC;AACJQ,YAAAA,IAAIT,UAAUO,kBAAkBN,MAAM,IAAlC;AACJS,YAAAA,IAAIV,UAAUO,kBAAkBN,MAAM,KAAlC;AAERkB,aAAK,KAAK6J;AACV5J,aAAK,KAAK8J;AAEV,YAAMzI,OAAOxC,KAAKwC;AAClB,YAAIA,MAAM;AACNhC,eAAKR,KAAKgB,MAAMxC,QAAQkN,sBAAnB;AACLjL,eAAKT,KAAKgB,MAAMxC,QAAQmN,oBAAnB;AAAA,QACR;AAED,YAAM3J,WAAWhC,KAAKgC;AACtB,YAAIA,UAAU;AACVd,eAAKc,SAASuK;AACdpL,eAAKa,SAASwK;QACjB;AAEDxM,aAAK4L,gBAAL;AACA5L,aAAK6L,UAAU3K,GAAGC,GAAGX,GAAGC,CAAxB;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,sBAAsBT,MAAM;AACxB,YAAMwC,OAAOxC,KAAKgB;AAClB,YAAIwB,MAAM;AACA6I,cAAAA,UAAU,IAAIT,wBAAuBpI,KAAKhE,OAAhC;AAChB6M,kBAAQG,eAAR;AAAA,QACH;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,0BAA0BxL,MAAM;AACxBA,YAAAA,KAAKyM,aAAazM,KAAK0M,WAAW,GAAG;AACrC1M,eAAKyM,YAAY;AAAA,QACpB;AACD,YAAI,CAACzM,KAAKyM,WAAW;AACjB,cAAME,SAAU3M,KAAKgC,SAAS4K,sBAAd,IAAwC5M,KAAKgC,SAASoD;AACtE,cAAMyH,cAAc,KAAKrO,QAAQ0L,eAAeyC;AAChD3M,eAAKgC,SAASmD,sBAAsB0H,WAApC;AACA,cAAI7M,KAAK0M,WAAW,GAAG;AACnB1M,iBAAKyM,YAAY;AAAA,UACpB;AAAA,QACJ;AAAA,MACJ;AAAA;;;MC1HgBK;AAEjB,aAAAA,YAAYC,eAAe;AAAA,sBAAA,MAAAD,WAAA;AAClB/N,WAAAA,iBAAiBgO;AAEtB,WAAKC,gBAAgB,IAAI/D,aAAa,IAAjB;AAEhBgE,WAAAA,oBAAoB;AACpBC,WAAAA,qBAAqB;AAErBC,WAAAA,iCAAiC;AACjCC,WAAAA,kCAAkC;AAElCC,WAAAA,UAAU;AAAA,IAClB;;;WAED,SAAa,MAAA;AACT,eAAO,KAAKA;AAAAA,MACf;AAAA;;WAED,SAAa,MAAA;AACF,eAAA,KAAKrN,KAAKkM;AAAAA,MACpB;AAAA;;aAED,SAAa,aAAA;AACT,YAAMoB,YAAa,KAAKtN,KAAKK,eAAe;AAC5C,YAAIiN,WAAW;AAEX,eAAKC,qBAAL;AAAA,QACH,OAAM;AACH,eAAKvD,iBAAL;AAAA,QACH;AACD,aAAKwD,iBAAL;AAAA,MACH;AAAA;;aAED,SAAmB,mBAAA;AACX,YAAA,KAAKtB,QAAQ;AACb,eAAKuB,yBAAL;AAAA,QACH,OAAM;AACH,eAAKC,kCAAL;AAAA,QACH;AAAA,MACJ;AAAA;;aAED,SAA2B,2BAAA;AACvB,aAAKC,qBAAL;AACA,aAAKC,YAAL;AACA,aAAKC,oBAAL;AAAA,MACH;AAAA;;aAED,SAAsB,sBAAA;AACbV,aAAAA,iCAAiC,KAAKjD;AACtCkD,aAAAA,kCAAkC,KAAKxO;AAAAA,MAC/C;AAAA;;aAED,SAAoC,oCAAA;AAC1BkP,YAAAA,uBAAwB,KAAK9N,KAAKU,SAAS,KAAKV,KAAKc;AAC3D,YAAIgN,sBAAsB;AAEjB9N,eAAAA,KAAK+N;AACV,eAAKN,yBAAL;AAAA,QACH,OAAM;AACEvD,eAAAA,eAAe,KAAKiD;AACpBvO,eAAAA,gBAAgB,KAAKwO;AAAAA,QAC7B;AAAA,MACJ;AAAA;;aAED,SAAmB,mBAAA;AACf,YAAM/B,UAAU,IAAIT,uBAAuB,IAA3B;AAChBS,gBAAQ2C,SAAR;AAAA,MACH;AAAA;;aAED,SAAuB,uBAAA;AAGbpP,YAAAA,gBAAgB,KAAKA;AAC3B,aAAKqP,gBAAL;AACK5B,aAAAA,uBAAuBzN,aAA5B;AAAA,MACH;AAAA;;aAED,SAAuB,uBAAA;AACnB,YAAI,KAAKoB,KAAKyB,qBAAqB;AAC/B,eAAKzB,KAAKgC,SAASiI;QACtB,OAAM;AACH,eAAKC,eAAe,KAAKgE;AACzB,eAAKtP,gBAAgB,KAAKuP;QAC7B;AACIlB,aAAAA,oBAAoB;AACpBC,aAAAA,qBAAqB;AACrBG,aAAAA,UAAU;AAAA,MAClB;AAAA;;aAED,SAAc,cAAA;AACV,aAAKY,gBAAL;AACA,aAAKG,iBAAL;AAAA,MACH;AAAA;;aAKD,SAAkB,kBAAA;AACd,aAAKC,aAAL;AACA,aAAKC,2BAAL;AAAA,MACH;AAAA;;aAED,SAAe,eAAA;AACNtB,aAAAA,cAAcuB;MACtB;AAAA;;WAED,SAAa,MAAA;AACF,eAAA,KAAKvB,cAAclO;AAAAA,MAC7B;AAAA;;aAED,SAA6B,6BAAA;AACrB,YAAA,CAAC,KAAKmO,mBAAmB;AACrB,cAAA,KAAK1C,2BAA2B;AAChC,iBAAKL,eAAe,KAAK8C,cAAcwB;AAAAA,UAC1C;AAAA,QACJ;AAAA,MACJ;AAAA;;aAKD,SAAmB,mBAAA;AACf,YAAMpP,UAAU,IAAId,eAAe,IAAnB;AAChBc,gBAAQqP,KAAR;AACA,aAAKhQ,sBAAsBW,QAAQsP;AACnC,aAAKC,4BAAL;AACAvP,gBAAQM,MAAR;AAAA,MACH;AAAA;;aAED,SAA8B,8BAAA;AACtB,YAAA,CAAC,KAAKwN,oBAAoB;AACtB,cAAA,KAAKxE,4BAA4B;AAC5B9J,iBAAAA,gBAAgB,KAAKH;AAAAA,UAC7B;AAAA,QACJ;AAAA,MACJ;AAAA;;aAED,SAAa,aAAA;AACF,eAAA,KAAKM,eAAewK;AAAAA,MAC9B;AAAA;;MAED,OAAA,SAAA,oBAAoBtJ,YAAY;AAC5B,YAAI,KAAKmC,gBAAgBnC,YAAY;AAC1B,iBAAA,KAAKsK;QACf,OAAM;AACI,iBAAA,KAAK7B;QACf;AAAA,MACJ;AAAA;;aAED,SAA0B,0BAAA;AACf,eAAA,CAAC,KAAKG,WAAL,KAAqB,CAAC,KAAK+F,uBAAL;AAAA,MACjC;AAAA;;aAED,SAA2B,2BAAA;AAChB,eAAA,CAAC,KAAKC;MAChB;AAAA;;aAED,SAAyB,yBAAA;AACd,eAAA,CAAC9O,UAAU+O,eAAe,KAAK9O,MAAM,KAAKoC,WAAzC;AAAA,MACX;AAAA;;aAED,SAA0B,0BAAA;AACf,eAAA,CAACrC,UAAU+O,eAAe,KAAK9O,MAAM,CAAC,KAAKoC,WAA1C;AAAA,MACX;AAAA;;MAED,OAAA,SAAA,eAAenC,YAAY;AACvB,YAAI,KAAKmC,gBAAgBnC,YAAY;AAC1B,iBAAA,KAAK6D;QACf,OAAM;AACI,iBAAA,KAAKuF;QACf;AAAA,MACJ;AAAA;;aAED,SAAsB,sBAAA;AACX,eAAA,KAAK2D,cAAczE;AAAAA,MAC7B;AAAA;;aAED,SAAuB,uBAAA;AACZ,eAAA,KAAKyE,cAAcxC;AAAAA,MAC7B;AAAA;;MAED,OAAA,SAAA,eAAenJ,MAAM;AACjB,YAAI,KAAK6I,iBAAiB7I,MAAM;AAC5B,cAAI,KAAK6K,SAAS,GAAG;AACZE,iBAAAA,sBAAsB/K,IAA3B;AAAA,UACH,OAAM;AACC,gBAAA,KAAK0N,kCAAkC;AAClC7E,mBAAAA,eAAe7I;AACpB,mBAAKsN,4BAAL;AAAA,YACH,OAAM;AAEE3O,mBAAAA,KAAK+N;AACL3B,mBAAAA,sBAAsB/K,IAA3B;AAAA,YACH;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,+BAA+BA,MAAM;AACjC,YAAM2N,sBAAuB3N,SAAS,KAAK4N;AAC3C,YAAID,qBAAqB;AACrB,iBAAO;AAAA,QACV;AACD,YAAME,qBAAqB,CAAC,KAAKxG;AACjC,YAAIwG,oBAAoB;AAGpB,iBAAO;AAAA,QACV;AACD,eAAO;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,sBAAsB7N,MAAM;AACxB,YAAM8N,cAAe9N,OAAO,KAAK6I;AAC5BmD,aAAAA,UAAU8B;AAEVjF,aAAAA,eAAe7I;AAEf4L,aAAAA,oBAAoB;AACzB,aAAKW,YAAL;AACKX,aAAAA,oBAAoB;AAAA,MAC5B;AAAA;;MAED,OAAA,SAAA,gBAAgB5L,MAAM;AAClB,YAAI,KAAKzC,kBAAkByC,MAAM;AAC7B,cAAI,KAAK6K,SAAS,GAAG;AACZG,iBAAAA,uBAAuBhL,IAA5B;AAAA,UACH,OAAM;AACEzC,iBAAAA,gBAAgByC;AAAAA,UACxB;AAAA,QACJ;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,uBAAuBA,MAAM;AACpBzC,aAAAA,gBAAgByC;AAEhB6L,aAAAA,qBAAqB;AAC1B,aAAKkB,iBAAL;AACKlB,aAAAA,qBAAqB;AAAA,MAC7B;AAAA;;WAED,SAAyB,MAAA;AACrB,eAAO,KAAK9K,cAAc,KAAKpC,KAAKE,OAAOM,IAAI,KAAKR,KAAKE,OAAOO;AAAAA,MACnE;AAAA;;WAED,SAA0B,MAAA;AACtB,eAAO,KAAK2B,cAAc,KAAKpC,KAAKE,OAAOO,IAAI,KAAKT,KAAKE,OAAOM;AAAAA,MACnE;AAAA;;aAED,SAAyB,yBAAA;AACrB,eAAO,KAAKR,KAAKyB,kBAAsB,IAAA,KAAKzB,KAAKgC,SAASoN,MAAM;AAAA,MACnE;AAAA;;aAED,SAAwB,wBAAA;AACbrP,eAAAA,UAAUQ,gBAAgB,KAAKP,MAAM,IAArC;AAAA,MACV;AAAA;;aAED,SAAsB,sBAAA;AACXD,eAAAA,UAAUQ,gBAAgB,KAAKP,MAAM,KAArC;AAAA,MACV;AAAA;;aAED,SAA8B,8BAAA;AACnBD,eAAAA,UAAUsP,iBAAiB,KAAKrP,MAAM,IAAtC;AAAA,MACV;AAAA;;aAED,SAA4B,4BAAA;AACjBD,eAAAA,UAAUsP,iBAAiB,KAAKrP,MAAM,KAAtC;AAAA,MACV;AAAA;;aAED,SAAoB,oBAAA;AACTD,eAAAA,UAAUmC,eAAe,KAAKlC,MAAM,KAAKoC,WAAzC;AAAA,MACV;AAAA;;aAED,SAAqB,qBAAA;AACVrC,eAAAA,UAAUmC,eAAe,KAAKlC,MAAM,CAAC,KAAKoC,WAA1C;AAAA,MACV;AAAA;;WAED,SAAkB,MAAA;AACP,eAAA,KAAKrD,eAAeqD;AAAAA,MAC9B;AAAA;;WAED,SAAe,MAAA;AACJ,eAAA,KAAKrD,eAAe+L;AAAAA,MAC9B;AAAA;;WAED,SAAW,MAAA;AACA,eAAA,KAAK/L,eAAeiB;AAAAA,MAC9B;AAAA;;WAED,SAAY,MAAA;AACD,eAAA,KAAKA,KAAKwD;AAAAA,MACpB;AAAA;;WAED,SAAuB,MAAA;AACnB,eAAO,KAAKyJ;AAAAA,MACf;AAAA;;WAED,SAAwB,MAAA;AACpB,eAAO,KAAKC;AAAAA,MACf;AAAA;;WAED,SAAoB,MAAA;AACT,eAAA,KAAK1J,MAAMpL;AAAAA,MACrB;AAAA;;WAED,SAAmB,MAAA;AACR2H,eAAAA,UAAUO,kBAAkB,KAAKN,MAAM,KAAKoC,WAA5C;AAAA;MAOX,KAAA,SAAAkN,KAAiBjY,GAAG;AAChB0I,kBAAUwC,kBAAkB,KAAKvC,MAAM,KAAKoC,aAAa/K,CAAzD;AAAA,MACH;AAAA;;WAND,SAAoB,MAAA;AACT0I,eAAAA,UAAUO,kBAAkB,KAAKN,MAAM,CAAC,KAAKoC,WAA7C;AAAA;MAOX,KAAA,SAAAkN,KAAkBjY,GAAG;AACjB0I,kBAAUwC,kBAAkB,KAAKvC,MAAM,CAAC,KAAKoC,aAAa/K,CAA1D;AAAA,MACH;AAAA;;;MCtUgBkY;AAGjB,aAAAA,eAAYvP,MAAM;AAAA,sBAAA,MAAAuP,cAAA;AACTC,WAAAA,QAAQxP;AAEb,WAAKxB,UAAU,IAAIiR,WAAO,IAAX;AACVrN,WAAAA,cAAc;AACd0I,WAAAA,WAAW;AACX4E,WAAAA,QAAQ;AACRC,WAAAA,cAAc;AACdC,WAAAA,kBAAkB;AAClBC,WAAAA,gBAAgB;AAEhBC,WAAAA,eAAe;AACfC,WAAAA,cAAc;AACdC,WAAAA,gBAAgB;AAChBC,WAAAA,iBAAiB;AAAA,IACzB;;;WAED,SAAW,MAAA;AACP,eAAO,KAAKT;AAAAA,MACf;AAAA;;aAED,SAAqB,qBAAA;AACZA,aAAAA,MAAMU;MACd;AAAA;;aAED,SAAmB,mBAAA;AACVV,aAAAA,MAAMW;MACd;AAAA;;WAED,SAAgB,MAAA;AACZ,gBAAQ,KAAK/N,cAAc,QAAQ,aAAa,KAAK0I,WAAW,aAAa;AAAA;MAGjF,KAAA,SAAAwE,KAAcc,GAAG;AACb,YAAI,KAAKC,cAAcD;AAAG;AAErBhO,aAAAA,cAAegO,MAAM,SAASA,MAAM;AACpCtF,aAAAA,WAAYsF,MAAM,iBAAiBA,MAAM;AAE9C,aAAKE,iBAAL;AAAA,MACH;AAAA;;WAOD,SAAW,MAAA;AACP,eAAO,KAAKZ;AAAAA;MANhB,KAAA,SAAAJ,KAASjY,GAAG;AACHqY,aAAAA,QAAQrY;AACb,aAAKiZ,iBAAL;AAAA,MACH;AAAA;;WAMD,SAAiB,MAAA;AACb,eAAO,KAAKX;AAAAA;MAGhB,KAAA,SAAAL,KAAejY,GAAG;AACd,YAAI,KAAKsY,gBAAgBtY;AAAG;AACxBkY,YAAAA,eAAcgB,YAAY7W,QAAQrC,CAAlC,MAAyC,IAAI;AAC7C,gBAAM,IAAIgH,MAAM,kCAAkCkR,eAAcgB,YAAYC,KAAK,GAA/B,CAA5C;AAAA,QACT;AACIb,aAAAA,cAActY;AAEnB,aAAKiZ,iBAAL;AAAA,MACH;AAAA;;WAED,SAAmB,MAAA;AACf,eAAO,KAAKT;AAAAA;MAGhB,KAAA,SAAAP,KAAiBjY,GAAG;AAChB,YAAI,KAAKwY,kBAAkBxY;AAAG;AAC1BkY,YAAAA,eAAckB,cAAc/W,QAAQrC,CAApC,MAA2C,IAAI;AAC/C,gBAAM,IAAIgH,MAAM,oCAAoCkR,eAAckB,cAAcD,KAAK,GAAjC,CAA9C;AAAA,QACT;AACIX,aAAAA,gBAAgBxY;AAErB,aAAKiZ,iBAAL;AAAA,MACH;AAAA;;WAED,SAAqB,MAAA;AACjB,eAAO,KAAKV;AAAAA;MAGhB,KAAA,SAAAN,KAAmBjY,GAAG;AAClB,YAAI,KAAKuY,oBAAoBvY;AAAG;AAE5BkY,YAAAA,eAAcmB,gBAAgBhX,QAAQrC,CAAtC,MAA6C,IAAI;AACjD,gBAAM,IAAIgH,MAAM,sCAAsCkR,eAAcmB,gBAAgBF,KAAK,GAAnC,CAAhD;AAAA,QACT;AACIZ,aAAAA,kBAAkBvY;AAEvB,aAAKiZ,iBAAL;AAAA,MACH;AAAA;;WASD,SAAc,MAAA;AACV,eAAO,KAAK7N;AAAAA;MARhB,KAAA,SAAA6M,KAAYjY,GAAG;AACNoL,aAAAA,cAAcpL;AACdqL,aAAAA,aAAarL;AACbsL,aAAAA,eAAetL;AACfuL,aAAAA,gBAAgBvL;AAAAA,MACxB;AAAA;;WAWD,SAAkB,MAAA;AACd,eAAO,KAAKyY;AAAAA;MANhB,KAAA,SAAAR,KAAgBjY,GAAG;AACVyY,aAAAA,eAAezY;AACpB,aAAKsZ,mBAAL;AAAA,MACH;AAAA;;WAWD,SAAiB,MAAA;AACb,eAAO,KAAKZ;AAAAA;MANhB,KAAA,SAAAT,KAAejY,GAAG;AACT0Y,aAAAA,cAAc1Y;AACnB,aAAKsZ,mBAAL;AAAA,MACH;AAAA;;WAWD,SAAmB,MAAA;AACf,eAAO,KAAKX;AAAAA;MANhB,KAAA,SAAAV,KAAiBjY,GAAG;AACX2Y,aAAAA,gBAAgB3Y;AACrB,aAAKsZ,mBAAL;AAAA,MACH;AAAA;;WAWD,SAAoB,MAAA;AAChB,eAAO,KAAKV;AAAAA;MANhB,KAAA,SAAAX,KAAkBjY,GAAG;AACZ4Y,aAAAA,iBAAiB5Y;AACtB,aAAKsZ,mBAAL;AAAA,MACH;AAAA;;MAMD,OAAA,SAAA,MAAMzT,UAAU;AACZF,aAAK4T,YAAY,MAAM1T,QAAvB;AAAA,MACH;AAAA;;;AAILqS,gBAAcgB,cAAc,CAAC,cAAc,YAAY,UAAU,SAArC;AAC5BhB,gBAAckB,gBAAgB,CAAC,cAAc,YAAY,UAAU,iBAAiB,gBAAgB,gBAAgB,SAAtF;AAC9BlB,gBAAcmB,kBAAkB,CAAC,cAAc,YAAY,UAAU,iBAAiB,gBAAgB,cAAtE;MCvJXG;AAEjB,aAAAA,UAAY7Q,MAAM;AAAA,sBAAA,MAAA6Q,SAAA;AACTC,WAAAA,OAAO;AACPtB,WAAAA,QAAQxP;AACR+Q,WAAAA,QAAQ;AACb,WAAKC,UAAUH,UAASI;AACnBC,WAAAA,aAAaC;AACbC,WAAAA,YAAY;AACZC,WAAAA,aAAa;AACbC,WAAAA,YAAY;AACZC,WAAAA,aAAa;AAEbC,WAAAA,cAAc;AACdC,WAAAA,aAAa;AACbC,WAAAA,eAAe;AACfC,WAAAA,gBAAgB;AAChBlF,WAAAA,YAAY;AAAA,IACpB;;;WAED,SAAW,MAAA;AACP,eAAO,KAAK+C;AAAAA,MACf;AAAA;;WAED,SAAW,MAAA;AACP,eAAO,KAAKuB;AAAAA;MAGhB,KAAA,SAAAzB,KAASjY,GAAG;AACR,YAAI,KAAK0Z,UAAU1Z;AAAG;AAEtB,aAAK0Z,QAAQa,SAASva,CAAD,KAAO;AAE5B,aAAKwa,SAAL;AAAA,MACH;AAAA;;WAED,SAAa,MAAA;AACT,YAAI,KAAKb,YAAYH,UAASI,aAAa;AAChC,iBAAA,KAAKa;QACf;AACD,eAAO,KAAKd;AAAAA;MAYhB,KAAA,SAAA1B,KAAWjY,GAAG;AACV,YAAI,KAAK2Z,YAAY3Z;AAAG;AAExB,aAAK2Z,UAAUY,SAASva,CAAD,KAAO;AAE9B,aAAKwa,SAAL;AAAA,MACH;AAAA;;aAfD,SAAoB,oBAAA;AAChB,YAAI,KAAK7R,KAAK6B,iBAAiB;AAC3B,iBAAO;AAAA,QACV,OAAM;AAEH,iBAAO;AAAA,QACV;AAAA,MACJ;AAAA;;WAUD,SAAgB,MAAA;AACZ,eAAO,KAAKqP;AAAAA;MAGhB,KAAA,SAAA5B,KAAcjY,GAAG;AACb,YAAI,KAAK6Z,eAAe7Z;AAAG;AAEvBA,YAAAA,MAAM8Z,QAAW;AACZD,eAAAA,aAAaC;AAAAA,QACrB,OAAM;AACC5B,cAAAA,cAAcgB,YAAY7W,QAAQrC,CAAlC,MAAyC,IAAI;AAC7C,kBAAM,IAAIgH,MAAM,iCAAiCkR,cAAcgB,YAAYC,KAAK,GAA/B,CAA3C;AAAA,UACT;AACIU,eAAAA,aAAa7Z;AAAAA,QACrB;AAED,aAAKwa,SAAL;AAAA,MACH;AAAA;;WAED,SAAe,MAAA;AACX,eAAO,KAAKT;AAAAA;MAGhB,KAAA,SAAA9B,KAAajY,GAAG;AACP+Z,aAAAA,YAAYra,KAAKI,IAAI,GAAGE,CAAZ;AACjB,aAAKmY,MAAMU,kBAAkB,MAAM,KAAnC;AAAA,MACH;AAAA;;WAED,SAAgB,MAAA;AACZ,eAAO,KAAKmB;AAAAA;MAGhB,KAAA,SAAA/B,KAAcjY,GAAG;AACRga,aAAAA,aAAata,KAAKI,IAAI,GAAGE,CAAZ;AAClB,aAAKmY,MAAMU,kBAAkB,OAAO,IAApC;AAAA,MACH;AAAA;;WAED,SAAe,MAAA;AACX,eAAO,KAAKoB;AAAAA;MAGhB,KAAA,SAAAhC,KAAajY,GAAG;AACPia,aAAAA,YAAYva,KAAKI,IAAI,GAAGE,CAAZ;AACjB,aAAKmY,MAAMU,kBAAkB,MAAM,KAAnC;AAAA,MACH;AAAA;;WAED,SAAgB,MAAA;AACZ,eAAO,KAAKqB;AAAAA;MAGhB,KAAA,SAAAjC,KAAcjY,GAAG;AACRka,aAAAA,aAAaxa,KAAKI,IAAI,GAAGE,CAAZ;AAClB,aAAKmY,MAAMU,kBAAkB,OAAO,IAApC;AAAA,MACH;AAAA;;WAaD,SAAa,MAAA;AACT,eAAO,KAAKrN;AAAAA;MARhB,KAAA,SAAAyM,KAAWjY,GAAG;AACLwL,aAAAA,aAAaxL;AACbyL,aAAAA,YAAYzL;AACZ0L,aAAAA,cAAc1L;AACd2L,aAAAA,eAAe3L;AAAAA,MACvB;AAAA;;WAWD,SAAiB,MAAA;AACb,eAAO,KAAKma;AAAAA;MANhB,KAAA,SAAAlC,KAAejY,GAAG;AACTma,aAAAA,cAAcna;AACnB,aAAKwa,SAAL;AAAA,MACH;AAAA;;WAWD,SAAgB,MAAA;AACZ,eAAO,KAAKJ;AAAAA;MANhB,KAAA,SAAAnC,KAAcjY,GAAG;AACRoa,aAAAA,aAAapa;AAClB,aAAKwa,SAAL;AAAA,MACH;AAAA;;WAWD,SAAkB,MAAA;AACd,eAAO,KAAKH;AAAAA;MANhB,KAAA,SAAApC,KAAgBjY,GAAG;AACVqa,aAAAA,eAAera;AACpB,aAAKwa,SAAL;AAAA,MACH;AAAA;;WAWD,SAAmB,MAAA;AACf,eAAO,KAAKF;AAAAA;MANhB,KAAA,SAAArC,KAAiBjY,GAAG;AACXsa,aAAAA,gBAAgBta;AACrB,aAAKwa,SAAL;AAAA,MACH;AAAA;;aAMD,SAAW,WAAA;AACP,YAAI,KAAKzC;AAAK,eAAKA,IAAIkB,iBAAT;AAAA,MACjB;AAAA;;WAMD,SAAU,MAAA;AACN,eAAO,KAAKQ;AAAAA;MALhB,KAAA,SAAAxB,KAAQjY,GAAG;AACFyZ,aAAAA,OAAOzZ;AAAAA,MACf;AAAA;;MAMD,OAAA,SAAA,MAAM6F,UAAU;AACZF,aAAK4T,YAAY,MAAM1T,QAAvB;AAAA,MACH;AAAA;;aAED,SAAmB,mBAAA;AACf,aAAK6U,+BAAL;AACA,aAAKC,6BAAL;AAAA,MACH;AAAA;;aAED,SAA4B,4BAAA;AACxB,YAAI,KAAK5C,IAAIhN,aAAa;AACtB,eAAK4P,6BAAL;AAAA,QACH,OAAM;AACH,eAAKD,+BAAL;AAAA,QACH;AAAA,MACJ;AAAA;;aAED,SAAiC,iCAAA;AACzBvR,YAAAA,IAAIT,UAAUmC,eAAe,KAAKlC,MAAM,IAApC;AACJ,YAAA,KAAKoR,WAAW;AAChB5Q,cAAIzJ,KAAKI,IAAI,KAAKia,WAAW5Q,CAAzB;AAAA,QACP;AACG,YAAA,KAAK8Q,WAAW;AAChB9Q,cAAIzJ,KAAKK,IAAI,KAAKka,WAAW9Q,CAAzB;AAAA,QACP;AACDT,kBAAUwC,kBAAkB,KAAKvC,MAAM,MAAMQ,CAA7C;AAAA,MACH;AAAA;;aAED,SAA+B,+BAAA;AACvBC,YAAAA,IAAIV,UAAUmC,eAAe,KAAKlC,MAAM,KAApC;AACJ,YAAA,KAAKqR,YAAY;AACjB5Q,cAAI1J,KAAKI,IAAI,KAAKka,YAAY5Q,CAA1B;AAAA,QACP;AACG,YAAA,KAAK8Q,YAAY;AACjB9Q,cAAI1J,KAAKK,IAAI,KAAKma,YAAY9Q,CAA1B;AAAA,QACP;AACDV,kBAAUwC,kBAAkB,KAAKvC,MAAM,OAAOS,CAA9C;AAAA,MACH;AAAA;;aAED,SAA8B,8BAAA;AACnB,eAAA,KAAKkB,mBAAmB,CAAC,KAAKyN,IAAIhN,WAAlC;AAAA,MACV;AAAA;;aAED,SAA8B,8BAAA;AACnB,eAAA,KAAK6P,mBAAmB,CAAC,KAAK7C,IAAIhN,WAAlC;AAAA,MACV;AAAA;;aAED,SAA6B,6BAAA;AACzB,eAAO,KAAK6P,mBAAmB,KAAK7C,IAAIhN,WAAjC;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,mBAAmBnC,YAAY;AAC3B,YAAIA,YAAY;AACZ,iBAAO,KAAKmR;AAAAA,QACf,OAAM;AACH,iBAAO,KAAKC;AAAAA,QACf;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,mBAAmBpR,YAAY;AAC3B,YAAIA,YAAY;AACZ,iBAAO,KAAKqR;AAAAA,QACf,OAAM;AACH,iBAAO,KAAKC;AAAAA,QACf;AAAA,MACJ;AAAA;;aAED,SAAsB,sBAAA;AACXxR,eAAAA,UAAU+B,eAAe,KAAK9B,MAAM,KAAKoP,IAAIhN,WAA7C;AAAA,MACV;AAAA;;aAED,SAAuB,uBAAA;AACnB,eAAOrC,UAAU+B,eAAe,KAAK9B,MAAM,CAAC,KAAKoP,IAAIhN,WAA9C;AAAA,MACV;AAAA;;aAED,SAAyB,yBAAA;AACdrC,eAAAA,UAAUO,kBAAkB,KAAKN,MAAM,KAAKoP,IAAIhN,WAAhD;AAAA,MACV;AAAA;;aAED,SAAwB,wBAAA;AACbrC,eAAAA,UAAU0L,iBAAiB,KAAKzL,MAAM,KAAKoP,IAAIhN,WAA/C;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,sBAAsBhB,KAAK;AACvB,eAAOrB,UAAUmS,iBAAiB,KAAKlS,MAAM,KAAKoP,IAAIhN,aAAahB,GAA5D;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,uBAAuBA,KAAK;AACxB,eAAOrB,UAAUmS,iBAAiB,KAAKlS,MAAM,CAAC,KAAKoP,IAAIhN,aAAahB,GAA7D;AAAA,MACV;AAAA;;aAED,SAA0B,0BAAA;AACtB,eAAOrB,UAAUO,kBAAkB,KAAKN,MAAM,CAAC,KAAKoP,IAAIhN,WAAjD;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,iBAAiBf,MAAM;AACnB,eAAOtB,UAAUoS,WAAW,KAAKnS,MAAM,CAAC,KAAKoP,IAAIhN,aAAaf,IAAvD;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,gBAAgBA,MAAM;AAClB,eAAOtB,UAAUoS,WAAW,KAAKnS,MAAM,KAAKoP,IAAIhN,aAAaf,IAAtD;AAAA,MACV;AAAA;;aAED,SAAsB,sBAAA;AACXtB,eAAAA,UAAUQ,gBAAgB,KAAKP,MAAM,KAAKoP,IAAIhN,WAA9C;AAAA,MACV;AAAA;;aAED,SAAuB,uBAAA;AACnB,eAAOrC,UAAUQ,gBAAgB,KAAKP,MAAM,CAAC,KAAKoP,IAAIhN,WAA/C;AAAA,MACV;AAAA;;aAED,SAAqB,qBAAA;AACVrC,eAAAA,UAAUqS,eAAe,KAAKpS,MAAM,KAAKoP,IAAIhN,WAA7C;AAAA,MACV;AAAA;;aAED,SAAsB,sBAAA;AAClB,eAAOrC,UAAUqS,eAAe,KAAKpS,MAAM,CAAC,KAAKoP,IAAIhN,WAA9C;AAAA,MACV;AAAA;;aAED,SAA6B,6BAAA;AAClBrC,eAAAA,UAAUsS,gBAAgB,KAAKrS,MAAM,IAArC;AAAA,MACV;AAAA;;aAED,SAA2B,2BAAA;AAChBD,eAAAA,UAAUsS,gBAAgB,KAAKrS,MAAM,KAArC;AAAA,MACV;AAAA;;aAED,SAA0C,0CAAA;AAC/B,eAAA,KAAK8D,wBAAwB,KAAKwO,wBAAwB,KAAKC;MACzE;AAAA;;aAED,SAA2C,2CAAA;AAChC,eAAA,KAAKlJ,yBAAyB,KAAKvC,yBAAyB,KAAKD;MAC3E;AAAA;;aAED,SAA6C,6CAAA;AAClC,eAAA,KAAK9C,2BAA2B,KAAKuO,wBAAwB,KAAKC;MAC5E;AAAA;;aAED,SAA8C,8CAAA;AACnC,eAAA,KAAKC,4BAA4B,KAAK1L,yBAAyB,KAAKD;MAC9E;AAAA;;aAED,SAAyB,yBAAA;AACrB,eAAO,CAAC9G,UAAU+O,eAAe,KAAK9O,MAAM,CAAC,KAAKoP,IAAIhN,WAA9C;AAAA,MACX;AAAA;;aAED,SAAuB,uBAAA;AACnB,eAAO,CAAC,EAAE,KAAKgN,IAAIhN,cAAc,KAAKpC,KAAKc,QAAQ,KAAKd,KAAKU;AAAAA,MAChE;AAAA;;;AAKLmQ,WAASI,cAAc;MCzUFwB;AAEjB,aAAAA,YAAYvS,QAAQ;AAAA,sBAAA,MAAAuS,WAAA;AACXC,WAAAA,UAAUxS;AAQVwM,WAAAA,UAAU;AAEViG,WAAAA,WAAW;AAEXzR,WAAAA,IAAI;AACJC,WAAAA,IAAI;AACJX,WAAAA,IAAI;AACJC,WAAAA,IAAI;AAEJmS,WAAAA,aAAa;AACbC,WAAAA,aAAa;AACbC,WAAAA,iBAAiB;AACjBC,WAAAA,kBAAkB;AAElB/R,WAAAA,QAAQ;AACRU,WAAAA,YAAY;AACZsR,WAAAA,oBAAoB;AAEpBC,WAAAA,SAAS;AAAA,IACjB;;;WAED,SAAiB,MAAA;AACN,eAAA,KAAKzQ,OAAO,KAAKA,KAAKhE,UAAU;AAAA,MAC1C;AAAA;;aAED,SAAiB,iBAAA;AACb,YAAI,KAAKqD,cAAL,KAAwB,KAAKqR,UAAL,GAAkB;AACrCnJ,eAAAA,WAAWoJ;QACnB;AAAA,MACJ;AAAA;;WAED,SAAa,MAAA;AACT,eAAO,KAAKT;AAAAA,MACf;AAAA;;WAED,SAAW,MAAA;AACP,eAAO,KAAK1R;AAAAA;MAGhB,KAAA,SAAAsO,KAASjY,GAAG;AACJ,YAAA,CAACA,GAAG;AACA,cAAA,KAAKwK,iBAAiB;AACtB,iBAAKuR,aAAL;AAAA,UACH;AAAA,QACJ,OAAM;AACH,cAAI,CAAC,KAAKvR,iBAAiB;AACvB,iBAAKwR,YAAL;AAAA,UACH;AACD,eAAKrS,MAAMsS,MAAMjc,CAAjB;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAe,MAAA;AACP,YAAA,KAAK2b,mBAAmB;AACxB,iBAAO;AAAA,QACV;AACD,aAAKO,gBAAL;AACA,eAAO,KAAK7R;AAAAA;MAGhB,KAAA,SAAA4N,KAAajY,GAAG;AACRA,YAAAA,MAAM,OAAO;AACT,cAAA,CAAC,KAAK2b,mBAAmB;AACnB7S,gBAAAA,SAAS,KAAKE;AACf2S,iBAAAA,oBAAoB;AACzB,iBAAKQ,cAAL;AACA,gBAAIrT,QAAQ;AACRA,qBAAOsT,qBAAP;AACAtT,qBAAOgQ,gBAAP;AAAA,YACH;AAAA,UACJ;AAAA,QACJ,OAAM;AACH,eAAKoD,gBAAL;AAEA,eAAK7R,UAAU4R,MAAMjc,CAArB;AAEI,cAAA,KAAK2b,mBAAmB;AACnBA,iBAAAA,oBAAoB;AACzB,iBAAKQ,cAAL;AACMrT,gBAAAA,UAAS,KAAKE;AACpB,gBAAIF,SAAQ;AACRA,sBAAOsT,qBAAP;AACAtT,sBAAOgQ,gBAAP;AAAA,YACH;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA;;aAED,SAAc,cAAA;AACV,aAAKnP,QAAQ,IAAIuO,cAAc,IAAlB;AACb,aAAKiE,cAAL;AACA,aAAKtD,kBAAL;AACA,aAAKwD,2BAAL;AAAA,MACH;AAAA;;aAED,SAAe,eAAA;AACX,aAAKxD,kBAAL;AACKlP,aAAAA,QAAQ;AACb,aAAKwS,cAAL;AACA,aAAKG,4BAAL;AAAA,MACH;AAAA;;aAED,SAA6B,6BAAA;AACzB,YAAMC,WAAW,KAAKlB,QAAQmB;AAC9B,YAAID,UAAU;AACV,mBAASvb,IAAI,GAAGF,IAAIyb,SAASxb,QAAQC,IAAIF,GAAGE,KAAK;AAC7C,gBAAMyb,QAAQF,SAASvb,CAAD;AACtByb,kBAAMvV,OAAOwV;UAChB;AAAA,QACJ;AAAA,MACJ;AAAA;;aAED,SAA8B,8BAAA;AAC1B,YAAMH,WAAW,KAAKlB,QAAQmB;AAC9B,YAAID,UAAU;AACV,mBAASvb,IAAI,GAAGF,IAAIyb,SAASxb,QAAQC,IAAIF,GAAGE,KAAK;AAC7C,gBAAMyb,QAAQF,SAASvb,CAAD;AACtByb,kBAAMvV,OAAOyV;UAChB;AAAA,QACJ;AAAA,MACJ;AAAA;;aAED,SAAkB,kBAAA;AACd,aAAKT,gBAAL;AACA,YAAMlT,aAAa,KAAKqS,QAAQuB,QAAQzV;AACxC,aAAKkD,UAAU0N,MAAM/O,WAAWW;AAChCX,mBAAW8P,gBAAX;AACA,aAAKqD,cAAL;AAAA,MACH;AAAA;;aAED,SAAmB,mBAAA;AACX,YAAA,KAAK9R,WAAW;AAChB,eAAKA,UAAU0N,MAAM;AAAA,QACxB;AAGD,aAAKoE,cAAL;AAGA,aAAKU,cAAL;AAAA,MACH;AAAA;;aAED,SAAgB,gBAAA;AACPhT,aAAAA,IAAI;AACJC,aAAAA,IAAI;AAAA,MACZ;AAAA;;aAED,SAAkB,kBAAA;AACV,YAAA,CAAC,KAAKO,WAAW;AACjB,eAAKA,YAAY,IAAImP,SAAS,IAAb;AAAA,QACpB;AAAA,MACJ;AAAA;;aAED,SAAgB,gBAAA;AACZ,YAAMsD,UAAU,KAAKC;AACrB,YAAI,KAAKzB,aAAawB,SAAS;AAC3B,cAAIA,SAAS;AACT,iBAAKE,QAAL;AAAA,UACH,OAAM;AACH,iBAAKC,SAAL;AAAA,UACH;AACI3B,eAAAA,WAAWwB;AAAAA,QACnB;AAAA,MACJ;AAAA;;aAED,SAAU,UAAA;AACN,aAAKI,oBAAL;AACK7B,aAAAA,QAAQ8B;MAChB;AAAA;;aAED,SAAW,WAAA;AACP,aAAKC,wBAAL;AACK/B,aAAAA,QAAQgC;MAChB;AAAA;;aAED,SAAY,YAAA;AACR,eAAO,KAAK7S,cAAL,KAAwB,KAAKJ,kBAAL;AAAA,MAClC;AAAA;;aAED,SAAgB,gBAAA;AACL,eAAA,KAAKT,UAAU;AAAA,MACzB;AAAA;;aAED,SAAoB,oBAAA;AACT,eAAA,KAAKX,eAAe;AAAA,MAC9B;AAAA;;aAED,SAA0B,0BAAA;AAChBH,YAAAA,SAAS,KAAKwS;AACpBxS,eAAOgB,IAAI,KAAK0R;AAChB1S,eAAOiB,IAAI,KAAK0R;AAChB3S,eAAOyU,cAAc,KAAK7B,gBAAgB,KAAKC,eAA/C;AAAA,MACH;AAAA;;aAED,SAAsB,sBAAA;AACZ7S,YAAAA,SAAS,KAAKwS;AACpB,aAAKE,aAAa1S,OAAO0U;AACzB,aAAK/B,aAAa3S,OAAO2U;AACzB,aAAK/B,iBAAiB5S,OAAO4U;AAC7B,aAAK/B,kBAAkB7S,OAAO6U;AAAAA,MACjC;AAAA;;aAED,SAAUC,UAAAA,MAAMC,IAAI;AAChB,YAAID,QAAQA,KAAKE,mBAAmB;AAChCF,eAAKxW,QAAQ2W;QAChB;AAED,YAAIF,MAAMA,GAAGC,mBAAmB;AAC5B,eAAKnB,gBAAL;AACAkB,aAAGzW,QAAQ2W;QACd;AACD,aAAK3B,cAAL;AAAA,MACH;AAAA;;WAED,SAAiB,MAAA;AACT,YAAA,KAAKR,mBAAmB;AACxB,iBAAO;AAAA,QACV;AAED,YAAM7S,SAAS,KAAKuS,QAAQuB;AAC5B,YAAI9T,UAAUA,OAAO+U,mBAAmB;AAC7B/U,iBAAAA,OAAO3B;AAAAA,QACjB;AACD,eAAO;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,WAAWnH,GAAG;AACJ8I,YAAAA,SAAS,KAAKE;AACpB,YAAIF,QAAQ;AACRA,iBAAOgV,iBAAP;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAY,MAAA;AACJ,YAAA,CAAC,KAAKlC,QAAQ;AACd,eAAKA,SAAS,KAAKmC;QACtB;AACD,eAAO,KAAKnC;AAAAA,MACf;AAAA;;aAED,SAAgB,gBAAA;AACNzP,YAAAA,QAAQ,CAAA;AACd,YAAMoQ,WAAW,KAAKlB,QAAQmB;AAC9B,YAAID,UAAU;AACV,mBAASvb,IAAI,GAAGF,IAAIyb,SAASxb,QAAQC,IAAIF,GAAGE,KAAK;AAC7C,gBAAM2H,OAAO4T,SAASvb,CAAD;AACjB2H,gBAAAA,KAAKqV,SAAS;AACd,kBAAIrV,KAAKsV,cAAc;AACnB9R,sBAAMxH,KAAKgE,KAAKzB,MAAhB;AAAA,cACH;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AACD,eAAOiF;AAAAA,MACV;AAAA;;aAED,SAAmB,mBAAA;AACf,aAAKiQ,qBAAL;AACA,aAAKtD,gBAAL;AAAA,MACH;AAAA;;aAED,SAAuB,uBAAA;AACd8C,aAAAA,SAAS;AAAA,MACjB;AAAA;;MAED,OAAA,SAAA,UAAU/R,GAAGC,GAAGX,GAAGC,GAAG;AACd8U,YAAAA,YAAY,KAAK3C;AACjB4C,YAAAA,YAAY,KAAK3C;AACjB,YAAA,KAAK4C,OAAO;AACZF,sBAAY,KAAKE,MAAM1V,UAAUa,6BAA6B,MAAM,IAA7C,CAAX;AAAA,QACf;AACG,YAAA,KAAK8U,OAAO;AACZF,sBAAY,KAAKE,MAAM3V,UAAUa,6BAA6B,MAAM,KAA7C,CAAX;AAAA,QACf;AAEG,YAAA,KAAKa,qBAAqB;AAC1B,eAAKvB,OAAO2L,UAAU3K,IAAIqU,WAAWpU,IAAIqU,WAAWhV,GAAGC,CAAvD;AAAA,QACH,OAAM;AAEEP,eAAAA,OAAO2L,UAAU0J,WAAWC,WAAWhV,GAAGC,CAA/C;AAAA,QACH;AAAA,MACJ;AAAA;;aAED,SAA2D,oBAAA;AAAzCkV,YAAAA,+EAAc;AAAMC,YAAAA,gFAAe;AACjD,aAAKC,cAAcF,aAAaC,YAAhC;AAAA,MACH;AAAA;;aAED,SAAkB,kBAAA;AACd,aAAKC,cAAL;AAAA,MACH;AAAA;;aAED,SAAc,cAAA;AACV,aAAKA,cAAL;AAAA,MACH;AAAA;;aAED,SAAY,YAAA;AACD,eAAA,KAAKnJ,UAAU;AAAA,MACzB;AAAA;;aAED,SAAyE,gBAAA;AAA3DoJ,YAAAA,uFAAsB;AAAOC,YAAAA,wFAAuB;AAC1D,YAAA,KAAKlU,iBAAiB;AACtB,cAAMtD,SAAS,KAAKyC,MAAMxC;AAG1BsX,gCAAsBA,uBAAuBvX,OAAO0C,oBAAoB,IAA3B;AAC7C8U,iCAAuBA,wBAAwBxX,OAAO0C,oBAAoB,KAA3B;AAAA,QAClD;AAED,YAAMiL,SAAS,KAAK4J,sBAAsB,IAAI,MAAMC,uBAAuB,IAAI;AAC/E,YAAMC,iBAAiB,KAAKC,kBAAkB/J,MAAvB;AAClBQ,aAAAA,WAAWR;AACZ8J,YAAAA,iBAAiB,GAAG;AAChB,cAAA,KAAK3V,YAAY;AACjB,iBAAKA,WAAW6V,sBAAsBhK,MAAtC;AAAA,UACH,OAAM;AACEwG,iBAAAA,QAAQyD;UAChB;AAAA,QACJ,OAAM;AACEzD,eAAAA,QAAQyD;QAChB;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,kBAAkBC,OAAO;AACrB,eAAQ,IAAI,KAAK1J,UAAW0J;AAAAA,MAC/B;AAAA;;MAED,OAAA,SAAA,sBAAsBC,aAAa;AAC/B,YAAMC,YAAY,KAAKC,iCAAiCF,WAAtC;AAClB,YAAML,iBAAiB,KAAKC,kBAAkBK,SAAvB;AAClB5J,aAAAA,WAAW4J;AACZN,YAAAA,iBAAiB,GAAG;AACd3V,cAAAA,aAAa,KAAKA;AACxB,cAAIA,YAAY;AACZA,uBAAW6V,sBAAsBI,SAAjC;AAAA,UACH,OAAM;AACE5D,iBAAAA,QAAQyD;UAChB;AAAA,QACJ,OAAM;AACEzD,eAAAA,QAAQyD;QAChB;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,iCAAiCE,aAAa;AAC1C,YAAM9X,SAAS,KAAKyC,MAAMxC;AAEpBgY,YAAAA,qBAAqBjY,OAAO6D,cAAc,IAAI;AAC9CqU,YAAAA,sBAAsBlY,OAAO6D,cAAc,IAAI;AAErD,YAAMsU,oCAAqCL,cAAcI;AACrD,YAAA,CAACC,mCAAmC;AACpC,cAAMC,mCAAoCN,cAAcG;AACxD,cAAIG,kCAAkC;AAClC,gBAAMC,qBAAqBrY,OAAOsK;AAClC,gBAAI+N,oBAAoB;AACpB,kBAAMC,2BAA2BtY,OAAOmK;AACxC,kBAAImO,0BAA0B;AAE1BR,+BAAeI;AAAAA,cAClB;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AAED,YAAIK,iBAAiBvY,OAAO0C,oBAAoB,IAA3B;AACrB,YAAI8V,kBAAkBxY,OAAO0C,oBAAoB,KAA3B;AAElB1C,YAAAA,OAAOyY,QAAQ;AAGXzY,cAAAA,OAAO6D,aAAa;AACpB0U,6BAAiB;AAAA,UACpB,OAAM;AACHC,8BAAkB;AAAA,UACrB;AAAA,QACJ;AAED,YAAME,cAAc,KAAKH,iBAAiB,IAAI,MAAMC,kBAAkB,IAAI;AAE1E,YAAMG,iBAAiBb,cAAcY;AACrC,eAAOC;AAAAA,MACV;AAAA;;WAED,SAAa,MAAA;AACT,eAAO,KAAKxK;AAAAA,MACf;AAAA;;aAED,SAAkB,kBAAA;AACTA,aAAAA,UAAU;AAAA,MAClB;AAAA;;aAED,SAAwB,wBAAA;AACfA,aAAAA,UAAU;AAAA,MAClB;AAAA;;WAED,SAAgB,MAAA;AACZ,eAAO,KAAKkG;AAAAA,MACf;AAAA;;MAED,OAAA,SAAA,kCAAkCvb,GAAG;AAC5Bub,aAAAA,aAAavb;AAAAA,MACrB;AAAA;;WAED,SAAgB,MAAA;AACZ,eAAO,KAAKwb;AAAAA,MACf;AAAA;;MAED,OAAA,SAAA,kCAAkCxb,GAAG;AAC5Bwb,aAAAA,aAAaxb;AAAAA,MACrB;AAAA;;WAED,SAAoB,MAAA;AAChB,eAAO,KAAKyb;AAAAA;MAGhB,KAAA,SAAAxD,KAAkBjY,GAAG;AACjB,YAAI,KAAKyb,mBAAmBzb,GAAG;AACtByb,eAAAA,iBAAiBzb;AACtB,eAAK6Y,kBAAkB,MAAM,KAA7B;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAqB,MAAA;AACjB,eAAO,KAAK6C;AAAAA;MAGhB,KAAA,SAAAzD,KAAmBjY,GAAG;AAClB,YAAI,KAAK0b,oBAAoB1b,GAAG;AACvB0b,eAAAA,kBAAkB1b;AACvB,eAAK6Y,kBAAkB,OAAO,IAA9B;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAY,MAAA;AACD,eAAA,KAAKwC,QAAQ+C;AAAAA,MACvB;AAAA;;WAED,SAAY,MAAA;AACD,eAAA,KAAK/C,QAAQgD;AAAAA,MACvB;AAAA;;WAED,SAAY,MAAA;AACD,eAAA,KAAKhD,QAAQhS;AAAAA,MACvB;AAAA;;WAED,SAAY,MAAA;AACD,eAAA,KAAKgS,QAAQ5R;AAAAA,MACvB;AAAA;;;MChdgBqW;AAEjB,aAAAA,eAAYC,SAAwB;AAAfC,UAAAA,0EAAS;AAAM,sBAAA,MAAAF,cAAA;AAChC,WAAKG,KAAKH,eAAcG;AAEnBF,WAAAA,UAAUA;AAEf,WAAKG,QAAQH,QAAQG;AAMrB,WAAKC,WAAW,oBAAIC;AAOfC,WAAAA,sBAAsB;AAMtBL,WAAAA,SAASA;AAMTM,WAAAA,WAAW;AAMXC,WAAAA,YAAY;AAMZC,WAAAA,eAAe;AAEfrX,WAAAA,IAAI;AACJC,WAAAA,IAAI;AAEJqX,WAAAA,iBAAiB;AAMjBC,WAAAA,YAAY;AAOZC,WAAAA,aAAa;AAOlB,WAAKC,mBAAmB,CAAC,KAAKZ;AAOzBa,WAAAA,aAAa;AAObC,WAAAA,YAAY;AAQXC,WAAAA,YAAY;AAAA,IACrB;;;WAED,SAAe,MAAA;AACX,eAAO,KAAKA;AAAAA,MACf;AAAA;;WAED,SAAgB,MAAA;AACZ,eAAO,KAAKF;AAAAA,MACf;AAAA;;MAED,OAAA,SAAA,WAAW7gB,GAAG;AACN,YAAA,CAAC,KAAKmgB,SAASa,IAAIhhB,CAAlB,GAAsB;AACvB,eAAKmgB,SAASc,IAAIjhB,CAAlB;AAAA,QACH;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,cAAcA,GAAG;AACb,aAAKmgB,SAASe,OAAOlhB,CAArB;AAAA,MACH;AAAA;;aAED,SAAwB,wBAAA;AACpB,aAAKqgB;AACL,YAAI,KAAKA,wBAAwB,GAAG;AAChC,eAAKc,YAAL;AAAA,QACH;AAAA,MACJ;AAAA;;aAED,SAAwB,wBAAA;AACpB,aAAKd;AACL,YAAI,KAAKA,wBAAwB,GAAG;AAChC,eAAKe,cAAL;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAsB,MAAA;AAClB,eAAO,KAAKR;AAAAA;MAGhB,KAAA,SAAA3I,KAAoBjY,GAAG;AACd4gB,aAAAA,mBAAmB5gB;AAAAA,MAC3B;AAAA;;MAED,OAAA,SAAA,sBAAsBqhB,IAAI;AAAA,YAAA,QAAA;AACtB,aAAKlB,SAASzb,QAAQ,SAAA4c,SAAW;AAAA,yBAAA,MAAA,KAAA;AAC7BA,kBAAQC,SAAS7c,QAAQ2c,EAAzB;AAAA,QACH,EAFD,KAAA,IAAA,CAAA;AAAA,MAGH;AAAA;;aAED,SAAqB,qBAAA;AACjB,eAAO,KAAKlB,SAASnW,OAAO;AAAA,MAC/B;AAAA;;MAED,OAAA,SAAA,qBAAqBqX,IAAI;AAAA,YAAA,SAAA;AACrB,aAAKlB,SAASzb,QAAQ,SAAA4c,SAAW;AAAA,cAAA,SAAA;AAAA,yBAAA,MAAA,MAAA;AAC7BA,kBAAQC,SAAS7c,QAAQ,SAAA8c,SAAW;AAAA,2BAAA,MAAA,MAAA;AAC5BA,gBAAAA,QAAQC,QAAQ;AAChBJ,iBAAGG,OAAD;AAAA,YACL;AAAA,UACJ,EAJD,KAAA,IAAA,CAAA;AAAA,QAKH,EAND,KAAA,IAAA,CAAA;AAAA,MAOH;AAAA;;aAED,SAAiB,iBAAA;AACb,eAAO,KAAKrY;AAAAA,MACf;AAAA;;aAED,SAAkB,kBAAA;AACd,eAAO,KAAKC;AAAAA,MACf;AAAA;;aAED,SAAe,eAAA;AACX,eAAO,CAAC,KAAKsX,aAAa,CAAC,KAAKgB,OAAL;AAAA,MAC9B;AAAA;;aAED,SAAc,cAAA;AAEV,aAAKC,KAAL;AAAA,MACH;AAAA;;aAED,SAAgB,gBAAA;AACZ,aAAKC,OAAL;AAAA,MACH;AAAA;;aAED,SAAS,SAAA;AACD,YAAA,KAAKC,aAAa;AACd,cAAA,KAAKtB,WAAW;AACXA,iBAAAA,UAAU,IAAf;AAGKA,iBAAAA,YAAY;AAAA,UACpB;AACIC,eAAAA,eAAe;AAAA,QACvB;AAAA,MACJ;AAAA;;aAED,SAAW,WAAA;AACA,eAAA,CAAC,CAAC,KAAKC;AAAAA,MACjB;AAAA;;aAED,SAAY,YAAA;AACA,eAAA,KAAKD,eAAe;AAAA,MAC/B;AAAA;;aAED,SAAU,UAAA;AACC,eAAA,CAAC,CAAC,KAAKK;AAAAA,MACjB;AAAA;;aAED,SAAS,SAAA;AACL,aAAKiB,KAAL;AACI,YAAA,KAAKJ,UAAU;AACf,eAAKC,KAAL;AAAA,QACH;AAAA,MACJ;AAAA;;aAED,SAAwB,OAAA;AAAA,YAAA,SAAA;AAAnBI,YAAAA,6EAAY;AAET,YAAA,KAAKC,iBAAiB;AAEtB;AAAA,QACH;AAEG,YAAA,CAAC,KAAKvB,kBAAkB,CAAC,KAAKoB,UAAL,GAAkB;AAC3C,eAAKrB,eAAgB,IAAIyB,KAAL,EAAaC,QAAb;AACf3B,eAAAA,YAAY,KAAKP,OAAO,SAACmC,KAAKC,SAAY;AAAA,2BAAA,MAAA,MAAA;AAEvC,gBAAA,KAAKP,aAAa;AAEbtB,mBAAAA,YAAY;AAEjB,kBAAI,KAAKR,QAAQG,MAAMmC,WAAW;AAE9B;AAAA,cACH;AACD,kBAAIF,KAAK;AAEAG,qBAAAA,QAAQH,GAAb;AAAA,cACH,WAAUC,WAAWA,QAAQG,QAAQ;AAClC,oBAAI,CAAC,KAAKrC,MAAMsC,gBAAX,KAAgC,CAACT,aAAcK,QAAQK,aAAa,OAAQ;AAC7E,sBAAMC,mBAAmB,KAAKxC,MAAMwC;AACpC,uBAAKnC,YAAYmC,iBAAiBC;AAClCD,mCAAiBzB,IAAI,MAAMmB,OAA3B;AAAA,gBACH,OAAM;AACEQ,uBAAAA,oBAAoBR,OAAzB;AAAA,gBACH;AAAA,cACJ;AAAA,YACJ;AAAA,UAtBY,EAAA,KAAA,IAAA,GAuBd,IAvBc;AAAA,QAwBpB;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,oBAAoBA,SAAS;AACpB5B,aAAAA,eAAe;AACfqC,aAAAA,UAAUT,OAAf;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,UAAUA,SAAS;AACf,YAAMG,SAASH,QAAQG;AAElBxB,aAAAA,YAAaqB,UAAWA,QAAQU,YAAY,QAAS;AAC1D,aAAK3Z,IAAIoZ,OAAOQ,SAAUX,WAAWA,QAAQjZ,KAAM;AACnD,aAAKC,IAAImZ,OAAOS,UAAWZ,WAAWA,QAAQhZ,KAAM;AAEpD,YAAIgZ,WAAWA,QAAQzB,YAAY;AAE/B,eAAKA,aAAayB,QAAQzB;AAAAA,QAC7B;AAED,aAAKD,YAAY,CAAC,CAAC0B,QAAQ1B;AAEvB0B,YAAAA,WAAWA,QAAQa;AACnB,eAAKnC,YAAYsB,QAAQa;AAC7B,YAAIb,WAAWA,QAAQc,cAAc;AACjC,eAAKC,gBAAgBf,QAAQc;AAAAA,QAChC,OAAM;AACEC,eAAAA,gBAAgB;AAAA,QACxB;AAED,YAAI,KAAKC,iBAAiBb,MAAtB,GAA+B;AAE1B9B,eAAAA,iBAAiB8B;AAEtB,eAAKpZ,IAAI,KAAKA,KAAKoZ,OAAOpZ;AAC1B,eAAKC,IAAI,KAAKA,KAAKmZ,OAAOnZ;AAG1B,eAAKsX,YAAY0B,QAAQiB,eAAe,WAAvB,IAAsCjB,QAAQ1B,YAAY;AAAA,QAC9E,OAAM;AACH,eAAKX,QAAQuD,oBAAoB,MAAMlB,OAAvC;AAAA,QACH;AAGIvB,aAAAA,aAAa;AAElB,aAAK0C,OAAL;AAAA,MACH;AAAA;;aAED,SAAS,SAAA;AACE,eAAA,KAAKlD,sBAAsB;AAAA,MACrC;AAAA;;aAED,SAAS,SAAA;AAAA,YAAA,SAAA;AACD,YAAA,KAAKqB,UAAU;AACf,eAAKvB,SAASzb,QAAQ,SAAA4c,SAAW;AAAA,2BAAA,MAAA,MAAA;AAC7BA,oBAAQiC,OAAR;AAAA,UACH,EAFD,KAAA,IAAA,CAAA;AAAA,QAGH;AAAA,MACJ;AAAA;;aAED,SAAoB,oBAAA;AAIZ,YAAA,KAAK9C,gBAAgB;AAErB,eAAKA,eAAe+C,SAAS,KAAKtD,MAAMuD;AAAAA,QAC3C;AAED,aAAKC,qBAAqB,SAAUlC,SAAS;AACzCA,kBAAQmC,kBAAR;AAAA,QACH,CAFD;AAAA,MAIH;AAAA;;aAED,SAA0B,0BAAA;AACtB,aAAKD,qBAAqB,SAAUlC,SAAS;AACzCA,kBAAQoC,qBAAR;AAAA,QACH,CAFD;AAAA,MAGH;AAAA;;WAED,SAAoB,MAAA;AAChB,eAAO,KAAKnD;AAAAA,MACf;AAAA;;aAED,SAAqB,qBAAA;AACZA,aAAAA,iBAAiB;AAEjBK,aAAAA,YAAY;AAAA,MACpB;AAAA;;MAKD,OAAA,SAAA,qBAAqB+C,kBAAkB1a,GAAGC,GAAG;AAAA,YAAA,SAAA;AACrC0a,YAAAA,oBAAoB,KAAKrD;AAExBA,aAAAA,iBAAiBoD;AACjB1a,aAAAA,IAAIA;AACJC,aAAAA,IAAIA;AAET,YAAI,CAAC0a,qBAAqB,KAAKrD,gBAAgB;AACtCiD,eAAAA,qBAAqB,SAAAlC,SAAO;AAAA,2BAAA,MAAA,MAAA;AAAIA,mBAAAA,QAAQuC;UAAZ,EAAjC,KAAA,IAAA,CAAA;AAAA,QACH;AAEG,YAAA,CAAC,KAAKtD,gBAAgB;AACjBiD,eAAAA,qBAAqB,SAAAlC,SAAO;AAAA,2BAAA,MAAA,MAAA;AAAA,mBAAIA,QAAQwC,qBAAqB,IAA7B;AAAA,UAAJ,EAAjC,KAAA,IAAA,CAAA;AAAA,QACH;AAGIC,aAAAA,sBAAsB,SAAAzC,SAAO;AAAA,yBAAA,MAAA,MAAA;AAAIA,iBAAAA,QAAQ0C;QAAZ,EAAlC,KAAA,IAAA,CAAA;AAAA,MAGH;AAAA;;MAED,OAAA,SAAA,QAAQC,GAAG;AAAA,YAAA,SAAA;AACFtD,aAAAA,aAAasD;AACb3D,aAAAA,eAAe;AACpB/d,gBAAQqD,MAAM,kCAAkCqe,GAAG,KAAK7D,QAAxD;AACKoD,aAAAA,qBAAqB,SAAAlC,SAAO;AAAA,yBAAA,MAAA,MAAA;AAAA,iBAAIA,QAAQ4C,yBAAyBD,CAAjC;AAAA,QAAJ,EAAjC,KAAA,IAAA,CAAA;AAAA,MACH;AAAA;;aAED,SAAO,OAAA;AACC,YAAA,KAAKE,YAAY;AACjB,eAAKtE,QAAQuE,kBAAkB,IAA/B;AAAA,QACH;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,iBAAiB/B,QAAQ;AACjB1f,YAAAA,QAAM2C,QAAQ;AACd,iBAAO+c,OAAO7e,YAAYkC,SAAS;AAAA,QACtC;AAEG,YAAA,kBAAkBV,QAAQ;AACnBqd,iBAAAA,kBAAkBgC;AAAAA,QAC5B;AAED,eAAO;AAAA,MACV;AAAA;;;AAILzE,gBAAc0E,UAAUC,kBAAkB;AAE1C3E,gBAAcG,KAAK;MC9XEyE;AAEjB,aAAAA,mBAAYC,aAAa;AAAA,sBAAA,MAAAD,kBAAA;AAErB,WAAKE,WAAWD,YAAYnD;AACvBqD,WAAAA,QAAQF;AAEb,WAAKG,MAAM,KAAKD,MAAMC;AAEjBxJ,WAAAA,WAAW;AACXyJ,WAAAA,OAAO;AACPC,WAAAA,YAAY;AAEZC,WAAAA,iBAAiB;AAEjBC,WAAAA,uBAAuB;AAEvBC,WAAAA,uBAAuB;AAEvBC,WAAAA,mBAAmB;AAEnBC,WAAAA,QAAQ;AAAA,IAChB;;;WAED,SAAc,MAAA;AACV,eAAO,KAAK/J;AAAAA;MAGhB,KAAA,SAAArD,KAAYjY,GAAG;AACNsb,aAAAA,WAAWtb;AACX6kB,aAAAA,MAAMS;MACd;AAAA;;WAED,SAAsB,MAAA;AAClB,eAAO,KAAKF;AAAAA;MAGhB,KAAA,SAAAnN,KAAoBjY,GAAG;AACdolB,aAAAA,mBAAmBplB;AACxB,aAAK6kB,MAAMU,oBAAoB,CAA/B;AAGA,aAAKV,MAAMW,WAAW,CAAtB;AAAA,MACH;AAAA;;WAED,SAAe,MAAA;AACX,eAAO,KAAKR;AAAAA;MAGhB,KAAA,SAAA/M,KAAajY,GAAG;AACZ,YAAI,KAAKglB,cAAchlB,GAAG;AACjBglB,eAAAA,YAAYhlB;AAGjB,eAAK6kB,MAAMU,oBAAoB,CAA/B;AAAA,QACH;AAAA,MACJ;AAAA;;aAED,SAAoB,oBAAA;AACZ,YAAA,CAAC,KAAKJ,sBAAsB;AACvBA,eAAAA,uBAAuB,IAAIrF,cAAc,KAAK8E,SAAS1E,MAAMuF,cAAtC;AAC5B,eAAKC,oBAAL;AAAA,QACH;AACD,eAAO,KAAKP;AAAAA,MACf;AAAA;;aAED,SAAmB,mBAAA;AACR,eAAA,CAAC,CAAC,KAAKA;AAAAA,MACjB;AAAA;;aAED,SAAqB,qBAAA;AACjB,eAAO,KAAKA,wBAAwB,KAAKA,qBAAqBQ,mBAA1B;AAAA,MACvC;AAAA;;aAED,SAAsB,sBAAA;AAAA,YAAA,QAAA;AAClB,YAAIC,gBAAgB,KAAKC;AACrB,YAAA,KAAKV,sBAAsB;AAC3B,cAAI,KAAKA,qBAAqBW,kBAAkBF,eAAe;AACvDzc,gBAAAA,IAAIyc,gBAAgBA,cAAczc,IAAI;AACtCC,gBAAAA,IAAIwc,gBAAgBA,cAAcxc,IAAI;AACrC+b,iBAAAA,qBAAqBY,qBAAqBH,eAAezc,GAAGC,CAAjE;AAAA,UACH;AAGD,eAAK+b,qBAAqBlB,sBAAsB,SAAAzC,SAAW;AAAA,2BAAA,MAAA,KAAA;AACvDA,oBAAQ0C,kBAAR;AACA1C,oBAAQwE,KAAKT,oBAAoB,CAAjC;AAAA,UACH,EAHD,KAAA,IAAA,CAAA;AAAA,QAIH;AAAA,MACJ;AAAA;;aAED,SAAsB,sBAAA;AAElB,YAAI,KAAKjK,YAAY,CAAC,KAAKyJ,MAAM;AAC7B,iBAAO;AAAA,QACV,WAAU,KAAKzJ,YAAY,KAAKyJ,QAAQ,KAAKF,MAAMoB,oBAAoB,GAAG;AAEvE,iBAAO;AAAA,QACV;AACD,eAAO;AAAA,MACV;AAAA;;aAED,SAAa,aAAA;AACT,aAAKC,QAAL;AAAA,MACH;AAAA;;WAED,SAA0B,MAAA;AACtB,eAAO,KAAKhB;AAAAA,MACf;AAAA;;aAED,SAAU,UAAA;AACN,aAAKiB,qBAAL;AAAA,MACH;AAAA;;aAED,SAAuB,uBAAA;AACf,YAAA,KAAKlB,gBAAgB;AACjB,cAAA,CAAC,KAAKC,sBAAsB;AAC5B,iBAAKJ,IAAIqB,qBAAqB,KAAKlB,cAAnC;AAAA,UACH;AACIA,eAAAA,iBAAiB;AACjBC,eAAAA,uBAAuB;AAC5B,eAAKQ,oBAAL;AAAA,QACH;AAAA,MACJ;AAAA;;MAGD,OAAA,SAAA,4BAA4BI,eAAe;AACvC,YAAI,KAAKb,mBAAmBa,eAAe;AACvC,eAAKK,qBAAL;AACKlB,eAAAA,iBAAiBa;AACjBZ,eAAAA,uBAAuB;AAAA,QAC/B;AAAA,MACJ;AAAA;;aAED,SAAmB,mBAAA;AACR,eAAA,CAAC,CAAC,KAAKD;AAAAA,MACjB;AAAA;;aAED,SAAmB,mBAAA;AACX,YAAA,CAAC,KAAKA,gBAAgB;AACtB,eAAKA,iBAAiB,KAAKH,IAAIsB,sBAAsB,KAAKvB,MAAMpH,IAAI,KAAKoH,MAAMnH,EAAzD;AACjBwH,eAAAA,uBAAuB;AAAA,QAC/B;AACD,eAAO,KAAKD;AAAAA,MACf;AAAA;;aAED,SAAmB,mBAAA;AACf,eAAO,KAAKA;AAAAA,MACf;AAAA;;;MCpJgBoB;AAEjB,aAAAA,aAAY7E,SAAS;AAAA,sBAAA,MAAA6E,YAAA;AACZzB,WAAAA,WAAWpD;AAEhB,WAAKsD,MAAMtD,QAAQtB,MAAM4E;AAKpBzP,WAAAA,UAAU;AAEVuH,WAAAA,UAAU;AAEV0J,WAAAA,YAAY;AAEZC,WAAAA,WAAW;AAEhB,WAAKC,gBAAgB,IAAIC;AAEpBC,WAAAA,cAAc;AAEdC,WAAAA,cAAc;AAEdC,WAAAA,gBAAgB;AAEhBC,WAAAA,iBAAiB;AAGjBC,WAAAA,WAAW;AACXC,WAAAA,WAAW;AAEXC,WAAAA,WAAW;AACXC,WAAAA,WAAW;AACXC,WAAAA,WAAW;AACXC,WAAAA,WAAW;AAEXC,WAAAA,aAAa;AAEbC,WAAAA,eAAe;AAEfC,WAAAA,YAAY;AAGZC,WAAAA,SAAS;AAETC,WAAAA,eAAe;AAMfC,WAAAA,0BAA0B;AAE1BC,WAAAA,iBAAiB;AAEjBlL,WAAAA,YAAY;AAEZyJ,WAAAA,oBAAoB;AAEpB0B,WAAAA,oBAAoB;AAEpBC,WAAAA,iBAAiB,KAAKpB;AAE3B,WAAKqB,cAAc,KAAK/C,IAAI+C;AAEvBC,WAAAA,WAAW;AAGXC,WAAAA,eAAe;AAGfC,WAAAA,mBAAmB;AAEnBC,WAAAA,WAAW,KAAKC,WAAW,KAAKC,WAAW,KAAKC,WAAW;AAE3D7K,WAAAA,KAAK;AACLC,WAAAA,KAAK;AACLC,WAAAA,KAAK;AACLC,WAAAA,KAAK;AAEL2K,WAAAA,YAAY;AACZC,WAAAA,SAAS;AACTC,WAAAA,SAAS;AACTC,WAAAA,SAAS;AACTC,WAAAA,SAAS;AAETC,WAAAA,UAAU;AACVC,WAAAA,UAAU;AACVC,WAAAA,UAAU;AACVC,WAAAA,UAAU;AACVC,WAAAA,UAAU;AACVC,WAAAA,UAAU;AACVC,WAAAA,YAAY;AAEZC,WAAAA,SAAS;AACTC,WAAAA,WAAW;AAEXC,WAAAA,OAAO;AACPC,WAAAA,OAAO;AACPC,WAAAA,OAAO;AACPC,WAAAA,OAAO;AAEPC,WAAAA,UAAU;AACVC,WAAAA,sBAAsB;AACtBC,WAAAA,WAAW;AAEXC,WAAAA,UAAU;AASVC,WAAAA,gBAAgB;AAEhBC,WAAAA,UAAU;AAGVC,WAAAA,0BAA0B;AAE1BC,WAAAA,cAAc;AAEdC,WAAAA,sBAAsB;AAEtBC,WAAAA,gBAAgB;AAEhBC,WAAAA,mBAAmB;AAEnBC,WAAAA,sBAAsB;AAEtBC,WAAAA,YAAY;AAEZC,WAAAA,WAAW;AAEXC,WAAAA,SAAS,KAAKC;AAEdnjB,WAAAA,UAAU;AAAA,IAClB;;;WAED,SAAc,MAAA;AACN,YAAA,KAAKmhB,QAAQ;AACb,iBAAO,KAAKA;AAAAA,QACf,OAAM;AACC,cAAA,KAAKiC,iBAAiB;AACf,mBAAA,KAAKpjB,QAAQ+W;AAAAA,UACvB,OAAM;AACH,mBAAO,KAAKX;AAAAA,UACf;AAAA,QACJ;AAAA;MAGL,KAAA,SAAAtF,KAAYjY,GAAG;AACX,YAAI6C,QAAMmB,WAAWhE,CAAjB,GAAqB;AAChBoe,eAAAA,QAAQpe;AAAAA,QAChB,OAAM;AACH,eAAKwqB,cAAL;AACI,cAAA,KAAKD,iBAAiB;AACtB,iBAAK1gB,KAAM7J,IAAI,KAAKmH,QAAQ+W;AAC5B,iBAAK/W,QAAQsjB,kCAAkCzqB,CAA/C;AAAA,UACH,OAAM;AACE6J,iBAAAA,IAAI7J;AAAAA,UACZ;AAAA,QACJ;AAAA,MACJ;AAAA;;WAED,SAAQ,MAAA;AACJ,eAAO,KAAKud;AAAAA;MAGhB,KAAA,SAAAtF,KAAMjY,GAAG;AACL,YAAIA,MAAM,KAAKud,IAAI;AACf,eAAKmN,2BAA2B1qB,IAAI,KAAKud,IAAI,CAA7C;AACKA,eAAAA,KAAKvd;AAAAA,QACb;AAAA,MACJ;AAAA;;WAED,SAAY,MAAA;AACA,eAAA,KAAKqoB,YAAY,IAAI,KAAKC,SAAS;AAAA;MAG/C,KAAA,SAAArQ,KAAUjY,GAAG;AACT,YAAI,KAAKsoB,WAAWtoB,GAAG;AACdqoB,eAAAA,aAAa;AACbC,eAAAA,SAAStoB;AACV,cAAA,KAAKuqB,iBAAiB;AACtB,iBAAKpjB,QAAQsjB,kCAAkC,CAA/C;AACKvjB,iBAAAA,OAAOyjB;UACf,OAAM;AACEpN,iBAAAA,KAAK;AACV,iBAAKqN,wBAAL;AAAA,UACH;AAAA,QACJ;AAAA,MACJ;AAAA;;aAED,SAAgB,gBAAA;AACZ,aAAKvC,YAAY,KAAKA,YAAa,QAAS;AACvCC,aAAAA,SAAS;AAAA,MACjB;AAAA;;WAED,SAAc,MAAA;AACN,YAAA,KAAKC,QAAQ;AACb,iBAAO,KAAKA;AAAAA,QACf,OAAM;AACC,cAAA,KAAKgC,iBAAiB;AACf,mBAAA,KAAKpjB,QAAQgX;AAAAA,UACvB,OAAM;AACH,mBAAO,KAAKX;AAAAA,UACf;AAAA,QACJ;AAAA;MAGL,KAAA,SAAAvF,KAAYjY,GAAG;AACX,YAAI6C,QAAMmB,WAAWhE,CAAjB,GAAqB;AAChBqe,eAAAA,QAAQre;AAAAA,QAChB,OAAM;AACH,eAAK6qB,cAAL;AACI,cAAA,KAAKN,iBAAiB;AACtB,iBAAKzgB,KAAM9J,IAAI,KAAKmH,QAAQgX;AAC5B,iBAAKhX,QAAQ2jB,kCAAkC9qB,CAA/C;AAAA,UACH,OAAM;AACE8J,iBAAAA,IAAI9J;AAAAA,UACZ;AAAA,QACJ;AAAA,MACJ;AAAA;;WAED,SAAQ,MAAA;AACJ,eAAO,KAAKwd;AAAAA;MAGhB,KAAA,SAAAvF,KAAMjY,GAAG;AACL,YAAIA,MAAM,KAAKwd,IAAI;AACf,eAAKkN,2BAA2B,GAAG1qB,IAAI,KAAKwd,EAA5C;AACKA,eAAAA,KAAKxd;AAAAA,QACb;AAAA,MACJ;AAAA;;WAED,SAAY,MAAA;AACA,eAAA,KAAKqoB,YAAY,IAAI,KAAKE,SAAS;AAAA;MAG/C,KAAA,SAAAtQ,KAAUjY,GAAG;AACT,YAAI,KAAKuoB,WAAWvoB,GAAG;AACdqoB,eAAAA,aAAa;AACbE,eAAAA,SAASvoB;AACV,cAAA,KAAKuqB,iBAAiB;AACtB,iBAAKpjB,QAAQ2jB,kCAAkC,CAA/C;AACK5jB,iBAAAA,OAAOyjB;UACf,OAAM;AACEnN,iBAAAA,KAAK;AACV,iBAAKoN,wBAAL;AAAA,UACH;AAAA,QACJ;AAAA,MACJ;AAAA;;aAED,SAAgB,gBAAA;AACZ,aAAKvC,YAAY,KAAKA,YAAa,QAAS;AACvCE,aAAAA,SAAS;AAAA,MACjB;AAAA;;WAED,SAAY,MAAA;AACA,eAAA,KAAKF,YAAY,IAAI,KAAKG,SAAS;AAAA;MAG/C,KAAA,SAAAvQ,KAAUjY,GAAG;AACT,YAAI,KAAKwoB,WAAWxoB,GAAG;AACdqoB,eAAAA,aAAa;AACbG,eAAAA,SAASxoB;AACV,cAAA,KAAKuqB,iBAAiB;AACtB,iBAAKpjB,QAAQsU,iBAAiB;AAC9B,iBAAKvU,OAAO2R,kBAAkB,MAAM,KAApC;AAAA,UACH,OAAM;AACE4E,iBAAAA,KAAK;AACV,iBAAKmN,wBAAL;AAAA,UACH;AAAA,QACJ;AAAA,MACJ;AAAA;;aAED,SAAe,eAAA;AACX,aAAKvC,YAAY,KAAKA,YAAa,QAAS;AACvCG,aAAAA,SAAS;AAAA,MACjB;AAAA;;WAED,SAAY,MAAA;AACA,eAAA,KAAKH,YAAY,IAAI,KAAKI,SAAS;AAAA;MAG/C,KAAA,SAAAxQ,KAAUjY,GAAG;AACT,YAAI,KAAKyoB,WAAWzoB,GAAG;AACdqoB,eAAAA,aAAa;AACbI,eAAAA,SAASzoB;AACV,cAAA,KAAKuqB,iBAAiB;AACtB,iBAAKpjB,QAAQuU,kBAAkB;AAC/B,iBAAKxU,OAAO2R,kBAAkB,OAAO,IAArC;AAAA,UACH,OAAM;AACE6E,iBAAAA,KAAK;AACV,iBAAKkN,wBAAL;AAAA,UACH;AAAA,QACJ;AAAA,MACJ;AAAA;;aAED,SAAe,eAAA;AACX,aAAKvC,YAAY,KAAKA,YAAa,QAAS;AACvCI,aAAAA,SAAS;AAAA,MACjB;AAAA;;WAED,SAAQ,MAAA;AACJ,eAAO,KAAKhL;AAAAA,MACf;AAAA;;aAED,SAAiB,iBAAA;AACT,YAAA,KAAK8M,iBAAiB;AACf,iBAAA,KAAKpjB,QAAQqC;AAAAA,QACvB,OAAM;AACH,iBAAO,KAAKiU;AAAAA,QACf;AAAA,MACJ;AAAA;;WAED,SAAQ,MAAA;AACJ,eAAO,KAAKC;AAAAA,MACf;AAAA;;aAED,SAAkB,kBAAA;AACV,YAAA,KAAK6M,iBAAiB;AACf,iBAAA,KAAKpjB,QAAQuC;AAAAA,QACvB,OAAM;AACH,iBAAO,KAAKgU;AAAAA,QACf;AAAA,MACJ;AAAA;;WAED,SAAa,MAAA;AACT,eAAO,KAAKgL;AAAAA;MAGhB,KAAA,SAAAzQ,KAAWjY,GAAG;AACV,YAAI,KAAK0oB,YAAY1oB,GAAG;AACf0oB,eAAAA,UAAU1oB;AACf,eAAK+qB,sBAAL;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAa,MAAA;AACT,eAAO,KAAKpC;AAAAA;MAGhB,KAAA,SAAA1Q,KAAWjY,GAAG;AACV,YAAI,KAAK2oB,YAAY3oB,GAAG;AACf2oB,eAAAA,UAAU3oB;AACf,eAAK+qB,sBAAL;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAY,MAAA;AACR,eAAO,KAAKC;AAAAA;MAGhB,KAAA,SAAA/S,KAAUjY,GAAG;AACL,YAAA,KAAK0oB,YAAY1oB,KAAK,KAAK2oB,YAAY3oB,GAAG;AACrC0oB,eAAAA,UAAU1oB;AACV2oB,eAAAA,UAAU3oB;AACf,eAAK+qB,sBAAL;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAa,MAAA;AACT,eAAO,KAAKnC;AAAAA;MAGhB,KAAA,SAAA3Q,KAAWjY,GAAG;AACV,YAAI,KAAK4oB,YAAY5oB,GAAG;AACf4oB,eAAAA,UAAU5oB;AACf,eAAKirB,sBAAL;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAa,MAAA;AACT,eAAO,KAAKpC;AAAAA;MAGhB,KAAA,SAAA5Q,KAAWjY,GAAG;AACV,YAAI,KAAK6oB,YAAY7oB,GAAG;AACf6oB,eAAAA,UAAU7oB;AACf,eAAKirB,sBAAL;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAY,MAAA;AACR,eAAO,KAAKrC;AAAAA;MAGhB,KAAA,SAAA3Q,KAAUjY,GAAG;AACL,YAAA,KAAK4oB,YAAY5oB,KAAK,KAAK6oB,YAAY7oB,GAAG;AACrC4oB,eAAAA,UAAU5oB;AACV6oB,eAAAA,UAAU7oB;AACf,eAAKirB,sBAAL;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAa,MAAA;AACT,eAAO,KAAKnC;AAAAA;MAGhB,KAAA,SAAA7Q,KAAWjY,GAAG;AACV,YAAI,KAAK8oB,YAAY9oB,GAAG;AACf8oB,eAAAA,UAAU9oB;AACf,eAAKirB,sBAAL;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAa,MAAA;AACT,eAAO,KAAKlC;AAAAA;MAGhB,KAAA,SAAA9Q,KAAWjY,GAAG;AACV,YAAI,KAAK+oB,YAAY/oB,GAAG;AACf+oB,eAAAA,UAAU/oB;AACf,eAAKirB,sBAAL;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAY,MAAA;AACR,eAAO,KAAKnC;AAAAA;MAGhB,KAAA,SAAA7Q,KAAUjY,GAAG;AACL,YAAA,KAAK8oB,YAAY9oB,KAAK,KAAK+oB,YAAY/oB,GAAG;AACrC8oB,eAAAA,UAAU9oB;AACV+oB,eAAAA,UAAU/oB;AACf,eAAKirB,sBAAL;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAe,MAAA;AACX,eAAO,KAAKjC;AAAAA;MAGhB,KAAA,SAAA/Q,KAAajY,GAAG;AACZ,YAAI,KAAKgpB,cAAchpB,GAAG;AACjBgpB,eAAAA,YAAYhpB;AACjB,eAAK+qB,sBAAL;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAY,MAAA;AACR,eAAO,KAAK9B;AAAAA;MAGhB,KAAA,SAAAhR,KAAUjY,GAAG;AAETA,YAAKA,IAAI,IAAI,IAAKA,IAAI,QAAQ,IAAIA;AAClC,YAAI,KAAKipB,WAAWjpB,GAAG;AACfkrB,cAAAA,OAAO,KAAKjC;AACXA,eAAAA,SAASjpB;AACd,eAAKmrB,kBAAL;AACKD,cAAAA,SAAS,OAAQlrB,MAAM,IAAI;AACvB4kB,iBAAAA,SAASwG;UACjB;AAAA,QACJ;AAAA,MACJ;AAAA;;WAED,SAAc,MAAA;AACV,eAAO,KAAKlC;AAAAA;MAGhB,KAAA,SAAAjR,KAAYjY,GAAG;AACX,YAAI,KAAKkpB,aAAalpB,GAAG;AAChBkpB,eAAAA,WAAWlpB;AAChB,eAAKmrB,kBAAL;AACKvG,eAAAA,SAASwG;AAEV,cAAA,KAAKb,iBAAiB;AACtB,iBAAKrjB,OAAOmkB,WAAWrrB,CAAvB;AAAA,UACH;AAAA,QACJ;AAAA,MACJ;AAAA;;aAED,SAAwB,wBAAA;AACpB,YAAI,KAAKgpB,cAAc,KAAK,KAAKA,aAAa,IAAItpB,KAAKyB,KAAK;AAEpDmqB,cAAAA,MAAM5rB,KAAK6rB,IAAI,KAAKvC,SAAd;AACNwC,cAAAA,MAAM9rB,KAAK+rB,IAAI,KAAKzC,SAAd;AAEL0C,eAAAA,mBACDF,MAAM,KAAK9C,SACX,CAAC4C,MAAM,KAAK3C,SACZ2C,MAAM,KAAK5C,SACX8C,MAAM,KAAK7C,OAJf;AAAA,QAMH,OAAM;AACE+C,eAAAA,mBACD,KAAKhD,SACL,GACA,GACA,KAAKC,OAJT;AAAA,QAMH;AACD,aAAKsC,sBAAL;AAAA,MACH;AAAA;;aAED,SAAwB,wBAAA;AACpB,aAAKU,sBAAL;AACA,aAAKf,wBAAL;AAAA,MACH;AAAA;;aAED,SAAwB,wBAAA;AACpB,YAAIgB,YAAY,KAAKhD,UAAU,KAAKnL;AACpC,YAAIoO,YAAY,KAAKhD,UAAU,KAAKnL;AACpC,YAAIoO;AACA5mB,YAAAA,OAAO6mB,OAAO;AACdD,eAAK,KAAKvO,MAAMqO,YAAY,KAAK5E,WAAW6E,YAAY,KAAK5E,YAAY2E;AAAAA,QAC5E,OAAM;AACHE,eAAK,KAAKvO,MAAMqO,YAAY,KAAK5E,WAAW6E,YAAY,KAAK5E,YAAY2E;AAAAA,QAC5E;AAED,YAAII,KAAK,KAAKxO,MAAMoO,YAAY,KAAK1E,WAAW2E,YAAY,KAAK1E,YAAY0E;AAC7EC,cAAM,KAAKhD,UAAU,KAAKrL;AAC1BuO,cAAM,KAAKjD,UAAU,KAAKrL;AACrBoJ,aAAAA,WAAWgF;AACX/E,aAAAA,WAAWiF;AAAAA,MACnB;AAAA;;aAED,SAA2BlqB,2BAAAA,IAAImqB,IAAI;AAC/B,aAAKC,mBAAmBpqB,IAAImqB,EAA5B;AAAA,MACH;AAAA;;aAED,SAAoB,oBAAA;AACXE,aAAAA,eAAe,KAAKjD,WAAW,KAAKD,SAAS,CAAlD;AAAA,MACH;AAAA;;MAQD,OAAA,SAAA,oBAAoBxlB,MAAM;AACtB,YAAI,KAAK+iB,cAAcvlB,OAAO;AAEtB9B,cAAAA,IAAI;AACRA,YAAE8mB,oBAAoBvmB,KAAKI,IAAI2D,MAAMtE,EAAE8mB,iBAAjB;AACtB,kBAAQ9mB,IAAIA,EAAEyd,YAAazd,EAAE8mB,sBAAsB,GAAI;AACnD9mB,cAAE8mB,oBAAoB;AAAA,UACzB;AAAA,QACJ;AAAA,MACJ;AAAA;;MAUD,OAAA,SAAA,WAAWxiB,MAAM;AACR4R,aAAAA,WAAW5R;AAEhB,aAAK2oB,eAAL;AAGI,YAAA,KAAKxP,SAAS;AACd,eAAKA,QAAQ2I,oBAAoB,CAAjC;AAAA,QACH;AAAA,MACJ;AAAA;;aAED,SAAiB,iBAAA;AACTpmB,YAAAA,IAAI;AACR,eAAOA,KAAK,CAACA,EAAEunB,aAAa;AACxBvnB,YAAEunB,cAAc;AAChBvnB,cAAIA,EAAEyd;AAAAA,QACT;AAAA,MACJ;AAAA;;aAED,SAAY,YAAA;AACR,eAAO,KAAKA;AAAAA,MACf;AAAA;;MAED,OAAA,SAAA,UAAU9T,QAAQ;AACd,YAAIA,WAAW,KAAK8T,SAAS;AACzB,cAAIyP,iBAAiB,KAAKC;AACtBC,cAAAA,aAAa,KAAK3P;AACjBA,eAAAA,UAAU9T;AAGX,cAAA,KAAK3B,WAAY2B,UAAUA,OAAO+U,gBAAP,GAA2B;AACtD,iBAAK3W,OAAOslB,UAAUD,YAAYzjB,MAAlC;AAAA,UACH;AAED,cAAIyjB,YAAY;AAEZA,uBAAWhH,oBAAoB,CAA/B;AAAA,UACH;AAED,eAAKC,WAAW,IAAI,IAAI,CAAxB;AAEI,cAAA,KAAK5I,SAAS;AAETA,iBAAAA,QAAQwP;UAChB;AAED,cAAI,KAAK7C,YAAY,GAAG;AACfkD,iBAAAA,WAAW3jB,MAAhB;AAAA,UACH,OAAM;AACE2jB,iBAAAA,WAAW3jB,SAASA,OAAO4jB,aAAP,IAAwB,IAAjD;AAAA,UACH;AAED,cAAIL,mBAAmB,KAAKC,cAAc;AACtC,gBAAI,CAAC,KAAKA,cAAc;AACpB,mBAAKK,gBAAL;AAAA,YACH,OAAM;AACH,mBAAKC,eAAeL,WAAWG,aAA/B,CAAA;AAAA,YACH;AAAA,UACJ;AAGI/C,eAAAA,gBAAgB;AACjB,cAAA,KAAKF,UAAU;AACVA,iBAAAA,SAASoD;UACjB;AAEG,cAAA,CAAC,KAAKjD,SAAS;AACf,gBAAIkD,iBAAiBhkB,UAAU,CAACA,OAAO+gB,0BAA0B/gB,OAAOif,eAAe;AACvF,gBAAI+E,mBAAmB,KAAK/E,cAAc;AACjCxC,mBAAAA,oBAAoB,CAAzB;AACKwH,mBAAAA,yBAAyBD,cAA9B;AAAA,YACH;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA;;aAED,SAA2B,cAAA;AAAfE,YAAAA,yEAAQ;AACZ,YAAA,CAAC,KAAKzF,UAAU,KAAKG,iBAAiB,GAAG;AACpCH,eAAAA,SAAS;AACd,cAAIyF,OAAO;AAGP,iBAAKlI,IAAImI,WAAW,IAApB;AAAA,UACH;AAAA,QACJ;AAAA,MACJ;AAAA;;aAED,SAAWtpB,WAAAA,OAAO8Y,OAAO;AACrB,YAAI,CAAC,KAAKD;AAAW,eAAKA,YAAY,CAAA;AACjCA,aAAAA,UAAU0Q,OAAOvpB,OAAO,GAAG8Y,KAAhC;AACAA,cAAM+P,UAAU,IAAhB;AAAA,MACH;AAAA;;aAED,SAAW7oB,WAAAA,OAAO8Y,OAAO;AACrB,YAAI,CAAC,KAAKD;AAAW,eAAKA,YAAY,CAAA;AACtC,aAAKA,UAAU7Y,KAAf,EAAsB6oB,UAAU,IAAhC;AACA,aAAKhQ,UAAU7Y,KAAf,IAAwB8Y;AACxBA,cAAM+P,UAAU,IAAhB;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,cAAc7oB,OAAO;AACjB,YAAI8Y,QAAQ,KAAKD,UAAU7Y,KAAf;AACZ,aAAK6Y,UAAU0Q,OAAOvpB,OAAO,CAA7B;AACA8Y,cAAM+P,UAAU,IAAhB;AAAA,MACH;AAAA;;aAED,SAAiB,iBAAA;AACT,YAAA,KAAKhQ,WAAW;AAChB,mBAASxb,IAAI,GAAGF,IAAI,KAAK0b,UAAUzb,QAAQC,IAAIF,GAAGE,KAAK;AACnD,iBAAKwb,UAAUxb,CAAf,EAAkBwrB,UAAU,IAA5B;AAAA,UACH;AAED,eAAKhQ,UAAU0Q,OAAO,CAAtB;AAEI,cAAA,KAAKvF,mBAAmB;AACxB,iBAAKA,kBAAkBuF,OAAO,CAA9B;AAAA,UACH;AAAA,QACJ;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,aAAaC,SAASC,OAAOC,OAAO;AAC3B7Q,aAAAA,YAAY6Q;AACjB,iBAASrsB,IAAI,GAAGF,IAAIqsB,QAAQpsB,QAAQC,IAAIF,GAAGE,KAAK;AAC5CmsB,kBAAQnsB,CAAD,EAAIwrB,UAAU,IAArB;AAAA,QACH;AACD,iBAASxrB,KAAI,GAAGF,KAAIssB,MAAMrsB,QAAQC,KAAIF,IAAGE,MAAK;AAC1CosB,gBAAMpsB,EAAD,EAAIwrB,UAAU,IAAnB;AAAA,QACH;AAAA,MACJ;AAAA;;aAED,SAAUc,UAAAA,WAAWC,SAAS;AAC1B,YAAI3sB,IAAI,KAAK4b,UAAU8Q,SAAf;AACR,aAAK9Q,UAAU0Q,OAAOI,WAAW,CAAjC;AACK9Q,aAAAA,UAAU0Q,OAAOK,SAAS,GAAG3sB,CAAlC;AAGK+oB,aAAAA,gBAAgB;AACjB,YAAA,KAAKF,UAAU;AACVA,eAAAA,SAASoD;QACjB;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,mBAAmBttB,GAAGD,GAAGsB,GAAGQ,GAAG;AACtBokB,aAAAA,WAAW,CAAhB;AACKwB,aAAAA,WAAWznB;AACX0nB,aAAAA,WAAW3nB;AACX4nB,aAAAA,WAAWtmB;AACXumB,aAAAA,WAAW/lB;AAGhB,aAAKgmB,aAAc9nB,MAAM,KAAOsB,MAAM,KAAOrB,IAAI,KAAO6B,IAAI;AAAA,MAC/D;AAAA;;aAED,SAAmBU,mBAAAA,IAAImqB,IAAI;AAClBnF,aAAAA,YAAYhlB;AACZilB,aAAAA,YAAYkF;AACjB,aAAKrB,wBAAL;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,eAAerrB,GAAG;AACd,YAAI,CAAC,KAAKinB,cAAcvlB,SAAW,KAAK2b,WAAW,KAAKA,QAAQ4J,cAAcvlB,SAAU1B,GAAI;AAEnFimB,eAAAA,WAAW,IAAI,GAApB;AAAA,QACH,OAAM;AACEA,eAAAA,WAAW,CAAhB;AAAA,QACH;AAEGjmB,YAAAA,IAAI,OAAO;AAEXA,cAAI;AAAA,QACP;AAEIonB,aAAAA,cAAcpnB;AAAAA,MACtB;AAAA;;aAED,SAAc4J,cAAAA,GAAGC,GAAmC;AAAhCokB,YAAAA,aAAa,UAAA,SAAA,KAAA,UAAA,CAAA,MAAA,SAAA,UAAA,CAAA,IAAA,KAAKnG;AAE7BA,aAAAA,eAAemG;AAEhB,YAAA,KAAKjD,iBAAiB;AACtB,eAAKpjB,QAAQqC,gBAAgBL;AAC7B,eAAKhC,QAAQuC,iBAAiBN;AAAAA,QACjC,OAAM;AACC,cAAA,KAAKqU,OAAOtU,KAAK,KAAKuU,OAAOtU,GAAG;AAChC,iBAAK8a,kBAAkB/a,GAAGC,CAA1B;AACA,mBAAO;AAAA,UACV;AAAA,QACJ;AACD,eAAO;AAAA,MACV;AAAA;;aAED,SAAkBD,kBAAAA,GAAGC,GAAG;AAChB,YAAA,KAAKqU,OAAOtU,KAAK,KAAKuU,OAAOtU,GAAG;AAC3BqU,eAAAA,KAAKtU;AACLuU,eAAAA,KAAKtU;AAEV,eAAKwhB,wBAAL;AAEI,cAAA,KAAKd,aAAa;AACbA,iBAAAA,YAAY3D;AACZ2D,iBAAAA,YAAYpE;UACpB;AAED,eAAKuF,sBAAL;AAAA,QACH;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,iBAAiBwC,KAAKC,KAAKC,KAAKC,KAAK;AAC5BrI,aAAAA,oBAAoB,CAAzB;AAEK4D,aAAAA,OAAOsE;AACPrE,aAAAA,OAAOsE;AACPrE,aAAAA,OAAOsE;AACPrE,aAAAA,OAAOsE;AAAAA,MACf;AAAA;;WAED,SAA6B,MAAA;AACzB,eAAO,KAAKnG;AAAAA,MACf;AAAA;;MAED,OAAA,SAAA,0BAA0BoG,eAAe;AAChCtI,aAAAA,oBAAoB,CAAzB;AACKkC,aAAAA,0BAA0BoG;AAAAA,MAClC;AAAA;;WAED,SAAa,MAAA;AACT,eAAO,KAAKnE;AAAAA,MACf;AAAA;;aAED,SAAY,YAAA;AAER,aAAK9M,UAAU,IAAIyJ,aAAY,KAAKzB,QAArB;AAGf,aAAKhI,QAAQqJ,oBAAoB;AACjC,aAAKrJ,QAAQ8J,cAAc;AAGtBgD,aAAAA,UAAU;AAEf,aAAK5E,IAAIgJ,OAAO;AAGXlR,aAAAA,QAAQuN,YAAY,CAAC,GAAG,GAAG,KAAKrF,IAAI5E,MAAM6N,aAAa,KAAKjJ,IAAI5E,MAAM8N,YAAlD;AACzB,aAAKpR,QAAQkL,WAAW,KAAKlL,QAAQuN;AAGrC,aAAKvN,QAAQqN,mBAAmB;AAEhC,aAAKzE,WAAW,IAAI,IAAI,CAAxB;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,aAAa5kB,GAAG;AACRzB,YAAAA,IAAIyB;AACR,eAAOzB,IAAIA,EAAEyd,SAAS;AACd,cAAA,SAASzd,GAAG;AACZ,mBAAO;AAAA,UACV;AAAA,QACJ;AACD,eAAO;AAAA,MACV;AAAA;;aAED,SAAa,aAAA;AACT,eAAQ,KAAKqqB,uBAAuB,KAAKK,2BAA2B,KAAKN,YAAY,KAAK,KAAKG,WAAW,CAAC,KAAK9M;AAAAA,MACnH;AAAA;;aAED,SAAe,eAAA;AACP,YAAA,KAAK0P,cAAc;AACnB,iBAAO;AAAA,QACV,OAAM;AACH,iBAAO,KAAK1P,QAAQ8P;QACvB;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,WAAWuB,YAAY;AACnB,YAAI,KAAKxE,aAAawE,YAAY;AAC9B,cAAI,KAAKxE,aAAa,MAAM;AACxB,gBAAI,KAAKF,YAAY,GAAG;AACfE,mBAAAA,SAASyE;YACjB;AAGIzE,iBAAAA,SAASoD;UACjB;AAEGoB,cAAAA,eAAe,MAAM;AACrB,gBAAIE,mBAAoBF,WAAWvG,iBAAiB;AAGpD,gBAAI,KAAK6B,YAAY,GAAG;AACpB0E,yBAAWG,iBAAX;AAAA,YACH;AAED,gBAAIH,WAAWvG,iBAAiB,GAAG;AAC3B,kBAAA,CAACyG,oBAAqB,KAAKvR,YAAYqR;AAAa;AAAA,mBAGjD;AAEHA,2BAAWtG,kBAAkBhjB,KAAK,IAAlC;AAAA,cACH;AAGDspB,yBAAWpB,YAAX;AAAA,YACH;AAAA,UACJ;AAEIpD,eAAAA,WAAWwE;AAGXtE,eAAAA,gBAAgB;AAAA,QACxB;AAAA,MACJ;AAAA;;aAED,SAAmB,mBAAA;AACf,aAAKjC;AACL,YAAI,KAAKA,mBAAmB,GAAG;AACvB,cAAA,CAAC,KAAKC,mBAAmB;AACpBA,iBAAAA,oBAAoB;UAC5B;AACG,cAAA,KAAKnL,WAAW;AAEhB,qBAASxb,IAAI,GAAGF,IAAI,KAAK0b,UAAUzb,QAAQC,IAAIF,GAAGE,KAAK;AAC9C2mB,mBAAAA,kBAAkBhjB,KAAK,KAAK6X,UAAUxb,CAAf,CAA5B;AAAA,YACH;AAEIumB,iBAAAA,SAAS;AAAA,UACjB;AAAA,QACJ;AAAA,MACJ;AAAA;;aAED,SAAmB,mBAAA;AACf,aAAKG;AACL,YAAI,KAAKA,mBAAmB,GAAG;AACtBH,eAAAA,SAAS;AACd,eAAKI,kBAAkBuF,OAAO,CAA9B;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAa,MAAA;AACT,eAAO,KAAK3D;AAAAA;MAGhB,KAAA,SAAAtR,KAAWoW,QAAQ;AACf,YAAI,KAAK9E,YAAY8E,QAAQ;AACpB9I,eAAAA,oBAAoB,CAAzB;AAEI0I,cAAAA,aAAa,KAAKxE;AAEtB,cAAI4C,iBAAiB,KAAKC;AACtB+B,cAAAA,WAAW,KAAK,KAAK9E,YAAY,GAAG;AACpC,gBAAI,KAAK3M,YAAY,KAAK6M,UAAU;AAC5B,kBAAA,KAAKA,UAAU;AACVA,qBAAAA,SAASyE;cACjB;AAAA,YACJ,OAAM;AACHD,2BAAa,KAAKrR;AAAAA,YACrB;AAAA,UAPL,WAQWyR,WAAW,KAAK,KAAK9E,YAAY,GAAG;AAC3C0E,yBAAa,KAAKrR,UAAU,KAAKA,QAAQ8P,aAA5B,IAA6C;AAC1D,gBAAIuB,eAAe,KAAKxE,UAAU;AAC1B,kBAAA,KAAKA,UAAU;AACVA,qBAAAA,SAAS2E;AACT3E,qBAAAA,SAASoD;cACjB;AAAA,YACJ;AAAA,UACJ,WAAUwB,WAAW,KAAK9E,SAAS;AAChC,gBAAI,KAAKE,YAAY,KAAKA,SAAS/B,gBAAgB;AAC1C+B,mBAAAA,SAASoD;YACjB;AAAA,UACJ;AAED,cAAIoB,eAAe,KAAKxE,UAAU;AACzBgD,iBAAAA,WAAW,IAAhB;AAAA,UACH;AAEIlD,eAAAA,UAAU8E;AAEf,cAAIJ,eAAe,KAAKxE,UAAU;AACzBgD,iBAAAA,WAAWwB,UAAhB;AAAA,UACH;AAED,cAAI5B,mBAAmB,KAAKC,cAAc;AACtC,gBAAI,CAAC,KAAKA,cAAc;AACpB,mBAAKK,gBAAL;AAAA,YACH,OAAM;AACH,mBAAKC,eAAe,KAAKhQ,QAAQ8P,aAAjC,CAAA;AAAA,YACH;AAAA,UACJ;AAGI/C,eAAAA,gBAAgB;AACjB,cAAA,KAAKF,UAAU;AACVA,iBAAAA,SAASoD;UACjB;AAAA,QACJ;AAAA,MACJ;AAAA;;WAED,SAAyB,MAAA;AACrB,eAAO,KAAKrD;AAAAA;MAGhB,KAAA,SAAAvR,KAAuBjY,GAAG;AACjBulB,aAAAA,oBAAoB,CAAzB;AAEA,YAAI8G,iBAAiB,KAAKC;AACrB9C,aAAAA,sBAAsBxpB;AAE3B,YAAIqsB,mBAAmB,KAAKC,cAAc;AACtC,cAAI,CAAC,KAAKA,cAAc;AACpB,iBAAKK,gBAAL;AAAA,UACH,OAAM;AACH,iBAAKC,eAAe,KAAKhQ,QAAQ8P,aAAjC,CAAA;AAAA,UACH;AAAA,QACJ;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,eAAe4B,cAAc;AAAA,YAAA,QAAA;AACzB,YAAIA,gBAAgBA,aAAa5G,iBAAiB,GAAG;AAEjD,cAAM6G,UAAU,KAAKC;AACrBD,kBAAQ7pB,QAAQ,SAAC9D,GAAM;AAAA,2BAAA,MAAA,KAAA;AACf,gBAAA,KAAK6tB,aAAa7tB,CAAlB,KAAwBA,EAAE2oB,YAAY,GAAG;AACzC3oB,gBAAE6rB,WAAW,IAAb;AAAA,YACH;AAAA,UACJ,EAJD,KAAA,IAAA,CAAA;AAAA,QAKH;AAAA,MACJ;AAAA;;aAED,SAAoB,oBAAA;AACV8B,YAAAA,UAAU,CAAA;AACZ,YAAA,KAAK/R,WAAW;AAChB,mBAASxb,IAAI,GAAGF,IAAI,KAAK0b,UAAUzb,QAAQC,IAAIF,GAAGE,KAAK;AACnD,iBAAKwb,UAAUxb,CAAf,EAAkB0tB,qBAAqBH,OAAvC;AAAA,UACH;AAAA,QACJ;AACD,eAAOA;AAAAA,MACV;AAAA;;MAED,OAAA,SAAA,qBAAqBA,SAAS;AACtB,YAAA,KAAKhF,SAAS;AACdgF,kBAAQ5pB,KAAK,IAAb;AAAA,QADJ,WAEW,KAAK6X,aAAa,CAAC,KAAK8P,WAAL,GAAmB;AAC7C,mBAAStrB,IAAI,GAAGF,IAAI,KAAK0b,UAAUzb,QAAQC,IAAIF,GAAGE,KAAK;AACnD,iBAAKwb,UAAUxb,CAAf,EAAkB0tB,qBAAqBH,OAAvC;AAAA,UACH;AAAA,QACJ;AAAA,MACJ;AAAA;;aAED,SAAkB,kBAAA;AAEd,YAAI,KAAK7G,iBAAiB,GAAG;AACzB,cAAIuG,aAAa,KAAKrR,QAAQ8P,aAAb;AAGb,cAAA,KAAKnF,QAAQ;AACb,iBAAKoH,qBAAL;AAAA,UACH;AAEIhH,eAAAA,kBAAkBiH,MAAvB,EAA+BlqB,QAAQ,SAAU9D,GAAG;AAChD,gBAAIA,EAAE2oB,YAAY,GAAG;AACjB3oB,gBAAE6rB,WAAWwB,UAAb;AAAA,YACH;AAAA,UACJ,CAJD;AAAA,QAKH;AAAA,MACJ;AAAA;;WAED,SAAc,MAAA;AACV,eAAO,KAAKhG;AAAAA;MAGhB,KAAA,SAAAhQ,KAAYzY,OAAO;AACf,YAAI,KAAKyoB,aAAazoB,OAAO;AACzB,eAAK+lB,oBAAoB,KAAKkC,0BAA0B,IAAI,CAA5D;AACKQ,eAAAA,WAAWzoB;AAAAA,QACnB;AAAA,MACJ;AAAA;;WAED,SAAc,MAAA;AACV,eAAO,KAAK0oB;AAAAA;MAGhB,KAAA,SAAAjQ,KAAYzY,OAAO;AACf,YAAI,KAAK0oB,aAAa1oB,OAAO;AACzB,eAAK+lB,oBAAoB,KAAKkC,0BAA0B,IAAI,CAA5D;AACKS,eAAAA,WAAW1oB;AAAAA,QACnB;AAAA,MACJ;AAAA;;WAED,SAAc,MAAA;AACV,eAAO,KAAK2oB;AAAAA;MAGhB,KAAA,SAAAlQ,KAAYzY,OAAO;AACf,YAAI,KAAK2oB,aAAa3oB,OAAO;AACzB,eAAK+lB,oBAAoB,KAAKkC,0BAA0B,IAAI,CAA5D;AACKU,eAAAA,WAAW3oB;AAAAA,QACnB;AAAA,MACJ;AAAA;;WAED,SAAc,MAAA;AACV,eAAO,KAAK4oB;AAAAA;MAGhB,KAAA,SAAAnQ,KAAYzY,OAAO;AACf,YAAI,KAAK4oB,aAAa5oB,OAAO;AACzB,eAAK+lB,oBAAoB,KAAKkC,0BAA0B,IAAI,CAA5D;AACKW,eAAAA,WAAW5oB;AAAAA,QACnB;AAAA,MACJ;AAAA;;MAGD,KAAA,SAAAyY,KAAac,GAAG;AACPuN,aAAAA,YAAYvN;AACZyM,aAAAA,WAAW,CAAhB;AAAA,MACH;AAAA;;MAED,KAAA,SAAAvN,KAAkBc,GAAG;AACZ8N,aAAAA,iBAAiB9N;AACjByM,aAAAA,WAAW,CAAhB;AAAA,MACH;AAAA;;MAED,KAAA,SAAAvN,KAAiBc,GAAG;AACX6N,aAAAA,gBAAgB7N;AAChByM,aAAAA,WAAW,CAAhB;AAAA,MACH;AAAA;;WAED,SAAa,MAAA;AACT,eAAO,KAAKoE;AAAAA;MAGhB,KAAA,SAAA3R,KAAWjY,GAAG;AACLulB,aAAAA,oBAAoB,CAAzB;AAEIsJ,YAAAA,aAAa,KAAKjF;AACjBA,aAAAA,UAAU5pB;AACf,YAAI,CAACA,KAAK6uB,YAAY;AAElB,cAAI/B,iBAAkB,KAAKlQ,WAAW,CAAC,KAAKA,QAAQiN,0BAA0B,KAAKjN,QAAQmL,eAAe;AACrGgF,eAAAA,yBAAyBD,cAA9B;AAAA,QAHJ,WAIW9sB,GAAG;AAEL+sB,eAAAA,yBAAyB,IAA9B;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAmB,MAAA;AACR,eAAA,KAAKhF,eAAe,KAAKA,aAAa+G,SAAS,KAAKjH,YAAYkH;AAAAA,MAC1E;AAAA;;WAED,SAAwB,MAAA;AACpB,eAAO,KAAKhH;AAAAA,MACf;AAAA;;WAED,SAAe,MAAA;AACX,eAAO,KAAKT;AAAAA;MAGhB,KAAA,SAAArP,KAAajY,GAAG;AACZ,YAAI,KAAKsnB,cAActnB,GAAG;AACjBsnB,eAAAA,YAAYtnB;AAIZwlB,eAAAA,WAAW,IAAI,CAApB;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAc,MAAA;AACV,eAAO,KAAK4E;AAAAA;MAGhB,KAAA,SAAAnS,KAAYjY,GAAG;AAINoqB,aAAAA,WAAWpqB;AAAAA,MACnB;AAAA;;MAED,OAAA,SAAA,yBAAyB2kB,aAAa;AAC7BoD,aAAAA,eAAepD;AAEpB,YAAI,KAAKnI,aAAa,CAAC,KAAKqN,yBAAyB;AACjD,mBAAS7oB,IAAI,GAAGF,IAAI,KAAK0b,UAAUzb,QAAQC,IAAIF,GAAGE,KAAK;AACnD,gBAAIJ,IAAI,KAAK4b,UAAUxb,CAAf;AACR,gBAAI,CAACJ,EAAEgpB,SAAS;AACZhpB,gBAAEmsB,yBAAyBpI,WAA3B;AACA/jB,gBAAEqlB,oBAAoB;AAAA,YACzB;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,iCAAiCtB,aAAa;AACtC,YAAA,KAAKnI,WAAW;AAChB,mBAASxb,IAAI,GAAGF,IAAI,KAAK0b,UAAUzb,QAAQC,IAAIF,GAAGE,KAAK;AACnD,gBAAIJ,IAAI,KAAK4b,UAAUxb,CAAf;AACR,gBAAI,CAACJ,EAAEgpB,SAAS;AACZhpB,gBAAEmsB,yBAAyBpI,WAA3B;AACA/jB,gBAAEqlB,oBAAoB;AAAA,YACzB;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA;;aAED,SAAoB,oBAAA;AAChB,eAAO,KAAK2B,mBAAmB,KAAKpB;AAAAA,MACvC;AAAA;;WAED,SAAoB,MAAA;AAChB,eAAO,KAAKoB;AAAAA,MACf;AAAA;;aAED,SAA+B,+BAAA;AAE3B,YAAI5nB,IAAI,KAAKgvB,WAAW1T;AAExB,YAAItb,GAAG;AACH,eAAKivB,uBAAL;AAAA,QACH,OAAM;AACH,eAAKC,wBAAL;AACKpF,eAAAA,YAAY3D;QACpB;AAAA,MACJ;AAAA;;aAED,SAAyB,yBAAA;AACjB,YAAA,CAAC,KAAK0D,yBAAyB;AAC/B,cAAIwC,iBAAiB,KAAKC;AAErBzC,eAAAA,0BAA0B;AAE/B,eAAKjC,iBAAiB,IAAInB;AAGrB0I,eAAAA,iCAAiC,IAAtC;AAEI,cAAA,CAAC9C,gBAAgB;AAEZO,iBAAAA,eAAe,KAAKhQ,UAAU,KAAKA,QAAQ8P,iBAAiB,IAAjE;AAAA,UACH;AAEInH,eAAAA,oBAAoB,CAAzB;AAGKC,eAAAA,WAAW,CAAhB;AAEK6E,eAAAA,SAAS,KAAK+E;AAAAA,QACtB;AAAA,MACJ;AAAA;;aAED,SAA0B,0BAAA;AAClB,YAAA,KAAKvF,yBAAyB;AACzBA,eAAAA,0BAA0B;AAE1BsF,eAAAA,iCAAiC,KAAKpH,YAA3C;AAEKH,eAAAA,iBAAiB,KAAKpB;AAE3B,cAAI,CAAC,KAAK8F,cAAc;AACpB,iBAAKK,gBAAL;AAAA,UACH;AAGInH,eAAAA,WAAW,CAAhB;AAEKD,eAAAA,oBAAoB,CAAzB;AAEK8E,eAAAA,SAAS,KAAKC;AAAAA,QACtB;AAAA,MACJ;AAAA;;aAED,SAAU,UAAA;AACN,eAAQ,KAAKrC,aAAa,cAAgB,KAAKC,aAAa,cAAgB,KAAKC,aAAa,cAAgB,KAAKC,aAAa;AAAA,MACnI;AAAA;;aAED,SAAqB,qBAAA;AACjB,eAAQ,KAAKe,SAAS,KAAO,KAAKC,SAAS,KAAO,KAAKC,SAAS,KAAO,KAAKC,SAAS;AAAA,MACxF;AAAA;;aAED,SAAkB,kBAAA;AACd,aAAK+F,oBAAoB,CAAC,KAAKlG,MAAM,KAAKC,MAAM,KAAKC,MAAM,KAAKC,IAAvC;AACpBH,aAAAA,OAAO;AACPC,aAAAA,OAAO;AACPC,aAAAA,OAAO;AACPC,aAAAA,OAAO;AAAA,MACf;AAAA;;aAED,SAAoB,oBAAA;AAChB,aAAKH,OAAO,KAAKkG,kBAAkB,CAAvB;AACZ,aAAKjG,OAAO,KAAKiG,kBAAkB,CAAvB;AACZ,aAAKhG,OAAO,KAAKgG,kBAAkB,CAAvB;AACZ,aAAK/F,OAAO,KAAK+F,kBAAkB,CAAvB;AACPA,aAAAA,oBAAoB;AAAA,MAC5B;AAAA;;aAED,SAAe,eAAA;AACX,aAAKC,iBAAiB,CAAC,KAAKrH,UAAU,KAAKC,UAAU,KAAKE,UAAU,KAAKD,QAAnD;AACjBF,aAAAA,WAAW;AACXC,aAAAA,WAAW;AACXE,aAAAA,WAAW;AACXD,aAAAA,WAAW;AAAA,MACnB;AAAA;;aAED,SAAiB,iBAAA;AACb,aAAKF,WAAW,KAAKqH,eAAe,CAApB;AAChB,aAAKpH,WAAW,KAAKoH,eAAe,CAApB;AAChB,aAAKlH,WAAW,KAAKkH,eAAe,CAApB;AAChB,aAAKnH,WAAW,KAAKmH,eAAe,CAApB;AACXA,aAAAA,iBAAiB;AAAA,MACzB;AAAA;;aAED,SAAY,YAAA;AACA,eAAA,KAAK3I,cAAc;AAAA,MAC9B;AAAA;;WAED,SAAkB,MAAA;AACd,eAAO,KAAKa;AAAAA,MACf;AAAA;;WAcD,SAAmB,MAAA;AACf,eAAO,KAAKwC;AAAAA;MAbhB,KAAA,SAAA/R,KAAiBjY,GAAG;AAMXgqB,aAAAA,gBAAgBhqB,IAAIA,EAAE4uB,MAAF,IAAY;AAGrC,aAAKhE,wBAAL;AAAA,MACH;AAAA;;aAMD,SAAS,SAAA;AACL,aAAKvV,WAAW,KAAKuH,QAAQ2J;AAEzB,YAAA,KAAKpf,WAAW,KAAKA,QAAQ4V,UAAb,GAA0B;AAC1C,cAAI,KAAK1H,UAAU,KAAK;AACflO,iBAAAA,QAAQooB;UAChB;AAAA,QAHL,WAIY,KAAKla,UAAU,KAAM,KAAKgT,WAAW;AAC7C,eAAKmH,uBAAL;AAAA,QACH;AAEG,YAAA,KAAKlJ,WAAW;AAEXI,eAAAA,cAAc;AACnB,eAAKJ,UAAU,KAAK9E,SAAS,IAA7B;AAAA,QACH;AAED,YAAMiO,KAAK,KAAK7S,QAAQ4J;AACpBrd,YAAAA,IAAI,KAAKqd;AACb,YAAMxI,UAAWyR,GAAGxuB,SAAS,KAAK0lB;AAQlC,YAAI,KAAKD,eAAgB,KAAKrR,WAAW2I,WAAa7U,EAAElI,SAAS,CAAC+c,SAAU;AACpEnJ,cAAAA,SAAS,KAAKQ;AAGdR,cAAAA,SAAS,GAAG;AACZ,gBAAI,CAAC1L,EAAElI,SAAS+c,SAAS;AAEhBiI,mBAAAA,oBAAoB;AAAA,YAC5B;AACD9c,cAAElI,QAAQwuB,GAAGxuB,QAAQ,KAAK0lB;AAE1B,gBAAIxd,EAAElI,QAAQ,OAAO;AAEjBkI,gBAAElI,QAAQ;AAAA,YACb;AAAA,UACJ;AAEG4T,cAAAA,SAAS,GAAG;AACR6a,gBAAAA,cAAc,KAAK5I;AACnB5hB,gBAAAA,OAAO6mB,OAAO;AACR4D,kBAAAA,UAAU,KAAK/K,SAASgL,WAAW,KAAKhT,QAAQzT,KAAK,IAAI,KAAK2b,IAAI5E,MAAM2P,UAAU,GAAzB;AAC/DH,4BAAcC,WAAW,KAAKlS,MAAM,KAAK,KAAKqJ;AAAAA,YACjD;AAED3d,cAAE2iB,KAAK2D,GAAG3D,KAAK4D,cAAcD,GAAGK;AAChC3mB,cAAE6iB,KAAKyD,GAAGzD,KAAK,KAAKjF,WAAW0I,GAAGM;AAClC,gBAAIN,GAAGO,OAAO;AAAG7mB,gBAAE2iB,MAAM,KAAK/E,WAAW0I,GAAGO;AAC5C,gBAAIP,GAAGQ,OAAO;AAAG9mB,gBAAE6iB,MAAM0D,cAAcD,GAAGQ;AAAAA,UAC7C;AAEGpb,cAAAA,SAAS,GAAG;AACZ1L,cAAE2mB,KAAK,KAAK9I,WAAWyI,GAAGK;AAC1B3mB,cAAE6mB,KAAK,KAAK7I,WAAWsI,GAAGO;AAC1B7mB,cAAE8mB,KAAK,KAAKjJ,WAAWyI,GAAGQ;AAC1B9mB,cAAE4mB,KAAK,KAAK5I,WAAWsI,GAAGM;AAEtB,gBAAA,KAAK3I,YAAY;AACjBje,gBAAE2mB,MAAM,KAAK5I,WAAWuI,GAAGO;AAC3B7mB,gBAAE6mB,MAAM,KAAK/I,WAAWwI,GAAGK;AAC3B3mB,gBAAE8mB,MAAM,KAAK/I,WAAWuI,GAAGM;AAC3B5mB,gBAAE4mB,MAAM,KAAK9I,WAAWwI,GAAGQ;AAAAA,YAC9B;AAAA,UACJ;AAGD,cAAMC,KAAK,KAAKtT,QAAQgL;AACxB,cAAI,KAAKhL,QAAQuT,qBAAqB;AAClC,gBAAM/Y,OAAO,KAAKwQ,mBAAmB,KAAKpB;AAC1C,gBAAIpP,MAAM;AAGN,mBAAKwQ,iBAAiB,IAAInB;YAC7B;AAEKrnB,gBAAAA,KAAI,KAAKwoB;AAGf,gBAAIxQ,QAASvC,SAAS,GAAI;AACtBzV,iBAAE6B,QAAQivB,GAAGjvB,QAAQ,KAAK0lB;AAE1B,kBAAIvnB,GAAE6B,QAAQ,OAAO;AACjB7B,mBAAE6B,QAAQ;AAAA,cACb;AAAA,YACJ;AAED,gBAAImW,QAASvC,SAAS,GAAI;AAClB6a,kBAAAA,eAAc,KAAK5I;AACnB5hB,kBAAAA,OAAO6mB,OAAO;AACV4D,oBAAAA,WAAU,KAAK/K,SAASgL,WAC1B,KAAKhT,QAAQzT,KAAK,IAClB,KAAK2b,IAAI5E,MAAM2P,UAAU,GAAzB;AACJH,+BAAcC,YAAW,KAAKlS,MAAM,KAAK,KAAKqJ;AAAAA,cAC/C;AAED1nB,iBAAE0sB,KAAKoE,GAAGpE,KAAK4D,eAAcQ,GAAGJ;AAChC1wB,iBAAE4sB,KAAKkE,GAAGlE,KAAK,KAAKjF,WAAWmJ,GAAGH;AAClC,kBAAIG,GAAGF,OAAO;AAAG5wB,mBAAE0sB,MAAM,KAAK/E,WAAWmJ,GAAGF;AAC5C,kBAAIE,GAAGD,OAAO;AAAG7wB,mBAAE4sB,MAAM0D,eAAcQ,GAAGD;AAAAA,YAC7C;AAED,gBAAI7Y,MAAM;AAENvC,wBAAU;AAAA,YACb;AAED,gBAAIuC,QAASvC,SAAS,GAAI;AACtBzV,iBAAE0wB,KAAK,KAAK9I,WAAWkJ,GAAGJ;AAC1B1wB,iBAAE4wB,KAAK,KAAK7I,WAAW+I,GAAGF;AAC1B5wB,iBAAE6wB,KAAK,KAAKjJ,WAAWkJ,GAAGD;AAC1B7wB,iBAAE2wB,KAAK,KAAK5I,WAAW+I,GAAGH;AAEtB,kBAAA,KAAK3I,YAAY;AACjBhoB,mBAAE0wB,MAAM,KAAK5I,WAAWgJ,GAAGF;AAC3B5wB,mBAAE4wB,MAAM,KAAK/I,WAAWiJ,GAAGJ;AAC3B1wB,mBAAE6wB,MAAM,KAAK/I,WAAWgJ,GAAGH;AAC3B3wB,mBAAE2wB,MAAM,KAAK9I,WAAWiJ,GAAGD;AAAAA,cAC9B;AAAA,YACJ;AAAA,UACJ,OAAM;AACErI,iBAAAA,iBAAiB,KAAKpB;AAAAA,UAC9B;AAED,cAAI,KAAK1B,IAAIsL,oBAAoB,IAAI;AACjC,iBAAKtL,IAAIsL,kBAAkB,KAAKpI,mBAAmB;AAAA,UACtD,OAAM;AACH,iBAAKA,mBAAmB,KAAKlD,IAAIsL;AAAAA,UACpC;AAGKC,cAAAA,qBAAqB,KAAKxG,2BAA2B,KAAKC,YAAYwG;AAC5E,cAAI,KAAKvG,wBAAwBsG,oBAAoB;AAE5Chb,iBAAAA,WAAW,IAAI;AAGpBR,sBAAU;AAEN,gBAAA,CAAC,KAAKkV,qBAAqB;AAEtBD,mBAAAA,YAAY5D;YACpB;AAAA,UACJ;AACI6D,eAAAA,sBAAsBsG;AAErBjxB,cAAAA,IAAI,KAAKwoB;AAET2I,cAAAA,QAAQ,KAAKlJ,eAAe,OAAO,KAAK5J;AACxC+S,cAAAA,QAAQ,KAAKnJ,eAAe,OAAO,KAAK3J;AAG9C,cAAI+S,IAAIC,IAAIC,IAAIC;AACVC,cAAAA,WAAYzxB,EAAE4wB,OAAO,KAAO5wB,EAAE6wB,OAAO,KAAO7wB,EAAE0wB,KAAK,KAAO1wB,EAAE2wB,KAAK;AACvE,cAAIc,UAAU;AACVJ,iBAAK/wB,KAAKK,IAAI,GAAGwwB,QAAQnxB,EAAE0wB,IAAIS,QAAQnxB,EAAE0wB,KAAKU,QAAQpxB,EAAE4wB,IAAIQ,QAAQpxB,EAAE4wB,EAAjE,IAAuE5wB,EAAE0sB;AAC9E6E,iBAAKjxB,KAAKI,IAAI,GAAGywB,QAAQnxB,EAAE0wB,IAAIS,QAAQnxB,EAAE0wB,KAAKU,QAAQpxB,EAAE4wB,IAAIQ,QAAQpxB,EAAE4wB,EAAjE,IAAuE5wB,EAAE0sB;AAC9E4E,iBAAKhxB,KAAKK,IAAI,GAAGwwB,QAAQnxB,EAAE6wB,IAAIM,QAAQnxB,EAAE6wB,KAAKO,QAAQpxB,EAAE2wB,IAAIS,QAAQpxB,EAAE2wB,EAAjE,IAAuE3wB,EAAE4sB;AAC9E4E,iBAAKlxB,KAAKI,IAAI,GAAGywB,QAAQnxB,EAAE6wB,IAAIM,QAAQnxB,EAAE6wB,KAAKO,QAAQpxB,EAAE2wB,IAAIS,QAAQpxB,EAAE2wB,EAAjE,IAAuE3wB,EAAE4sB;AAAAA,UACjF,OAAM;AACHyE,iBAAKrxB,EAAE0sB;AACP6E,iBAAKvxB,EAAE0sB,KAAK1sB,EAAE0wB,KAAKS;AACnBG,iBAAKtxB,EAAE4sB;AACP4E,iBAAKxxB,EAAE4sB,KAAK5sB,EAAE2wB,KAAKS;AAAAA,UACtB;AAED,cAAI,KAAKnJ,iBAAiBwJ,YAAY,KAAK7J,WAAW,KAAK,KAAKC,WAAW,IAAI;AAG3E,gBAAM6J,KAAK,KAAKvT,KAAK2S,GAAGJ,KAAK,KAAKtS,KAAK0S,GAAGF,KAAKE,GAAGpE;AAClD,gBAAMiF,KAAK,KAAKxT,KAAK2S,GAAGD,KAAK,KAAKzS,KAAK0S,GAAGH,KAAKG,GAAGlE;AAClD,gBAAI8E,KAAKL;AAAIA,mBAAKK;AAClB,gBAAIC,KAAKL;AAAIA,mBAAKK;AAClB,gBAAID,KAAKH;AAAIA,mBAAKG;AAClB,gBAAIC,KAAKH;AAAIA,mBAAKG;AAAAA,UACrB;AAED,cAAIlc,SAAS,KAAK,CAAC,KAAKiT,UAAwB;AAE5C,gBAAI,KAAKR,aAAaloB,EAAE4xB,SAAF,GAAc;AAEhC,kBAAMC,OAAO,KAAKrU,QAAQmN,sBAAsB,KAAKnN,QAAQuN,YAAY,KAAKvN,QAAQkL;AACtF,kBAAImJ,MAAM;AAEN,oBAAMC,KAAKxxB,KAAKI,IAAImxB,KAAK,CAAD,GAAKR,EAAlB;AACX,oBAAMU,KAAKzxB,KAAKI,IAAImxB,KAAK,CAAD,GAAKP,EAAlB;AACX,qBAAK5I,WAAW,CACZoJ,IACAC,IACAzxB,KAAKK,IAAIkxB,KAAK,CAAD,IAAMA,KAAK,CAAD,GAAKN,EAA5B,IAAkCO,IAClCxxB,KAAKK,IAAIkxB,KAAK,CAAD,IAAMA,KAAK,CAAD,GAAKL,EAA5B,IAAkCO,EAJtB;AAAA,cAMnB,OAAM;AACH,qBAAKrJ,WAAW,CAAC2I,IAAIC,IAAIC,KAAKF,IAAIG,KAAKF,EAAvB;AAAA,cACnB;AAAA,YACJ,OAAM;AAEH,mBAAK5I,WAAW,KAAKlL,QAAQmN,sBAAsB,KAAKnN,QAAQuN,YAAY,KAAKvN,QAAQkL;AAAAA,YAC5F;AAAA,UACJ;AAGG,cAAA,KAAKkC,eAAe;AACfC,iBAAAA,mBAAmB,KAAKD;AAAAA,UAChC,OAAM;AACH,iBAAKC,mBAAmB,KAAKrN,QAAQqN;AAAAA,UACxC;AAEG,cAAA,KAAKrD,eAAe;AAEpB,gBAAI,KAAKA,cAAc,KAAKpF,OAAxB,GAAkC;AAElC,kBAAIqP,UAAU;AACVJ,qBAAK/wB,KAAKK,IAAI,GAAGwwB,QAAQnxB,EAAE0wB,IAAIS,QAAQnxB,EAAE0wB,KAAKU,QAAQpxB,EAAE4wB,IAAIQ,QAAQpxB,EAAE4wB,EAAjE,IAAuE5wB,EAAE0sB;AAC9E6E,qBAAKjxB,KAAKI,IAAI,GAAGywB,QAAQnxB,EAAE0wB,IAAIS,QAAQnxB,EAAE0wB,KAAKU,QAAQpxB,EAAE4wB,IAAIQ,QAAQpxB,EAAE4wB,EAAjE,IAAuE5wB,EAAE0sB;AAC9E4E,qBAAKhxB,KAAKK,IAAI,GAAGwwB,QAAQnxB,EAAE6wB,IAAIM,QAAQnxB,EAAE6wB,KAAKO,QAAQpxB,EAAE2wB,IAAIS,QAAQpxB,EAAE2wB,EAAjE,IAAuE3wB,EAAE4sB;AAC9E4E,qBAAKlxB,KAAKI,IAAI,GAAGywB,QAAQnxB,EAAE6wB,IAAIM,QAAQnxB,EAAE6wB,KAAKO,QAAQpxB,EAAE2wB,IAAIS,QAAQpxB,EAAE2wB,EAAjE,IAAuE3wB,EAAE4sB;AAAAA,cACjF,OAAM;AACHyE,qBAAKrxB,EAAE0sB;AACP6E,qBAAKvxB,EAAE0sB,KAAK1sB,EAAE0wB,KAAKS;AACnBG,qBAAKtxB,EAAE4sB;AACP4E,qBAAKxxB,EAAE4sB,KAAK5sB,EAAE2wB,KAAKS;AAAAA,cACtB;AAED,kBAAI,KAAKnJ,iBAAiBwJ,YAAY,KAAK7J,WAAW,KAAK,KAAKC,WAAW,IAAI;AAC3E,oBAAM6J,MAAK,KAAKvT,KAAK2S,GAAGJ,KAAK,KAAKtS,KAAK0S,GAAGF,KAAKE,GAAGpE;AAClD,oBAAMiF,MAAK,KAAKxT,KAAK2S,GAAGD,KAAK,KAAKzS,KAAK0S,GAAGH,KAAKG,GAAGlE;AAClD,oBAAI8E,MAAKL;AAAIA,uBAAKK;AAClB,oBAAIC,MAAKL;AAAIA,uBAAKK;AAClB,oBAAID,MAAKH;AAAIA,uBAAKG;AAClB,oBAAIC,MAAKH;AAAIA,uBAAKG;AAAAA,cACrB;AAAA,YACJ;AAAA,UACJ;AAED,cAAI,KAAKnU,QAAQ4K,iBAAiB,GAAG;AAE5BA,iBAAAA,eAAe;AAEhB,gBAAA,KAAK0C,qBAAqB;AACrBA,mBAAAA,sBAAsB;AACtB1I,mBAAAA,QAAQ4P;YAChB;AAAA,UACJ,OAAM;AACCvc,gBAAAA,SAAS,GAAG;AAEP2S,mBAAAA,eAAe;AAChB6J,kBAAAA,eAAe;AAGnB,kBAAI,CAAC,KAAKxH,2BAA2B,CAAC,KAAKC,eAAe,CAAC,KAAKA,YAAYwH,iBAAiB;AACzF,oBAAI,KAAKxJ,aAAa,KAAKA,SAAS,CAAd,KAAoB,KAAK,KAAKA,SAAS,CAAd,KAAoB,IAAI;AAE9DN,uBAAAA,eAAe;AAAA,gBACvB,OAAM;AAEH,sBAAK,KAAKM,SAAS,CAAd,IAAmB6I,MACnB,KAAK7I,SAAS,CAAd,IAAmB8I,MACnBH,KAAM,KAAK3I,SAAS,CAAd,IAAmB,KAAKA,SAAS,CAAd,KACzB4I,KAAM,KAAK5I,SAAS,CAAd,IAAmB,KAAKA,SAAS,CAAd,GAC5B;AACON,yBAAAA,eAAe;AAAA,kBACvB;AAEG,sBAAA,KAAKA,cAAc;AACnB,wBAAI,KAAKF,aAAa,KAAKyC,uBAAwB,KAAKK,YAAamG,SAASC,OAAS;AAC9EhJ,2BAAAA,eAAe;AAAA,oBACvB;AAAA,kBACJ;AAAA,gBACJ;AAED6J,+BAAgB,KAAK7J,iBAAiB;AAClC,oBAAA,CAAC6J,cAAc;AAEX,sBAAA,KAAKpH,kBAAkB;AACvBoH,mCAAe,EAAGV,KAAK,KAAK7I,SAAS,CAAd,IAAmB,KAAKmC,iBAAiB,CAAtB,KACrC2G,KAAK,KAAK9I,SAAS,CAAd,IAAmB,KAAKmC,iBAAiB,CAAtB,KACxBwG,KAAK,KAAK3I,SAAS,CAAd,IAAmB,KAAKA,SAAS,CAAd,IAAmB,KAAKmC,iBAAiB,CAAtB,KAC3CyG,KAAK,KAAK5I,SAAS,CAAd,IAAmB,KAAKA,SAAS,CAAd,IAAmB,KAAKmC,iBAAiB,CAAtB;AAAA,kBACnD,OAAM;AACHoH,mCAAe,EAAGV,KAAK,KAAK7I,SAAS,CAAd,IAAmB,OACrC8I,KAAK,KAAK9I,SAAS,CAAd,IAAmB,OACxB2I,KAAK,KAAK3I,SAAS,CAAd,IAAmB,KAAKA,SAAS,CAAd,IAAmB,OAC3C4I,KAAK,KAAK5I,SAAS,CAAd,IAAmB,KAAKA,SAAS,CAAd,IAAmB;AAAA,kBACnD;AACD,sBAAIuJ,gBAAgB,KAAK7J,iBAAiB,GAAG;AAEpCA,yBAAAA,eAAe;AAAA,kBACvB;AAAA,gBACJ;AAAA,cACJ;AAED,kBAAI,KAAK0C,wBAAwBmH,cAAc;AACtCnH,qBAAAA,sBAAsBmH;AAEvB,oBAAA,KAAKnH,qBAAqB;AAWrBxD,uBAAAA,cAAc;AAEb7R,sBAAAA,UAAS,KAAKQ;AACfA,uBAAAA,UAAU;AACVmM,uBAAAA,QAAQ+P;AAET,sBAAA,KAAKlc,SAAS;AAEP,2BAAA,KAAKmO;kBACf;AAEInO,uBAAAA,UAAUR;AAAAA,gBAClB,OAAM;AACE2M,uBAAAA,QAAQ4P;gBAChB;AAAA,cACJ;AAAA,YACJ;AAAA,UACJ;AAEG,cAAA,KAAKrH,qBAAqB;AAEtB,gBAAA,KAAKI,WAAW;AAChB,mBAAKA,UAAU,CAAf,IAAoBoG;AACpB,mBAAKpG,UAAU,CAAf,IAAoBqG;AAAAA,YACvB,OAAM;AACErG,mBAAAA,YAAY,CAAC,GAAG,GAAGoG,OAAOC,KAAd;AAAA,YACpB;AAAA,UACJ;AAGD,eAAKjK,WAAY,KAAKlR,UAAU;AAG3BA,eAAAA,UAAU;AACVqR,eAAAA,cAAc;AAEnB,cAAI,KAAKc,eAAe,GAAG;AACnB,gBAAA,KAAKuC,qBAAqB;AAC1B,kBAAI,KAAKvD,cAAcgL,cAAc;AAI5B5J,qBAAAA,iBAAiB,KAAKpB;AAAAA,cAC9B,OAAM;AAGH,qBAAKoB,iBAAiBnB,mBAAmBgL;AAAAA,cAC5C;AAAA,YACJ;AAEG,gBAAA,KAAKjV,WAAW;AAChB,uBAASxb,IAAI,GAAGF,IAAI,KAAK0b,UAAUzb,QAAQC,IAAIF,GAAGE,KAAK;AACnD,qBAAKwb,UAAUxb,CAAf,EAAkBwiB,OAAlB;AAAA,cACH;AAAA,YACJ;AAEG,gBAAA,KAAKuG,qBAAqB;AACrBnC,mBAAAA,iBAAiBxoB;AAAAA,YACzB;AAAA,UACJ,OAAM;AACC,gBAAA,KAAKod,WAAW;AAChB,uBAASxb,MAAI,GAAGF,MAAI,KAAK0b,UAAUzb,QAAQC,MAAIF,KAAGE,OAAK;AACnD,oBAAI,KAAKwb,UAAUxb,GAAf,EAAkB0lB,aAAa;AAC/B,uBAAKlK,UAAUxb,GAAf,EAAkBwiB,OAAlB;AAAA,gBACH,OAAM;AAEH,uBAAKhH,UAAUxb,GAAf,EAAkBqU,WAAW,KAAKkR;AAClC,uBAAK/J,UAAUxb,GAAf,EAAkB0wB,kBAAlB;AAAA,gBACH;AAAA,cACJ;AAAA,YACJ;AAAA,UACJ;AAEG,cAAA,KAAK7K,gBAAgB;AAChBA,iBAAAA,eAAe,KAAKrF,OAAzB;AAAA,UACH;AAAA,QACJ,OAAM;AACH,cAAI,KAAKsD,IAAIsL,oBAAoB,MAAM,KAAKpI,oBAAoB,KAAKlD,IAAIsL,iBAAiB;AAEtF,iBAAKtL,IAAIsL,kBAAkB;AAAA,UAC9B,OAAM;AACH,iBAAKA,gBAAL;AAAA,UACH;AAAA,QACJ;AAAA,MACJ;AAAA;;aAED,SAAyB,yBAAA;AACrB,YAAI,KAAK/H,YAAY,GAAG;AACdxe,cAAAA,IAAI,KAAKye,OAAO,KAAK1L,QAAQzT,CAAzB;AACV,cAAIU,MAAM,KAAK0T,IAAI;AACf,iBAAKuJ,YAAajd,IAAI,KAAK0T;AACtBA,iBAAAA,KAAK1T;AAAAA,UACb;AAAA,QACJ;AACD,YAAI,KAAKwe,YAAY,GAAG;AACdve,cAAAA,IAAI,KAAKye,OAAO,KAAK3L,QAAQxT,CAAzB;AACV,cAAIU,MAAM,KAAK0T,IAAI;AACf,iBAAKuJ,YAAajd,IAAI,KAAK0T;AACtBA,iBAAAA,KAAK1T;AAAAA,UACb;AAAA,QACJ;AAEG6nB,YAAAA,cAAc;AAClB,YAAI,KAAKtJ,YAAY,GAAG;AACdlf,cAAAA,IAAI,KAAKqf,OAAO,KAAK5L,QAAQzT,CAAzB;AACV,cAAIA,MAAM,KAAKsU,IAAI;AACVA,iBAAAA,KAAKtU;AACVwoB,0BAAc;AAAA,UACjB;AAAA,QACJ;AACD,YAAI,KAAKtJ,YAAY,GAAG;AACdjf,cAAAA,IAAI,KAAKqf,OAAO,KAAK7L,QAAQxT,CAAzB;AACV,cAAIA,MAAM,KAAKsU,IAAI;AACVA,iBAAAA,KAAKtU;AACVuoB,0BAAc;AAAA,UACjB;AAAA,QACJ;AAED,YAAIA,aAAa;AAEb,eAAKhG,sBAAL;AAEKnK,eAAAA,QAAQoQ,oBAAoB,KAAKnU,IAAI,KAAKC,EAA/C;AAAA,QACH;AAAA,MACJ;AAAA;;aAED,SAAoB,oBAAA;AAGZ,YAAA,KAAK8J,iBAAiB,KAAK,KAAKI,eAAe3mB,QAAQ,GAAG;AAGrDumB,eAAAA,eAAe;AAEhB,cAAA,KAAK0C,qBAAqB;AACrBA,iBAAAA,sBAAsB;AACtB1I,iBAAAA,QAAQ4P;UAChB;AAEG,cAAA,KAAK5U,WAAW;AAChB,qBAASxb,IAAI,GAAGF,IAAI,KAAK0b,UAAUzb,QAAQC,IAAIF,GAAGE,KAAK;AACnD,mBAAKwb,UAAUxb,CAAf,EAAkB0wB,kBAAlB;AAAA,YACH;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA;;aAED,SAAkB,kBAAA;AACd,YAAI,KAAK/K,eAAgB,KAAKa,iBAAiB,GAAI;AAC/C,eAAKQ,mBAAmB,KAAKlD,IAAIsL;AAE7B,cAAA,KAAK5T,WAAW;AAChB,qBAASxb,IAAI,GAAGF,IAAI,KAAK0b,UAAUzb,QAAQC,IAAIF,GAAGE,KAAK;AACnD,mBAAKwb,UAAUxb,CAAf,EAAkBovB,gBAAlB;AAAA,YACH;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA;;aAED,SAAgB,gBAAA;AACPnK,aAAAA,oBAAoB;AAErB,YAAA,KAAKsB,QAAQ;AACb,eAAKoH,qBAAL;AAAA,QACH;AAEG,YAAA,KAAKnH,eAAe,KAAK,KAAKI,eAAe3mB,OAAO;AAChD4mB,cAAAA,cAAc,KAAKA;AAEvB,cAAK,KAAKL,iBAAiB,KAAM,KAAKC,yBAAyB;AAC3DI,wBAAYgK,UAAU,KAAKC,cAAc,KAAK/J,YAA9C;AACAF,wBAAYkK,WAAW,KAAKjK,QAA5B;AACA,iBAAKD,YAAYmK,QAAQ,IAAzB;AAAA,UACH;AAGG,cAAA,KAAKxV,WAAW;AACZ,gBAAA,KAAKkL,gBAAgB;AACrB,uBAAS1mB,IAAI,GAAGF,IAAI,KAAK6mB,kBAAkB5mB,QAAQC,IAAIF,GAAGE,KAAK;AAC3D,qBAAK2mB,kBAAkB3mB,CAAvB,EAA0BqpB,OAA1B;AAAA,cACH;AAAA,YACJ,OAAM;AACH,uBAASrpB,MAAI,GAAGF,MAAI,KAAK0b,UAAUzb,QAAQC,MAAIF,KAAGE,OAAK;AAC/C,oBAAA,KAAKwb,UAAUxb,GAAf,EAAkBuoB,YAAY,GAAG;AAEjC,uBAAK/M,UAAUxb,GAAf,EAAkBqpB,OAAlB;AAAA,gBACH;AAAA,cAEJ;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA;;aAED,SAAkB,kBAAA;AACR4H,YAAAA,mBAAmB,KAAKhM;AAKzBA,aAAAA,oBAAoB;AAErB,YAAA,KAAKsB,QAAQ;AACb,eAAKoH,qBAAL;AAAA,QACH;AAEG,YAAA,KAAKnH,eAAe,KAAK,KAAKI,eAAe3mB,OAAO;AAChD4mB,cAAAA,cAAc,KAAKA;AAEnBqK,cAAAA,qBAAqB;AACzB,cAAIC;AACJ,cAAIC;AACA,cAAA,KAAKrI,qBAAqB;AACtB,gBAAA,KAAKtM,OAAO,KAAK,KAAKC,OAAO,GAAG;AAEhC;AAAA,YACH,WAAU,CAAC,KAAKoM,YAAYuI,iBAAlB,KAAyCJ,oBAAoB,GAAI;AAEnEnN,mBAAAA,IAAIwN;AAETzK,0BAAYgK,UAAUhK,YAAYkH,eAAe,IAAjD;AAEAqD,sCAAwBvK,YAAYsK;AAEpCA,kCAAoB;AAAA,gBAChBrM,eAAe;AAAA,gBACftX,QAAQ;AAAA,gBACRrF,GAAG,KAAKsU;AAAAA,gBACRrU,GAAG,KAAKsU;AAAAA,gBACR2H,OAAO;AAAA,gBACPkN,SAAS;AAAA,gBACTC,QAAQ;AAAA,gBACRC,OAAO;AAAA,cARS;AAWpB,kBAAI,KAAK3I,YAAY4I,iBAAuB,KAAA,CAAC7K,YAAY8K,uBAAwBV,mBAAmB,GAAK;AAiBrGE,kCAAkBM,QAAQ;AAC1B5K,4BAAY8K,sBAAsB;AAAA,cACrC;AAED,kBAAI,CAAC,KAAK7I,YAAY4I,oBAAoB;AAMjC5I,qBAAAA,YAAY3D;cACpB;AAED0B,0BAAY+K,qBAAqBT,iBAAjC;AACAtK,0BAAYkK,WAAW,IAAvB;AAEI,kBAAA,KAAKtK,yBAAyB;AAC1BroB,oBAAAA,IAAI,KAAKwoB;AAGb,qBAAKA,iBAAiBnB,mBAAmBgL;AAGzC,qBAAK5J,YAAYmK,QAAQ,IAAzB;AAEKpK,qBAAAA,iBAAiBxoB;AAAAA,cACzB;AAAA,YACJ,OAAM;AACH8yB,mCAAqB;AAAA,YACxB;AAAA,UACJ,OAAM;AACH,gBAAK,KAAK1K,iBAAiB,KAAM,KAAKC,yBAAyB;AAC3DI,0BAAYgK,UAAU,KAAKC,cAAc,KAAK/J,YAA9C;AACAF,0BAAYkK,WAAW,KAAKjK,QAA5B;AACA,mBAAKD,YAAYmK,QAAQ,IAAzB;AAAA,YACH;AAAA,UACJ;AAGD,cAAIE,sBAAsB,KAAK1V,WAAW;AAClC,gBAAA,KAAKkL,gBAAgB;AACrB,uBAAS1mB,IAAI,GAAGF,IAAI,KAAK6mB,kBAAkB5mB,QAAQC,IAAIF,GAAGE,KAAK;AAC3D,qBAAK2mB,kBAAkB3mB,CAAvB,EAA0BqpB,OAA1B;AAAA,cACH;AAAA,YACJ,OAAM;AACH,uBAASrpB,MAAI,GAAGF,MAAI,KAAK0b,UAAUzb,QAAQC,MAAIF,KAAGE,OAAK;AAC/C,oBAAA,KAAKwb,UAAUxb,GAAf,EAAkBuoB,YAAY,GAAG;AAEjC,uBAAK/M,UAAUxb,GAAf,EAAkBqpB,OAAlB;AAAA,gBACH;AAAA,cACJ;AAAA,YACJ;AAAA,UACJ;AAEG,cAAA,KAAKN,qBAAqB;AACtBrE,gBAAAA,sBAAsB;AAC1B,gBAAIwM,oBAAoB;AAEpBrK,0BAAYgL,sBAAZ;AAIA,mBAAK/I,YAAYzE,QAAQ8M,kBAAkB9M;AAEvC8M,kBAAAA,kBAAkB9M,OAAO;AAIpByE,qBAAAA,YAAY3D;cACpB,WAAUgM,kBAAkBrM,eAAe;AAExC,qBAAKgE,YAAYgJ,4BAA4BX,kBAAkBrM,aAA/D;AAEAqM,kCAAkBK,SAAS;AAAA,cAC9B,OAAM;AACH,oBAAI,KAAK1I,YAAYiJ,qBAAqB;AAEjCjJ,uBAAAA,YAAY3D;gBACpB;AAEDgM,kCAAkBrM,gBAAgB,KAAKgE,YAAYkJ,iBAAjB;AAAA,cACrC;AAGDnL,0BAAY+K,qBAAqBR,qBAAjC;AAEA1M,oCAAsB;AAAA,YACzB;AAED,gBAAI,CAAC,KAAKoE,YAAYzE,OAAO;AACzB,kBAAIO,gBAAgB,KAAKkE,YAAYjE,iBAAjB;AACpB,kBAAIH,qBAAqB;AACrB,oBAAIE,eAAe;AAEfA,gCAAcpC,SAASqE,YAAY3H,MAAMuD;AAAAA,gBAC5C;AACIqG,qBAAAA,YAAYpE;cACpB;AAED,kBAAI,CAAC,KAAKoE,YAAYwH,iBAAiB;AAEnCzJ,4BAAYgK,UAAU,KAAKC,cAAc,KAAK/J,YAA9C;AACAF,4BAAYkK,WAAW,KAAKjK,QAA5B;AAGA,oBAAM2K,QAAQ,CAACN,qBAAqBA,kBAAkBM;AAEtD5K,4BAAYoL,cAAc,KAAKnJ,aAAa2I,KAA5C;AACA,qBAAKS,gBAAL;AACA,oBAAI,CAAC,KAAKpJ,YAAYqJ;AAAU,uBAAKC,aAAL;AAChC,qBAAKvL,YAAYmK,QAAQ,MAAM,IAA/B;AACA,oBAAI,CAAC,KAAKlI,YAAYqJ;AAAU,uBAAKE,eAAL;AAChC,qBAAKC,kBAAL;AACAzL,4BAAYoL,cAAc,IAA1B;AAAA,cACH;AAAA,YACJ;AAAA,UACJ;AAED,cAAId,qBAAqBA,kBAAkBM,OAAO;AAE9C5K,wBAAY8K,sBAAsB;AAAA,UACrC;AAAA,QACJ;AAAA,MACJ;AAAA;;WAED,SAAY,MAAA;AACR,eAAO,KAAKpL;AAAAA,MACf;AAAA;;aAED,SAAuB,uBAAA;AAUnB,YAAMzmB,IAAI,KAAK6mB,kBAAkB5mB;AAC7BwyB,YAAAA,MAAM;AACJh0B,YAAAA,IAAI,KAAKooB;AAGTroB,YAAAA,IAAI,CAAA;AACL,iBAAI0B,IAAI,GAAGA,IAAIF,GAAGE,KAAK;AACpBzB,cAAAA,EAAEyB,CAAD,EAAIyoB,aAAa,MAAM;AACxB,gBAAIlqB,EAAEyB,CAAD,EAAI2oB,eAAe;AACpBrqB,gBAAEqF,KAAKpF,EAAEyB,CAAD,CAAR;AAAA,YACH,OAAM;AACCuyB,kBAAAA,QAAQvyB,GAAG;AACXzB,kBAAEg0B,GAAD,IAAQh0B,EAAEyB,CAAD;AAAA,cACb;AACDuyB;AAAAA,YACH;AAAA,UACJ;AAAA,QACJ;AAED,YAAMC,IAAIl0B,EAAEyB;AACZ,YAAIyyB,GAAG;AACE,mBAAIC,IAAI,GAAGA,IAAID,GAAGC,KAAK;AACxBn0B,cAAEm0B,CAAD,EAAI9J,gBAAgB;AAAA,UACxB;AAEDrqB,YAAEo0B,KAAKrN,aAAYsI,oBAAnB;AACM7tB,cAAAA,MAAIyyB;AACN,cAAA,CAACzyB,KAAG;AACJyyB,kBAAM;AACFE,gBAAAA,KAAI;AACL,eAAA;AACCl0B,gBAAEg0B,KAAD,IAAUj0B,EAAEm0B,IAAD;AAAA,YACf,SAAQA,KAAID;AAEb,gBAAIj0B,EAAEwB,SAASwyB,KAAK;AAEhBh0B,gBAAE2tB,OAAOqG,GAAT;AAAA,YACH;AAAA,UACJ,OAAM;AACHh0B,cAAE2tB,OAAOpsB,GAAT;AAEhB,cAAA,CAAgBvB,EAAEm0B,KAAKrN,aAAYsI,oBAAnB;AAEA4E,kBAAM;AACFvyB,gBAAAA,MAAI;AACJyyB,gBAAAA,MAAI;AACFE,gBAAAA,cAAc,CAAA;AACjB,eAAA;AACC,kBAAM3zB,IAAKT,EAAEyB,GAAD,EAAIuoB,YAAYjqB,EAAEm0B,GAAD,EAAIlK,UAAUhqB,EAAEyB,GAAD,EAAIgnB,mBAAmB1oB,EAAEm0B,GAAD,EAAIzL,mBAAmBzoB,EAAEyB,GAAD,EAAIuoB,UAAUjqB,EAAEm0B,GAAD,EAAIlK;AAE/G,kBAAMtI,MAAMjhB,IAAI,IAAIV,EAAEm0B,KAAD,IAAQl0B,EAAEyB,KAAD;AAE9B,kBAAIuyB,QAAQ,KAAMI,YAAYJ,MAAM,CAAP,MAActS,KAAM;AAC7C0S,4BAAYJ,KAAD,IAAUtS;AAAAA,cACxB;AAEGjgB,kBAAAA,OAAKF,KAAG;AACL,mBAAA;AACC,sBAAMmgB,OAAM3hB,EAAEm0B,KAAD;AACb,sBAAIF,QAAQ,KAAMI,YAAYJ,MAAM,CAAP,MAActS,MAAM;AAC7C0S,gCAAYJ,KAAD,IAAUtS;AAAAA,kBACxB;AAAA,gBACJ,SAAQwS,MAAID;AACb;AAAA,cACH,WAAUC,OAAKD,GAAG;AACZ,mBAAA;AACC,sBAAMvS,QAAM1hB,EAAEyB,KAAD;AACb,sBAAIuyB,QAAQ,KAAMI,YAAYJ,MAAM,CAAP,MAActS,OAAM;AAC7C0S,gCAAYJ,KAAD,IAAUtS;AAAAA,kBACxB;AAAA,gBACJ,SAAQjgB,MAAIF;AACb;AAAA,cACH;AAAA,YAzBL,SA0BS;AAEJ6mB,iBAAAA,oBAAoBgM;AAAAA,UAC5B;AAAA,QACJ,OAAM;AACH,cAAIp0B,EAAEwB,SAASwyB,KAAK;AAEhBh0B,cAAE2tB,OAAOqG,GAAT;AAAA,UACH;AAAA,QACJ;AAEIhM,aAAAA,SAAS;AAAA,MACjB;AAAA;;WAED,SAAc,MAAA;AACV,eAAO,KAAKP;AAAAA,MACf;AAAA;;WAED,SAAc,MAAA;AACV,eAAO,KAAKC;AAAAA,MACf;AAAA;;WAED,SAAc,MAAA;AACV,eAAO,KAAKC;AAAAA,MACf;AAAA;;WAED,SAAc,MAAA;AACV,eAAO,KAAKC;AAAAA,MACf;AAAA;;WAED,SAAc,MAAA;AACV,eAAO,KAAKvC;AAAAA,MACf;AAAA;;WAED,SAAoB,MAAA;AAChB,eAAO,KAAKqB;AAAAA,MACf;AAAA;;WAED,SAAiB,MAAA;AACT,YAAA,CAAC,KAAK6D,aAAa;AACnB,eAAKA,cAAc,IAAIpF,kBAAkB,IAAtB;AAAA,QACtB;AACD,eAAO,KAAKoF;AAAAA,MACf;AAAA;;aAED,SAAkB,kBAAA;AACV3gB,YAAAA,IAAI,KAAKqd;AAEb,eAAO,CACHrd,EAAE2iB,IACF3iB,EAAE6iB,IACF7iB,EAAE2iB,KAAK,KAAKrO,KAAKtU,EAAE2mB,IACnB3mB,EAAE6iB,KAAK,KAAKvO,KAAKtU,EAAE8mB,IACnB9mB,EAAE2iB,KAAK,KAAKrO,KAAKtU,EAAE2mB,KAAK,KAAKpS,KAAKvU,EAAE6mB,IACpC7mB,EAAE6iB,KAAK,KAAKvO,KAAKtU,EAAE8mB,KAAK,KAAKvS,KAAKvU,EAAE4mB,IACpC5mB,EAAE2iB,KAAK,KAAKpO,KAAKvU,EAAE6mB,IACnB7mB,EAAE6iB,KAAK,KAAKtO,KAAKvU,EAAE4mB,EARhB;AAAA,MAUV;AAAA;;aAED,SAAuB6D,uBAAAA,MAAMC,MAAM;AAC3Bz0B,YAAAA,IAAI,KAAKwoB;AACb,eAAO,CACHxoB,EAAE0sB,KAAK1sB,EAAE0wB,KAAK8D,OAAOx0B,EAAE4wB,KAAK6D,MAC5Bz0B,EAAE4sB,KAAK5sB,EAAE6wB,KAAK2D,OAAOx0B,EAAE2wB,KAAK8D,IAFzB;AAAA,MAIV;AAAA;;aAED,SAAkBD,kBAAAA,MAAMC,MAAM;AACtB1qB,YAAAA,IAAI,KAAKye;AACb,eAAO,CACHze,EAAE2iB,KAAK3iB,EAAE2mB,KAAK8D,OAAOzqB,EAAE6mB,KAAK6D,MAC5B1qB,EAAE6iB,KAAK7iB,EAAE8mB,KAAK2D,OAAOzqB,EAAE4mB,KAAK8D,IAFzB;AAAA,MAIV;AAAA;;MAED,OAAA,SAAA,eAAehqB,GAAGC,GAAGyS,UAAU;AAE3B,YAAI,KAAKqL,eAAe3mB,UAAU,GAAG;AACjC;AAAA,QACH;AAED,YAAI,KAAK6yB,QAAQjqB,GAAGC,CAAhB,GAAoB;AAChB,cAAA,KAAKge,UAAU;AACX,gBAAA,KAAKiM,aAAa;AAClBxX,uBAAS5X,KAAK,IAAd;AAAA,YACH;AAAA,UACJ,OAAM;AACH4X,qBAAS5X,KAAK,IAAd;AAAA,UACH;AAAA,QACJ;AAEG,YAAA,KAAK6X,WAAW;AAChB,cAAMiX,IAAI,KAAKjX,UAAUzb;AACpB,mBAAIC,IAAI,GAAGA,IAAIyyB,GAAGzyB,KAAK;AACnBwb,iBAAAA,UAAUxb,CAAf,EAAkBgzB,eAAenqB,GAAGC,GAAGyS,QAAvC;AAAA,UACH;AAAA,QACJ;AAED,eAAOA,SAASmX,KAAKrN,aAAYsI,oBAA1B;AAAA,MACV;AAAA;;aAED,SAAQsF,QAAAA,IAAIC,IAAI;AACZ,YAAMtzB,IAAI,KAAKuzB;AACRF,eAAAA,KAAKrzB,EAAE,CAAD,KAAOqzB,KAAKrzB,EAAE,CAAD,KAAOszB,KAAKtzB,EAAE,CAAD,KAAOszB,KAAKtzB,EAAE,CAAD;AAAA,MACvD;AAAA;;aAED,SAAY,YAAA;AACFwzB,YAAAA,KAAK,KAAKtM;AAChB,YAAMlnB,IAAI,KAAKuzB;AAERvzB,eAAAA,EAAE,CAAD,KAAOwzB,GAAG,CAAD,KAAOxzB,EAAE,CAAD,KAAOwzB,GAAG,CAAD,IAAMA,GAAG,CAAD,KAAOxzB,EAAE,CAAD,KAAOwzB,GAAG,CAAD,KAAOxzB,EAAE,CAAD,KAAOwzB,GAAG,CAAD,IAAMA,GAAG,CAAD;AAAA,MACvF;AAAA;;WAED,SAAa,MAAA;AACT,aAAKC,cAAL;AACA,eAAO,KAAKltB;AAAAA,MACf;AAAA;;WAED,SAAW,MAAA;AACA,eAAA,KAAKA,UAAU,KAAKA,QAAQgE,OAAO;AAAA;MAG9C,KAAA,SAAA8M,KAASjY,GAAG;AACR,aAAKkH,OAAOiE,OAAOnL;AAAAA,MACtB;AAAA;;WAED,SAAe,MAAA;AACJ,eAAA,KAAKmH,UAAU,KAAKA,QAAQwD,WAAW;AAAA;MAGlD,KAAA,SAAAsN,KAAajY,GAAG;AACZ,aAAKkH,OAAOyD,WAAW3K;AAAAA,MAC1B;AAAA;;aAED,SAAa,aAAA;AACF,eAAA,CAAC,CAAC,KAAKmH,WAAW,KAAKA,QAAQiD;MACzC;AAAA;;aAED,SAAkB,kBAAA;AACP,eAAA,CAAC,CAAC,KAAKjD,WAAW,KAAKA,QAAQqD;MACzC;AAAA;;aAED,SAAmB,mBAAA;AACf,aAAK6pB,cAAL;AAAA,MACH;AAAA;;aAED,SAAgB,gBAAA;AACR,YAAA,CAAC,KAAKltB,SAAS;AACf,eAAKA,UAAU,IAAIiU,WAAW,IAAf;AAAA,QAClB;AAAA,MACJ;AAAA;;aAED,SAAoB,oBAAA;AAChB,aAAKwP,wBAAL;AAAA,MACH;AAAA;;aAED,SAAgB,gBAAA;AACZ,eAAQ,KAAKzjB,WAAW,KAAKA,QAAQ4V,UAAb;AAAA,MAC3B;AAAA;;MAED,OAAA,SAAA,UAAUlT,GAAGC,GAAGX,GAAGC,GAAG;AACbS,aAAAA,IAAIA;AACJC,aAAAA,IAAIA;AACT,aAAKoa,kBAAkB/a,GAAGC,CAA1B;AAAA,MACH;AAAA;;aAED,SAAgB,gBAAA;AACPoc,aAAAA,WAAW,GAAhB;AAAA,MACH;AAAA;;aAED,SAA0B,0BAAA;AACjBA,aAAAA,WAAW,CAAhB;AAAA,MACH;AAAA;;;MAICiB;AAEY,aAAAA,sBAAA;AAAA,sBAAA,MAAAA,mBAAA;AACLxlB,WAAAA,QAAQ;AAER6qB,WAAAA,KAAK;AACLE,WAAAA,KAAK;AAEL8D,WAAAA,KAAK;AACLE,WAAAA,KAAK;AACLC,WAAAA,KAAK;AACLF,WAAAA,KAAK;AAAA,IACb;;;aAED,SAAa,aAAA;AACT,eAAO,KAAK9uB,UAAU,KAClB,KAAK6qB,OAAO,KACZ,KAAKE,OAAO,KACZ,KAAK8D,OAAO,KACZ,KAAKE,OAAO,KACZ,KAAKC,OAAO,KACZ,KAAKF,OAAO;AAAA,MACnB;AAAA;;aAED,SAAW,WAAA;AACA,eAAA,KAAKC,OAAO,KAAK,KAAKC,OAAO;AAAA,MACvC;AAAA;;;AAILxJ,qBAAmBgL,WAAW,IAAIhL;AAClCJ,cAAYsI,uBAAuB,SAAUpvB,GAAGD,GAAG;AACvCC,WAAAA,EAAEgqB,YAAYjqB,EAAEiqB,UAAUhqB,EAAEyoB,mBAAmB1oB,EAAE0oB,mBAAmBzoB,EAAEgqB,UAAUjqB,EAAEiqB;AAAAA,EAC7F;MCjuEoB+K;AAEH,aAAAA,gBAAA;AAAA,sBAAA,MAAAA,aAAA;AAELC,WAAAA,qBAAqB;AAAA,IAC7B;;;aAED,SAAG3uB,GAAAA,MAAM4uB,UAAU;AACX,YAAA,CAAC,KAAKD,oBAAoB;AACrBE,eAAAA,iBAAiB;AACjBC,eAAAA,kBAAkB;AAClBH,eAAAA,qBAAqB;AAAA,QAC7B;AAED,YAAMI,UAAU,KAAKF,eAAe7uB,IAApB;AACZ,YAAA,CAAC+uB,SAAS;AACV,eAAKF,eAAe7uB,IAApB,IAA4B4uB;AAAAA,QAC/B,OAAM;AACC,cAAA,KAAKC,eAAe7uB,IAApB,MAA8B0uB,cAAaM,UAAU;AACrD,iBAAKF,gBAAgB9uB,IAArB,IAA6B,CAAC,KAAK6uB,eAAe7uB,IAApB,GAA2B4uB,QAA5B;AAC7B,iBAAKC,eAAe7uB,IAApB,IAA4B0uB,cAAaM;AAAAA,UAC5C,OAAM;AACH,iBAAKF,gBAAgB9uB,IAArB,EAA2BjB,KAAK6vB,QAAhC;AAAA,UACH;AAAA,QACJ;AAAA,MACJ;AAAA;;aAED,SAAK5uB,KAAAA,MAAM4uB,UAAU;AAAA,YAAA,QAAA;AACXK,YAAAA,WAAU,SAACC,QAAAA,MAAMC,MAAMC,MAAS;AAAA,yBAAA,MAAA,KAAA;AAClCR,mBAASM,MAAMC,MAAMC,IAAb;AACR,eAAKC,IAAIrvB,MAAMivB,QAAf;AAAA,QACH,EAHD,KAAA,IAAA;AAIAA,iBAAQK,iBAAiBV;AACzB,aAAKW,GAAGvvB,MAAMivB,QAAd;AAAA,MACH;AAAA;;aAED,SAAIjvB,IAAAA,MAAM4uB,UAAU;AACZ,YAAA,KAAKD,oBAAoB;AACzB,cAAMI,UAAU,KAAKF,eAAe7uB,IAApB;AAChB,cAAI+uB,SAAS;AACT,gBAAIA,YAAYL,cAAaM,UAAU;AACnC,kBAAMQ,YAAY,KAAKV,gBAAgB9uB,IAArB;AADiB,kBAAA,YAAA,2BAEnBwvB,SAFmB,GAAA;AAAA,kBAAA;AAER,qBAAA,UAAA,EAAA,GAAA,EAAA,QAAA,UAAA,EAAA,GAAA,QAAA;AAAA,sBAAhBC,IAAgB,MAAA;AACnBA,sBAAAA,MAAMb,YAAYa,EAAEH,kBAAkBV,UAAU;AAChD,2BAAO;AAAA,kBACV;AAAA,gBACJ;AAAA,cANkC,SAAA,KAAA;AAAA,0BAAA,EAAA,GAAA;AAAA,cAAA,UAAA;AAAA,0BAAA,EAAA;AAAA,cAAA;AAAA,YAAvC,WAOW,KAAKC,eAAe7uB,IAApB,MAA8B4uB,YAAY,KAAKC,eAAe7uB,IAApB,EAA0BsvB,mBAAmBV,UAAU;AACxG,qBAAO;AAAA,YACV;AAAA,UACJ;AAAA,QACJ;AACD,eAAO;AAAA,MACV;AAAA;;aAED,SAAI5uB,IAAAA,MAAM4uB,UAAU;AAAA,YAAA,SAAA;AACZ,YAAA,KAAKD,oBAAoB;AACzB,cAAMI,UAAU,KAAKF,eAAe7uB,IAApB;AAChB,cAAI+uB,SAAS;AACT,gBAAIA,YAAYL,cAAaM,UAAU;AACnC,kBAAMQ,YAAY,KAAKV,gBAAgB9uB,IAArB;AAClB,kBAAIjC,QAAQyxB,UAAU/yB,QAAQmyB,QAAlB;AACR7wB,kBAAAA,SAAS,GAAG;AACZyxB,0BAAUlI,OAAOvpB,OAAO,CAAxB;AAAA,cACH;AACDA,sBAAQyxB,UAAUE,IAAI,SAACD,GAAD;AAAA,+BAAA,MAAA,MAAA;AAAOA,uBAAAA,EAAEH;AAAAA,cAAvB,EAAuC7yB,KAAAA,IAAAA,CAAAA,EAAAA,QAAQmyB,QAA/C;AACJ7wB,kBAAAA,SAAS,GAAG;AACZyxB,0BAAUlI,OAAOvpB,OAAO,CAAxB;AAAA,cACH;AACD,kBAAIyxB,UAAUr0B,WAAW,GAAG;AACxB,qBAAK0zB,eAAe7uB,IAApB,IAA4BwvB,UAAU,CAAD;AACrC,qBAAKV,gBAAgB9uB,IAArB,IAA6BkU;AAAAA,cAChC;AAAA,YAbL,WAcW,KAAK2a,eAAe7uB,IAApB,MAA8B4uB,YAAY,KAAKC,eAAe7uB,IAApB,EAA0BsvB,mBAAmBV,UAAU;AACxG,mBAAKC,eAAe7uB,IAApB,IAA4BkU;AAAAA,YAC/B;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA;;aAED,SAAelU,eAAAA,MAAM4uB,UAAU;AAC3B,aAAKS,IAAIrvB,MAAM4uB,QAAf;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,KAAK5uB,MAAMkvB,MAAMC,MAAMC,MAAM;AACrB,YAAA,KAAKT,oBAAoB;AACzB,cAAMjuB,OAAO,KAAKmuB,eAAe7uB,IAApB;AACb,cAAIU,MAAM;AACN,gBAAIA,SAASguB,cAAaM,UAAU;AAChCtuB,mBAAK,MAAMV,MAAMkvB,MAAMC,MAAMC,IAAzB;AAAA,YACP,OAAM;AACH1uB,mBAAKwuB,MAAMC,MAAMC,IAAb;AAAA,YACP;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,cAAcpvB,MAAM;AACZ,YAAA,KAAK2uB,oBAAoB;AACzB,cAAMjuB,OAAO,KAAKmuB,eAAe7uB,IAApB;AACb,cAAIU,MAAM;AACN,gBAAIA,SAASguB,cAAaM,UAAU;AAChC,qBAAO,KAAKF,gBAAgB9uB,IAArB,EAA2B7E;AAAAA,YACrC,OAAM;AACH,qBAAO;AAAA,YACV;AAAA,UACJ;AAAA,QACJ;AACD,eAAO;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,mBAAmB6E,MAAM;AACjB,YAAA,KAAK2uB,oBAAoB;AACzB,iBAAO,KAAKE,eAAe7uB,IAApB;AACP,iBAAO,KAAK8uB,gBAAgB9uB,IAArB;AAAA,QACV;AAAA,MACJ;AAAA;;;AAIL0uB,eAAaM,WAAW,SAASW,QAAQ3vB,MAAMkvB,MAAMC,MAAMC,MAAM;AAC7D,QAAMI,YAAYG,OAAOb,gBAAgB9uB,IAAvB;AAClB,QAAIwvB,WAAW;AAGX,eAAA,KAAA,GAAA,OAAA,mBAA2BA,SAA3B,GAAuC,KAAA,KAAA,QAAA,MAAA;AAAlC,YAAMZ,WAAN,KAAA,EAAA;AACDA,iBAASM,MAAMC,MAAMC,IAAb;AAAA,MACX;AAAA,IACJ;AAAA,EACJ;AAEDV,eAAakB,aAAa,SAASC,KAAK;AACpCA,QAAIjR,UAAU2Q,KAAKb,aAAa9P,UAAU2Q;AAC1CM,QAAIjR,UAAUkR,OAAOpB,aAAa9P,UAAUkR;AAC5CD,QAAIjR,UAAUxD,MAAMsT,aAAa9P,UAAUxD;AAC3CyU,QAAIjR,UAAUyQ,MAAMX,aAAa9P,UAAUyQ;AAC3CQ,QAAIjR,UAAUmR,iBAAiBrB,aAAa9P,UAAUmR;AACtDF,QAAIjR,UAAUoR,OAAOtB,aAAa9P,UAAUoR;AAC5CH,QAAIjR,UAAUqR,gBAAgBvB,aAAa9P,UAAUqR;AACrDJ,QAAIjR,UAAUsR,qBAAqBxB,aAAa9P,UAAUsR;AAAAA,EAC7D;MC9IoBC;AAEjB,aAAAA,QAAYC,aAAa;AAAA,sBAAA,MAAAD,OAAA;AAChBE,WAAAA,eAAe;AAEfnR,WAAAA,MAAMkR;AAMX,WAAKE,YAAY,oBAAI9V;IACxB;;;MA0CD,OAAA,SAAA,WAAWuE,aAAa;AACpB,aAAKuR,UAAUjV,IAAI0D,WAAnB;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,cAAcA,aAAa;AACvB,aAAKuR,UAAUhV,OAAOyD,WAAtB;AACI,YAAA,CAAC,KAAKuR,WAAW;AACjB,eAAKC,QAAL;AAAA,QACH;AAAA,MACJ;AAAA;;aAED,SAAS,SAAA;AAAA,YAAA,QAAA;AACL,aAAKD,UAAUxxB,QAAQ,SAAAigB,aAAe;AAAA,yBAAA,MAAA,KAAA;AAClCA,sBAAYY,oBAAoB,CAAhC;AAAA,QACH,EAFD,KAAA,IAAA,CAAA;AAAA,MAGH;AAAA;;MAED,OAAA,SAAA,MAAM1f,UAAU;AACZF,aAAK4T,YAAY,MAAM1T,QAAvB;AAAA,MACH;AAAA;;aAED,SAAa,aAAA;AAGT,eAAO;AAAA,MACV;AAAA;;aAED,SAAW,WAAA;AAGP,eAAO;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,UAAU;AAAA,MAET;AAAA;;WAED,SAAe,MAAA;AACX,eAAO;AAAA,MACV;AAAA;;aA/ED,SAAcqa,OAAAA,OAAOlgB,GAAG;AACpB,YAAI8uB;AACJ,YAAIjsB,QAAME,gBAAgB/C,CAAtB,GAA0B;AACtBA,cAAAA,EAAEyD,MAAM;AACRqrB,qBAAS5O,MAAMkW,SAASC,aAAanW,MAAM4E,KAAK9kB,CAAvC;AAAA,UACZ,OAAM;AACH8uB,qBAAS,KAAKA;AAAAA,UACjB;AAED,cAAIA,QAAQ;AACRnpB,iBAAK4T,YAAYuV,QAAQ9uB,CAAzB;AAAA,UACH;AAAA,QACJ,WAAUA,MAAM,MAAM;AACnB8uB,mBAAS5O,MAAM4E,IAAI+C,YAAYkH;AAAAA,QAClC,WAAU/uB,MAAM8Z,QAAW;AACxBgV,mBAAS;AAAA,QACZ,OAAM;AACC9uB,cAAAA,EAAEs2B,UAAU;AACR,gBAAA,CAACpW,MAAMkW,SAASG,kBAAkBv2B,EAAE0D,WAAnC,GAAiD;AAClDjB,sBAAQqD,MAAM,iCAAd;AACA9F,kBAAI;AAAA,YACP;AACD8uB,qBAAS9uB;AAAAA,UACZ,OAAM;AACHyC,oBAAQqD,MAAM,2CAAd;AACA;AAAA,UACH;AAAA,QACJ;AAED,eAAOgpB;AAAAA,MACV;AAAA;;aAED,SAAkB,WAAA;AACd,eAAOhV;AAAAA,MACV;AAAA;;aAED,SAAgB,SAAA;AACZ,eAAOA;AAAAA,MACV;AAAA;;;MCvDgB0c;AAKjB,aAAAA,SAAYtW,OAAO;AAAA,sBAAA,MAAAsW,QAAA;AACVtW,WAAAA,QAAQA;AAEb,WAAKH,UAAU,KAAKG,MAAMuF;AAE1B,WAAKxF,KAAKuW,SAAQvW;AAMlB,WAAKsB,WAAW,oBAAInB;AAMfqW,WAAAA,eAAe;AAOfC,WAAAA,UAAU;AASVC,WAAAA,cAAc;AAMdpZ,WAAAA,KAAK;AAMLC,WAAAA,KAAK;AAMLC,WAAAA,KAAK;AAMLC,WAAAA,KAAK;AAOLkZ,WAAAA,aAAa;AAObC,WAAAA,KAAK;AAOLC,WAAAA,KAAK;AAMLC,WAAAA,WAAW;AAOXC,WAAAA,cAAc;AAAA,IAEtB;;;WAED,SAAa,MAAA;AACL,YAAA,KAAKA,eAAe,KAAK9W,MAAM+W,uBAAuB,IAAlC,GAAyC;AACxDC,eAAAA,qBAAqB,IAA1B;AACA,eAAKhX,MAAMiX,0BAA0B,IAArC;AAAA,QACH;AACD,eAAO,KAAKT;AAAAA,MACf;AAAA;;MAED,OAAA,SAAA,WAAW12B,GAAG;AACN,YAAA,CAAC,KAAKuhB,SAASP,IAAIhhB,CAAlB,GAAsB;AACvB,eAAKuhB,SAASN,IAAIjhB,CAAlB;AAEA,cAAI,KAAKuhB,SAASvX,SAAS,GAAG;AACtB,gBAAA,KAAK0sB,SAAS;AACd,mBAAKA,QAAQU,WAAW,IAAxB;AAAA,YACH;AAAA,UACJ;AAEGp3B,cAAAA,EAAEyhB,QAAQ;AACV,iBAAK4V,eAAL;AAAA,UACH;AAAA,QACJ;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,cAAcr3B,GAAG;AACb,YAAI,KAAKuhB,SAASL,OAAOlhB,CAArB,GAAyB;AACzB,cAAI,KAAKuhB,SAASvX,SAAS,GAAG;AACtB,gBAAA,KAAK0sB,SAAS;AACd,mBAAKA,QAAQY,cAAc,IAA3B;AAAA,YACH;AAAA,UACJ;AAEGt3B,cAAAA,EAAEyhB,QAAQ;AACV,iBAAK8V,eAAL;AAAA,UACH;AAAA,QACJ;AAAA,MACJ;AAAA;;aAED,SAAiB,iBAAA;AAEPhV,YAAAA,SAAS,KAAKA;AAEpB,YAAIA,QAAQ;AACR,eAAKiV,oCAAL;AAAA,QACH;AAED,aAAKf;AACL,YAAI,KAAKA,iBAAiB,GAAG;AACzB,eAAKtV,YAAL;AAAA,QACH;AAAA,MACJ;AAAA;;aAED,SAAiB,iBAAA;AACE,aAAKoB;AACpB,aAAKkU;AACD,YAAA,CAAC,KAAKA,cAAc;AACpB,eAAKrV,cAAL;AAAA,QACH;AAAA,MACJ;AAAA;;aAED,SAAc,cAAA;AACN,YAAA,KAAKmB,QAAQ;AACRA,eAAAA,OAAOkV;QACf;AAAA,MACJ;AAAA;;aAED,SAAS,SAAA;AAAA,YAAA,QAAA;AACD,YAAA,KAAKd,aAAa;AAClB,eAAKe,iBAAL;AAAA,QACH;AAED,aAAKnW,SAAS7c,QAAQ,SAAA8c,SAAW;AAAA,yBAAA,MAAA,KAAA;AACzBA,cAAAA,QAAQC,QAAQ;AAChBD,oBAAQuC,sBAAR;AAAA,UACH;AAAA,QACJ,EAJD,KAAA,IAAA,CAAA;AAAA,MAKH;AAAA;;aAED,SAAsC,sCAAA;AAI5BxB,YAAAA,SAAS,KAAKA;AACpB,YAAI,CAACA,OAAO8B,YAAY;AACpB,cAAMsT,WAAW,KAAKC;AAClBD,cAAAA,YAAYA,SAAStT,SAAT,KAAwBsT,aAAapV,QAAS;AACrDsV,iBAAAA,sBAAsBF,QAA3B;AAAA,UACH;AAAA,QACJ,OAAM;AACC,cAAA,KAAKhB,aAAa;AAClB,iBAAKe,iBAAL;AAAA,UACH;AAAA,QACJ;AAAA,MACJ;AAAA;;aAED,SAAgB,gBAAA;AACR,YAAA,KAAKnV,QAAQ;AACRA,eAAAA,OAAOuV;QACf;AAAA,MACJ;AAAA;;aAED,SAAS,SAAA;AACE,eAAA,KAAKrB,eAAe;AAAA,MAC9B;AAAA;;aAMD,SAAe,eAAA;AAEX,eAAO;AAAA,MACV;AAAA;;aAmBD,SAAmB,mBAAA;AACf,cAAM,IAAIzvB,MAAM,uCAAV;AAAA,MACT;AAAA;;WAED,SAAc,MAAA;AACH,eAAA,KAAK+wB;MACf;AAAA;;aAMD,SAAc,cAAA;AACV,eAAO;AAAA,MACV;AAAA;;aAKD,SAAW,WAAA;AAEH,YAAA,KAAKrW,UAAU;AACf,eAAKsW,cAAL;AAAA,QACH,OAAM;AACEhB,eAAAA,cAAc;AAAA,QACtB;AAAA,MACJ;AAAA;;aAED,SAAgB,gBAAA;AAIZ,aAAK9W,MAAM+X,uBAAuB,IAAlC;AAAA,MACH;AAAA;;aAED,SAAoC,uBAAA;AAAfjL,YAAAA,yEAAQ;AAGzB,YAAIA,SAAS,KAAKtL,UAAU;AACnBsV,eAAAA,cAAc;AACnB,cAAIzU,SAAS,KAAK2V;AACbL,eAAAA,sBAAsBtV,MAA3B;AAAA,QACH;AAAA,MACJ;AAAA;;aAED,SAAoB,oBAAA;AACZA,YAAAA,SAAS;AACT,YAAA,KAAKwV,eAAe;AACpB,cAAMzX,WAAW,KAAK6X;AACtB5V,mBAAS,KAAKqV,0BAA0BtX,QAA/B;AACL,cAAA,CAACiC,QAAQ;AACTA,qBAAS,KAAKxC,QAAQqY,iBAAiB,KAAKC,iBAAL,GAAyB/X,QAAvD;AAAA,UACZ;AAAA,QACJ;AACD,eAAOiC;AAAAA,MACV;AAAA;;aAED,SAA0D,4BAAA;AAAA,YAAhCjC,WAAgC,UAAA,SAAA,KAAA,UAAA,CAAA,MAAA,SAAA,UAAA,CAAA,IAArB,KAAK6X,aAAL;AAC7B,YAAA,KAAKJ,eAAe;AACpB,cAAIzX,UAAU;AACV,mBAAO,KAAKP,QAAQuY,yBAAyBhY,QAAtC;AAAA,UACV;AAAA,QACJ;AACD,eAAO;AAAA,MACV;AAAA;;aAED,SAAwC,wBAAA;AAAA,YAAA,SAAA;AAAlBiY,YAAAA,6EAAY;AAC1BC,YAAAA,YAAY,KAAK9B;AAEhBA,aAAAA,UAAU6B;AAEf,YAAI,KAAKhX,SAASvX,MAAM;AACpB,cAAIwuB,WAAW;AACP,gBAAA,KAAK/B,cAAc;AACnB+B,wBAAUV,sBAAV;AAAA,YACH;AAEDU,sBAAUlB,cAAc,IAAxB;AAGG,gBAAA,KAAK,MAAL,KAAgB,CAACkB,UAAU9W,OAAV,GAAoB;AACpC,mBAAK3B,QAAQuE,kBAAkBkU,SAA/B;AAAA,YACH;AAAA,UACJ;AAED,cAAID,WAAW;AAEXA,sBAAUnB,WAAW,IAArB;AACI,gBAAA,KAAKX,cAAc;AACnB8B,wBAAUd,sBAAV;AAAA,YACH;AAAA,UACJ;AAAA,QACJ;AAEG,YAAA,KAAK/V,UAAU;AACf,cAAI6W,WAAW;AACX,gBAAIA,UAAUlU,YAAY;AAGlB,kBAAA,KAAKsS,aAAa;AAClB,qBAAKe,iBAAL;AAAA,cACH;AAED,mBAAKnW,SAAS7c,QAAQ,SAAA8c,SAAW;AAAA,+BAAA,MAAA,MAAA;AACzBA,oBAAAA,QAAQC,QAAQ;AAChBD,0BAAQwC,qBAAqB,IAA7B;AAAA,gBACH;AAAA,cACJ,EAJD,KAAA,IAAA,CAAA;AAAA,YAKH,OAAM;AACH,kBAAMyU,YAAYF,UAAUE;AAC5B,kBAAIA,WAAW;AACX,qBAAKlX,SAAS7c,QAAQ,SAAA8c,SAAW;AAAA,iCAAA,MAAA,MAAA;AACzBA,sBAAAA,QAAQC,QAAQ;AAChBD,4BAAQ4C,yBAAyBqU,SAAjC;AAAA,kBACH;AAAA,gBACJ,EAJD,KAAA,IAAA,CAAA;AAAA,cAKH;AAAA,YACJ;AAAA,UACJ,OAAM;AACH,iBAAKlX,SAAS7c,QAAQ,SAAA8c,SAAW;AAAA,6BAAA,MAAA,MAAA;AACzBA,kBAAAA,QAAQC,QAAQ;AAChBD,wBAAQwC,qBAAqB,IAA7B;AAAA,cACH;AAAA,YACJ,EAJD,KAAA,IAAA,CAAA;AAAA,UAKH;AAAA,QACJ;AAAA,MACJ;AAAA;;aAED,SAAO,OAAA;AAEC,YAAA,KAAKzB,QAAQ;AACb,cAAI,CAAC,KAAK8B,YAAY;AAClB,iBAAK9B,OAAOZ,KAAK,IAAjB;AAAA,UACH;AAAA,QACJ;AAAA,MACJ;AAAA;;aAED,SAAW,WAAA;AACP,eAAO,KAAK+U,WAAW,KAAKA,QAAQrS,SAAb;AAAA,MAC1B;AAAA;;WAED,SAAgB,MAAA;AACZ,eAAO,KAAKqS,WAAW,KAAKA,QAAQ+B;AAAAA,MACvC;AAAA;;aAED,SAAO,OAAA;AACC,YAAA,KAAK/B,SAAS;AACTA,eAAAA,QAAQ5U;QAChB;AAAA,MACJ;AAAA;;WASD,SAAiB,MAAA;AACb,eAAO,KAAK6U;AAAAA;WARhB,SAAyE1e,KAAA,MAAA;AAAA,YAAA,YAAA,KAAzDxU,MAAAA,8BAAO,UAAkD,WAAA,SAAA,KAAzC0F,GAAAA,wBAAI,IAAqC,QAAA,SAAA,KAAlCC,GAAAA,wBAAI,IAA8B,QAAA,aAAA,KAA3BsvB,OAAAA,gCAAQ,MAAmB,YAAA,aAAA,KAAdC,OAAAA,gCAAQ,MAAM;AACrE,aAAKhC,cAAc;AAAA,UAAClzB;AAAAA,UAAM0F;AAAAA,UAAGC;AAAAA,UAAGsvB;AAAAA,UAAOC;AAAAA,QAApB;AACf,YAAA,KAAKtU,YAAY;AACjB,eAAKqT,iBAAL;AAAA,QACH;AAAA,MACJ;AAAA;;aAMD,SAAmB,mBAAA;AACVf,aAAAA,cAAc;AAAA,MACtB;AAAA;;aAED,SAAmB,mBAAA;AACf,YAAI,KAAKA,YAAYlzB,SAAS,SAAS;AACnC,eAAKm1B,kBAAL;AAAA,QADJ,WAEW,KAAKjC,YAAYlzB,SAAS,WAAW;AAC5C,eAAKo1B,oBAAL;AAAA,QACH;AACD,aAAKC,iBAAL;AACA,aAAKC,gBAAL;AAAA,MACH;AAAA;;aAED,SAAoB,oBAAA;AACV/N,YAAAA,SAAS,KAAK2L,YAAYxtB,IAAI,KAAKutB,QAAQvtB;AAC3C6vB,YAAAA,SAAS,KAAKrC,YAAYvtB,IAAI,KAAKstB,QAAQttB;AAC7C6vB,YAAAA,QAAQv5B,KAAKI,IAAIkrB,QAAQgO,MAAjB;AACR,YAAA,CAACC;AAAO;AACPrC,aAAAA,aAAa,IAAEqC;AACpB,YAAIjO,UAAUA,SAASiO,OAAO;AACpBC,cAAAA,cAAc,KAAKtC,aAAa,KAAKD,YAAYxtB;AACvD,cAAMgwB,mBAAmB,KAAKzC,QAAQvtB,IAAI+vB;AAC1C,eAAK3b,KAAK4b,mBAAmB,KAAKxC,YAAY+B;AAC9C,eAAKjb,KAAK,KAAKiZ,QAAQvtB,IAAIgwB;AAAAA,QAC9B;AACD,YAAIH,UAAUA,SAASC,OAAO;AACpBC,cAAAA,eAAc,KAAKtC,aAAa,KAAKD,YAAYvtB;AACvD,cAAM+vB,oBAAmB,KAAKzC,QAAQttB,IAAI8vB;AAC1C,eAAK1b,KAAK2b,oBAAmB,KAAKxC,YAAYgC;AAC9C,eAAKjb,KAAK,KAAKgZ,QAAQttB,IAAI+vB;AAAAA,QAC9B;AAAA,MACJ;AAAA;;aAED,SAAsB,sBAAA;AACZnO,YAAAA,SAAS,KAAK2L,YAAYxtB,IAAI,KAAKutB,QAAQvtB;AAC3C6vB,YAAAA,SAAS,KAAKrC,YAAYvtB,IAAI,KAAKstB,QAAQttB;AAC7C6vB,YAAAA,QAAQjO;AACZ,YAAI,CAACiO,SAASD,SAASC,OAAO;AAC1BA,kBAAQD;AAAAA,QACX;AACG,YAAA,CAACC;AAAO;AACPrC,aAAAA,aAAa,IAAEqC;AAAAA,MACvB;AAAA;;MAED,OAAA,SAAA,eAAepvB,GAAGC,GAAGX,GAAGC,GAAG;AACvB,aAAKgwB,iBAAL;AAEAvvB,aAAK,KAAK+sB;AACV9sB,aAAK,KAAK8sB;AACVztB,aAAK,KAAKytB;AACVxtB,aAAK,KAAKwtB;AACV,YAAI,KAAKrZ,OAAO1T,KAAK,KAAK2T,OAAO1T,KAAK,KAAK2T,OAAOtU,KAAK,KAAKuU,OAAOtU,GAAG;AAC7DmU,eAAAA,KAAK1T;AACL2T,eAAAA,KAAK1T;AACL2T,eAAAA,KAAKtU;AACLuU,eAAAA,KAAKtU;AAEL2vB,eAAAA,gBAAgB,IAArB;AAAA,QACH;AAAA,MACJ;AAAA;;aAED,SAAkB,kBAAA;AACd,aAAKK,iBAAL;AAEI,YAAA,KAAK7b,MAAM,KAAKC,MAAM,KAAKC,MAAM,KAAKC,IAAI;AACrCH,eAAAA,KAAK;AACLC,eAAAA,KAAK;AACLC,eAAAA,KAAK;AACLC,eAAAA,KAAK;AAEV,eAAKqb,gBAAL;AAAA,QACH;AAAA,MACJ;AAAA;;aAED,SAAkB,kBAAA;AACd,aAAKhC,WAAW,CAAC,EAAE,KAAKxZ,MAAM,KAAKC,MAAM,KAAKC,MAAM,KAAKC;AAErD2b,YAAAA,QAAO;AACX,aAAK9X,SAAS7c,QAAQ,SAAS8c,SAAS;AAEpC,cAAIA,QAAQ8X,qBAAqBD,OAAM;AACnC7X,oBAAQ+X,kCAAR;AAAA,UACH;AAAA,QACJ,CALD;AAAA,MAMH;AAAA;;aAED,SAAmB,mBAAA;AACXF,YAAAA,QAAO;AACX,aAAK9X,SAAS7c,QAAQ,SAAS8c,SAAS;AAEpC,cAAIA,QAAQ8X,qBAAqBD,OAAM;AACnC7X,oBAAQgY,mBAAR;AAAA,UACH;AAAA,QACJ,CALD;AAAA,MAMH;AAAA;;aAED,SAAiB,iBAAA;AACTC,YAAAA,cAAc,CAAA;AAClBA,oBAAY,MAAD,IAAW,KAAK/1B,YAAYkC;AACnC,YAAA,KAAKiE,MAAM;AAAG4vB,sBAAY,GAAD,IAAQ,KAAK5vB;AACtC,YAAA,KAAKC,MAAM;AAAG2vB,sBAAY,GAAD,IAAQ,KAAK3vB;AACtC,YAAA,KAAKX,MAAM;AAAGswB,sBAAY,GAAD,IAAQ,KAAKtwB;AACtC,YAAA,KAAKC,MAAM;AAAGqwB,sBAAY,GAAD,IAAQ,KAAKrwB;AACtC,YAAA,KAAKswB,cAAc;AAAGD,sBAAY,WAAD,IAAgB,KAAKC;AAC1D,eAAOD;AAAAA,MACV;AAAA;;WAED,SAAS,MAAA;AACL,eAAO,KAAKlc;AAAAA,MACf;AAAA;;WAED,SAAS,MAAA;AACL,eAAO,KAAKC;AAAAA,MACf;AAAA;;WAED,SAAS,MAAA;AACL,eAAO,KAAKC;AAAAA,MACf;AAAA;;WAED,SAAS,MAAA;AACL,eAAO,KAAKC;AAAAA,MACf;AAAA;;WAED,SAAQ,MAAA;AACJ,eAAO,KAAKH,KAAK,KAAKqZ;AAAAA;MAE1B,KAAA,SAAA3e,KAAMjY,GAAG;AACL,aAAKo5B,iBAAL;AACAp5B,YAAIA,IAAI,KAAK42B;AACb,YAAI,KAAKrZ,OAAOvd,GAAG;AACVud,eAAAA,KAAKvd;AACV,eAAK+4B,gBAAL;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAQ,MAAA;AACJ,eAAO,KAAKvb,KAAK,KAAKoZ;AAAAA;MAE1B,KAAA,SAAA3e,KAAMjY,GAAG;AACL,aAAKo5B,iBAAL;AACAp5B,YAAIA,IAAI,KAAK42B;AACb,YAAI,KAAKpZ,OAAOxd,GAAG;AACVwd,eAAAA,KAAKxd;AACV,eAAK+4B,gBAAL;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAQ,MAAA;AACJ,eAAO,KAAKtb,KAAK,KAAKmZ;AAAAA;MAG1B,KAAA,SAAA3e,KAAMjY,GAAG;AACL,aAAKo5B,iBAAL;AACAp5B,YAAIA,IAAI,KAAK42B;AACb,YAAI,KAAKnZ,OAAOzd,GAAG;AACVyd,eAAAA,KAAKzd;AACV,eAAK+4B,gBAAL;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAQ,MAAA;AACJ,eAAO,KAAKrb,KAAK,KAAKkZ;AAAAA;MAG1B,KAAA,SAAA3e,KAAMjY,GAAG;AACL,aAAKo5B,iBAAL;AACAp5B,YAAIA,IAAI,KAAK42B;AACb,YAAI,KAAKlZ,OAAO1d,GAAG;AACV0d,eAAAA,KAAK1d;AACV,eAAK+4B,gBAAL;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAgB,MAAA;AACZ,eAAO,KAAKnC;AAAAA;MAGhB,KAAA,SAAA3e,KAAcjY,GAAG;AACb,aAAKo5B,iBAAL;AACA,YAAI,KAAKxC,eAAe52B,GAAG;AAClB42B,eAAAA,aAAa52B;AAClB,eAAK84B,iBAAL;AAAA,QACH;AAAA,MACJ;AAAA;;aAED,SAAoB,oBAAA;AAChB,eAAO;AAAA,MACV;AAAA;;aAED,SAAiB,iBAAA;AACb,YAAI,CAAC,KAAKa,qBAAqB;AAE3B,iBAAO;AAAA,QACV;AAGD,gBAAQ,KAAKlc,OAAO,KAAKiZ,UAAU,KAAKA,QAAQkD,eAAb,IAAgC,KAAKrc,KAAK,MAAM,KAAKqZ;AAAAA,MAC3F;AAAA;;aAED,SAAkB,kBAAA;AACd,YAAI,CAAC,KAAK+C,qBAAqB;AAE3B,iBAAO;AAAA,QACV;AAED,gBAAQ,KAAKjc,OAAO,KAAKgZ,UAAU,KAAKA,QAAQmD,gBAAb,IAAiC,KAAKrc,KAAK,MAAM,KAAKoZ;AAAAA,MAC5F;AAAA;;MAED,OAAA,SAAA,MAAM/wB,UAAU;AACZF,aAAK4T,YAAY,MAAM1T,QAAvB;AAAA,MACH;AAAA;;;AAIL2wB,UAAQhS,UAAUsV,YAAY;AAE9BtD,UAAQvW,KAAK;MChmBQ8Z;;;AAEjB,aAAAA,cAAY7Z,OAAO;AAAA,UAAA;AAAA,sBAAA,MAAA6Z,aAAA;AACf,cAAA,OAAA,KAAA,MAAM7Z,KAAN;AAEK8Z,YAAAA,OAAOlgB;AACPiH,YAAAA,YAAY;AAJF,aAAA;AAAA,IAKlB;;;WAED,SAAU,MAAA;AACN,eAAO,KAAKiZ;AAAAA;MAGhB,KAAA,SAAA/hB,KAAQjY,GAAG;AACP,YAAI,KAAKg6B,SAASh6B,GAAG;AACZg6B,eAAAA,OAAOh6B;AACZ,eAAKwa,SAAL;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAe,MAAA;AACX,eAAO,KAAKuG;AAAAA;MAGhB,KAAA,SAAA9I,KAAajY,GAAG;AACZ,YAAI,KAAK+gB,cAAc/gB,GAAG;AACjB+gB,eAAAA,YAAY/gB;AACjB,eAAKwa,SAAL;AAAA,QACH;AAAA,MACJ;AAAA;;aAED,SAAc,cAAA;AACH,eAAA,CAAC,CAAC,KAAKwf;AAAAA,MACjB;AAAA;;aAED,SAAe,eAAA;AACX,eAAO,KAAKA;AAAAA,MACf;AAAA;;aAED,SAAmB,mBAAA;AAAA,YAAA,SAAA;AACXC,YAAAA,MAAM,KAAKD;AACXlX,YAAAA,WAAW,KAAK/B;AACpB,YAAI,KAAKb,MAAM2P,UAAU,aAArB,GAAqC;AACrC,cAAIqK,KAAKD,IAAIE,WAAW,CAAf;AACT,cAAKF,IAAI53B,QAAQ,IAAZ,MAAsB,OAAS63B,MAAM,MAAMA,MAAM,MAAQA,MAAM,MAAMA,MAAM,OAAQA,MAAM,KAAK;AAE/FD,kBAAM,KAAK/Z,MAAM2P,UAAU,aAArB,IAAsCoK;AAAAA,UAC/C;AAAA,QACJ;AAEM,eAAA,SAAC5Y,IAAO;AAAA,yBAAA,MAAA,MAAA;AACX,iBAAO,KAAKnB,MAAMka,SAASC,eAAe;AAAA,YAACJ;AAAAA,YAAUnX;AAAAA,UAA9C,GAAmEzB,EAAnE;AAAA,QACV,EAFD,KAAA,IAAA;AAAA,MAGH;AAAA;;aAED,SAAiB,iBAAA;AACb,YAAMle,MAAN,KAAA,gBAAA42B,cAAA,SAAA,GAAA,kBAAA,IAAA,EAAA,KAAA,IAAA;AACI,YAAA,KAAKC,MAAM;AACX72B,cAAI82B,MAAM,KAAKD;AAAAA,QAClB;AACD,eAAO72B;AAAAA,MACV;AAAA;;IA7DqCqzB;ACQnC,WAAS,eACZ,UACA,WACA,UACA,WACA,iBACM;AACN,QAAI,KAAK;AAET,QAAI,CAAC,MAAM,QAAQ,EAAE,GAAG;AACpB,WAAK,CAAC,EAAE;AAAA,IACZ;AAEA,QAAI,MAAM,CAAA;AACV,aAAS,IAAI,GAAG,IAAI,GAAG,QAAQ,IAAI,GAAG,KAAK;AACnC,UAAA,QAAQ,GAAG,CAAC;AAGhB,UAAI,UAAU,MAAM;AACR,gBAAA;AAAA,MACZ;AACI,UAAA,UAAU,WAAW,UAAU,cAAc;AAC7C,YAAI,KAAK,KAAK;AAAA,MAAA,OACX;AACC,YAAA,KAAK,IAAI,QAAQ;AAAA,MACzB;AAAA,IACJ;AAEA,WAAO,GAAG,aAAa,WAAW,eAAe,IAAI,KAAK,GAAG;AAAA,EACjE;AAOO,WAAS,iBAAiB,OAAwB;AAC9C,WAAA,UAAU,MAAM,UAAU;AAAA,EACrC;AAOO,WAAS,QAAQ,OAAwB;AACrC,WAAA,iBAAiB,KAAK,KAAK,UAAU;AAAA,EAChD;AAQgB,WAAA,eAAe,YAAoB,MAAwB;AACvE,UAAM,aAAa,KAAK,MAAM,UAAU,KAAK,CAAA;AAC7C,UAAM,QAAQ,KAAK,MAAM,UAAU,KAAK,CAAA;AAExC,QAAI,QAAkB,CAAA;AACtB,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACnC,YAAM,KAAK,MAAM,CAAC,GAAI,WAAW,CAAC,CAAE;AAAA,IACxC;AACA,UAAM,IAAI;AACV,WAAO,MAAM,OAAO,CAAC,SAAS,QAAQ,EAAE;AAAA,EAC5C;AASO,WAAS,YAAY,SAAmC,MAAc,QAAgB,GAAW;AACpG,QAAI,CAAC,OAAO;AACD,aAAA,QAAQ,YAAY,IAAI,EAAE;AAAA,IACrC;AACA,WAAO,KAAK,MAAM,EAAE,EAAE,OAAO,CAAC,KAAK,SAAS;AAIpC,UAAA,iBAAiB,IAAI,GAAG;AACjB,eAAA;AAAA,MACX;AACA,aAAO,MAAM,QAAQ,YAAY,IAAI,EAAE,QAAQ;AAAA,OAChD,CAAC;AAAA,EACR;AAiBO,WAAS,SACZ,SACA,MACA,eACA,eACA,QACc;AAGd,UAAM,aAAa;AACf,QAAA,QAAQ,KAAK,MAAM,QAAQ;AAC/B,QAAI,WAAqB,CAAA;AACzB,QAAI,eAAyB,CAAA;AAC7B,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACnC,UAAI,cAAwB,CAAA;AAC5B,UAAI,SAAS;AACb,UAAI,YAAY,gBAAgB;AAChC,UAAI,QAAQ,MAAM,CAAC,EAAG,MAAM,UAAU;AACtC,UAAI,SAAS,MAAM,CAAC,EAAG,MAAM,UAAU,KAAK;AAC5C,eAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACnC,cAAM,QAAQ,OAAO,IAAI,CAAC,KAAK;AACzB,cAAA,OAAO,MAAM,CAAC;AACpB,cAAM,YAAY,YAAY,SAAS,MAAM,aAAa;AAC1D,cAAM,qBAAqB,YAAY,YAAY,SAAS,OAAO,aAAa;AAC5E,YAAA,MAAM,KAAK,qBAAqB,WAAW;AAG3C,cAAI,IAAI,GAAG;AACP,wBAAY,KAAK,MAAM;AACd,qBAAA;AAAA,UACb;AACU,oBAAA;AACV,sBAAY,gBAAgB,aAAa,MAAM,IAAI,SAAS;AAAA,QAAA,OAE3D;AACY,uBAAA;AACb,oBAAU,QAAQ;AAAA,QACtB;AAAA,MACJ;AAEA,kBAAY,KAAK,MAAM;AACd,eAAA;AAEE,iBAAA,SAAS,OAAO,WAAW;AAElC,UAAA,IAAI,MAAM,SAAS,GAAG;AACT,qBAAA,KAAK,SAAS,MAAM;AAAA,MACrC;AAAA,IACJ;AAEA,WAAO,EAAC,GAAG,UAAU,GAAG,aAAY;AAAA,EACxC;MCjKqB8D;AAEjB,aAAAA,qBAAYpa,OAAOqa,QAAQ10B,UAAU;AAAA,sBAAA,MAAAy0B,oBAAA;AAC5BE,WAAAA,SAASta;AACTua,WAAAA,UAAUF;AACVG,WAAAA,WAAW,KAAKD,QAAQE,WAAW,IAAxB;AACXC,WAAAA,YAAY/0B;AAAAA,IACpB;;;aAED,SAAe,eAAA;AACJ,eAAA,KAAK+0B,UAAUlB;AAAAA,MACzB;AAAA;;aAED,SAAoB,oBAAA;AAChB,aAAKgB,SAASG,OAAOC,eACjB,KAAKF,UAAUG,UACf,KAAKH,UAAUI,WACf,KAAKJ,UAAUK,UACf,KAAKC,gBACL,KAAKV,OAAO3K,UAAU,iBAAtB,GACA,KAAK+K,UAAUO,UANgB;AAQnC,aAAKT,SAASU,eAAe,KAAKR,UAAUQ;AAAAA,MAC/C;AAAA;;aAED,SAAQ,QAAA;AAAA,YAAA,QAAA;AACJ,YAAIv4B,QAAMoC,SAASo2B,SAASC,OAAO;AAC/B,cAAMC,cAAcT,eAChB,KAAKF,UAAUG,UACf,KAAKH,UAAUI,WACf,KAAKJ,UAAUK,UACf,KAAKC,aAAL,GACA,KAAKV,OAAO3K,UAAU,iBAAtB,GACA,KAAK+K,UAAUO,UANe;AAQ9B,cAAA;AACA,gBAAI,CAACE,SAASC,MAAME,MAAMD,aAAa,KAAKX,UAAUa,IAAjD,GAAwD;AAEzD,qBAAOJ,SAASC,MAAM3Z,KAAK4Z,aAAa,KAAKX,UAAUa,IAAhD,EAAsDC,MAAM,SAAAvZ,KAAO;AAAA,+BAAA,MAAA,KAAA;AAEtE1f,wBAAQC,KAAK,+BAA+Byf,KAAKoZ,WAAjD;AAAA,cAFG,EAAA,KAAA,IAAA,CAAA,EAGJI,KAAK,WAAM;AAAA,+BAAA,MAAA,KAAA;AACV,oBAAI,CAACN,SAASC,MAAME,MAAMD,aAAa,KAAKX,UAAUa,IAAjD,GAAwD;AACzDh5B,0BAAQC,KAAK,8BAA8B64B,WAA3C;AAAA,gBACH;AAAA,cACJ,EAPD,KAAA,IAAA,CAAA;AAAA,YAQH;AAAA,UAXL,SAYQpX,GAAN;AACE1hB,oBAAQC,KAAK,8CAA8C64B,WAA3D;AAAA,UACH;AAAA,QACJ;AAAA,MACJ;AAAA;;aAED,SAAO,OAAA;AAAA,YAAA,SAAA;AAEH,YAAMK,cAAc,KAAKC;AACrB,YAAA,CAACD,aAAa;AACd,iBAAO/4B,QAAM0C,UAAU,KAAKi1B,OAAOJ,SAAS0B,SAAS,IAA9B,IAAsC,KAAKC;QACrE,OAAM;AACH,iBAAOH,YAAYD,KAAK,WAAM;AAAA,2BAAA,MAAA,MAAA;AAC1B,mBAAO94B,QAAM0C,UAAU,KAAKi1B,OAAOJ,SAAS0B,SAAS,IAA9B,IAAsC,KAAKC;UACrE,EAFD,KAAA,IAAA,CAAA;AAAA,QAGH;AAAA,MACJ;AAAA;;aAED,SAAuB,uBAAA;AACfpb,YAAAA,aAAa,CAAA;AAEjB,YAAM+Y,YAAY,KAAKwB;AAEvB,YAAM9vB,cAAc,KAAKwvB,UAAUxvB,cAAcsuB;AACjD,YAAMpuB,eAAe,KAAKsvB,UAAUtvB,eAAeouB;AACnD,YAAMuB,WAAW,KAAKL,UAAUK,WAAWvB;AAC3C,YAAIsC,UAAU,KAAKpB,UAAUoB,YAAY,OAAO,OAAQ,KAAKpB,UAAUoB,UAAUtC;AACjF,YAAIuC,aAAa,KAAKrB,UAAUqB,aAAavC;AAC7C,YAAMvwB,IAAI,KAAKyxB,UAAUzxB,IAAIuwB;AAC7B,YAAMtwB,IAAI,KAAKwxB,UAAUxxB,IAAIswB;AAC7B,YAAIwC,gBAAgB,KAAKtB,UAAUsB,gBAAgBxC;AACnD,YAAMyC,QAAQ,KAAKvB,UAAUuB,QAAQzC;AACrC,YAAM0C,QAAQ,KAAKxB,UAAUwB,QAAQ1C;AACrC,YAAM2C,QAAQ,KAAKzB,UAAUyB,QAAQ3C;AACrC,YAAM4C,QAAQ,KAAK1B,UAAU0B,QAAQ5C;AAC/B6C,YAAAA,iBAAiB,KAAK3B,UAAU2B,iBAAiB,KAAK7C;AAC5D,YAAM8C,aAAa,KAAK5B,UAAU4B,aAAa9C;AAG/C,aAAK+C,kBAAL;AAGI1Z,YAAAA,QAAQ5Z,KAAK,KAAKqxB,OAAO3K,UAAU,GAAtB;AAGjB,YAAI6M,aAAa3Z,QAAS3X;AACtBsxB,YAAAA,aAAa,IAAI;AACjB3Z,mBAAU,KAAK2Z;AACfA,uBAAa;AAAA,QAChB;AAEG,YAAA,CAACR,eAAe;AAChBA,0BAAgBQ;AAAAA,QACnB;AAGG,YAAA,KAAK9B,UAAU+B,gBAAgB,CAAC,KAAK/B,UAAUgC,UAAU;AACzD,cAAIC;AACI,kBAAA,KAAKjC,UAAU+B,cAAvB;AAAA,YACI,KAAK;AACDE,uBAAS;AACT;AAAA,YACJ,KAAK;AACDA,uBAAS,KAAKjC,UAAUkC;AACxB;AAAA,YACJ;AACID,uBAAS,KAAKjC,UAAU+B;AAAAA,UARhC;AAUA,eAAK/B,UAAUa,OAAO,KAAKsB,SAAS,KAAKnC,UAAUa,MAAMS,gBAAgBM,YAAYK,MAA/D;AAAA,QACzB;AAID,YAAIG;AACJ,YAAI,KAAKpC,UAAUgC,UAAU;AACzBI,sBAAY,KAAKC,SAAS,KAAKrC,UAAUa,MAAMS,eAAeK,eAAeC,UAAjE;AAAA,QACf,OAAM;AACHQ,sBAAY;AAAA,YAAC3H,GAAG,KAAKuF,UAAUa,KAAKj5B,MAAM,gBAA1B;AAAA,YAA6C1B,GAAG,CAAA;AAAA,UAApD;AACZ,cAAOA,IAAIk8B,UAAU3H,EAAEt0B;AACvB,mBAASC,KAAI,GAAGA,KAAIF,IAAI,GAAGE,MAAK;AAC5Bg8B,sBAAUl8B,EAAE6D,KAAK3D,EAAjB;AAAA,UACH;AAAA,QACJ;AACD,YAAIyG,QAAQu1B,UAAU3H;AAEtB,YAAI,KAAKuF,UAAUsC,YAAYz1B,MAAM1G,SAAS,KAAK65B,UAAUsC,UAAU;AACnE,cAAIC,YAAY11B,MAAMmnB,MAAM,GAAG,KAAKgM,UAAUsC,QAA9B;AAEZE,cAAAA,aAAa;AACjB,cAAI,KAAKxC,UAAUkC,gBAAgB;AAE/B,gBAAI3zB,KAAI,KAAKyxB,UAAUkC,iBAAiB,KAAKO,YAAY,KAAKzC,UAAUkC,cAAhC,IAAkD;AACtFQ,gBAAAA,KAAK,KAAKL,SAASE,UAAUA,UAAUp8B,SAAS,CAApB,GAAwBm7B,gBAAgB/yB,IAAGozB,eAAeC,UAAjF;AACTW,sBAAUA,UAAUp8B,SAAS,CAApB,IAAyBu8B,GAAGjI,EAAE,CAAL,IAAU,KAAKuF,UAAUkC;AAC3DM,yBAAa,CAACE,GAAGjI,EAAEt0B,SAAS,IAAIu8B,GAAGjI,EAAE,CAAL,IAAU,EAA7B;AAAA,UAChB,OAAM;AACH+H,yBAAa,CAAC,EAAD;AAAA,UAChB;AAGD,cAAIp8B,KAAGF,KAAI2G,MAAM1G;AACb0yB,cAAAA,IAAI;AACR,cAAID,IAAIwJ,UAAUl8B,EAAEC;AACpB,eAAKC,MAAI,KAAK45B,UAAUsC,UAAUl8B,MAAIF,IAAGE,OAAK;AAC1Co8B,uBAAW3J,CAAD,MAAQ2J,WAAW3J,CAAD,IAAM,MAAM,MAAMhsB,MAAMzG,GAAD;AACnD,gBAAIA,MAAI,IAAIwyB,KAAKwJ,UAAUl8B,EAAEE,MAAI,CAAhB,GAAoB;AACjCyyB;AAAAA,YACH;AAAA,UACJ;AAED9S,qBAAW4c,gBAAgBH,WAAWjkB,KAAK,IAAhB;AAE3BwH,qBAAW6c,gBAAgB;AAE3B/1B,kBAAQ01B;AAAAA,QACX,OAAM;AACHxc,qBAAW6c,gBAAgB;AAC3B7c,qBAAW4c,gBAAgB;AAAA,QAC9B;AAGGE,YAAAA,eAAe;AACfC,YAAAA,aAAa,CAAA;AACjB,iBAAS18B,MAAI,GAAGA,MAAIyG,MAAM1G,QAAQC,OAAK;AACnC,cAAI28B,YAAY,KAAKN,YAAY51B,MAAMzG,GAAD,GAAKu7B,aAA3B,KAA6Cv7B,QAAM,IAAIw7B,aAAa;AACpFkB,qBAAW/4B,KAAKg5B,SAAhB;AACAF,yBAAe/9B,KAAKI,IAAI29B,cAAcE,SAAvB;AAAA,QAClB;AAEDhd,mBAAW+c,aAAaA;AAEpB,YAAA,CAACv0B,GAAG;AAEJ4Z,kBAAQ0a,eAAeryB,cAAcE;AACrCoxB,uBAAae;AAAAA,QAChB;AAGDxB,qBAAaA,cAAchB;AAE3B,YAAIjY;AACJ,YAAI5Z,GAAG;AACH4Z,mBAAS5Z;AAAAA,QACZ,OAAM;AACH,cAAMw0B,iBAAkB,KAAKhD,UAAUQ,gBAAgB,WAAY,MAAMH,WAAW;AACpFjY,mBAASiZ,cAAcx0B,MAAM1G,SAAS,KAAK68B,iBAAiBl+B,KAAKI,IAAIm8B,YAAYhB,QAArB,IAAiCe;AAAAA,QAChG;AAEGA,YAAAA,YAAY,MAAM;AAClBA,oBAAUf;AAAAA,QACb;AAEDta,mBAAWxX,IAAI4Z;AACfpC,mBAAWvX,IAAI4Z;AACfrC,mBAAWlZ,QAAQA;AACnBkZ,mBAAW+Y,YAAYA;AAEnB,YAAA,CAAC3W,OAAO;AAERA,kBAAQ;AAAA,QACX;AAEG,YAAA,CAACC,QAAQ;AAETA,mBAAS;AAAA,QACZ;AAEGmZ,YAAAA,SAASC,OAAO;AAChBrZ,kBAAQrjB,KAAKK,IAAIgjB,OAAOqZ,QAAQD,KAAxB;AAAA,QACX;AAEGE,YAAAA,SAASC,OAAO;AAChBtZ,mBAAStjB,KAAKK,IAAIijB,QAAQsZ,QAAQD,KAAzB;AAAA,QACZ;AAED1b,mBAAWoC,QAAQA;AACnBpC,mBAAW+b,aAAaA;AACxB/b,mBAAWqC,SAASA;AACpBrC,mBAAWsa,WAAWA;AACtBta,mBAAWwb,QAAQA;AACnBxb,mBAAW0b,QAAQA;AACnB1b,mBAAWyb,QAAQA;AACnBzb,mBAAW2b,QAAQA;AACnB3b,mBAAWsb,aAAaA;AACxBtb,mBAAW+c,aAAaA;AACxB/c,mBAAWqb,UAAUA;AACrBrb,mBAAWvV,cAAcA;AACzBuV,mBAAWrV,eAAeA;AAC1BqV,mBAAW4b,gBAAgBA;AAC3B5b,mBAAW6b,aAAaA;AAExB,eAAO7b;AAAAA,MACV;AAAA;;aAED,SAAQ,QAAA;AACJ,YAAMA,aAAa,KAAKkd;AACxB,YAAMnE,YAAY,KAAKwB;AAGvB,aAAKT,QAAQ1X,QAAQrjB,KAAKqE,KAAK4c,WAAWoC,QAAQ,KAAKyX,OAAO3K,UAAU,uBAAtB,CAA7B;AAChB4K,aAAAA,QAAQzX,SAAStjB,KAAKqE,KAAK4c,WAAWqC,MAArB;AAGtB,aAAKyZ,kBAAL;AACIv3B,YAAAA,OAAO6mB,OAAO;AACd,eAAK2O,SAAS1hB,YAAY;AAC1B,eAAK0hB,SAASoD,YAAY;AAAA,QAC7B;AAED,YAAInd,WAAWsa,YAAY,KAAK;AAE5B,eAAKP,SAASqD,cAAc;AACvBrD,eAAAA,SAASsD,SAAS,GAAG,GAAG,MAAM,IAAnC;AACA,eAAKtD,SAASqD,cAAc;AAAA,QAC/B;AAED,YAAIpd,WAAWwb,SAASxb,WAAW0b,OAAO;AACtC,eAAK3B,SAASuD,UAAU,CAACtd,WAAWwb,OAAO,CAACxb,WAAW0b,KAAvD;AAAA,QACH;AAED,YAAI6B;AACJ,YAAIC;AAEAC,YAAAA,YAAY,CAAA;AAGhB,iBAASp9B,IAAI,GAAGF,IAAI6f,WAAWlZ,MAAM1G,QAAQC,IAAIF,GAAGE,KAAK;AACrDk9B,0BAAgBl9B,MAAM,IAAI2f,WAAW6b,aAAa;AAGlD2B,0BAAiBn9B,IAAI2f,WAAWsb,aAActb,WAAWqb;AAEzD,cAAI,KAAKpB,UAAUyD,iBAAiB,UAAU;AAC1CF,8BAAkBxd,WAAWsb,aAAatb,WAAWsa,YAAY;AAAA,UADrE,WAEW,KAAKL,UAAUyD,iBAAiB,UAAU;AACjDF,6BAAiBxd,WAAWsb,aAAatb,WAAWsa;AAAAA,UACvD;AAED,cAAI,KAAKL,UAAUkD,cAAc,SAAS;AACtCI,6BAAkBvd,WAAW+b,aAAa/b,WAAW+c,WAAW18B,CAAtB;AAAA,UAD9C,WAEW,KAAK45B,UAAUkD,cAAc,UAAU;AAC9CI,8BAAmBvd,WAAW+b,aAAa/b,WAAW+c,WAAW18B,CAAtB,KAA4B;AAAA,UAC1E;AACDk9B,2BAAiBvd,WAAWvV;AAE5BgzB,oBAAUz5B,KAAK;AAAA,YAAC82B,MAAM9a,WAAWlZ,MAAMzG,CAAjB;AAAA,YAAqB6I,GAAGq0B;AAAAA,YAAep0B,GAAGq0B;AAAAA,YAAeh1B,GAAGwX,WAAW+c,WAAW18B,CAAtB;AAAA,UAAnE,CAAf;AAAA,QACH;AAGD,YAAI,KAAK45B,UAAU0D,WAAW;AAC1B,cAAI9+B,QAAQ,KAAKo7B,UAAU2D,kBAAkB;AAE7C,cAAIC,WAAY,KAAK5D,UAAU6D,kBAAkB/E,aAAa/Y,WAAWsa,WAAW;AACpF,cAAMzsB,SAAS,KAAKosB,UAAU8D,kBAAkBhF;AAChD,cAAMiF,gBAAiB,KAAK/D,UAAUgE,yBAAyB,OAAO,KAAKhE,UAAUgE,uBAAuBlF,YAAY/Y,WAAWvV;AACnI,cAAMyzB,iBAAkB,KAAKjE,UAAUkE,0BAA0B,OAAO,KAAKlE,UAAUkE,wBAAwBpF,YAAY/Y,WAAWrV;AAEjIovB,eAAAA,SAASqE,YAAY//B,WAAWggC,cAAcx/B,KAAzB;AAC1B,mBAASwB,MAAI,GAAGA,MAAIo9B,UAAUr9B,QAAQC,OAAK;AACvC,gBAAIi+B,WAAWb,UAAUp9B,GAAD;AACxB,iBAAK05B,SAASsD,SAAUiB,SAASp1B,IAAI80B,eAAiBM,SAASn1B,IAAI6W,WAAWqb,UAAUxtB,QAAUywB,SAAS91B,IAAI01B,iBAAiBF,eAAgBH,QAAhJ;AAAA,UACH;AAAA,QACJ;AAGGU,YAAAA,qBAAqB;AACzB,YAAI,KAAKtE,UAAUuE,QAAQ;AACvBD,+BAAqB,CAAC,KAAKxE,SAAS0E,aAAa,KAAK1E,SAAS2E,eAAe,KAAK3E,SAAS4E,eAAe,KAAK5E,SAAS6E,UAApG;AAErB,eAAK7E,SAAS0E,cAAcpgC,WAAWggC,cAAc,KAAKpE,UAAUwE,WAAxC;AACvB1E,eAAAA,SAAS2E,gBAAgB,KAAKzE,UAAUyE,gBAAgB3F;AACxDgB,eAAAA,SAAS4E,gBAAgB,KAAK1E,UAAU0E,gBAAgB5F;AACxDgB,eAAAA,SAAS6E,aAAa,KAAK3E,UAAU2E,aAAa7F;AAAAA,QAC1D;AAED,aAAKgB,SAASqE,YAAY//B,WAAWggC,cAAc,KAAKpE,UAAU4E,SAAxC;AAC1B,iBAASx+B,MAAI,GAAGF,MAAIs9B,UAAUr9B,QAAQC,MAAIF,KAAGE,OAAK;AAC9C,cAAIi+B,YAAWb,UAAUp9B,GAAD;AAExB,cAAI2f,WAAW4b,kBAAkB,GAAG;AAChC,iBAAK7B,SAAS+E,SAASR,UAASxD,MAAMwD,UAASp1B,GAAGo1B,UAASn1B,CAA3D;AAAA,UACH,OAAM;AACG41B,gBAAAA,YAAYT,UAASxD,KAAKj5B,MAAM,EAApB;AAClB,gBAAIqH,IAAIo1B,UAASp1B;AACjB,qBAAS7I,MAAI,GAAGyyB,IAAIiM,UAAU3+B,QAAQC,MAAIyyB,GAAGzyB,OAAK;AAC9C,mBAAK05B,SAAS+E,SAASC,UAAU1+B,GAAD,GAAK6I,GAAGo1B,UAASn1B,CAAjD;AACAD,mBAAK,KAAKwzB,YAAYqC,UAAU1+B,GAAD,GAAK2f,WAAW4b,aAA1C;AAAA,YACR;AAAA,UACJ;AAAA,QACJ;AAED,YAAI2C,oBAAoB;AACpB,eAAKxE,SAAS0E,cAAcF,mBAAmB,CAAD;AAC9C,eAAKxE,SAAS2E,gBAAgBH,mBAAmB,CAAD;AAChD,eAAKxE,SAAS4E,gBAAgBJ,mBAAmB,CAAD;AAChD,eAAKxE,SAAS6E,aAAaL,mBAAmB,CAAD;AAAA,QAChD;AAED,YAAIve,WAAWwb,SAASxb,WAAW0b,OAAO;AACjC3B,eAAAA,SAASuD,UAAUtd,WAAWwb,OAAOxb,WAAW0b,KAArD;AAAA,QACH;AAEI1b,aAAAA,aAAaA;AAAAA,MACrB;AAAA;;MAED,OAAA,SAAA,SAASgf,MAAMzD,eAAeW,QAAQ;AAClC,YAAM+C,cAAc,KAAKvC,YAAYR,MAAjB;AACpB,YAAMgD,UAAUF,KAAK5+B;AACrB,YAAM++B,YAAY,KAAKzC,YAAYsC,IAAjB;AAGdG,YAAAA,aAAa5D,eAAe;AAC5B,iBAAOyD;AAAAA,QACV;AAGGI,YAAAA,cAAcrgC,KAAKC,MAAOu8B,gBAAgB2D,UAAWC,SAAvC;AAClB,YAAIE,iBAAiB,KAAK3C,YAAYsC,KAAKM,UAAU,GAAGF,WAAlB,CAAjB,IAAmDH;AAGpEI,YAAAA,iBAAiB9D,eAAe;AACzB6D,iBAAAA,cAAc,GAAG;AACpBC,6BAAiB,KAAK3C,YAAYsC,KAAKM,UAAU,GAAGF,WAAlB,CAAjB,IAAmDH;AAChEI,gBAAAA,iBAAiB9D,eAAe;AAChC6D,6BAAe;AAAA,YAClB,OAAM;AACH;AAAA,YACH;AAAA,UACJ;AAAA,QAGJ,OAAM;AACIA,iBAAAA,cAAcF,SAAS;AAC1BG,6BAAiB,KAAK3C,YAAYsC,KAAKM,UAAU,GAAGF,WAAlB,CAAjB,IAAmDH;AAChEI,gBAAAA,iBAAiB9D,eAAe;AAChC6D,6BAAe;AAAA,YAClB,OAAM;AAEHA,6BAAc;AACd;AAAA,YACH;AAAA,UACJ;AAAA,QACJ;AAGD,eAAOJ,KAAKM,UAAU,GAAGF,WAAlB,KAAkC7D,iBAAiB0D,cAAc/C,SAAS;AAAA,MACpF;AAAA;;MAWD,OAAA,SAAAI,WAASxB,MAAMS,eAAeK,eAA2B;AAAZ2D,YAAAA,0EAAS;AAClD,eAAOjD,SAAS,KAAKvC,UAAUe,MAAMS,eAAeK,eAAe2D,MAApD;AAAA,MAClB;AAAA;;MASD,OAAA,SAAA7C,cAAYsC,MAAiB;AAAXQ,YAAAA,yEAAQ;AACf9C,eAAAA,YAAY,KAAK3C,UAAUiF,MAAMQ,KAAtB;AAAA,MACrB;AAAA;;;MCjagBC;AAEjB,aAAAA,6BAAYlgB,OAAOqa,QAAQ10B,UAAU;AAAA,sBAAA,MAAAu6B,4BAAA;AAC5B5F,WAAAA,SAASta;AACTua,WAAAA,UAAUF;AACVG,WAAAA,WAAW,KAAKD,QAAQE,WAAW,IAAxB;AACXC,WAAAA,YAAY/0B;AAAAA,IACpB;;;aAED,SAAe,eAAA;AACJ,eAAA,KAAK+0B,UAAUlB;AAAAA,MACzB;AAAA;;aAED,SAAoB,oBAAA;AAChB,YAAMmB,OAAOC,eACT,KAAKF,UAAUG,UACf,KAAKH,UAAUI,WACf,KAAKJ,UAAUK,UACf,KAAKC,aAAL,GACA,KAAKV,OAAO3K,UAAU,iBAAtB,GACA,KAAK+K,UAAUO,UANQ;AAQ3B,aAAKT,SAASG,OAAOA;AACrB,aAAKH,SAASU,eAAe,KAAKR,UAAUQ;AAC5C,eAAOP;AAAAA,MACV;AAAA;;aAED,SAAQ,QAAA;AAAA,YAAA,QAAA;AACJ,YAAIh4B,QAAMoC,SAASo2B,SAASC,OAAO;AAC/B,cAAMC,cAAcT,eAChB,KAAKF,UAAUG,UACf,KAAKH,UAAUI,WACf,KAAKJ,UAAUK,UACf,KAAKC,aAAL,GACA,KAAKV,OAAO3K,UAAU,iBAAtB,GACA,KAAK+K,UAAUO,UANe;AAQ9B,cAAA;AACA,gBAAI,CAACE,SAASC,MAAME,MAAMD,aAAa,KAAKX,UAAUa,IAAjD,GAAwD;AAEzD,qBAAOJ,SAASC,MAAM3Z,KAAK4Z,aAAa,KAAKX,UAAUa,IAAhD,EAAsDC,MAAM,SAAAvZ,KAAO;AAAA,+BAAA,MAAA,KAAA;AAEtE1f,wBAAQC,KAAK,mBAAmByf,KAAKoZ,WAArC;AAAA,cAFG,EAAA,KAAA,IAAA,CAAA,EAGJI,KAAK,WAAM;AAAA,+BAAA,MAAA,KAAA;AACV,oBAAI,CAACN,SAASC,MAAME,MAAMD,aAAa,KAAKX,UAAUa,IAAjD,GAAwD;AACzDh5B,0BAAQC,KAAK,kBAAkB64B,WAA/B;AAAA,gBACH;AAAA,cACJ,EAPD,KAAA,IAAA,CAAA;AAAA,YAQH;AAAA,UAXL,SAYQpX,GAAN;AACE1hB,oBAAQC,KAAK,kCAAkC64B,WAA/C;AAAA,UACH;AAAA,QACJ;AAAA,MACJ;AAAA;;aAED,SAAO,OAAA;AAAA,YAAA,SAAA;AAEH,YAAMK,cAAc,KAAKC;AACrB,YAAA,CAACD,aAAa;AACd,iBAAO/4B,QAAM0C,UAAU,KAAKi1B,OAAOJ,SAAS0B,SAAS,IAA9B,IAAsC,KAAKC;QACrE,OAAM;AACH,iBAAOH,YAAYD,KAAK,WAAM;AAAA,2BAAA,MAAA,MAAA;AAC1B,mBAAO94B,QAAM0C,UAAU,KAAKi1B,OAAOJ,SAAS0B,SAAS,IAA9B,IAAsC,KAAKC;UACrE,EAFD,KAAA,IAAA,CAAA;AAAA,QAGH;AAAA,MACJ;AAAA;;aAED,SAAuB,uBAAA;AAAA,YAAA,SAAA;AACfpb,YAAAA,aAAa,CAAA;AAEjB,YAAM+Y,YAAY,KAAKwB;AAEvB,YAAM9vB,cAAc,KAAKwvB,UAAUxvB,cAAcsuB;AACjD,YAAMpuB,eAAe,KAAKsvB,UAAUtvB,eAAeouB;AACnD,YAAMuB,WAAW,KAAKL,UAAUK,WAAWvB;AAErCuC,YAAAA,aAAa,KAAKrB,UAAUqB,aAAavC,aAAauB;AACtD9xB,YAAAA,IAAI,KAAKyxB,UAAUzxB,KAAK,IAAI,KAAKyxB,UAAUzxB,IAAIuwB,YAAY,KAAKc,OAAO3K,UAAU,GAAtB;AAEjE,YAAMqM,gBAAgB,KAAKtB,UAAUsB,gBAAgBxC;AACrD,YAAMyC,QAAQ,KAAKvB,UAAUuB,QAAQzC;AACrC,YAAM0C,QAAQ,KAAKxB,UAAUwB,QAAQ1C;AACrC,YAAM2C,QAAQ,KAAKzB,UAAUyB,QAAQ3C;AACrC,YAAM4C,QAAQ,KAAK1B,UAAU0B,QAAQ5C;AACrC,YAAM6C,gBAAgB,KAAK3B,UAAU2B,iBAAiB;AAGtD5b,mBAAW0f,WAAW,KAAK5D;AAE3B9b,mBAAWxX,IAAIA;AACfwX,mBAAWoC,QAAQ5Z;AACnBwX,mBAAW8a,OAAO,KAAKb,UAAUa;AACjC9a,mBAAW+Y,YAAYA;AACvB/Y,mBAAWsa,WAAWA;AACtBta,mBAAW2f,oBAAoB,KAAK1F,UAAU0F;AAC9C3f,mBAAWsb,aAAaA;AACxBtb,mBAAW4b,gBAAgBA;AAC3B5b,mBAAWmd,YAAY,KAAKlD,UAAUkD;AACtCnd,mBAAW6e,YAAY,KAAK5E,UAAU4E;AACtC7e,mBAAW0d,gBAAgB,KAAKzD,UAAUyD;AAC1C1d,mBAAW2d,YAAY,KAAK1D,UAAU0D;AACtC3d,mBAAW4d,iBAAiB,KAAK3D,UAAU2D;AAC3C5d,mBAAW8d,kBAAkB,KAAK7D,UAAU6D;AAC5C9d,mBAAWie,uBAAuB,KAAKhE,UAAUgE;AACjDje,mBAAWme,wBAAwB,KAAKlE,UAAUkE;AAClDne,mBAAW+d,kBAAkB,KAAK9D,UAAU8D;AAC5C/d,mBAAWvV,cAAc,KAAKwvB,UAAUxvB;AACxCuV,mBAAWrV,eAAe,KAAKsvB,UAAUtvB;AACzCqV,mBAAWuc,WAAW,KAAKtC,UAAUsC;AACrCvc,mBAAWmc,iBAAiB,KAAKlC,UAAUkC;AAC3Cnc,mBAAWgc,eAAe,KAAK/B,UAAU+B;AACzChc,mBAAWic,WAAW,KAAKhC,UAAUgC;AACrCjc,mBAAWub,gBAAgBA;AAC3Bvb,mBAAWwe,SAAS,KAAKvE,UAAUuE;AACnCxe,mBAAWye,cAAc,KAAKxE,UAAUwE;AACxCze,mBAAW0e,gBAAgB,KAAKzE,UAAUyE;AAC1C1e,mBAAW2e,gBAAgB,KAAK1E,UAAU0E;AAC1C3e,mBAAW4e,aAAa,KAAK3E,UAAU2E;AACvC5e,mBAAWwb,QAAQA;AACnBxb,mBAAWyb,QAAQA;AACnBzb,mBAAW0b,QAAQA;AACnB1b,mBAAW2b,QAAQA;AACnB3b,mBAAW6b,aAAa,KAAK5B,UAAU4B,aAAa9C;AACpD/Y,mBAAW4f,YAAY,KAAK3F,UAAU2F;AAEtC,YAAI9E,OAAO9a,WAAW8a;AACtB,YAAI+E,YAAY7f,WAAWic,WAAYjc,WAAWub,iBAAiBvb,WAAWoC,QAASpC,WAAWoC;AAG9FpC,YAAAA,WAAWgc,gBAAgB,CAAChc,WAAWic,UAAU;AACjD,cAAIC;AACI,kBAAA,KAAKjC,UAAU+B,cAAvB;AAAA,YACI,KAAK;AACDE,uBAAS;AACT;AAAA,YACJ,KAAK;AACDA,uBAAS,KAAKjC,UAAUkC;AACxB;AAAA,YACJ;AACID,uBAAS,KAAKjC,UAAU+B;AAAAA,UARhC;AAUAlB,iBAAO,KAAKsB,SAAStB,MAAMS,iBAAiBvb,WAAWxX,GAAG0zB,MAAnD;AAAA,QACV;AAEDpB,eAAO,KAAKgF,SAAShF,IAAd;AACPA,eAAO,KAAKiF,MAAMjF,IAAX;AACPA,eAAO,KAAKkF,QAAQlF,MAAMc,eAAe5b,WAAW0f,QAA7C;AAEH1f,YAAAA,WAAW6b,YAAY;AACvBf,iBAAO,KAAKyE,OAAOzE,MAAM9a,WAAW6b,UAA7B;AAAA,QACV;AAEG7b,YAAAA,WAAW4f,WAAW;AACtB9E,iBAAOA,KAAKmF,OAAO,SAACC,KAAKhgC,IAAN;AAAA,2BAAA,MAAA,MAAA;AAAA,mBAAYggC,IAAIC,OAAO,KAAKP,UAAU1/B,IAAG2/B,WAAW7f,WAAW0f,QAAxC,CAAX;AAAA,UAAxB,EAAA,KAAA,IAAA,GAAuF,CAAA,CAAvF;AACP,eAAKU,eAAL;AAAA,QACH;AAGGl3B,YAAAA,IAAIuB;AACJ41B,YAAAA,SAAS;AA5FM,YAAA,YAAA,2BA8FHvF,IA9FG,GAAA;AAAA,YAAA;AA8FG,eAAA,UAAA,EAAA,GAAA,EAAA,QAAA,UAAA,EAAA,GAAA,QAAA;AAAA,gBAAX56B,IAAW,MAAA;AAElB,gBAAI8f,WAAWic,YAAY/yB,IAAIhJ,EAAEkiB,QAAQyd,aAAa3/B,EAAE46B,QAAQ,MAAM;AAClE5xB,kBAAIuB;AACJ41B,wBAAU;AAAA,YACb;AACDngC,cAAEmgC,SAASA;AAEX,gBAAIngC,EAAE46B,QAAQ,MAAM;AAChB;AAAA,YACH;AAED56B,cAAEgJ,IAAIA;AACNA,iBAAKhJ,EAAEkiB;AAAAA,UACV;AAAA,QA5GkB,SAAA,KAAA;AAAA,oBAAA,EAAA,GAAA;AAAA,QAAA,UAAA;AAAA,oBAAA,EAAA;AAAA,QAAA;AA6GnBpC,mBAAWsgB,UAAUD,SAAS;AAE9B,YAAI,KAAKpG,UAAUxxB,GAAG;AAClBuX,qBAAWvX,IAAI,KAAKwxB,UAAUxxB;AAAAA,QACjC,WAAUuX,WAAWuc,YAAYvc,WAAWuc,WAAWvc,WAAWsgB,SAAS;AACxEtgB,qBAAWvX,IAAIuX,WAAWuc,WAAWvc,WAAWsb,aAAahB,WAAW;AAAA,QAC3E,OAAM;AACHta,qBAAWvX,IAAIuX,WAAWsgB,UAAUtgB,WAAWsb,aAAahB,WAAW;AAAA,QAC1E;AAQKiG,YAAAA,qBAAqBvgB,WAAW2f,oBAAoB3f,WAAWsa;AAGjEkG,YAAAA,WAAW;AACf,YAAIxgB,WAAW0d,iBAAiB,SAAS,KAAK3D,SAASU,gBAAgB,cAAc;AACjF+F,qBAAW,CAACD;AAAAA,QACf,WAAUvgB,WAAW0d,iBAAiB,UAAU;AAC7C8C,sBAAYxgB,WAAWsb,aAAatb,WAAWsa,WAAWiG,sBAAsB;AAAA,QAD7E,WAEI,KAAKtG,UAAUyD,iBAAiB,UAAU;AACjD8C,qBAAWxgB,WAAWsb,aAAatb,WAAWsa;AAAAA,QACjD;AAGDta,mBAAWlZ,QAAQ;AACnB,iBAASzG,IAAI,GAAGA,IAAI2f,WAAWsgB,SAASjgC,KAAK;AACzC2f,qBAAWlZ,MAAMzG,CAAjB,IAAsB;AAAA,YAClB+hB,OAAO;AAAA,YACPlZ,GAAG;AAAA,YACHC,GAAG6W,WAAWsb,aAAaj7B,IAAImgC;AAAAA,YAC/B1F,MAAM,CAAA;AAAA,UAJY;AAAA,QAMzB;AAlJkB,YAAA,aAAA,2BAoJLA,IApJK,GAAA;AAAA,YAAA;AAoJC,eAAA,WAAA,EAAA,GAAA,EAAA,SAAA,WAAA,EAAA,GAAA,QAAA;AAAA,gBAAX56B,KAAW,OAAA;AAChB8f,uBAAWlZ,MAAM5G,GAAEmgC,MAAnB,EAA2BvF,KAAK92B,KAAK9D,EAArC;AAAA,UACH;AAAA,QAtJkB,SAAA,KAAA;AAAA,qBAAA,EAAA,GAAA;AAAA,QAAA,UAAA;AAAA,qBAAA,EAAA;AAAA,QAAA;AAyJH8f,YAAAA,aAAAA,2BAAAA,WAAWlZ,KAzJR,GAAA;AAAA,YAAA;AAyJe,eAAA,WAAA,EAAA,GAAA,EAAA,SAAA,WAAA,EAAA,GAAA,QAAA;AAAA,gBAAvB4tB,MAAuB,OAAA;AAC9B,gBAAIA,IAAEoG,KAAK16B,UAAU,GAAG;AACpB;AAAA,YACH;AAEKqgC,gBAAAA,YAAY/L,IAAEoG,KAAK,CAAP,EAAUA;AAC5B,gBAAM4F,WAAWhM,IAAEoG,KAAKpG,IAAEoG,KAAK16B,SAAS,CAAvB,EAA0B06B;AAEvC2F,gBAAAA,aAAa,MAAM;AACnB/L,kBAAEoG,KAAK6F;YACV;AACGC,gBAAAA,QAAQF,QAAD,KAAcA,YAAY,MAAM;AACvChM,kBAAEoG,KAAK+F;YACV;AAAA,UACJ;AAAA,QAvKkB,SAAA,KAAA;AAAA,qBAAA,EAAA,GAAA;AAAA,QAAA,UAAA;AAAA,qBAAA,EAAA;AAAA,QAAA;AA2KL7gB,YAAAA,aAAAA,2BAAAA,WAAWlZ,KA3KN,GAAA;AAAA,YAAA;AA2Ka,eAAA,WAAA,EAAA,GAAA,EAAA,SAAA,WAAA,EAAA,GAAA,QAAA;AAAA,gBAAvB4tB,MAAuB,OAAA;AAC5BA,gBAAEtS,QAAQsS,IAAEoG,KAAKmF,OAAO,SAACC,KAAKhgC,IAAN;AAAA,6BAAA,MAAA,MAAA;AAAA,qBAAYggC,MAAMhgC,GAAEkiB;AAAAA,YAAlC,EAAA,KAAA,IAAA,GAAyC,CAAzC;AAAA,UACb;AAAA,QA7KkB,SAAA,KAAA;AAAA,qBAAA,EAAA,GAAA;AAAA,QAAA,UAAA;AAAA,qBAAA,EAAA;AAAA,QAAA;AA+KnBpC,mBAAWoC,QAAQ,KAAK6X,UAAUzxB,KAAK,IAAI,KAAKyxB,UAAUzxB,IAAIuwB,YAAYh6B,KAAKI,UAALJ,MAAI,mBAAQihB,WAAWlZ,MAAM6tB,IAAI,SAACD,IAAD;AAAA,yBAAA,MAAA,MAAA;AAAOA,iBAAAA,GAAEtS;AAAAA,QAA9B,EAAA,KAAA,IAAA,CAAA,CAAR,CAAJ,IAAoDzX;AAC9HqV,mBAAWxX,IAAIwX,WAAWoC;AAG1B,YAAIpC,WAAWuc,YAAYvc,WAAWsgB,UAAUtgB,WAAWuc,YAAYvc,WAAWmc,gBAAgB;AAC9F,cAAMn5B,QAAQgd,WAAWuc,WAAW;AACpC,cAAIuE,eAAehG,KAAKiG,OAAO,SAAC7gC,IAAD;AAAA,2BAAA,MAAA,MAAA;AAAA,mBAAOA,GAAEmgC,UAAUr9B;AAAAA,UAAnB,EAA/B,KAAA,IAAA,CAAA;AACA,cAAIk5B,UAASlc,WAAWmc;AACxBD,oBAAS,KAAK4D,SAAS5D,OAAd;AACTA,oBAAS,KAAK6D,MAAM7D,OAAX;AACTA,oBAAS,KAAK8D,QAAQ9D,SAAQlc,WAAW4b,eAAe5b,WAAW0f,QAA1D;AANqF,cAAA,aAAA,2BAO9ExD,OAP8E,GAAA;AAAA,cAAA;AAOtE,iBAAA,WAAA,EAAA,GAAA,EAAA,SAAA,WAAA,EAAA,GAAA,QAAA;AAAA,kBAAbz6B,IAAa,OAAA;AACpBA,gBAAE4+B,SAASr9B;AACXvB,gBAAEyH,IAAI;AACN43B,2BAAa98B,KAAKvC,CAAlB;AAAA,YACH;AAAA,UAX6F,SAAA,KAAA;AAAA,uBAAA,EAAA,GAAA;AAAA,UAAA,UAAA;AAAA,uBAAA,EAAA;AAAA,UAAA;AAa9F,cAAMu/B,MAAM9E,QAAO97B,SAAS;AACxB0c,cAAAA,KAAKgkB,aAAab,OAAO,SAACC,KAAKhgC,IAAN;AAAA,2BAAA,MAAA,MAAA;AAAA,mBAAYggC,MAAMhgC,GAAEkiB;AAAAA,UAAxC,EAAA,KAAA,IAAA,GAA+C,CAA/C;AACT,iBAAOtF,KAAKkD,WAAWoC,SAASwe,QAAQE,aAAaA,aAAa1gC,SAAS4gC,GAAvB,EAA4BlG,IAAzC,GAAgD;AACnFgG,yBAAavU,OAAOuU,aAAa1gC,SAAS4gC,KAAK,CAA/C;AACAlkB,iBAAKgkB,aAAab,OAAO,SAACC,KAAKhgC,IAAN;AAAA,6BAAA,MAAA,MAAA;AAAA,qBAAYggC,MAAMhgC,GAAEkiB;AAAAA,YAAxC,EAAA,KAAA,IAAA,GAA+C,CAA/C;AACL,gBAAI0e,aAAa1gC,SAAS4gC,KAAK;AAC3B;AAAA,YACH;AAAA,UACJ;AACIC,eAAAA,UAAUH,cAAcA,aAAa,CAAD,EAAI53B,CAA7C;AAEA8W,qBAAWlZ,MAAM9D,KAAjB,EAAwB83B,OAAOgG;AAC/B9gB,qBAAWlZ,MAAM9D,KAAjB,EAAwBof,QAAQtF;AAAAA,QACnC;AAGD,YAAIkD,WAAWmd,aAAa,UAAU;AACpBnd,cAAAA,aAAAA,2BAAAA,WAAWlZ,KADS,GAAA;AAAA,cAAA;AACF,iBAAA,WAAA,EAAA,GAAA,EAAA,SAAA,WAAA,EAAA,GAAA,QAAA;AAAA,kBAAvB4tB,IAAuB,OAAA;AAC5BA,gBAAExrB,KAAK8W,WAAWoC,QAAQsS,EAAEtS,QAAQ3X,eAAe;AAAA,YACtD;AAAA,UAHiC,SAAA,KAAA;AAAA,uBAAA,EAAA,GAAA;AAAA,UAAA,UAAA;AAAA,uBAAA,EAAA;AAAA,UAAA;AAAA,QAIrC,WAAUuV,WAAWmd,aAAa,SAAS;AAC1Bnd,cAAAA,aAAAA,2BAAAA,WAAWlZ,KADe,GAAA;AAAA,cAAA;AACR,iBAAA,WAAA,EAAA,GAAA,EAAA,SAAA,WAAA,EAAA,GAAA,QAAA;AAAA,kBAAvB4tB,KAAuB,OAAA;AAC5BA,iBAAExrB,IAAI8W,WAAWoC,QAAQsS,GAAEtS,QAAQ3X;AAAAA,YACtC;AAAA,UAHuC,SAAA,KAAA;AAAA,uBAAA,EAAA,GAAA;AAAA,UAAA,UAAA;AAAA,uBAAA,EAAA;AAAA,UAAA;AAAA,QAI3C;AAED,eAAOuV;AAAAA,MACV;AAAA;;aAED,SAAQ,QAAA;AAAA,YAAA,SAAA;AACJ,YAAMA,aAAa,KAAKkd;AACxB,YAAMnE,YAAY,KAAKwB;AACvB,YAAM9vB,cAAcuV,WAAWvV,cAAcsuB;AAGzCmI,YAAAA,cAAclhB,WAAWxX,KAAKwX,WAAWoC;AAC7C,YAAIpC,WAAWwb,SAASxb,WAAWyb,OAAO;AACtCyF,wBAAcniC,KAAKK,IAAI4gB,WAAWxX,GAAGwX,WAAWyb,QAAQzb,WAAWwb,KAArD;AAAA,QACjB;AAED,YAAI2F,eAAenhB,WAAWvX;AAC9B,YAAIuX,WAAW0b,SAAS1b,WAAW2b,OAAO;AACtCwF,yBAAepiC,KAAKK,IAAI4gB,WAAWvX,GAAGuX,WAAW2b,QAAQ3b,WAAW0b,KAArD;AAAA,QAClB;AAED,aAAK5B,QAAQ1X,QAAQrjB,KAAKqE,KAAK89B,cAAc,KAAKrH,OAAO3K,UAAU,uBAAtB,CAAxB;AAChB4K,aAAAA,QAAQzX,SAAStjB,KAAKqE,KAAK+9B,YAAV;AAGtB,aAAKrF,kBAAL;AAEA,YAAI9b,WAAWsa,YAAY,KAAK;AAE5B,eAAKP,SAASqD,cAAc;AACvBrD,eAAAA,SAASsD,SAAS,GAAG,GAAG,MAAM,IAAnC;AACA,eAAKtD,SAASqD,cAAc;AAAA,QAC/B;AAGD,YAAIpd,WAAWwb,SAASxb,WAAW0b,OAAO;AACtC,eAAK3B,SAASuD,UAAU,CAACtd,WAAWwb,OAAO,CAACxb,WAAW0b,KAAvD;AAAA,QACH;AAGG1b,YAAAA,WAAW2d,WAAW;AACtB,cAAMyD,UAAUphB,WAAW4d,kBAAkB;AAC7C,cAAMC,WAAW7d,WAAW8d,kBAAkB9d,WAAW8d,kBAAkB/E,YAAa/Y,WAAWsa,WAAW;AAC9G,cAAM+G,WAAWrhB,WAAW+d,kBAAkB/d,WAAW+d,kBAAkBhF,YAAY;AACvF,cAAMiF,gBAAiBhe,WAAWie,yBAAyB,OAAOje,WAAWie,uBAAuBlF,YAAY/Y,WAAWvV;AAC3H,cAAMyzB,iBAAkBle,WAAWme,0BAA0B,OAAOne,WAAWme,wBAAwBpF,YAAY/Y,WAAWrV;AAEzHovB,eAAAA,SAASqE,YAAY//B,WAAWggC,cAAc+C,OAAzB;AACpBd,cAAAA,UAAUtgB,WAAWuc,WAAWx9B,KAAKK,IAAI4gB,WAAWuc,UAAUvc,WAAWsgB,OAAzC,IAAoDtgB,WAAWsgB;AAChG,mBAAIjgC,IAAI,GAAGA,IAAIigC,SAASjgC,KAAK;AAC9B,gBAAMq0B,IAAI1U,WAAWlZ,MAAMzG,CAAjB;AACL05B,iBAAAA,SAASsD,SAAS3I,EAAExrB,IAAI80B,gBAAgBvzB,aAAaiqB,EAAEvrB,IAAIk4B,UAAU3M,EAAEtS,QAAQ4b,gBAAgBE,gBAAgBL,QAApH;AAAA,UACH;AAAA,QACJ;AAGGU,YAAAA,qBAAqB;AACzB,YAAI,KAAKtE,UAAUuE,QAAQ;AACvBD,+BAAqB,CAAC,KAAKxE,SAAS0E,aAAa,KAAK1E,SAAS2E,eAAe,KAAK3E,SAAS4E,eAAe,KAAK5E,SAAS6E,UAApG;AAErB,eAAK7E,SAAS0E,cAAcpgC,WAAWggC,cAAc,KAAKpE,UAAUwE,WAAxC;AACvB1E,eAAAA,SAAS2E,gBAAgB,KAAKzE,UAAUyE,gBAAgB3F;AACxDgB,eAAAA,SAAS4E,gBAAgB,KAAK1E,UAAU0E,gBAAgB5F;AACxDgB,eAAAA,SAAS6E,aAAa,KAAK3E,UAAU2E,aAAa7F;AAAAA,QAC1D;AAGKuI,YAAAA,eAAejjC,WAAWggC,cAAc,KAAKpE,UAAU4E,SAAxC;AACjB0C,YAAAA,eAAeD;AACnB,aAAKvH,SAASqE,YAAYkD;AACPthB,YAAAA,aAAAA,2BAAAA,WAAWlZ,KAjE1B,GAAA;AAAA,YAAA;AAiEiC,eAAA,WAAA,EAAA,GAAA,EAAA,SAAA,WAAA,EAAA,GAAA,QAAA;AAAA,gBAA1BgB,OAA0B,OAAA;AACjBA,gBAAAA,aAAAA,2BAAAA,KAAKgzB,IADY,GAAA;AAAA,gBAAA;AACN,mBAAA,WAAA,EAAA,GAAA,EAAA,SAAA,WAAA,EAAA,GAAA,QAAA;AAAA,oBAAhB56B,IAAgB,OAAA;AACnBqwB,oBAAAA,KAAK;AAET,oBAAIrwB,EAAE46B,QAAQ,MAAM;AAChB;AAAA,gBACH;AAEG9a,oBAAAA,WAAWuc,YAAYr8B,EAAEmgC,UAAUrgB,WAAWuc,UAAU;AACxD;AAAA,gBACH;AAED,oBAAIr8B,EAAErB,SAAS0iC,cAAc;AACzBA,iCAAerhC,EAAErB;AACjB,uBAAKk7B,SAASqE,YAAYmD;AAAAA,gBAC7B;AAED,qBAAKxH,SAASG,OAAOh6B,EAAEm6B;AAGnBn6B,oBAAAA,EAAEshC,SAAS;AACGthC,sBAAAA,cAAAA,2BAAAA,EAAEshC,OADL,GAAA;AAAA,sBAAA;AACc,yBAAA,YAAA,EAAA,GAAA,EAAA,UAAA,YAAA,EAAA,GAAA,QAAA;AAAA,0BAAhB9M,MAAgB,QAAA;AACrB,0BAAM9X,KAAKoD,WAAWlZ,MAAM5G,EAAEmgC,MAAnB,EAA2Bn3B,IAAIhJ,EAAEgJ,IAAIqnB;AAC3CwJ,2BAAAA,SAAS+E,SAASpK,IAAEoG,MAAMle,IAAIoD,WAAWlZ,MAAM5G,EAAEmgC,MAAnB,EAA2Bl3B,IAAI6W,WAAWsa,QAA7E;AACA/J,4BAAMmE,IAAEtS;AAAAA,oBACX;AAAA,kBALU,SAAA,KAAA;AAAA,gCAAA,EAAA,GAAA;AAAA,kBAAA,UAAA;AAAA,gCAAA,EAAA;AAAA,kBAAA;AAAA,gBAOd,OAAM;AACH,sBAAMxF,MAAKoD,WAAWlZ,MAAM5G,EAAEmgC,MAAnB,EAA2Bn3B,IAAIhJ,EAAEgJ;AACvC6wB,uBAAAA,SAAS+E,SAAS5+B,EAAE46B,MAAMle,KAAIoD,WAAWlZ,MAAM5G,EAAEmgC,MAAnB,EAA2Bl3B,IAAI6W,WAAWsa,QAA7E;AAAA,gBACH;AAAA,cACJ;AAAA,YA/BgC,SAAA,KAAA;AAAA,yBAAA,EAAA,GAAA;AAAA,YAAA,UAAA;AAAA,yBAAA,EAAA;AAAA,YAAA;AAAA,UAgCpC;AAAA,QAjGG,SAAA,KAAA;AAAA,qBAAA,EAAA,GAAA;AAAA,QAAA,UAAA;AAAA,qBAAA,EAAA;AAAA,QAAA;AAoGJ,YAAIiE,oBAAoB;AACpB,eAAKxE,SAAS0E,cAAcF,mBAAmB,CAAD;AAC9C,eAAKxE,SAAS2E,gBAAgBH,mBAAmB,CAAD;AAChD,eAAKxE,SAAS4E,gBAAgBJ,mBAAmB,CAAD;AAChD,eAAKxE,SAAS6E,aAAaL,mBAAmB,CAAD;AAAA,QAChD;AAGD,YAAIve,WAAWwb,SAASxb,WAAW0b,OAAO;AACjC3B,eAAAA,SAASuD,UAAUtd,WAAWwb,OAAOxb,WAAW0b,KAArD;AAAA,QACH;AAGD1b,mBAAWlZ,QAAQkZ,WAAWlZ,MAAM6tB,IAAI,SAACD,IAAD;AAAA,cAAA,SAAA;AAAA,yBAAA,MAAA,MAAA;AAAOA,iBAAAA,GAAEoG,KAAKmF,OAAO,SAACC,KAAK7gC,GAAN;AAAA,2BAAA,MAAA,MAAA;AAAA,mBAAY6gC,MAAM7gC,EAAEy7B;AAAAA,UAAlC,EAAA,KAAA,IAAA,GAAwC,EAAxC;AAAA,QAAP,EAAxC,KAAA,IAAA,CAAA;AACI9a,YAAAA,WAAWuc,UAAU;AACrBvc,qBAAWlZ,QAAQkZ,WAAWlZ,MAAMmnB,MAAM,GAAGjO,WAAWuc,QAArC;AAAA,QACtB;AAGIvc,aAAAA,aAAaA;AAAAA,MAErB;AAAA;;MASD,OAAA,SAAA0c,cAAYsC,MAAiB;AAAXQ,YAAAA,yEAAQ;AACf9C,eAAAA,YAAY,KAAK3C,UAAUiF,MAAMQ,KAAtB;AAAA,MACrB;AAAA;;MAED,OAAA,SAAA,SAAS1E,MAAM;AACX,eAAO2G,eAAe,0EAA0E3G,IAA3E;AAAA,MACxB;AAAA;;MAED,OAAA,SAAA,MAAM4G,QAAQ;AAAA,YAAA,SAAA;AACNC,YAAAA,SAAS;AACTC,YAAAA,OAAO;AACX,YAAIC,aAAa,CAACxjC,WAAWggC,cAAc,KAAKpE,UAAU4E,SAAxC,CAAD;AACbhgC,YAAAA,QAAQ;AAENijC,YAAAA,cAAc;AAEpB,eAAOJ,OAAO/M,IAAI,SAACz0B,GAAM;AAAA,yBAAA,MAAA,MAAA;AACjBA,cAAAA,KAAK,OAAO;AACZyhC,sBAAU;AACVzhC,gBAAI;AAAA,UAFR,WAGWA,KAAK,UAAUyhC,SAAS,GAAG;AAClCA,sBAAU;AACVzhC,gBAAI;AAAA,UACP,WAAUA,KAAK,OAAO;AACnB0hC,oBAAQ;AACR1hC,gBAAI;AAAA,UAFD,WAGIA,KAAK,UAAU0hC,OAAO,GAAG;AAChCA,oBAAQ;AACR1hC,gBAAI;AAAA,UACP,WAAUA,KAAK,YAAY;AACxB,gBAAI2hC,WAAWzhC,SAAS,GAAG;AACvBvB,uBAAS;AACTgjC,yBAAWhB,IAAX;AAAA,YACH;AACD3gC,gBAAI;AAAA,UALD,WAMI4hC,YAAYC,KAAK7hC,CAAjB,GAAqB;AAC5B,gBAAM8hC,UAAUF,YAAYG,KAAK/hC,CAAjB;AAChB2hC,uBAAW79B,KACP3F,WAAWggC,cAAczkB,SAASooB,QAAQ,CAAD,CAAR,CAAjC,CADJ;AAGAnjC,qBAAS;AACTqB,gBAAI;AAAA,UAEP;AAEM,iBAAA;AAAA,YACH46B,MAAM56B;AAAAA,YACNyhC;AAAAA,YACAC;AAAAA,YACA/iC,OAAOgjC,WAAWhjC,KAAD;AAAA,UAJd;AAAA,QA7BJ,EAoCNkiC,KAAAA,IAAAA,CAAAA,EAAAA,OAAO,SAACmB,GAAD;AAAA,yBAAA,MAAA,MAAA;AAAA,iBAAOA,EAAEpH,QAAQ;AAAA,QAAjB,EApCR,KAAA,IAAA,CAAA;AAAA,MAqCH;AAAA;;aAED,SAAekE,eAAAA,MAAMU,UAAU;AACvBxF,YAAAA,OAAOwF;AACPV,YAAAA,KAAK4C,MAAM;AACX1H,iBAAO,UAAUA;AAAAA,QACpB;AACG8E,YAAAA,KAAK2C,QAAQ;AACbzH,iBAAO,YAAYA;AAAAA,QACtB;AACD,aAAKH,SAASG,OAAOA;AACrB8E,aAAK3E,YAAYH;AAAAA,MACpB;AAAA;;MAED,OAAA,SAAA,eAAewF,UAAU;AACrB,aAAK3F,SAASG,OAAOwF;AAAAA,MACxB;AAAA;;MAED,OAAA,SAAA,QAAQyC,QAAqC;AAAA,YAAA,SAAA;AAA7BvG,YAAAA,iFAAgB;AAAa,YAAV8D,WAAU,UAAA,SAAA,IAAA,UAAA,CAAA,IAAA;AAAA,YAAA,cAAA,2BACzByC,MADyB,GAAA;AAAA,YAAA;AACjB,eAAA,YAAA,EAAA,GAAA,EAAA,UAAA,YAAA,EAAA,GAAA,QAAA;AAAA,gBAAb3jC,IAAa,QAAA;AACpB,iBAAK4jC,eAAe5jC,GAAGkhC,QAAvB;AACAlhC,cAAE4jB,QAAQ,KAAKsa,YAAYl+B,EAAEs8B,MAAMc,aAAzB;AAGNA,gBAAAA,gBAAgB,GAAG;AACnBp9B,gBAAEgjC,UAAUhjC,EAAEs8B,KAAKj5B,MAAM,EAAb,EAAiB8yB,IAAI,SAACD,IAAM;AAAA,+BAAA,MAAA,MAAA;AAAQ,uBAAA;AAAA,kBAACoG,MAAMpG;AAAAA,gBAAP;AAAA,cAAU,EAA1D,KAAA,IAAA,CAAA;AACcl2B,kBAAAA,cAAAA,2BAAAA,EAAEgjC,OAFG,GAAA;AAAA,kBAAA;AAEM,qBAAA,YAAA,EAAA,GAAA,EAAA,UAAA,YAAA,EAAA,GAAA,QAAA;AAAA,sBAAhB9M,IAAgB,QAAA;AACrBA,oBAAEtS,QAAQ,KAAKsa,YAAYhI,EAAEoG,MAAMc,aAAzB;AAAA,gBACb;AAAA,cAJkB,SAAA,KAAA;AAAA,4BAAA,EAAA,GAAA;AAAA,cAAA,UAAA;AAAA,4BAAA,EAAA;AAAA,cAAA;AAAA,YAKtB;AAAA,UAEJ;AAAA,QAbwC,SAAA,KAAA;AAAA,sBAAA,EAAA,GAAA;AAAA,QAAA,UAAA;AAAA,sBAAA,EAAA;AAAA,QAAA;AAcpCwE,aAAAA,eAAeV,QAApB;AACA,eAAOyC;AAAAA,MACV;AAAA;;aAED,SAAOA,OAAAA,QAAQtG,YAAY;AACvBsG,eAAO5V,OAAO,GAAG,GAAG;AAAA,UAACuO,MAAM;AAAA,UAAI1Y,OAAOyZ;AAAAA,QAAlB,CAApB;AACA,eAAOsG;AAAAA,MACV;AAAA;;MAED,OAAA,SAAA,SAASnD,MAAMzD,eAAeW,QAAQ;AAClC,YAAM+C,cAAc,KAAKvC,YAAYR,MAAjB;AACpB,YAAMgD,UAAUF,KAAK5+B;AACrB,YAAM++B,YAAY,KAAKzC,YAAYsC,IAAjB;AAGdG,YAAAA,aAAa5D,eAAe;AAC5B,iBAAOyD;AAAAA,QACV;AAGGI,YAAAA,cAAcrgC,KAAKC,MAAOu8B,gBAAgB2D,UAAWC,SAAvC;AAClB,YAAIE,iBAAiB,KAAK3C,YAAYsC,KAAKM,UAAU,GAAGF,WAAlB,CAAjB,IAAmDH;AAGpEI,YAAAA,iBAAiB9D,eAAe;AACzB6D,iBAAAA,cAAc,GAAG;AACpBC,6BAAiB,KAAK3C,YAAYsC,KAAKM,UAAU,GAAGF,WAAlB,CAAjB,IAAmDH;AAChEI,gBAAAA,iBAAiB9D,eAAe;AAChC6D,6BAAe;AAAA,YAClB,OAAM;AACH;AAAA,YACH;AAAA,UACJ;AAAA,QAGJ,OAAM;AACIA,iBAAAA,cAAcF,SAAS;AAC1BG,6BAAiB,KAAK3C,YAAYsC,KAAKM,UAAU,GAAGF,WAAlB,CAAjB,IAAmDH;AAChEI,gBAAAA,iBAAiB9D,eAAe;AAChC6D,6BAAe;AAAA,YAClB,OAAM;AAEHA,6BAAc;AACd;AAAA,YACH;AAAA,UACJ;AAAA,QACJ;AAGD,eAAOJ,KAAKM,UAAU,GAAGF,WAAlB,KAAkC7D,iBAAiB0D,cAAc/C,SAAS;AAAA,MACpF;AAAA;;aAED,SAAe8C,eAAAA,MAAM5c,OAAO;AACxB,YAAM8c,UAAUF,KAAK5+B;AACrB,YAAM++B,YAAY,KAAKzC,YAAYsC,IAAjB;AAEdG,YAAAA,aAAa/c,OAAO;AACb,iBAAA;AAAA,YAACigB,YAAYrD,KAAK5+B;AAAAA,YAAQi/B,gBAAgBF;AAAAA,UAA1C;AAAA,QACV;AAEGkD,YAAAA,aAAatjC,KAAKC,MAAOojB,QAAQ8c,UAAWC,SAA/B;AACjB,YAAIE,iBAAiB,KAAK3C,YAAYsC,KAAKM,UAAU,GAAG+C,UAAlB,CAAjB;AAGjBhD,YAAAA,iBAAiBjd,OAAO;AACjBigB,iBAAAA,aAAa,GAAG;AACnBhD,6BAAiB,KAAK3C,YAAYsC,KAAKM,UAAU,GAAG+C,UAAlB,CAAjB;AACbhD,gBAAAA,iBAAiBjd,OAAO;AACxBigB,4BAAc;AAAA,YACjB,OAAM;AACH;AAAA,YACH;AAAA,UACJ;AAAA,QAGJ,OAAM;AACIA,iBAAAA,aAAanD,SAAS;AACzBG,6BAAiB,KAAK3C,YAAYsC,KAAKM,UAAU,GAAG+C,UAAlB,CAAjB;AACbhD,gBAAAA,iBAAiBjd,OAAO;AACxBigB,4BAAc;AAAA,YACjB,OAAM;AAEHA,4BAAa;AACbhD,+BAAiB,KAAK3C,YAAYsC,KAAKM,UAAU,GAAG+C,UAAlB,CAAjB;AACjB;AAAA,YACH;AAAA,UACJ;AAAA,QACJ;AACM,eAAA;AAAA,UAACA;AAAAA,UAAYhD;AAAAA,QAAb;AAAA,MAEV;AAAA;;MAED,OAAA,SAAA,UAAUL,MAAM5c,OAAOsd,UAAU;AAC7B,YAAI,CAACV,KAAKlE,MAAM;AACZ,iBAAOkE;AAAAA,QACV;AACD,aAAKoD,eAAepD,MAAMU,QAA1B;AACM/9B,YAAAA,QAAQ,CAAA;AACd,YAAIm5B,OAAOkE,KAAKlE;AAChB,YAAI,CAACkE,KAAKwC,SAAS;AACf,iBAAO,MAAM;AACT,gBAAA,uBAAqC,KAAKc,eAAexH,MAAM1Y,KAA1B,GAA9BigB,kCAAAA,YAAYhD,sCAAAA;AACnB19B,kBAAMqC,KAANu+B,eAAA,CAAA,GAAevD,IAAf,CAAA;AACAr9B,kBAAMA,MAAMvB,SAAS,CAAhB,EAAmB06B,OAAOA,KAAK7M,MAAM,GAAGoU,UAAd;AAC/B1gC,kBAAMA,MAAMvB,SAAS,CAAhB,EAAmBgiB,QAAQid;AAEhC,gBAAIgD,eAAevH,KAAK16B,QAAQ;AAC5B;AAAA,YACH;AAED06B,mBAAOA,KAAK7M,MAAMoU,UAAX;AAAA,UACV;AAAA,QACJ,OAAM;AACCG,cAAAA,aAAa;AACbhB,cAAAA,UAAU,CAAA;AACVa,cAAAA,cAAa;AACDrD,cAAAA,cAAAA,2BAAAA,KAAKwC,OAJlB,GAAA;AAAA,cAAA;AAI2B,iBAAA,YAAA,EAAA,GAAA,EAAA,UAAA,YAAA,EAAA,GAAA,QAAA;AAAA,kBAAnB9M,IAAmB,QAAA;AAC1B,kBAAI8N,aAAa9N,EAAEtS,SAASA,OAAO;AAC/BzgB,sBAAMqC,KAANu+B,eAAA,CAAA,GAAevD,IAAf,CAAA;AACAr9B,sBAAMA,MAAMvB,SAAS,CAAhB,EAAmB06B,OAAOA,KAAK7M,MAAM,GAAGoU,WAAd;AAC/B1gC,sBAAMA,MAAMvB,SAAS,CAAhB,EAAmBgiB,QAAQogB;AAChC7gC,sBAAMA,MAAMvB,SAAS,CAAhB,EAAmBohC,UAAUA;AAClC1G,uBAAOA,KAAK7M,MAAMoU,WAAX;AACPG,6BAAa;AACbhB,0BAAU,CAAA;AACVa,8BAAa;AAAA,cAEhB,OAAM;AACHA,+BAAc;AACdb,wBAAQx9B,KAAK0wB,CAAb;AACA8N,8BAAc9N,EAAEtS;AAAAA,cACnB;AAAA,YACJ;AAAA,UApBE,SAAA,KAAA;AAAA,wBAAA,EAAA,GAAA;AAAA,UAAA,UAAA;AAAA,wBAAA,EAAA;AAAA,UAAA;AAsBCogB,cAAAA,aAAa,GAAG;AAChB7gC,kBAAMqC,KAANu+B,eAAA,CAAA,GAAevD,IAAf,CAAA;AACAr9B,kBAAMA,MAAMvB,SAAS,CAAhB,EAAmB06B,OAAOA,KAAK7M,MAAM,GAAGoU,WAAd;AAC/B1gC,kBAAMA,MAAMvB,SAAS,CAAhB,EAAmBgiB,QAAQogB;AAChC7gC,kBAAMA,MAAMvB,SAAS,CAAhB,EAAmBohC,UAAUA;AAAAA,UACrC;AAAA,QACJ;AAED,eAAO7/B;AAAAA,MACV;AAAA;;MAED,OAAA,SAAA,UAAUwgC,QAAsB;AAAdM,YAAAA,4EAAW;AACrBC,YAAAA,YAAY;AACZC,YAAAA,QAAQF;AAFgB,YAAA,cAAA,2BAGTN,MAHS,GAAA;AAAA,YAAA;AAGD,eAAA,YAAA,EAAA,GAAA,EAAA,UAAA,YAAA,EAAA,GAAA,QAAA;AAAA,gBAAhBnD,OAAgB,QAAA;AACvB,gBAAIA,KAAKlE,QAAQ,MAAM;AACnB;AAAA,YACH;AACDkE,iBAAK91B,IAAIy5B,QAAQD;AACjBC,oBAAQ3D,KAAK91B;AACbw5B,wBAAY1D,KAAK5c;AAAAA,UACpB;AAAA,QAV2B,SAAA,KAAA;AAAA,sBAAA,EAAA,GAAA;AAAA,QAAA,UAAA;AAAA,sBAAA,EAAA;AAAA,QAAA;AAAA,MAY/B;AAAA;;;MCrpBgBwgB;;;AAEjB,aAAAA,aAAYrjB,OAAO;AAAA,UAAA;AAAA,sBAAA,MAAAqjB,YAAA;AACf,cAAA,OAAA,KAAA,MAAMrjB,KAAN;AAGK0W,YAAAA,aAAa,MAAK1W,MAAM2P,UAAU,WAArB;AAJH,aAAA;AAAA,IAKlB;;;WAUD,SAAW,MAAA;AACP,eAAO,KAAK2T;AAAAA;MAGhB,KAAA,SAAAvrB,KAASjY,GAAG;AACR,YAAI,KAAKwjC,UAAUxjC,GAAG;AACbwjC,eAAAA,QAAQ,KAAKxjC;AAClB,eAAKwa,SAAL;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAQ,MAAA;AACJ,eAAO,KAAKiD;AAAAA;MAGhB,KAAA,SAAAxF,KAAMjY,GAAG;AACL,YAAI,KAAKyd,OAAOzd,GAAG;AACVyd,eAAAA,KAAKzd;AACV,eAAKwa,SAAL;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAQ,MAAA;AACJ,eAAO,KAAKkD;AAAAA;MAGhB,KAAA,SAAAzF,KAAMjY,GAAG;AACL,YAAI,KAAK0d,OAAO1d,GAAG;AACV0d,eAAAA,KAAK1d;AACV,eAAKwa,SAAL;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAgB,MAAA;AACZ,eAAO,KAAKipB;AAAAA;MAGhB,KAAA,SAAAxrB,KAAcjY,GAAG;AACb,YAAI,KAAKyjC,eAAezjC,GAAG;AAClByjC,eAAAA,aAAazjC;AAClB,eAAKwa,SAAL;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAwB,MAAA;AACpB,eAAO,KAAKkpB;AAAAA;MAGhB,KAAA,SAAAzrB,KAAsBjY,GAAG;AACrB,YAAI,KAAK0jC,uBAAuB1jC,GAAG;AAC1B0jC,eAAAA,qBAAqB1jC;AAC1B,eAAKwa,SAAL;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAe,MAAA;AACX,eAAO,KAAKmpB;AAAAA;MAGhB,KAAA,SAAA1rB,KAAajY,GAAG;AACZ,YAAI,KAAK2jC,cAAc3jC,GAAG;AACjB2jC,eAAAA,YAAY3jC;AACjB,eAAKwa,SAAL;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAiB,MAAA;AACb,eAAO,KAAKopB;AAAAA;MAGhB,KAAA,SAAA3rB,KAAejY,GAAG;AACd,YAAI,KAAK4jC,gBAAgB5jC,GAAG;AACnB4jC,eAAAA,cAAc5jC;AACnB,eAAKwa,SAAL;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAe,MAAA;AACX,eAAO,KAAKqpB;AAAAA;MAGhB,KAAA,SAAA5rB,KAAajY,GAAG;AACZ,YAAI,KAAK6jC,cAAc7jC,GAAG;AACjB6jC,eAAAA,YAAY7jC;AACjB,eAAKwa,SAAL;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAe,MAAA;AACX,eAAO,KAAKspB;AAAAA;MAGhB,KAAA,SAAA7rB,KAAajY,GAAG;AACZ,YAAI,KAAK8jC,cAAc9jC,GAAG;AACjB8jC,eAAAA,YAAY9jC;AACjB,eAAKwa,SAAL;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAoB,MAAA;AAChB,eAAO,KAAKupB;AAAAA;MAGhB,KAAA,SAAA9rB,KAAkBjY,GAAG;AACjB,YAAI,KAAK+jC,mBAAmB/jC,GAAG;AACtB+jC,eAAAA,iBAAiB/jC;AACtB,eAAKwa,SAAL;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAgB,MAAA;AACZ,eAAO,KAAKwpB;AAAAA;MAGhB,KAAA,SAAA/rB,KAAcjY,GAAG;AACb,YAAI,KAAKgkC,eAAehkC,GAAG;AAClBgkC,eAAAA,aAAahkC;AAClB,eAAKwa,SAAL;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAmB,MAAA;AACf,eAAO,KAAKypB;AAAAA;MAGhB,KAAA,SAAAhsB,KAAiBjY,GAAG;AAChB,YAAIA,KAAK,KAAKikC,eAAe;AACpBA,eAAAA,gBAAgBjkC;AACrB,eAAKwa,SAAL;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAiB,MAAA;AACb,eAAO,KAAK0pB;AAAAA;MAGhB,KAAA,SAAAjsB,KAAejY,GAAG;AACd,YAAI,KAAKkkC,gBAAgBlkC,GAAG;AACnBkkC,eAAAA,cAAclkC;AACnB,eAAKwa,SAAL;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAmB,MAAA;AACf,eAAO,KAAK2pB;AAAAA;MAGhB,KAAA,SAAAlsB,KAAiBjY,GAAG;AAChB,YAAI,KAAKmkC,kBAAkBnkC,GAAG;AACrBmkC,eAAAA,gBAAgBnkC;AACrB,eAAKwa,SAAL;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAgB,MAAA;AACZ,eAAO,KAAK4pB;AAAAA;MAGhB,KAAA,SAAAnsB,KAAcjY,GAAG;AACb,YAAIA,KAAK,YAAYkF,OAAO6mB,OAAO;AAC/B/rB,cAAIA,KAAK,UAAU,SAAS;AAAA,QAC/B;AACD,YAAI,KAAKokC,eAAepkC,GAAG;AAClBokC,eAAAA,aAAapkC;AAClB,eAAKwa,SAAL;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAoB,MAAA;AAChB,eAAO,KAAK6pB;AAAAA;MAGhB,KAAA,SAAApsB,KAAkBjY,GAAG;AACjB,YAAI,KAAKqkC,mBAAmBrkC,GAAG;AACtBqkC,eAAAA,iBAAiBrkC;AACtB,eAAKwa,SAAL;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAc,MAAA;AACV,eAAO,KAAK8pB;AAAAA;MAGhB,KAAA,SAAArsB,KAAYjY,GAAG;AACX,YAAI,KAAKskC,aAAatkC,GAAG;AAChBskC,eAAAA,WAAWtkC;AAChB,eAAKwa,SAAL;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAe,MAAA;AACX,eAAO,KAAK+pB;AAAAA;MAGhB,KAAA,SAAAtsB,KAAajY,GAAG;AACZ,YAAI,KAAKukC,cAAcvkC,GAAG;AACjBukC,eAAAA,YAAYvkC;AACjB,eAAKwa,SAAL;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAqB,MAAA;AACjB,eAAO,KAAKgqB;AAAAA;MAGhB,KAAA,SAAAvsB,KAAmBjY,GAAG;AAClB,YAAI,KAAKwkC,oBAAoBxkC,GAAG;AACvBwkC,eAAAA,kBAAkBxkC;AACvB,eAAKwa,SAAL;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAgB,MAAA;AACZ,eAAO,KAAKiqB;AAAAA;MAGhB,KAAA,SAAAxsB,KAAcjY,GAAG;AACb,YAAI,KAAKykC,eAAezkC,GAAG;AAClBykC,eAAAA,aAAazkC;AAClB,eAAKwa,SAAL;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAkB,MAAA;AACd,eAAO,KAAK/B;AAAAA;MAGhB,KAAA,SAAAR,KAAgBjY,GAAG;AACf,YAAI,KAAKyY,iBAAiBzY,GAAG;AACpByY,eAAAA,eAAezY;AACpB,eAAKwa,SAAL;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAmB,MAAA;AACf,eAAO,KAAK7B;AAAAA;MAGhB,KAAA,SAAAV,KAAiBjY,GAAG;AAChB,YAAI,KAAK2Y,kBAAkB3Y,GAAG;AACrB2Y,eAAAA,gBAAgB3Y;AACrB,eAAKwa,SAAL;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAa,MAAA;AACT,eAAO,KAAKkqB;AAAAA;MAGhB,KAAA,SAAAzsB,KAAWjY,GAAG;AACV,YAAI,KAAK0kC,YAAY1kC,GAAG;AACf0kC,eAAAA,UAAU1kC;AACf,eAAKwa,SAAL;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAkB,MAAA;AACd,eAAO,KAAKmqB;AAAAA;MAGhB,KAAA,SAAA1sB,KAAgBjY,GAAG;AACf,YAAI,KAAK2kC,iBAAiB3kC,GAAG;AACpB2kC,eAAAA,eAAe3kC;AACpB,eAAKwa,SAAL;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAoB,MAAA;AAChB,eAAO,KAAKoqB;AAAAA;MAGhB,KAAA,SAAA3sB,KAAkBjY,GAAG;AACjB,YAAI,KAAK4kC,mBAAmB5kC,GAAG;AACtB4kC,eAAAA,iBAAiB5kC;AACtB,eAAKwa,SAAL;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAoB,MAAA;AAChB,eAAO,KAAKqqB;AAAAA;MAGhB,KAAA,SAAA5sB,KAAkBjY,GAAG;AACjB,YAAI,KAAK6kC,mBAAmB7kC,GAAG;AACtB6kC,eAAAA,iBAAiB7kC;AACtB,eAAKwa,SAAL;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAiB,MAAA;AACb,eAAO,KAAKsqB;AAAAA;MAGhB,KAAA,SAAA7sB,KAAejY,GAAG;AACd,YAAI,KAAK8kC,gBAAgB9kC,GAAG;AACnB8kC,eAAAA,cAAc9kC;AACnB,eAAKwa,SAAL;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAgB,MAAA;AACZ,eAAO,KAAKuqB;AAAAA;MAGhB,KAAA,SAAA9sB,KAAcjY,GAAG;AACb,YAAI,KAAK+kC,eAAe/kC,GAAG;AAClB+kC,eAAAA,aAAa/kC;AAClB,eAAKwa,SAAL;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAsB,MAAA;AAClB,eAAO,KAAKwqB;AAAAA;MAGhB,KAAA,SAAA/sB,KAAoBjY,GAAG;AACnB,YAAI,KAAKglC,qBAAqBhlC,GAAG;AACxBglC,eAAAA,mBAAmBhlC;AACxB,eAAKwa,SAAL;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAqB,MAAA;AACjB,eAAO,KAAKyqB;AAAAA;MAGhB,KAAA,SAAAhtB,KAAmBjY,GAAG;AAClB,YAAI,KAAKilC,oBAAoBjlC,GAAG;AACvBilC,eAAAA,kBAAkBjlC;AACvB,eAAKwa,SAAL;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAsB,MAAA;AAClB,eAAO,KAAK0qB;AAAAA;MAGhB,KAAA,SAAAjtB,KAAoBjY,GAAG;AACnB,YAAI,KAAKklC,qBAAqBllC,GAAG;AACxBklC,eAAAA,mBAAmBllC;AACxB,eAAKwa,SAAL;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAA2B,MAAA;AACvB,eAAO,KAAK2qB;AAAAA;MAGhB,KAAA,SAAAltB,KAAyBjY,GAAG;AACxB,YAAI,KAAKmlC,0BAA0BnlC,GAAG;AAC7BmlC,eAAAA,wBAAwBnlC;AAC7B,eAAKwa,SAAL;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAA4B,MAAA;AACxB,eAAO,KAAK4qB;AAAAA;MAGhB,KAAA,SAAAntB,KAA0BjY,GAAG;AACzB,YAAI,KAAKolC,2BAA2BplC,GAAG;AAC9BolC,eAAAA,yBAAyBplC;AAC9B,eAAKwa,SAAL;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAY,MAAA;AACR,eAAO,KAAK6qB;AAAAA;MAGhB,KAAA,SAAAptB,KAAUjY,GAAG;AACT,YAAI,KAAKqlC,WAAWrlC,GAAG;AACdqlC,eAAAA,SAASrlC;AACd,eAAKwa,SAAL;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAY,MAAA;AACR,eAAO,KAAK8qB;AAAAA;MAGhB,KAAA,SAAArtB,KAAUjY,GAAG;AACT,YAAI,KAAKslC,WAAWtlC,GAAG;AACdslC,eAAAA,SAAStlC;AACd,eAAKwa,SAAL;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAY,MAAA;AACR,eAAO,KAAK+qB;AAAAA;MAGhB,KAAA,SAAAttB,KAAUjY,GAAG;AACT,YAAI,KAAKulC,WAAWvlC,GAAG;AACdulC,eAAAA,SAASvlC;AACd,eAAKwa,SAAL;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAY,MAAA;AACR,eAAO,KAAKgrB;AAAAA;MAGhB,KAAA,SAAAvtB,KAAUjY,GAAG;AACT,YAAI,KAAKwlC,WAAWxlC,GAAG;AACdwlC,eAAAA,SAASxlC;AACd,eAAKwa,SAAL;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAuB,MAAA;AACnB,eAAO,KAAKirB;AAAAA;MAGhB,KAAA,SAAAxtB,KAAqBjY,GAAG;AACpB,YAAI,KAAKylC,sBAAsBzlC,GAAG;AACzBylC,eAAAA,oBAAoBzlC;AACzB,eAAKwa,SAAL;AAAA,QACH;AAAA,MACJ;AAAA;;WASD,SAAoB,MAAA;AAChB,eAAO,KAAKkrB;AAAAA;MARhB,KAAA,SAAAztB,KAAkBjY,GAAG;AACjB,YAAI,KAAK0lC,mBAAmB1lC,GAAG;AACtB0lC,eAAAA,iBAAiB1lC;AACtB,eAAKwa,SAAL;AAAA,QACH;AAAA,MACJ;AAAA;;WAaD,SAAiB,MAAA;AACb,eAAO,KAAKmrB;AAAAA;MARhB,KAAA,SAAA1tB,KAAejY,GAAG;AACd,YAAI,KAAK2lC,gBAAgB3lC,GAAG;AACnB2lC,eAAAA,cAAc3lC;AACnB,eAAKwa,SAAL;AAAA,QACH;AAAA,MACJ;AAAA;;WAMD,SAAgB,MAAA;AACZ,eAAA,KAAA,gBAAA+oB,aAAA,SAAA,GAAA,aAAA,IAAA;AAAA;MAGJ,KAAA,SAAAtrB,KAAcjY,GAAG;AAEb,YAAI,KAAK05B,cAAc15B,GAAG;AACtB,eAAA,gBAAAujC,aAAA,SAAA,GAAA,aAAkBvjC,GAAlB,MAAA,IAAA;AACA,eAAKwa,SAAL;AAAA,QACH;AAAA,MACJ;AAAA;;aAED,SAAc,cAAA;AACH,eAAA,CAAC,CAAC,KAAKihB;AAAAA,MACjB;AAAA;;aAED,SAAe,eAAA;AACPn5B,YAAAA,QAAQ,CAAA;AAER,YAAA,KAAK6G,MAAM;AAAG7G,gBAAMqC,KAAK,OAAO,KAAKwE,CAAvB;AACd,YAAA,KAAKC,MAAM;AAAG9G,gBAAMqC,KAAK,OAAO,KAAKyE,CAAvB;AACd,YAAA,KAAK4xB,cAAc;AAAU14B,gBAAMqC,KAAK,OAAO,KAAKq2B,SAAvB;AAC7B,YAAA,KAAKC,aAAa;AAAI34B,gBAAMqC,KAAK,OAAO,KAAKs2B,QAAvB;AACtB,YAAA,KAAKE,eAAe;AAAU74B,gBAAMqC,KAAK,OAAO,KAAKw2B,UAAvB;AAC9B,YAAA,KAAKmF,sBAAsB;AAAGh+B,gBAAMqC,KAAK,OAAO,KAAK27B,iBAAvB;AAC9B,YAAA,KAAKvF,aAAa;AAAMz4B,gBAAMqC,KAAK,QAAQ3B,MAAMC,QAAQ,KAAK83B,QAAnB,IAA+B,KAAKA,SAAS5hB,KAAK,GAAnB,IAA0B,KAAK4hB,SAAjF;AAC5B,YAAI,KAAK6B,aAAa;AAAMt6B,gBAAMqC,KAAK,QAAQ,KAAKi4B,WAAW,IAAI,EAAvC;AACxB,YAAA,KAAKV,kBAAkB;AAAG55B,gBAAMqC,KAAK,OAAO,KAAKu3B,aAAvB;AAC9B,YAAI,KAAKqE,cAAc;AAAOj+B,gBAAMqC,KAAK,OAAO,KAAK47B,YAAY,IAAI,CAAvC;AAC1B,YAAA,KAAK5D,gBAAgB;AAAIr6B,gBAAMqC,KAAK,OAAO,KAAKg4B,YAAvB;AACzB,YAAA,KAAKV,eAAe;AAAM35B,gBAAMqC,KAAK,OAAO,KAAKs3B,UAAvB;AAC1B,YAAA,KAAKb,iBAAiB;AAAc94B,gBAAMqC,KAAK,OAAO,KAAKy2B,YAAvB;AACpC,YAAA,KAAK0C,cAAc;AAAQx7B,gBAAMqC,KAAK,OAAO,KAAKm5B,SAAvB;AAC3B,YAAA,KAAKO,kBAAkB;AAAO/7B,gBAAMqC,KAAK,OAAO,KAAK05B,aAAvB;AAC9B,YAAA,KAAKrC,YAAY;AAAM15B,gBAAMqC,KAAK,OAAO,KAAKq3B,OAAvB;AACvB,YAAA,KAAKkB,aAAa;AAAG56B,gBAAMqC,KAAK,OAAO,KAAKu4B,QAAvB;AACrB,YAAA,KAAKJ,mBAAmB;AAAMx6B,gBAAMqC,KAAK,OAAO,KAAKm4B,cAAvB;AAClCx6B,cAAMqC,KAAK,OAAO,KAAK+0B,SAAvB;AACA,YAAI,KAAK8F,cAAc;AAAYl9B,gBAAMqC,KAAK,OAAO,KAAK66B,UAAUoG,SAAS,EAAxB,CAAlB;AAC/B,YAAA,KAAKx6B,gBAAgB;AAAG9I,gBAAMqC,KAAK,OAAO,KAAKyG,WAAvB;AACxB,YAAA,KAAKE,iBAAiB;AAAGhJ,gBAAMqC,KAAK,OAAO,KAAK2G,YAAvB;AAC7B,YAAI,KAAK6zB,WAAW;AAAO78B,gBAAMqC,KAAK,QAAQ,KAAKw6B,SAAS,IAAI,EAArC;AAC3B,YAAI,KAAKC,gBAAgB;AAAY98B,gBAAMqC,KAAK,OAAO,KAAKy6B,YAAYwG,SAAS,EAA1B,CAAlB;AACjC,YAAA,KAAKvG,kBAAkB;AAAG/8B,gBAAMqC,KAAK,OAAO,KAAK06B,aAAvB;AAC1B,YAAA,KAAKC,kBAAkB;AAAGh9B,gBAAMqC,KAAK,OAAO,KAAK26B,aAAvB;AAC1B,YAAA,KAAKC,eAAe;AAAGj9B,gBAAMqC,KAAK,OAAO,KAAK46B,UAAvB;AAC3B,YAAI,KAAKjB,cAAc;AAAOh8B,gBAAMqC,KAAK,QAAQ,KAAK25B,YAAY,IAAI,EAAxC;AAC1B,YAAA,KAAKG,oBAAoB;AAAGn8B,gBAAMqC,KAAK,OAAO,KAAK85B,eAAvB;AAChC,YAAI,KAAKF,mBAAmB;AAAYj8B,gBAAMqC,KAAK,OAAO,KAAK45B,eAAeqH,SAAS,EAA7B,CAAlB;AACpC,YAAA,KAAKlH,oBAAoB;AAAMp8B,gBAAMqC,KAAK,OAAO,KAAK+5B,eAAvB;AAC/B,YAAA,KAAKE,yBAAyB;AAAMt8B,gBAAMqC,KAAK,OAAO,KAAKi6B,oBAAvB;AACpC,YAAA,KAAKE,0BAA0B;AAAMx8B,gBAAMqC,KAAK,OAAO,KAAKm6B,qBAAvB;AACrC,YAAA,KAAKvC,kBAAkB;AAAMj6B,gBAAMqC,KAAK,OAAO,KAAK43B,aAAvB;AAC7B,YAAA,KAAKC,eAAe;AAAMl6B,gBAAMqC,KAAK,OAAO,KAAK63B,UAAvB;AAE1B,YAAA,KAAKL;AAAO75B,gBAAMqC,KAAK,QAAQ,KAAKw3B,KAAxB;AACZ,YAAA,KAAKC;AAAO95B,gBAAMqC,KAAK,QAAQ,KAAKy3B,KAAxB;AACZ,YAAA,KAAKC;AAAO/5B,gBAAMqC,KAAK,QAAQ,KAAK03B,KAAxB;AACZ,YAAA,KAAKC;AAAOh6B,gBAAMqC,KAAK,QAAQ,KAAK23B,KAAxB;AAEhB,YAAI,KAAKuJ;AAAkBvjC,gBAAMqC,KAAK,OAAO,KAAKkhC,mBAAmB,IAAI,CAA9C;AAE3B,YAAI5lB,KAAK,QAAQ3d,MAAM6W,KAAK,GAAX,IAAkB,MAAM,KAAKsiB;AAC9C,eAAOxb;AAAAA,MACV;AAAA;;aAED,SAAmB,mBAAA;AACf,YAAM6lB,OAAO,KAAKC;AAElB,YAAMC,KAAK,KAAK9lB,MAAM8lB;AAEf,eAAA,SAAU3kB,IAAI;AAAA,cAAA,SAAA;AACXkZ,cAAAA,SAAS,KAAKra,MAAMka,SAAS6L,iBAApB;AACT7P,cAAAA,WAAY0P,KAAKD,mBACnB,IAAIzF,4BAA4B,KAAKlgB,OAAOqa,QAAQuL,IAApD,IACA,IAAIxL,oBAAoB,KAAKpa,OAAOqa,QAAQuL,IAA5C;AAEJ,cAAM3mC,IAAIi3B,SAAS8P;AAEbC,cAAAA,YAAY,CAAA;AAEZC,cAAAA,WAAW,KAAKlmB,MAAM2P,UAAU,WAArB;AACbwW,cAAAA,UAAU;AAGd,cAAIxjC,QAAMyjC,UAAUF,QAAhB,GAA2B;AAC3BC,sBAAUD;AAAAA,UADd,WAEWvjC,QAAMoB,SAASmiC,QAAf,GAA0B;AACjC,gBAAM1M,YAAY,KAAKxZ,MAAMqmB,mBAAX;AAClBF,sBAAU3M,aAAa0M,SAAS1M,aAAaoM,KAAK7K,YAAYmL,SAASnL;AAAAA,UAC1E;AAEG+K,cAAAA,MAAMK,SAAS;AACfF,sBAAUH,GAAGQ,kBAAJ,IAA0BR,GAAGS;AAAAA,UACzC;AAED,cAAItnC,GAAG;AACHA,cAAEw8B,KAAK,WAAM;AAAA,6BAAA,MAAA,MAAA;AAETta,iBAAG,MAAMhe,OAAOqjC,OAAO;AAAA,gBACnB/lB,YAAYyV,SAASzV;AAAAA,gBACrB8B,UAAU;AAAA,gBACV0jB;AAAAA,cAHmB,GAIpB,KAAKjmB,MAAMka,SAASuM,kCAAkCpM,MAAtD,CAJM,CAAP;AAAA,YAFN,EAOGmB,KAAAA,IAAAA,CAAAA,EAAAA,MAAM,SAACvZ,KAAQ;AAAA,6BAAA,MAAA,MAAA;AACdd,iBAAGc,GAAD;AAAA,YACL,EATD,KAAA,IAAA,CAAA;AAAA,UAUH,OAAM;AACHd,eAAG,MAAMhe,OAAOqjC,OAAO;AAAA,cACnB/lB,YAAYyV,SAASzV;AAAAA,cACrB8B,UAAU;AAAA,cACV0jB;AAAAA,YAHmB,GAIpB,KAAKjmB,MAAMka,SAASuM,kCAAkCpM,MAAtD,CAJM,CAAP;AAAA,UAKL;AAAA,QACJ;AAAA,MACJ;AAAA;;aAGD,SAAiB,iBAAA;AACb,YAAMd,cAAN,KAAA,gBAAA8J,aAAA,SAAA,GAAA,kBAAA,IAAA,EAAA,KAAA,IAAA;AACI,YAAA,KAAK9H,SAAS;AAAIhC,sBAAY,MAAD,IAAW,KAAKgC;AAC7C,YAAA,KAAKtyB,MAAM;AAAGswB,sBAAY,GAAD,IAAQ,KAAKtwB;AACtC,YAAA,KAAKC,MAAM;AAAGqwB,sBAAY,GAAD,IAAQ,KAAKrwB;AACtC,YAAA,KAAK4xB,cAAc;AAAUvB,sBAAY,WAAD,IAAgB,KAAKuB;AAC7D,YAAA,KAAKC,aAAa;AAAIxB,sBAAY,UAAD,IAAe,KAAKwB;AACrD,YAAA,KAAKE,eAAe;AAAU1B,sBAAY,YAAD,IAAiB,KAAK0B;AAC/D,YAAA,KAAKmF,sBAAsB;AAAG7G,sBAAY,mBAAD,IAAwB,KAAK6G;AACtE,YAAA,KAAKvF,aAAa;AAAMtB,sBAAY,UAAD,IAAe,KAAKsB;AACvD,YAAA,KAAK6B,aAAa;AAAMnD,sBAAY,UAAD,IAAe,KAAKmD;AACvD,YAAA,KAAKV,kBAAkB;AAAGzC,sBAAY,eAAD,IAAoB,KAAKyC;AAC9D,YAAA,KAAKqE,cAAc;AAAO9G,sBAAY,WAAD,IAAgB,KAAK8G;AAC1D,YAAA,KAAK5D,gBAAgB;AAAIlD,sBAAY,cAAD,IAAmB,KAAKkD;AAC5D,YAAA,KAAKV,eAAe;AAAMxC,sBAAY,YAAD,IAAiB,KAAKwC;AAC3D,YAAA,KAAKb,iBAAiB;AAAc3B,sBAAY,cAAD,IAAmB,KAAK2B;AACvE,YAAA,KAAK0C,cAAc;AAAQrE,sBAAY,WAAD,IAAgB,KAAKqE;AAC3D,YAAA,KAAKO,kBAAkB;AAAO5E,sBAAY,eAAD,IAAoB,KAAK4E;AAClE,YAAA,KAAKrC,YAAY;AAAMvC,sBAAY,SAAD,IAAc,KAAKuC;AACrD,YAAA,KAAKkB,aAAa;AAAGzD,sBAAY,UAAD,IAAe,KAAKyD;AACpD,YAAA,KAAKJ,mBAAmB;AAAMrD,sBAAY,gBAAD,IAAqB,KAAKqD;AACvE,YAAI,KAAKpD,cAAc,KAAKxZ,MAAM2P,UAAU,WAArB;AAAmC4J,sBAAY,WAAD,IAAgB,KAAKC;AACtF,YAAA,KAAK8F,cAAc;AAAY/F,sBAAY,WAAD,IAAgB,KAAK+F;AAC/D,YAAA,KAAKp0B,gBAAgB;AAAGquB,sBAAY,aAAD,IAAkB,KAAKruB;AAC1D,YAAA,KAAKE,iBAAiB;AAAGmuB,sBAAY,cAAD,IAAmB,KAAKnuB;AAC5D,YAAA,KAAK6zB,WAAW;AAAO1F,sBAAY,QAAD,IAAa,KAAK0F;AACpD,YAAA,KAAKC,gBAAgB;AAAY3F,sBAAY,aAAD,IAAkB,KAAK2F;AACnE,YAAA,KAAKC,kBAAkB;AAAG5F,sBAAY,eAAD,IAAoB,KAAK4F;AAC9D,YAAA,KAAKC,kBAAkB;AAAG7F,sBAAY,eAAD,IAAoB,KAAK6F;AAC9D,YAAA,KAAKC,eAAe;AAAG9F,sBAAY,YAAD,IAAiB,KAAK8F;AACxD,YAAA,KAAKjB,cAAc;AAAO7E,sBAAY,WAAD,IAAgB,KAAK6E;AAC1D,YAAA,KAAKG,oBAAoB;AAAGhF,sBAAY,iBAAD,IAAsB,KAAKgF;AAClE,YAAA,KAAKF,mBAAmB;AAAY9E,sBAAY,gBAAD,IAAqB,KAAK8E;AACzE,YAAA,KAAKG,oBAAoB;AAAGjF,sBAAY,iBAAD,IAAsB,KAAKiF;AAClE,YAAA,KAAKE,yBAAyB;AAAGnF,sBAAY,sBAAD,IAA2B,KAAKmF;AAC5E,YAAA,KAAKE,0BAA0B;AAAGrF,sBAAY,uBAAD,IAA4B,KAAKqF;AAC9E,YAAA,KAAKvC,kBAAkB;AAAG9C,sBAAY,eAAD,IAAoB,KAAK8C;AAC9D,YAAA,KAAKC,eAAe;AAAG/C,sBAAY,YAAD,IAAiB,KAAK+C;AAExD,YAAA,KAAKL;AAAO1C,sBAAY,OAAD,IAAY,KAAK0C;AACxC,YAAA,KAAKC;AAAO3C,sBAAY,OAAD,IAAY,KAAK2C;AACxC,YAAA,KAAKC;AAAO5C,sBAAY,OAAD,IAAY,KAAK4C;AACxC,YAAA,KAAKC;AAAO7C,sBAAY,OAAD,IAAY,KAAK6C;AAExC,YAAA,KAAKuJ;AAAkBpM,sBAAY,UAAD,IAAe,KAAKoM;AAC1D,eAAOpM;AAAAA,MACV;AAAA;;aAED,SAAY,YAAA;AACJt2B,YAAAA,MAAM,CAAA;AACVA,YAAIs4B,OAAO,KAAK+H;AAChBrgC,YAAIgG,IAAI,KAAKsU;AACbta,YAAIiG,IAAI,KAAKsU;AACbva,YAAI63B,YAAY,KAAKyI;AACrBtgC,YAAI83B,WAAW,KAAK0I;AACpBxgC,YAAIg4B,aAAa,KAAKyI;AACtBzgC,YAAIm9B,oBAAoB,KAAKoD;AAC7BvgC,YAAI43B,WAAW,KAAK8I;AACpB1gC,YAAIy5B,WAAW,KAAKkH;AACpB3gC,YAAI+4B,gBAAgB,KAAK6H;AACzB5gC,YAAIo9B,YAAY,KAAKyD;AACrB7gC,YAAIw5B,eAAe,KAAKsH;AACxB9gC,YAAI84B,aAAa,KAAKiI;AACtB/gC,YAAIi4B,eAAe,KAAK+I;AACxBhhC,YAAI26B,YAAY,KAAKsG;AACrBjhC,YAAIk7B,gBAAgB,KAAKgG;AACzBlhC,YAAI64B,UAAU,KAAKsI;AACnBnhC,YAAI+5B,WAAW,KAAKqH;AACpBphC,YAAI25B,iBAAiB,KAAK0H;AAC1BrhC,YAAIu2B,YAAY,KAAK9C;AACrBzzB,YAAIq8B,YAAY,KAAKiF;AACrBthC,YAAIiI,cAAc,KAAKqN;AACvBtV,YAAImI,eAAe,KAAKqN;AACxBxV,YAAIg8B,SAAS,KAAKuF;AAClBvhC,YAAIi8B,cAAc,KAAKuF;AACvBxhC,YAAIk8B,gBAAgB,KAAKuF;AACzBzhC,YAAIm8B,gBAAgB,KAAKuF;AACzB1hC,YAAIo8B,aAAa,KAAKuF;AACtB3hC,YAAIm7B,YAAY,KAAKyG;AACrB5hC,YAAIs7B,kBAAkB,KAAKuG;AAC3B7hC,YAAIo7B,iBAAiB,KAAK0G;AAC1B9hC,YAAIu7B,kBAAkB,KAAKwG;AAC3B/hC,YAAIy7B,uBAAuB,KAAKuG;AAChChiC,YAAI27B,wBAAwB,KAAKsG;AACjCjiC,YAAIo5B,gBAAgB,KAAKmJ;AACzBviC,YAAIq5B,aAAa,KAAKmJ;AACtBxiC,YAAIg5B,QAAQ,KAAKkJ;AACjBliC,YAAIi5B,QAAQ,KAAKkJ;AACjBniC,YAAIk5B,QAAQ,KAAKkJ;AACjBpiC,YAAIm5B,QAAQ,KAAKkJ;AACjBriC,YAAI0iC,mBAAmB,KAAKJ;AAC5B,eAAOtiC;AAAAA,MACV;AAAA;;MArpBD,OAAA,SAAA,SAAgB+c,OAAOqa,QAAQ10B,UAAU;AACjC,YAAA,KAAKggC,kBAAkB;AAChB,iBAAA,IAAIzF,4BAA4BlgB,OAAOqa,QAAQ10B,QAA/C;AAAA,QACV,OAAM;AACI,iBAAA,IAAIy0B,oBAAoBpa,OAAOqa,QAAQ10B,QAAvC;AAAA,QACV;AAAA,MACJ;AAAA;;IAfoC2wB;AAqqBzC,MAAIoQ,QAAQrD,YAAY/e;AACxBoiB,QAAMpD,QAAQ;AACdoD,QAAMnpB,KAAK;AACXmpB,QAAMlpB,KAAK;AACXkpB,QAAMnD,aAAa;AACnBmD,QAAMjD,YAAY;AAClBiD,QAAMhD,cAAc;AACpBgD,QAAM/C,YAAY;AAClB+C,QAAM9C,YAAY;AAClB8C,QAAM7C,iBAAiB;AACvB6C,QAAM5C,aAAa;AACnB4C,QAAM3C,gBAAgB;AACtB2C,QAAM1C,cAAc;AACpB0C,QAAMzC,gBAAgB;AACtByC,QAAMxC,aAAa;AACnBwC,QAAMvC,iBAAiB;AACvBuC,QAAMtC,WAAW;AACjBsC,QAAMrC,YAAY;AAClBqC,QAAMpC,kBAAkB;AACxBoC,QAAMnC,aAAa;AACnBmC,QAAMnuB,eAAe;AACrBmuB,QAAMjuB,gBAAgB;AACtBiuB,QAAMlC,UAAU;AAChBkC,QAAMjC,eAAe;AACrBiC,QAAMhC,iBAAiB;AACvBgC,QAAM/B,iBAAiB;AACvB+B,QAAM9B,cAAc;AACpB8B,QAAM7B,aAAa;AACnB6B,QAAM5B,mBAAmB;AACzB4B,QAAM3B,kBAAkB;AACxB2B,QAAM1B,mBAAmB;AACzB0B,QAAMzB,wBAAwB;AAC9ByB,QAAMxB,yBAAyB;AAC/BwB,QAAMlB,iBAAiB;AACvBkB,QAAMjB,cAAc;AACpBiB,QAAMvB,SAAS;AACfuB,QAAMtB,SAAS;AACfsB,QAAMrB,SAAS;AACfqB,QAAMpB,SAAS;AACfoB,QAAMnB,oBAAoB;AAC1BmB,QAAMlD,qBAAqB;MC9sBNmD;;;AAEjB,aAAAA,eAAY3mB,OAAO;AAAA,UAAA;AAAA,sBAAA,MAAA2mB,cAAA;AACf,cAAA,OAAA,KAAA,MAAM3mB,KAAN;AAEK4mB,YAAAA,iBAAiBhtB;AAHP,aAAA;AAAA,IAIlB;;;WAED,SAAoB,MAAA;AAChB,eAAO,KAAKgtB;AAAAA;MAGhB,KAAA,SAAA7uB,KAAkBjY,GAAG;AACjB,YAAIA,MAAM,KAAK8mC,gBAAgB;AACvB9mC,cAAAA,EAAEgiB,iBAAiB;AAEnB,iBAAK4U,aAAa,KAAK1W,MAAMqmB,mBAAX;AAAA,UACrB;AACIO,eAAAA,iBAAiB9mC;AACtB,eAAKwa,SAAL;AAAA,QACH;AAAA,MACJ;AAAA;;aAED,SAAoB,oBAAA;AAChB,eAAO,KAAKssB;AAAAA,MACf;AAAA;;IAzBsCtQ;MCAtBuQ;;;AAEjB,aAAAA,YAAYhnB,SAASla,UAAU2b,SAASwlB,UAAU;AAAA,UAAA;AAAA,sBAAA,MAAAD,WAAA;AAC9C,cAAA,OAAA,KAAA,IAAA;AAEKhnB,YAAAA,UAAUA;AAEV6a,YAAAA,YAAY/0B;AAEZ+e,YAAAA,WAAWpD;AAEXylB,YAAAA,UAAUzlB,QAAQ9d,YAAYwjC,UAAUF,QAA9B;AACVG,YAAAA,UAAU3lB,QAAQ9d,YAAY0jC,UAAUJ,QAA9B;AAEf,YAAKK,UAAUxhC,SAASyhC;AAEpB,UAAA,CAAC,MAAKD,SAAS;AACVA,cAAAA,UAAU7lB,QAAQ9d,YAAY6jC,UAAUP,QAA9B;AAAA,MAClB;AAED,YAAKQ,cAAc,MAAKP,QAAQ,MAAKriB,QAAlB;AACd6iB,YAAAA,eAAe,MAAKD;AAEpBE,YAAAA,KAAK;AACLC,YAAAA,aAAa;AAtB4B,aAAA;AAAA,IAuBjD;;;MAED,OAAA,SAAA,MAAMC,aAAa;AACf,aAAKJ,cAAc,KAAKP,QAAQ,KAAKriB,QAAlB;AAEnB,YAAI,CAAC,KAAKijB,cAAc;AAEfJ,eAAAA,eAAeG;AACfF,eAAAA,KAAK;AACV,eAAKI,iBAAL;AAAA,QACH,OAAM;AACH,cAAIF,gBAAgB,KAAKJ,aAAa;AAClC,iBAAKO,MAAMH,aAAa,CAAxB;AAAA,UACH,OAAM;AACEH,iBAAAA,eAAeG;AACfF,iBAAAA,KAAK;AACV,iBAAKC,aAAa,KAAK/M,UAAUoN;AAC5BpS,iBAAAA,KAAK,OAAV;AACA,iBAAK3U,IAAL;AAAA,UACH;AAAA,QACJ;AAAA,MACJ;AAAA;;aAED,SAAS,SAAA;AACL,YAAI,KAAKymB,KAAK,GAAG;AAERA,eAAAA,KAAK;AAAA,QACb;AAAA,MACJ;AAAA;;aAED,SAAO,OAAA;AAEE9R,aAAAA,KAAK,MAAV;AACA,aAAK7V,QAAQkoB,aAAa,IAA1B;AAAA,MACH;AAAA;;aAED,SAAQ,QAAA;AACJ,aAAKC,KAAL;AAAA,MACH;AAAA;;aAED,SAAO,OAAA;AACH,aAAKnoB,QAAQooB,UAAU,IAAvB;AAAA,MACH;AAAA;;aAED,SAAMP,MAAAA,aAAazoC,GAAG;AAClB,YAAI,CAAC,KAAK0oC,cAAc;AAEpB,eAAKL,cAAc,KAAKP,QAAQ,KAAKriB,QAAlB;AACd6iB,eAAAA,eAAeG;AACfF,eAAAA,KAAK;AACV,eAAKI,iBAAL;AAAA,QACH,OAAM;AACH,eAAKN,cAAc,KAAKP,QAAQ,KAAKriB,QAAlB;AACd6iB,eAAAA,eAAeG;AACfF,eAAAA,KAAKvoC;AACV,eAAK8hB,IAAL;AAAA,QACH;AAAA,MACJ;AAAA;;aAED,SAAmB,mBAAA;AACf,aAAKkmB,QAAQ,KAAKviB,UAAU,KAAKwjB,aAAL,CAA5B;AAAA,MACH;AAAA;;aAED,SAAM,MAAA;AACF,aAAKroB,QAAQooB,UAAU,IAAvB;AAAA,MACH;AAAA;;aAED,SAAa,aAAA;AACF,eAAA,KAAKvjB,SAASyjB;AAAAA,MACxB;AAAA;;aAED,SAAY,YAAA;AACA,eAAA,KAAKX,KAAK;AAAA,MACrB;AAAA;;MAED,OAAA,SAAA,SAASY,IAAI;AACT,YAAI,CAAC,KAAKT,cAAc;AAEfH,eAAAA,KAAK;AAAA,QACb;AAED,YAAI,KAAKvoC,IAAI,GAAG;AACZ,cAAI,KAAKopC,YAAY,GAAG;AACfZ,iBAAAA,cAAcW;AAEnB,gBAAI,KAAKC,YAAY,GAAG;AACpBD,mBAAK,CAAC,KAAKC;AACNZ,mBAAAA,aAAa;AAEb/R,mBAAAA,KAAK,UAAV;AAAA,YACH,OAAM;AACH;AAAA,YACH;AAAA,UACJ;AAED,cAAI,KAAKgF,UAAU4N,YAAY,GAAG;AACzBd,iBAAAA,KAAK;AAAA,UACb,OAAM;AACH,iBAAKA,MAAMY,KAAK,KAAK1N,UAAU4N;AAAAA,UAClC;AACD,cAAI,KAAKd,MAAM,GAAG;AAETA,iBAAAA,KAAK;AAAA,UACb;AAAA,QACJ;AAED,aAAKI,iBAAL;AAEA,aAAKW,gBAAL;AAAA,MACH;AAAA;;aAED,SAAkB,kBAAA;AACd,aAAK7S,KAAK,YAAY,KAAKz2B,CAA3B;AACA,YAAI,KAAKA,MAAM,GAAG;AACTy2B,eAAAA,KAAK,QAAV;AAAA,QACH;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,kBAAkBgS,aAAa;AACvB/mC,YAAAA,IAAI,KAAK+5B,UAAU8N,mBAAmB,KAAKvpC,CAAvC;AACJ0B,YAAAA,MAAM,GAAG;AACJ4mC,eAAAA,eAAeG;AAAAA,QACvB,WAAU/mC,MAAM,GAAG;AACX2mC,eAAAA,cAAc,KAAKC;AACnBA,eAAAA,eAAeG;AAAAA,QACvB,OAAM;AACH,eAAKJ,cAAcI,eAAgBA,cAAc,KAAKH,iBAAiB,IAAI5mC;AACtE4mC,eAAAA,eAAeG;AAAAA,QACvB;AAAA,MACJ;AAAA;;aAED,SAAe,eAAA;AACX,YAAI,KAAKzoC,KAAK,GAAG;AACb,iBAAO,KAAKyoC;AAAAA,QACf,OAAM;AACC5nC,cAAAA,IAAI,KAAK46B,UAAU+N,oBAAoB,KAAKxpC,CAAxC;AACD,iBAAA,KAAKkoC,QAAQ,KAAKO,aAAa,KAAKgB,YAAY5oC,CAAhD;AAAA,QACV;AAAA,MACJ;AAAA;;aAED,SAAY,YAAA;AACH2nC,aAAAA,aAAa;AAAA,MACrB;AAAA;;WAED,SAAiB,MAAA;AACb,eAAO,KAAKH;AAAAA,MACf;AAAA;;WAED,SAAkB,MAAA;AACd,eAAO,KAAKC;AAAAA,MACf;AAAA;;WAED,SAAQ,MAAA;AACJ,eAAO,KAAKC;AAAAA,MACf;AAAA;;WAED,SAAgB,MAAA;AACZ,eAAO,KAAKC;AAAAA,MACf;AAAA;;WAED,SAAc,MAAA;AACV,eAAO,KAAK/iB;AAAAA,MACf;AAAA;;WAED,SAAe,MAAA;AACX,eAAO,KAAKgW;AAAAA;MAGhB,KAAA,SAAA3iB,KAAajY,GAAG;AACP46B,aAAAA,YAAY56B;AAAAA,MACpB;AAAA;;IAnMmCs0B;AAuMxCyS,aAAWviB,UAAUqkB,eAAe;MCrMfC;AAEH,aAAAA,cAAA;AAAA,sBAAA,MAAAA,WAAA;AACLltB,WAAAA,SAAS;AACTmtB,WAAAA,QAAQ;IAChB;;;aAED,SAAM,MAAA;AACF,eAAO,KAAKntB;AAAAA,MACf;AAAA;;WAED,SAAY,MAAA;AACR,eAAO,KAAKA,OAAO,CAAZ;AAAA,MACV;AAAA;;WAED,SAAW,MAAA;AACP,eAAO,KAAKA,OAAO7a,SAAS,KAAK6a,OAAO,KAAKA,OAAO7a,SAAS,CAAjC,IAAsC+Y;AAAAA,MACrE;AAAA;;MAED,OAAA,SAAA,IAAInR,MAAM;AACN,aAAKqgC,MAAMrgC,MAAM,KAAKiT,OAAO7a,MAA7B;AAAA,MACH;AAAA;;aAED,SAAM4H,MAAAA,MAAMhF,OAAO;AACXA,YAAAA,SAAS,KAAKA,SAAS,KAAKiY,OAAO7a,QAAQ;AACvCkoC,cAAAA,eAAe,KAAKrtB,OAAOvZ,QAAQsG,IAApB;AACfsgC,cAAAA,iBAAiBtlC,OAAO;AACxB,mBAAOgF;AAAAA,UACV;AAED,cAAI9F,QAAME,gBAAgB4F,IAAtB,GAA6B;AACvBk6B,gBAAAA,IAAIl6B;AACVA,mBAAO,KAAKugC,WAAWrG,CAAhB;AACPl6B,iBAAKsT,MAAM4mB,CAAX;AAAA,UACH;AAED,cAAIoG,gBAAgB,IAAI;AACpB,iBAAKE,MAAMxgC,MAAMhF,KAAjB;AAAA,UACH,OAAM;AACCgF,gBAAAA,KAAKygC,KAAK;AACV,mBAAKL,MAAMpgC,KAAKygC,GAAhB,IAAuBzgC;AAAAA,YAC1B;AACIiT,iBAAAA,OAAOsR,OAAOvpB,OAAO,GAAGgF,IAA7B;AACA,iBAAK0gC,MAAM1gC,MAAMhF,KAAjB;AAAA,UACH;AAAA,QACJ,OAAM;AACH,gBAAM,IAAIqD,MAAM,sBAAsBrD,QAAQ,uBAAuB,KAAKiY,OAAO7a,MAA3E;AAAA,QACT;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,aAAa4H,MAAM;AACXA,YAAAA,KAAKygC,KAAK;AACJE,cAAAA,eAAe,KAAKC,SAAS5gC,KAAKygC,GAAnB;AACjB,cAAA,CAACE,cAAc;AACf,kBAAM,IAAItiC,MAAM,iDAAiD2B,KAAKygC,GAAhE;AAAA,UACT;AACD,eAAKI,QAAQ7gC,MAAM2gC,YAAnB;AAAA,QACH,OAAM;AACH,gBAAM,IAAItiC,MAAM,wCAAV;AAAA,QACT;AACD,aAAKgiC,MAAMrgC,MAAM,KAAKiT,OAAO7a,MAA7B;AAAA,MAEH;AAAA;;aAED,SAAQ4H,QAAAA,MAAM8gC,UAAU;AACpB,YAAM9lC,QAAQ,KAAK+lC,SAASD,QAAd;AACd,YAAI9lC,UAAU,IAAI;AACd,gBAAM,IAAIqD,MAAM,2CAAV;AAAA,QACT;AACD,aAAKmiC,MAAMxgC,MAAMhF,KAAjB;AAAA,MACH;AAAA;;aAED,SAAMgF,MAAAA,MAAMhF,OAAO;AACXA,YAAAA,SAAS,KAAKA,SAAS,KAAKiY,OAAO7a,QAAQ;AAE3C,cAAI8B,QAAME,gBAAgB4F,IAAtB,GAA6B;AACvBk6B,gBAAAA,IAAIl6B;AACVA,mBAAO,KAAKugC,WAAWrG,CAAhB;AACPl6B,iBAAKsT,MAAM4mB,CAAX;AAAA,UACH;AAEGoG,cAAAA,eAAe,KAAKrtB,OAAOvZ,QAAQsG,IAApB;AACnB,cAAIsgC,gBAAgB,IAAI;AAChBA,gBAAAA,iBAAiBtlC,OAAO;AAClB2pB,kBAAAA,YAAY2b;AACd3b,kBAAAA,cAAc3pB,OAAO;AACrB,qBAAKiY,OAAOsR,OAAOI,WAAW,CAA9B;AACK1R,qBAAAA,OAAOsR,OAAOvpB,OAAO,GAAGgF,IAA7B;AACA,qBAAKghC,OAAOhhC,MAAM2kB,WAAW3pB,KAA7B;AAAA,cACH;AAAA,YACJ;AAAA,UACJ,OAAM;AACH,gBAAIA,QAAQ,KAAKiY,OAAO7a,QAAO;AAE3B,kBAAI,KAAK6a,OAAOjY,KAAZ,EAAmBylC,KAAK;AACnBL,qBAAAA,MAAM,KAAKntB,OAAOjY,KAAZ,EAAmBylC,GAA9B,IAAqCtvB;AAAAA,cACxC;AAED,kBAAM2vB,WAAW,KAAK7tB,OAAOjY,KAAZ;AAGjB,mBAAKiY,OAAOjY,KAAZ,IAAqBgF;AAEjBA,kBAAAA,KAAKygC,KAAK;AACV,qBAAKL,MAAMpgC,KAAKygC,GAAhB,IAAuBzgC;AAAAA,cAC1B;AAED,mBAAKihC,MAAMjhC,MAAMhF,OAAO8lC,QAAxB;AAAA,YACH,OAAM;AACH,oBAAM,IAAIziC,MAAM,sBAAsBrD,QAAQ,uBAAuB,KAAKiY,OAAO7a,MAA3E;AAAA,YACT;AAAA,UACJ;AAAA,QACJ,OAAM;AACH,gBAAM,IAAIiG,MAAM,sBAAsBrD,QAAQ,uBAAuB,KAAKiY,OAAO7a,MAA3E;AAAA,QACT;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,MAAM4C,OAAO;AACT,eAAO,KAAKiY,OAAOjY,KAAZ;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,SAASgF,MAAM;AACX,eAAO,KAAKiT,OAAOvZ,QAAQsG,IAApB;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,OAAOA,MAAM;AACLhF,YAAAA,QAAQ,KAAKiY,OAAOvZ,QAAQsG,IAApB;AAEZ,YAAIhF,UAAU,IAAI;AACTkmC,eAAAA,SAASlmC,KAAd;AAAA,QACH;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,SAASA,OAAO;AACRA,YAAAA,SAAS,KAAKA,QAAQ,KAAKiY,OAAO7a,QAAQ;AAC1C,cAAM4H,OAAO,KAAKiT,OAAOjY,KAAZ;AAETgF,cAAAA,KAAKygC,KAAK;AACV,iBAAKL,MAAMpgC,KAAKygC,GAAhB,IAAuBtvB;AAAAA,UAC1B;AAED,eAAK8B,OAAOsR,OAAOvpB,OAAO,CAA1B;AAEA,eAAKmmC,SAASnhC,MAAMhF,KAApB;AAEA,iBAAOgF;AAAAA,QACV,OAAM;AACG,gBAAA,IAAI3B,MAAJ,uBAAA,OAAiCrD,OAAjC,oBAAA,EAAA,OAA2D,KAAKiY,OAAO7a,SAAS,CAAhF,CAAN;AAAA,QACH;AAAA,MACJ;AAAA;;aAED,SAAQ,QAAA;AACJ,YAAID,IAAI,KAAK8a,OAAO7a;AACpB,YAAID,GAAG;AACCoqB,cAAAA,OAAO,KAAKtP;AACXA,eAAAA,SAAS;AACTmtB,eAAAA,QAAQ;AACb,eAAKgB,OAAO7e,MAAM,CAAlB,GAAsB,CAAtB,CAAA;AAAA,QACH;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,EAAE2X,GAAG;AACD,YAAIhgC,QAAME,gBAAgB8/B,CAAtB,GAA0B;AAC1B,cAAIjiC,IAAI,KAAKsoC,WAAWrG,CAAhB;AACRjiC,YAAEqb,MAAM4mB,CAAR;AACK5hB,eAAAA,IAAIrgB,CAAT;AACA,iBAAOA;AAAAA,QAJX,WAKWoC,MAAMC,QAAQ4/B,CAAd,GAAkB;AACzB,mBAAS7hC,IAAI,GAAGF,IAAI+hC,EAAE9hC,QAAQC,IAAIF,GAAGE,KAAK;AACtC,iBAAKzB,EAAEsjC,EAAE7hC,CAAD,CAAR;AAAA,UACH;AACD,iBAAO;AAAA,QAJJ,WAKI,KAAKgpC,OAAOnH,CAAZ,GAAgB;AAClB5hB,eAAAA,IAAI4hB,CAAT;AACA,iBAAOA;AAAAA,QACV;AAAA,MACJ;AAAA;;WAED,SAAa,MAAA;AACF,eAAA,KAAKjnB,OAAO7a;AAAAA,MACtB;AAAA;;aAED,SAAW,WAAA;AACP,eAAO,KAAKgoC;AAAAA,MACf;AAAA;;MAED,OAAA,SAAA,SAASK,KAAK;AACV,eAAO,KAAKL,MAAMK,GAAX;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,SAASA,KAAK;AACV,eAAO,KAAKL,MAAMK,GAAX;AAAA,MACV;AAAA;;aAED,SAAOA,OAAAA,KAAK3sB,OAAO;AACf,aAAKssB,MAAMK,GAAX,IAAkB3sB;AAAAA,MACrB;AAAA;;MAED,OAAA,SAAA,MAAM5W,UAAU;AACZ,YAAIhD,QAAME,gBAAgB8C,QAAtB,GAAiC;AAC5BokC,eAAAA,aAAapkC,QAAlB;AAAA,QADJ,WAEW7C,MAAMC,QAAQ4C,QAAd,GAAyB;AAC3BqkC,eAAAA,YAAYrkC,QAAjB;AAAA,QACH;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,aAAaA,UAAU;AAEnB,YAAIskC,OAAO,KAAKC;AAChB,YAAIC,QAAQhnC,OAAOD,KAAKyC,QAAZ;AACZ,iBAAS7E,IAAI,GAAGF,IAAIupC,MAAMtpC,QAAQC,IAAIF,GAAGE,KAAK;AAC1C,cAAIspC,OAAOD,MAAMrpC,CAAD;AAChB,cAAIoB,IAAIyD,SAASykC,IAAD;AAEhB,cAAI1pC,IAAIupC,KAAKG,IAAD;AACR,cAAA,CAAC1pC,GAAG;AACJ,gBAAI,KAAKopC,OAAO5nC,CAAZ,GAAgB;AAEhBA,gBAAEgnC,MAAMkB;AACHrpB,mBAAAA,IAAI7e,CAAT;AAAA,YACH,OAAM;AAEHxB,kBAAI,KAAKsoC,WAAW9mC,CAAhB;AACJxB,gBAAEwoC,MAAMkB;AACR1pC,gBAAEqb,MAAM7Z,CAAR;AACK6e,mBAAAA,IAAIrgB,CAAT;AAAA,YACH;AAAA,UACJ,OAAM;AACH,gBAAI,KAAKopC,OAAO5nC,CAAZ,GAAgB;AACZxB,kBAAAA,MAAMwB,GAAG;AAET,oBAAImoC,MAAM,KAAKb,SAAS9oC,CAAd;AACVwB,kBAAEgnC,MAAMkB;AACR,qBAAKnB,MAAM/mC,GAAGmoC,GAAd;AAAA,cACH;AAAA,YACJ,OAAM;AACH3pC,gBAAEqb,MAAM7Z,CAAR;AAAA,YACH;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,aAAaooC,OAAO;AACZC,YAAAA,OAAO;AACPD,YAAAA,MAAMzpC,WAAW,KAAK6a,OAAO7a,QAAQ;AAChC,mBAAIC,IAAI,GAAGF,IAAI,KAAK8a,OAAO7a,QAASC,IAAIF,KAAM2pC,MAAMzpC,KAAK;AAC1DypC,mBAAOA,QAAS,KAAK7uB,OAAO5a,CAAZ,MAAmBwpC,MAAMxpC,CAAD;AAAA,UAC3C;AAAA,QACJ,OAAM;AACHypC,iBAAO;AAAA,QACV;AACD,eAAOA;AAAAA,MACV;AAAA;;MAED,OAAA,SAAA,YAAYD,OAAO;AAEf,YAAI,KAAKE,aAAaF,KAAlB,GAA0B;AAC1B;AAAA,QACH;AAED,iBAASxpC,IAAI,GAAGF,IAAI,KAAK8a,OAAO7a,QAAQC,IAAIF,GAAGE,KAAK;AAChD,eAAK4a,OAAO5a,CAAZ,EAAe2pC,SAAS;AAAA,QAC3B;AAED,YAAIR;AACAS,YAAAA,WAAW,CAAA;AACf,iBAAS5pC,KAAI,GAAGF,KAAI0pC,MAAMzpC,QAAQC,KAAIF,IAAGE,MAAK;AAC1C,cAAIoB,IAAIooC,MAAMxpC,EAAD;AACb,cAAI,KAAKgpC,OAAO5nC,CAAZ,GAAgB;AAChBA,cAAEuoC,SAAS;AACXC,qBAASjmC,KAAKvC,CAAd;AAAA,UACH,OAAM;AACH,gBAAIkoC,OAAOloC,EAAEgnC;AACb,gBAAIxoC,IAAJ;AACA,gBAAI0pC,MAAM;AACN,kBAAI,CAACH;AAAMA,uBAAO,KAAKC,SAAL;AAClBxpC,kBAAIupC,KAAKG,IAAD;AAAA,YACX;AAEG,gBAAA,CAAC1pC,GAAG;AAEJA,kBAAI,KAAKsoC,WAAW9mC,CAAhB;AAAA,YACP,OAAM;AACHxB,gBAAE+pC,SAAS;AAAA,YACd;AAED,gBAAI9nC,QAAME,gBAAgBX,CAAtB,GAA0B;AAC1BxB,gBAAEqb,MAAM7Z,CAAR;AAAA,YACH;AAEDwoC,qBAASjmC,KAAK/D,CAAd;AAAA,UACH;AAAA,QACJ;AAEIiqC,aAAAA,UAAUD,QAAf;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,UAAUA,UAAU;AAAA,YAAA,QAAA;AACZE,YAAAA,YAAY,KAAKlvB;AAChBA,aAAAA,SAASgvB;AAGVzd,YAAAA,UAAU2d,UAAUpJ,OAAO,SAAA/4B,MAAQ;AAAA,yBAAA,MAAA,KAAA;AAAC,cAAI6qB,IAAI7qB,KAAKgiC;AAAehiC,iBAAAA,KAAKgiC;AAAQ,iBAAOnX;AAAAA,QAAE,EAA1F,KAAA,IAAA,CAAA;AACA,YAAIpG,QAAQwd,SAASlJ,OAAO,SAAA/4B,MAAI;AAAA,yBAAA,MAAA,KAAA;AAAA,iBAAKmiC,UAAUzoC,QAAQsG,IAAlB,MAA4B;AAAA,QAAjC,EAAhC,KAAA,IAAA,CAAA;AAEA,YAAIwkB,QAAQpsB,UAAUqsB,MAAMrsB,QAAQ;AAE3BgoC,eAAAA,QAAQ;AACb,mBAAS/nC,IAAI,GAAGF,IAAI,KAAK8a,OAAO7a,QAAQC,IAAIF,GAAGE,KAAK;AAChD,gBAAIooC,MAAM,KAAKxtB,OAAO5a,CAAZ,EAAeooC;AACzB,gBAAIA,KAAK;AACAL,mBAAAA,MAAMK,GAAX,IAAkB,KAAKxtB,OAAO5a,CAAZ;AAAA,YACrB;AAAA,UACJ;AAAA,QACJ;AAED,aAAK+oC,OAAO5c,SAASC,OAAOwd,QAA5B;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,KAAK7xB,GAAG;AACJ,YAAM5M,QAAQ,KAAKyP,OAAOgT,MAAZ;AACdziB,cAAMunB,KAAK3a,CAAX;AACKmxB,aAAAA,YAAY/9B,KAAjB;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,MAAMxD,MAAMhF,OAAO;AAAA,MAClB;AAAA;;MAED,OAAA,SAAA,SAASgF,MAAMhF,OAAO;AAAA,MACrB;AAAA;;MAED,OAAA,SAAA,OAAOwpB,SAASC,OAAOC,OAAO;AAAA,MAC7B;AAAA;;MAED,OAAA,SAAA,MAAM1kB,MAAMhF,OAAO8lC,UAAU;AAAA,MAC5B;AAAA;;MAED,OAAA,SAAA,OAAO9gC,MAAM2kB,WAAWC,SAAS;AAAA,MAChC;AAAA;;MAED,OAAA,SAAA,WAAWgI,QAAQ;AACf,cAAM,IAAIvuB,MAAM,2DAAV;AAAA,MACT;AAAA;;MAED,OAAA,SAAA,OAAOuuB,QAAQ;AACX,eAAO;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,QAAQxc,GAAG;AACP,aAAKgyB,IAAL,EAAWrmC,QAAQqU,CAAnB;AAAA,MACH;AAAA;;;MC5VgBiyB;;;AAEjB,aAAAA,kBAAYxpB,SAAS;AAAA,UAAA;AAAA,sBAAA,MAAAwpB,iBAAA;AACjB,cAAA,OAAA,KAAA,IAAA;AACKpmB,YAAAA,WAAWpD;AAFC,aAAA;AAAA,IAGpB;;;MAED,OAAA,SAAA,eAAe7Y,MAAM;AACjB,YAAM4jB,aAAa5jB,KAAKG;AACxB,YAAIyjB,cAAcA,eAAe,KAAK3H,UAAU;AAE5C,cAAMqmB,gBAAgBtiC,KAAKG,OAAOoiC;AAClC,cAAMvnC,QAAQsnC,cAAcvB,SAAS/gC,IAAvB;AAEVA,cAAAA,KAAKygC,KAAK;AACV6B,0BAAclC,MAAMpgC,KAAKygC,GAAzB,IAAgCtvB;AAAAA,UACnC;AACDmxB,wBAAcrvB,OAAOsR,OAAOvpB,OAAO,CAAnC;AAGA4oB,qBAAWvG,KAAKmlB,cAAcxnC,KAA9B;AAAA,QAEH;AAEDgF,aAAKyiC,WAAW,KAAKxmB,QAArB;AAAA,MAGH;AAAA;;aAED,SAAMjc,MAAAA,MAAMhF,OAAO;AACV0nC,aAAAA,eAAe1iC,IAApB;AACKic,aAAAA,SAASoB,KAAKslB,WAAW3nC,OAAOgF,KAAKqd,IAA1C;AAAA,MACH;AAAA;;aAED,SAASrd,SAAAA,MAAMhF,OAAO;AAClBgF,aAAKyiC,WAAW,IAAhB;AACA,aAAKxmB,SAASoB,KAAKmlB,cAAcxnC,KAAjC;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,OAAOwpB,SAASC,OAAOC,OAAO;AAAA,YAAA,SAAA;AAC1B,iBAASrsB,IAAI,GAAGF,IAAIqsB,QAAQpsB,QAAQC,IAAIF,GAAGE,KAAK;AAC5CmsB,kBAAQnsB,CAAD,EAAIoqC,WAAW,IAAtB;AAAA,QACH;AACD,iBAASpqC,KAAI,GAAGF,KAAIssB,MAAMrsB,QAAQC,KAAIF,IAAGE,MAAK;AAC1C,eAAKqqC,eAAeje,MAAMpsB,EAAD,CAAzB;AAAA,QACH;AACGuqC,YAAAA,KAAK,SAAAA,IAAAvqC,IAAC;AAAA,yBAAA,MAAA,MAAA;AAAIA,iBAAAA,GAAEglB;AAAAA,QAAN,EAAV,KAAA,IAAA;AACKpB,aAAAA,SAASoB,KAAKwlB,aAAare,QAAQmI,IAAIiW,EAAZ,GAAiBne,MAAMkI,IAAIiW,EAAV,GAAele,MAAMiI,IAAIiW,EAAV,CAAhE;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,MAAM5iC,MAAMhF,OAAO8lC,UAAU;AACzBA,iBAAS2B,WAAW,IAApB;AAEKC,aAAAA,eAAe1iC,IAApB;AACKic,aAAAA,SAASoB,KAAKylB,WAAW9nC,OAAOgF,KAAKqd,IAA1C;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,OAAOrd,MAAM2kB,WAAWC,SAAS;AACxB3I,aAAAA,SAASoB,KAAK0lB,UAAUpe,WAAWC,OAAxC;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,WAAWgI,QAAQ;AACXA,YAAAA,OAAO9xB,MAAM;AACN,iBAAA,IAAI8xB,OAAO9xB,KAAK,KAAKmhB,SAAS1E,KAA9B;AAAA,QACV,OAAM;AACH,iBAAO,KAAK0E,SAAS1E,MAAMyrB,cAApB;AAAA,QACV;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,OAAOpW,QAAQ;AACJA,eAAAA,OAAOqW;AAAAA,MACjB;AAAA;;IAvEyC9C;MCMzB+C;AAEjB,aAAAA,SAAY3rB,OAAO;AAAA,sBAAA,MAAA2rB,QAAA;AACV3rB,WAAAA,QAAQA;AAEb,WAAK4rB,OAAOD,SAAQ5rB;AAEpB,WAAK8rB,QAAL;AAGKxX,WAAAA,qBAAqB;AAE1B,WAAKyX,SAAS,IAAI3lB,YAAY,IAAhB;AAMT4lB,WAAAA,QAAQ;AAMRC,WAAAA,aAAa;AAMbC,WAAAA,YAAY;AAMZC,WAAAA,WAAW;AAKXxc,WAAAA,WAAW;AAMXyc,WAAAA,YAAY;AAMZC,WAAAA,qBAAqB;AAMrBC,WAAAA,SAAS;AAOTC,WAAAA,aAAa;AAMbC,WAAAA,YAAY;AAMZC,WAAAA,cAAc;AAEdjvB,WAAAA,KAAK;AAELC,WAAAA,KAAK;AAAA,IACb;;;MAED,OAAA,SAAA,UAAU;AAAA,MACT;AAAA;;WAED,SAAS,MAAA;AACL,eAAO,KAAKouB;AAAAA,MACf;AAAA;;WA0BD,SAAU,MAAA;AACN,eAAO,KAAKG;AAAAA;MAzBhB,KAAA,SAAAh0B,KAAQmxB,KAAK;AACT,YAAI,KAAK6C,UAAU7C,KAAK;AACpB,cAAMpkC,WAAWokC,IAAIjP,WAAW,CAAf;AACjB,cAAI,CAACt3B,QAAM8pC,SAAS3nC,QAAf,GAA0B;AACtB4nC,iBAAAA,YAAY,kDAAkDxD,GAAnE;AAAA,UACH;AACD,cAAI,KAAK6C,UAAU,MAAM;AAChBY,iBAAAA,UAAU,KAAKZ,KAApB;AACI,gBAAA,KAAKrc,UAAU;AACf,mBAAKA,SAAS8c,YAAYI,SAAS,KAAKb,KAAxC;AAAA,YACH;AAAA,UACJ;AAEIA,eAAAA,QAAQ7C;AAET,cAAA,KAAK6C,OAAO;AACPc,iBAAAA,QAAQ,KAAKd,KAAlB;AACI,gBAAA,KAAKrc,UAAU;AACVA,mBAAAA,SAAS8c,YAAYM,OAAO,KAAKf,OAAO,IAA7C;AAAA,YACH;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA;;WAMD,SAAW,MAAA;AACP,eAAO,KAAKD;AAAAA,MACf;AAAA;;aAED,SAAY,YAAA;AACHA,aAAAA,OAAOiB;AACZ,aAAKC,oBAAL;AACA,aAAK9hB,mBAAL;AAAA,MACH;AAAA;;WAED,SAAa,MAAA;AACF,eAAA,KAAK4gB,OAAOmB;AAAAA,MACtB;AAAA;;MAED,OAAA,SAAA,WAAWrkC,QAAQ;AACf,YAAI,KAAK8mB,aAAa9mB;AAAQ;AAE1B,YAAA,KAAK8mB,UAAU;AACf,eAAKwd,iBAAL;AAAA,QACH;AAEIxd,aAAAA,WAAW9mB;AAEhB,YAAIA,QAAQ;AACR,eAAKukC,eAAL;AAAA,QACH;AAED,aAAKH,oBAAL;AACA,aAAK9hB,mBAAL;AACA,aAAKkiB,iBAAL;AAEA,YAAI,KAAKH,UAAUrkC,QAAQ;AAClB8jC,eAAAA,YAAY,+DAAjB;AAAA,QACH;AAAA,MACJ;AAAA;;aAED,SAAW,WAAA;AACHW,YAAAA,QAAQ;AAERpuC,YAAAA,IAAI,KAAKywB;AACb,eAAMzwB,GAAG;AACLouC;AACApuC,cAAIA,EAAEywB;AAAAA,QACT;AAED,eAAO2d;AAAAA,MACV;AAAA;;MAED,OAAA,SAAA,YAAYlY,GAAG;AACPl2B,YAAAA,IAAI;AACR,eAAOk2B,IAAI,KAAKl2B,EAAEywB,UAAU;AACxBzwB,cAAIA,EAAEywB;AACNyF;AAAAA,QACH;AACD,eAAOl2B;AAAAA,MACV;AAAA;;aAED,SAAe,eAAA;AACLI,YAAAA,IAAI,CAAA;AACNJ,YAAAA,IAAI;AACR,eAAOA,GAAG;AACNI,YAAEoF,KAAKxF,CAAP;AACAA,cAAIA,EAAEywB;AAAAA,QACT;AACD,eAAOrwB;AAAAA,MACV;AAAA;;MAED,OAAA,SAAA,mBAAmBguC,OAAO;AACtB,YAAIC,SAAS,KAAKC,SAAL,IAAkBF;AAC3BC,YAAAA,SAAS,GAAG;AACZ,iBAAO;AAAA,QACV;AACD,eAAO,KAAKE,YAAYF,MAAjB;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,aAAa5sC,GAAG;AACRzB,YAAAA,IAAIyB;AACR,eAAMzB,IAAIA,EAAE2J,QAAQ;AACZ,cAAA,SAAS3J,GAAG;AACZ,mBAAO;AAAA,UACV;AAAA,QACJ;AACD,eAAO;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,kBAAkByB,GAAG;AACb+sC,YAAAA,KAAK;AACLC,YAAAA,KAAKhtC;AACT,YAAIitC,KAAKF,GAAGF;AACZ,YAAIK,KAAKF,GAAGH;AACRI,YAAAA,KAAKC,IAAI;AACTH,eAAKA,GAAGD,YAAYG,KAAKC,EAApB;AAAA,QACR,WAAUA,KAAKD,IAAI;AAChBD,eAAKA,GAAGF,YAAYI,KAAKD,EAApB;AAAA,QACR;AAEE,WAAA;AACKF,cAAAA,OAAOC,IAAI;AACX,mBAAOD;AAAAA,UACV;AAEDA,eAAKA,GAAG/d;AACRge,eAAKA,GAAGhe;AAAAA,QACX,SAAQ+d,MAAMC;AAEf,eAAO;AAAA,MACV;AAAA;;WAED,SAAe,MAAA;AACX,eAAO,KAAK1B;AAAAA,MACf;AAAA;;WAED,SAAc,MAAA;AACV,eAAO,KAAKC;AAAAA,MACf;AAAA;;WAED,SAAa,MAAA;AACT,eAAO,KAAKC;AAAAA,MACf;AAAA;;aAED,SAAc,cAAA;AACV,eAAQ,KAAKxc,WAAW,KAAKA,SAASsc,aAAc,KAAKhsB,MAAM4N,SAAS;AAAA,MAC3E;AAAA;;aAED,SAAa,aAAA;AACF,eAAA,KAAKke,OAAOhuB,WAAY,KAAKguB,OAAO/qC,QAAQ,MAAO,KAAK2uB,WAAW,KAAKA,SAASuc,YAAa,KAAKjsB,MAAM4N,SAAS;AAAA,MAC5H;AAAA;;aAED,SAAY,YAAA;AACR,eAAO,KAAKigB,gBAAgB,KAAKC;AAAAA,MACpC;AAAA;;aAKD,SAAsB,sBAAA;AAClB,YAAIC,cAAc,KAAKC;AACvB,YAAI,KAAKhC,eAAe+B,aAAa;AAC5B/B,eAAAA,aAAa+B;AAElB,cAAIA,aAAa;AACb,iBAAKE,SAAL;AAAA,UACH;AAED,cAAI5xB,WAAW,KAAKC,UAAUuuB,IAAf;AACf,cAAIxuB,UAAU;AACV,gBAAIiX,IAAIjX,SAASxb;AACbyyB,gBAAAA,IAAI,GAAG;AACF,uBAAIxyB,IAAI,GAAGA,IAAIwyB,GAAGxyB,KAAK;AACxBub,yBAASvb,CAAD,EAAIksC;cACf;AAAA,YACJ;AAAA,UACJ;AAED,cAAIe,aAAa;AACb,iBAAKG,UAAL;AAAA,UACH,OAAM;AACH,iBAAKC,UAAL;AAAA,UACH;AAAA,QACJ;AAAA,MACJ;AAAA;;aAKD,SAAqB,qBAAA;AACjB,YAAIC,aAAa,KAAKP;AACtB,YAAI,KAAK5B,cAAcmC,YAAY;AAC/B,cAAIA,YAAY;AACZ,iBAAKC,WAAL;AACA,iBAAKC,gBAAL;AAAA,UACH,OAAM;AACH,iBAAKC,YAAL;AACA,iBAAKC,kBAAL;AAAA,UACH;AAED,cAAInyB,WAAW,KAAKC,UAAUuuB,IAAf;AACf,cAAIxuB,UAAU;AACV,gBAAIiX,IAAIjX,SAASxb;AACbyyB,gBAAAA,IAAI,GAAG;AACF,uBAAIxyB,IAAI,GAAGA,IAAIwyB,GAAGxyB,KAAK;AACxBub,yBAASvb,CAAD,EAAIoqB;cACf;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA;;aAED,SAAkB,kBAAA;AACT+gB,aAAAA,YAAY;AAGjB,aAAKjoB,kBAAL;AACA,aAAKN,qBAAL;AAEI,YAAA,KAAKyoB,WAAW;AAChB,eAAKA,UAAUsC,WAAW,IAA1B;AAAA,QACH;AAEG,YAAA,KAAKX,oBAAoB;AACzB,eAAKY,eAAL;AAAA,QACH;AAED,YAAI,KAAK5C,OAAOld,QAAQ;AACpB,eAAKkd,OAAOld,OAAO6f,WAAW,KAAK3C,MAAnC;AAAA,QACH;AAAA,MAEJ;AAAA;;aAED,SAAoB,oBAAA;AAAA,YAAA,QAAA;AACZ,YAAA,KAAKI,UAAU;AACf,eAAKyC,iBAAL;AAAA,QACH;AAEG,YAAA,KAAKxC,WAAW;AAChB,eAAKA,UAAUyC,cAAc,IAA7B;AAAA,QACH;AAED,YAAI,KAAK9C,OAAOld,QAAQ;AACpB,eAAKkd,OAAOld,OAAOggB,cAAc,KAAK9C,MAAtC;AAAA,QACH;AAEG,YAAA,KAAKliB,aAAa;AAClB,eAAKkF,WAAW+f,QAAQrqC,QAAQ,SAAAg9B,QAAM;AAAA,2BAAA,MAAA,KAAA;AAAA,mBAAIA,OAAOoN,cAAc,KAAK9C,MAA1B;AAAA,UAAJ,EAAtC,KAAA,IAAA,CAAA;AAAA,QACH;AAEIG,aAAAA,YAAY;AAAA,MACpB;AAAA;;aAED,SAAiB,iBAAA;AACRC,aAAAA,WAAW;AAGZ,YAAA,KAAKC,WAAW;AACXA,eAAAA,UAAUhV;QAClB;AAEG,YAAA,KAAKgV,WAAW;AAChB,eAAK2C,eAAL;AAAA,QACH;AACD,aAAKC,UAAL;AAAA,MACH;AAAA;;aAED,SAAmB,mBAAA;AACX,YAAA,KAAK5C,WAAW;AACXA,eAAAA,UAAU9U;QAClB;AAEI6U,aAAAA,WAAW;AACZ,YAAA,KAAKC,WAAW;AAChB,eAAK6C,gBAAL;AAAA,QACH;AAEG,YAAA,KAAKC,kBAAkB;AAClBngB,eAAAA,WAAWogB;QACnB;AAED,aAAKC,YAAL;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,WAAW;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,YAAY;AAAA,MACX;AAAA;;MAED,OAAA,SAAA,YAAY;AAAA,MACX;AAAA;;MAED,OAAA,SAAA,aAAa;AAAA,MACZ;AAAA;;MAED,OAAA,SAAA,cAAc;AAAA,MACb;AAAA;;MAED,OAAA,SAAA,YAAY;AAAA,MACX;AAAA;;MAED,OAAA,SAAA,cAAc;AAAA,MACb;AAAA;;MAED,OAAA,SAAA,YAAY;AAAA,MACX;AAAA;;aAED,SAAkB,kBAAA;AACV,YAAA,KAAK5xB,IAAI;AACT,iBAAO,KAAKA;AAAAA,QACf,WAAU,KAAK6uB,oBAAoB;AAChC,iBAAO,KAAKA,mBAAmB1S;QAClC,WAAU,KAAKyS,WAAW;AAEvB,iBAAO,KAAKA,UAAUzS;QACzB,OAAM;AACH,iBAAO;AAAA,QACV;AAAA,MACJ;AAAA;;aAED,SAAmB,mBAAA;AACX,YAAA,KAAKlc,IAAI;AACT,iBAAO,KAAKA;AAAAA,QACf,WAAU,KAAK4uB,oBAAoB;AAChC,iBAAO,KAAKA,mBAAmBzS;QAClC,WAAU,KAAKwS,WAAW;AAEvB,iBAAO,KAAKA,UAAUxS;QACzB,OAAM;AACH,iBAAO;AAAA,QACV;AAAA,MACJ;AAAA;;WAED,SAAkB,MAAA;AACV,YAAA,KAAKsS,WAAW;AAEhB,iBAAO,KAAKH,OAAOpS;QACtB,OAAM;AACI,iBAAA,KAAK0V;QACf;AAAA,MACJ;AAAA;;WAED,SAAmB,MAAA;AACX,YAAA,KAAKnD,WAAW;AAChB,iBAAO,KAAKH,OAAOnS;QACtB,OAAM;AACI,iBAAA,KAAK0V;QACf;AAAA,MACJ;AAAA;;WAED,SAAa,MAAA;AACF,eAAA,KAAKvD,OAAOniC;AAAAA,MACtB;AAAA;;WAED,SAAa,MAAA;AACF,eAAA,KAAKmiC,OAAOliC;AAAAA,MACtB;AAAA;;WAED,SAAa,MAAA;AACF,eAAA,KAAKkiC,OAAO7iC;AAAAA,MACtB;AAAA;;WAED,SAAa,MAAA;AACF,eAAA,KAAK6iC,OAAO5iC;AAAAA,MACtB;AAAA;;aAED,SAAkB,kBAAA;AACd,eAAO,KAAKijC,aAAa,KAAKA,UAAUhoB,SAAf;AAAA,MAC5B;AAAA;;aAED,SAAc,cAAA;AACN,YAAA,KAAKgoB,WAAW;AACXA,eAAAA,UAAU1qB;AAEX,cAAA,CAAC,KAAK0qB,UAAU3qB,OAAhB,KAA4B,CAAC,KAAKqsB,cAAc;AAGhD,iBAAK7pB,kBAAL;AAAA,UACH;AAAA,QACJ;AAAA,MACJ;AAAA;;aAED,SAAsB,sBAAA;AAElB,YAAMuU,YAAY,KAAK4T,UAAU5T;AACjC,YAAIA,WAAW;AACN7C,eAAAA,KAAK,WAAW6C,WAAW,KAAK4T,UAAU3V,OAA/C;AAAA,QACH;AAAA,MACJ;AAAA;;aAED,SAAiB,iBAAA;AACb,YAAI,KAAK2V,UAAUhoB,YAAY;AACtBL,eAAAA,qBAAqB,KAAKqoB,SAA/B;AAAA,QACH,OAAM;AAEEroB,eAAAA,qBAAqB,IAA1B;AAEA,eAAKwrB,oBAAL;AAAA,QACH;AAAA,MACJ;AAAA;;aAED,SAAkB,kBAAA;AAGTxrB,aAAAA,qBAAqB,IAA1B;AAAA,MACH;AAAA;;WAED,SAAc,MAAA;AACV,eAAO,KAAKqoB;AAAAA;MAGhB,KAAA,SAAAp0B,KAAYjY,GAAG;AACX,YAAIshB;AACJ,YAAIze,QAAME,gBAAgB/C,CAAtB,GAA0B;AACtBA,cAAAA,EAAEyD,MAAM;AACR6d,sBAAU,IAAIthB,EAAEyD,KAAK,KAAKyc,KAAhB;AAAA,UACb,OAAM;AACHoB,sBAAU,KAAKA;AAAAA,UAClB;AAED,cAAIA,SAAS;AACT3b,iBAAK4T,YAAY+H,SAASthB,CAA1B;AAAA,UACH;AAAA,QACJ,WAAU,CAACA,GAAG;AACXshB,oBAAU;AAAA,QACb,OAAM;AACCthB,cAAAA,EAAE85B,WAAW;AACbxY,sBAAUthB;AAAAA,UACb,WAAUA,EAAEykB,iBAAiB;AAC1BnD,sBAAU,IAAIulB,cAAc,KAAK3mB,KAAvB;AACVoB,oBAAQuM,gBAAgB7tB;AAAAA,UAC3B,OAAM;AACHyC,oBAAQqD,MAAM,4CAAd;AACA;AAAA,UACH;AAAA,QACJ;AAEK2pC,YAAAA,cAAc,KAAKpD;AACrB/qB,YAAAA,YAAYmuB,aAAa;AACpBpD,eAAAA,YAAY/qB;AAEb,cAAA,KAAK+qB,WAAW;AACZ,gBAAA,KAAKF,WAAW;AAChB,mBAAKE,UAAUsC,WAAW,IAA1B;AAEI,kBAAA,KAAKX,oBAAoB;AACzB,oBAAI,KAAK3B,UAAUhoB,YAAY;AACtBL,uBAAAA,qBAAqB,KAAKqoB,SAA/B;AAAA,gBACH,OAAM;AACH,uBAAKmD,oBAAL;AAAA,gBACH;AAAA,cACJ;AAAA,YACJ;AAAA,UACJ,OAAM;AAEExrB,iBAAAA,qBAAqB,IAA1B;AAAA,UACH;AAED,cAAIyrB,eAAeA,gBAAgB,KAAKnD,oBAAoB;AACxDmD,wBAAYX,cAAc,IAA1B;AAAA,UACH;AAED,eAAK5qB,kBAAL;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAuB,MAAA;AACnB,eAAO,KAAKooB;AAAAA,MACf;AAAA;;MAED,OAAA,SAAA,qBAAqBtsC,GAAG;AAChByvC,YAAAA,cAAc,KAAKnD;AAEvB,YAAImD,eAAgBzvC,MAAMyvC,aAAc;AACpC,cAAI,KAAKpD,cAAcoD,aAAa;AAEhCA,wBAAYX,cAAc,IAA1B;AAAA,UACH;AAAA,QACJ;AAED,YAAMY,aAAa,KAAK1D,OAAO2D;AACzBC,YAAAA,iBAAiB5vC,IAAIA,EAAE02B,UAAU,UAAUgZ;AAE5CpD,aAAAA,qBAAqBtsC;AAC1B,aAAKkkB,kBAAL;AAEI,YAAA,KAAKooB,oBAAoB;AACzB,cAAIsD,eAAe;AAEf,iBAAKhsB,qBAAL;AACA,iBAAKooB,OAAO6D,0BAA0B,KAAKvD,mBAAmB5V,OAA9D;AAAA,UACH;AAAA,QACJ,OAAM;AACH,eAAKsV,OAAO6D,0BAA0B,IAAtC;AAAA,QACH;AAED,YAAID,eAAe;AACX,cAAA,KAAKtD,oBAAoB;AACzB,iBAAKpsB,MAAMiX,0BAA0B,KAAKmV,kBAA1C;AACA,iBAAK1W,KAAK,YAAY,KAAK0W,kBAA3B;AAAA,UACH,OAAM;AACH,iBAAK1W,KAAK,cAAc,KAAK0W,kBAA7B;AAAA,UACH;AAAA,QACJ;AAAA,MACJ;AAAA;;aAED,SAAwB,wBAAA;AAEhB,YAAA,KAAK7qB,QAAQ;AAERuC,eAAAA,qBAAqB,KAAKqoB,SAA/B;AAAA,QACH;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,yBAAyBloB,GAAG;AACnByR,aAAAA,KAAK,WAAWzR,GAAG,KAAKkoB,UAAU3V,OAAvC;AAAA,MACH;AAAA;;aAED,SAAoB,oBAAA;AAChB,aAAKsV,OAAOzmB,oBAAoB,CAAhC;AAAA,MACH;AAAA;;aAED,SAAoC,oCAAA;AAChC,aAAKrB,kBAAL;AACA,aAAKN,qBAAL;AAAA,MACH;AAAA;;aAED,SAAqB,qBAAA;AACjB,aAAKM,kBAAL;AAAA,MACH;AAAA;;aAED,SAAoB/a,oBAAAA,GAAGC,GAAG;AACtB,YAAI,KAAKkY,mBAAmBiiB,aAAa;AACrC,eAAKjiB,QAAQnY,IAAIA;AACjB,eAAKmY,QAAQlY,IAAIA;AACZD,eAAAA,IAAIA;AACJC,eAAAA,IAAIA;AAAAA,QACZ;AAAA,MACJ;AAAA;;aAED,SAAoB,oBAAA;AAChB,YAAID,IAAI,KAAKmmC;AACb,YAAIlmC,IAAI,KAAKmmC;AAETO,YAAAA,cAAc;AAClB,YAAI,CAAC3mC,KAAK,CAACC,GAAG;AACV,cAAI,CAAC,KAAKkjC,sBAAsB,KAAKD,WAAW;AAG5CljC,gBAAIA,KAAK,KAAKkjC,UAAUxV;AACxBztB,gBAAIA,KAAK,KAAKijC,UAAUvV;AAExB,iBAAK,CAAC3tB,KAAK,CAACC,MAAM,KAAKijC,UAAU1S,qBAAqB;AAClDmW,4BAAc;AAAA,YACjB;AAAA,UACJ;AAAA,QACJ;AAEG,YAAA,KAAK9D,OAAO1uB,cAAcnU,GAAGC,GAAG0mC,WAAhC,GAA8C;AAC9C,eAAKC,UAAL;AAAA,QACH;AAAA,MACJ;AAAA;;aAED,SAAuB,uBAAA;AACnB,YAAI,KAAKzW,oBAAoB,KAAKA,iBAAiB5C,SAAS;AACpD4C,cAAAA,mBAAmB,KAAKA;AAC5B,cAAIqW,yBAAyB,KAAKrW,iBAAiB5C;AAE/CsZ,cAAAA,MAAM,GAAGC,MAAM,GAAGC,MAAM,GAAKC,MAAM;AACnC7W,cAAAA,iBAAiBvC,UAAU;AAE3B,gBAAI5tB,IAAIwmC,uBAAuB/V;AAC/B,gBAAIxwB,IAAIumC,uBAAuB9V;AAC/B,gBAAIuW,IAAIC,IAAIC,IAAIC;AAChBH,iBAAK,IAAIjnC;AACTknC,iBAAK,IAAIjnC;AAELkwB,gBAAAA,iBAAiB7J,IAAI;AACrB6gB,mBAAMhX,iBAAiB7J,KAAM2gB;AAAAA,YAChC,OAAM;AACHE,oBAAMnnC,IAAImwB,iBAAiBxN,MAAMskB;AAAAA,YACpC;AAEG9W,gBAAAA,iBAAiBkX,IAAI;AACrBD,mBAAKjX,iBAAiBkX,KAAKH;AAAAA,YAC9B,OAAM;AACHE,oBAAMnnC,IAAIkwB,iBAAiBtN,MAAMqkB;AAAAA,YACpC;AAEDD,kBAAO9W,iBAAiBxN;AACxBukB,kBAAO/W,iBAAiBtN;AAExBgkB,kBAAMI;AACNH,kBAAMI;AACNH,kBAAMA,MAAMI,KAAKF;AACjBD,kBAAMA,MAAMI,KAAKF;AAEjBL,kBAAMtwC,KAAKI,IAAI,GAAGkwC,GAAZ;AACNC,kBAAMvwC,KAAKI,IAAI,GAAGmwC,GAAZ;AACNC,kBAAMxwC,KAAKK,IAAI,GAAGmwC,GAAZ;AACNC,kBAAMzwC,KAAKK,IAAI,GAAGowC,GAAZ;AAAA,UACT;AAEGR,cAAAA,uBAAuBxsB,eAAe;AAClCstB,gBAAAA,SAASN;AACbA,kBAAMF;AACNA,kBAAMQ;AAAAA,UACT;AACIzE,eAAAA,OAAO0E,iBAAiBV,KAAKC,KAAKC,KAAKC,GAA5C;AAAA,QACH;AAAA,MACJ;AAAA;;aAED,SAAkB,kBAAA;AACd,eAAO,KAAKnE,OAAO7X;MACtB;AAAA;;aAED,SAAmB,mBAAA;AAAA,YAAA,SAAA;AACX,YAAA,KAAKoY,QAAQ;AACb,eAAKA,OAAO7nC,QAAQ,SAACisC,KAAQ;AAAA,2BAAA,MAAA,MAAA;AAErBxxC,gBAAAA,KAAI;AACR,mBAAOA,KAAIA,GAAEywB,UAAU;AACfghB,kBAAAA,iBAAiBzxC,GAAEqtC,WAAWzB,IAAI4F,GAAjB;AACrBC,6BAAe1vB,OAAO,IAAtB;AAEI/hB,kBAAAA,GAAEstC,WAAW;AACb;AAAA,cACH;AAAA,YACJ;AAAA,UACJ,EAXD,KAAA,IAAA,CAAA;AAAA,QAYH;AAEGoE,YAAAA,OAAO;AACP/vC,YAAAA,IAAI;AACJ,YAAA,KAAK0rC,YAAY;AACb,cAAA,CAAC,KAAKC,WAAW;AACjBoE,mBAAOhuC,QAAMiuC,gBAAgB,KAAKtE,WAAWppC,KAAhB,CAAtB;AACPtC,gBAAI+vC,KAAK9vC;AAELD,gBAAAA,IAAI,GAAG;AACF,uBAAIE,IAAI,GAAGA,IAAIF,GAAGE,KAAK;AACpB+vC,oBAAAA,SAAS,KAAKvE,WAAWzB,IAAI8F,KAAK7vC,CAAD,CAAxB;AAGT7B,oBAAAA,IAAI;AAJgB,oBAAA,QAAA,SAAA6xC,SAAA;AAMpB,sBAAIJ,iBAAiBzxC,EAAEqtC,WAAWzB,IAAI8F,KAAK7vC,CAAD,CAArB;AAErB+vC,yBAAOrsC,QAAQ,SAAUusC,MAAM;AAC3BL,mCAAe1vB,OAAO+vB,IAAtB;AAAA,kBACH,CAFD;AAII9xC,sBAAAA,EAAEstC,WAAW;AACb,2BAAA;AAAA,kBACH;AAAA,gBAdmB;AAKxB,uBAAQttC,IAAIA,EAAEywB,UAAW;AAAA,sBAAA,OAAA;AAQjB,sBAAA,SAAA;AAAA;AAAA,gBAEP;AAAA,cACJ;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA;;aAED,SAAiB,iBAAA;AAAA,YAAA,SAAA;AAET,YAAA,KAAK2c,QAAQ;AACb,eAAKA,OAAO7nC,QAAQ,SAACisC,KAAQ;AAAA,2BAAA,MAAA,MAAA;AACrBxxC,gBAAAA,IAAI;AACR,mBAAOA,IAAIA,EAAEywB,UAAU;AACnB,kBAAI,CAACzwB,EAAEqtC,YAAY;AACfrtC,kBAAEqtC,aAAa,oBAAI0E;cACtB;AAEG9uC,kBAAAA,IAAIjD,EAAEqtC,WAAWzB,IAAI4F,GAAjB;AACJ,kBAAA,CAACvuC,GAAG;AACJA,oBAAI,oBAAIge;AACRjhB,kBAAEqtC,WAAWv0B,IAAI04B,KAAKvuC,CAAtB;AAAA,cACH;AAEDA,gBAAE6e,IAAI,IAAN;AAEI9hB,kBAAAA,EAAEstC,WAAW;AACb;AAAA,cACH;AAAA,YACJ;AAAA,UACJ,EAnBD,KAAA,IAAA,CAAA;AAAA,QAoBH;AAED,YAAI,KAAKD,cAAc,KAAKA,WAAWxiC,MAAM;AACrC,cAAA,CAAC,KAAKyiC,WAAW;AACZD,iBAAAA,WAAW9nC,QAAQ,SAACqsC,QAAQJ,KAAQ;AAAA,6BAAA,MAAA,MAAA;AACjCxxC,kBAAAA,IAAI;AAD6B,kBAAA,SAAA,SAAAgyC,UAAA;AAGjC,oBAAIhyC,EAAEstC;AAAW;AAGjB,oBAAI,CAACttC,EAAEqtC,YAAY;AACfrtC,oBAAEqtC,aAAa,oBAAI0E;gBACtB;AAEG9uC,oBAAAA,IAAIjD,EAAEqtC,WAAWzB,IAAI4F,GAAjB;AACJ,oBAAA,CAACvuC,GAAG;AACJA,sBAAI,oBAAIge;AACRjhB,oBAAEqtC,WAAWv0B,IAAI04B,KAAKvuC,CAAtB;AAAA,gBACH;AAED2uC,uBAAOrsC,QAAQ,SAAUusC,MAAM;AAC3B7uC,oBAAE6e,IAAIgwB,IAAN;AAAA,gBACH,CAFD;AAAA,cAhBiC;AAE9B,qBAAA,CAAC9xC,EAAEstC,cAActtC,IAAIA,EAAEywB,WAAW;AAAA;cAiBxC;AAAA,YACJ,EApBD,KAAA,IAAA,CAAA;AAAA,UAqBH;AAAA,QACJ;AAAA,MACJ;AAAA;;MAGD,OAAA,SAAA,UAAU+gB,KAAK;AACP,YAAA,CAAC,KAAKnE,YAAY;AAClB,iBAAO;QACV;AACG3rC,YAAAA,IAAI,KAAK2rC,WAAWzB,IAAI4F,GAApB;AACD9vC,eAAAA,IAAIgC,QAAMuuC,WAAWvwC,CAAjB,IAAsB,CAAA;AAAA,MACpC;AAAA;;aAED,SAAU,UAAA;AACN,eAAO,KAAK0rC,SAAS,KAAKA,SAAS,CAAA;AAAA,MACtC;AAAA;;MAED,OAAA,SAAA,QAAQsE,MAAM;AAAA,YAAA,SAAA;AACVA,eAAOA,KAAKjQ,OAAO,SAACC,KAAK8P,KAAQ;AAAA,yBAAA,MAAA,MAAA;AACtB9P,iBAAAA,IAAIC,OAAO6P,IAAInuC,MAAM,GAAV,CAAX;AAAA,QADJ,EAAA,KAAA,IAAA,GAEJ,CAAA,CAFI;AAIH,YAAA,KAAKypC,OAAO;AACZ4E,eAAKlsC,KAAK,KAAKsnC,KAAf;AAAA,QACH;AAED,YAAIjrC,GAAGF,IAAI+vC,KAAK9vC;AACZswC,YAAAA,UAAU,CAAA;AACVC,YAAAA,OAAO,CAAA;AACNtwC,aAAAA,IAAI,GAAGA,IAAIF,GAAGE,KAAK;AAChB,cAAA,CAAC,KAAKuwC,OAAOV,KAAK7vC,CAAD,CAAhB,GAAsB;AACvBswC,iBAAK3sC,KAAKksC,KAAK7vC,CAAD,CAAd;AAAA,UACH;AAAA,QACJ;AAED,YAAIwwC,cAAc,KAAKX,QAAQ;AAC/B/vC,YAAI0wC,YAAYzwC;AACXC,aAAAA,IAAI,GAAGA,IAAIF,GAAGE,KAAK;AAChB6vC,cAAAA,KAAKxuC,QAAQmvC,YAAYxwC,CAAD,CAAxB,KAAgC,IAAI;AACpCqwC,oBAAQ1sC,KAAK6sC,YAAYxwC,CAAD,CAAxB;AAAA,UACH;AAAA,QACJ;AAED,aAAKA,IAAI,GAAGA,IAAIqwC,QAAQtwC,QAAQC,KAAK;AACjC,eAAK6rC,UAAUwE,QAAQrwC,CAAD,CAAtB;AAAA,QACH;AAED,aAAKA,IAAI,GAAGA,IAAIswC,KAAKvwC,QAAQC,KAAK;AAC9B,eAAKywC,OAAOH,KAAKtwC,CAAD,CAAhB;AAAA,QACH;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,OAAO2vC,KAAK;AACJA,YAAAA,IAAItuC,QAAQ,GAAZ,MAAqB,IAAI;AACrBQ,cAAAA,QAAM8pC,SAASgE,IAAIxW,WAAW,CAAf,CAAf,GAAmC;AAC9ByS,iBAAAA,YAAY,iDAAjB;AAAA,UACH;AAEIG,eAAAA,QAAQ4D,GAAb;AAAA,QACH,OAAM;AACH,cAAME,OAAOF,IAAInuC,MAAM,GAAV;AACb,mBAASxB,IAAI,GAAGwyB,IAAIqd,KAAK9vC,QAAQC,IAAIwyB,GAAGxyB,KAAK;AACzC,gBAAM2vC,QAAME,KAAK7vC,CAAD;AAEZ6B,gBAAAA,QAAM8pC,SAASgE,MAAIxW,WAAW,CAAf,CAAf,GAAmC;AAC9ByS,mBAAAA,YAAY,iDAAjB;AAAA,YACH;AAEIG,iBAAAA,QAAQ4D,KAAb;AAAA,UACH;AAAA,QACJ;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,QAAQA,KAAK;AACL,YAAA,CAAC,KAAKpE,QAAQ;AACTA,eAAAA,SAAS;QACjB;AACG,YAAA,KAAKA,OAAOlqC,QAAQsuC,GAApB,MAA6B,IAAI;AACjC,eAAKpE,OAAO5nC,KAAKgsC,GAAjB;AAGIxxC,cAAAA,IAAI,KAAKywB;AACb,cAAIzwB,GAAG;AACA,eAAA;AACC,kBAAI,CAACA,EAAEqtC,YAAY;AACfrtC,kBAAEqtC,aAAa,oBAAI0E;cACtB;AAEG9uC,kBAAAA,IAAIjD,EAAEqtC,WAAWzB,IAAI4F,GAAjB;AACJ,kBAAA,CAACvuC,GAAG;AACJA,oBAAI,oBAAIge;AACRjhB,kBAAEqtC,WAAWv0B,IAAI04B,KAAKvuC,CAAtB;AAAA,cACH;AAEDA,gBAAE6e,IAAI,IAAN;AAAA,YAEH,SAAQ,CAAC9hB,EAAEstC,cAActtC,IAAIA,EAAEywB;AAAAA,UACnC;AAAA,QACJ;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,UAAU+gB,KAAK;AACP3vC,YAAAA,IAAI,KAAKurC,OAAOlqC,QAAQsuC,GAApB;AACR,YAAI3vC,MAAM,IAAI;AACV,eAAKurC,OAAOrf,OAAOlsB,GAAG,CAAtB;AAGI7B,cAAAA,IAAI,KAAKywB;AACb,cAAIzwB,GAAG;AACA,eAAA;AACKuyC,kBAAAA,OAAOvyC,EAAEqtC,WAAWzB,IAAI4F,GAAjB;AACX,kBAAIe,MAAM;AACNA,qBAAKxwB,OAAO,IAAZ;AAAA,cACH;AAAA,YACJ,SAAQ,CAAC/hB,EAAEstC,cAActtC,IAAIA,EAAEywB;AAAAA,UACnC;AAAA,QACJ;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,OAAO+gB,KAAK;AACA,eAAA,KAAKpE,UAAW,KAAKA,OAAOlqC,QAAQsuC,GAApB,MAA6B;AAAA,MACxD;AAAA;;MAOD,OAAA,SAAA,KAAKA,KAAK;AACFA,YAAAA,IAAItuC,QAAQ,GAAZ,MAAqB,IAAI;AACzB,iBAAO,KAAKsvC,KAAKhB,GAAV,EAAe,CAAf;AAAA,QACV,OAAM;AACC,cAAA,KAAKnE,YAAY;AACb3rC,gBAAAA,IAAI,KAAK2rC,WAAWzB,IAAI4F,GAApB;AACR,gBAAI9vC,GAAG;AACH,kBAAM8H,OAAO9H,EAAE+wC,OAAF,EAAW9sC,KAAX;AACb,qBAAO6D,OAAOA,KAAK7F,QAAQgX;AAAAA,YAC9B;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA;;WAED,SAAU,MAAA;AACN,eAAO,KAAK+3B;AAAAA;MAGhB,KAAA,SAAA55B,KAAQpX,GAAG;AACFgwC,aAAAA,OAAOhwC;AAAAA,MACf;AAAA;;MAOD,OAAA,SAAA,KAAK8vC,KAAK;AACN,YAAIpG,MAAMoG,IAAItuC,QAAQ,GAAZ;AACNkoC,YAAAA,OAAO,GAAG;AACV,cAAIjoC,QAAQquC,IAAInuC,MAAM,GAAV;AACRsvC,cAAAA,MAAM,KAAKC,UAAUzvC,MAAM,CAAD,CAApB;AACN0vC,cAAAA,QAAQ;AACZ,cAAIpxC,IAAI0B,MAAMvB;AACd,iBAAO+wC,IAAI/wC,UAAUixC,QAAQpxC,GAAG;AACxBqxC,gBAAAA,OAAO,CAAA;AACX,qBAASxe,IAAI,GAAG3yB,IAAIgxC,IAAI/wC,QAAQ0yB,IAAI3yB,GAAG2yB,KAAK;AACxCwe,qBAAOA,KAAKnR,OAAOgR,IAAIre,CAAD,EAAIse,UAAUzvC,MAAM0vC,KAAD,CAAtB,CAAZ;AAAA,YACV;AAEDF,kBAAMG;AACND;AAAAA,UACH;AACD,iBAAOF;AAAAA,QACV,OAAM;AACH,iBAAO,KAAKC,UAAUpB,GAAf;AAAA,QACV;AAAA,MACJ;AAAA;;aAED,SAAKA,KAAAA,KAAK9qC,UAAU;AAChB,YAAIhF,IAAI,KAAK8wC,KAAKhB,GAAV;AACR,YAAI7vC,IAAID,EAAEE;AACL,iBAAIC,IAAI,GAAGA,IAAIF,GAAGE,KAAK;AACxB2E,eAAK4T,YAAY1Y,EAAEG,CAAD,GAAK6E,QAAvB;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAc,MAAA;AACV,eAAO,KAAK4mC;AAAAA;MAGhB,KAAA,SAAAx0B,KAAYjY,GAAG;AACX,YAAI,KAAKysC,cAAczsC,GAAG;AAClB,cAAA,CAACA,GAAG;AACJ,iBAAKqtC,eAAL;AAAA,UACH,OAAM;AACH,iBAAKD,iBAAL;AAAA,UACH;AAEIX,eAAAA,YAAYzsC;AAAAA,QACpB;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,IAAIkyC,MAAM;AACN,YAAM3jB,UAAU,KAAK4jB,OAAOD,IAAZ;AACZ3jB,YAAAA,QAAQxtB,QAAQ;AACTwtB,iBAAAA,QAAQ,CAAD;AAAA,QACjB,OAAM;AACH,iBAAOzU;AAAAA,QACV;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,OAAOo4B,MAAM;AACLA,YAAAA,KAAK7vC,QAAQ,GAAb,MAAsB,IAAI;AAC1B,cAAI+vC,YAAYF,KAAK1vC,MAAM,GAAX;AACZsvC,cAAAA,MAAM,CAAA;AACV,mBAAS9wC,IAAI,GAAGA,IAAIoxC,UAAUrxC,QAAQC,KAAK;AACvC8wC,kBAAMA,IAAIhR,OAAO,KAAKuR,QAAQD,UAAUpxC,CAAD,CAAtB,CAAX;AAAA,UACT;AACD,iBAAO8wC;AAAAA,QACV,OAAM;AACH,iBAAO,KAAKO,QAAQH,IAAb;AAAA,QACV;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,QAAQA,MAAM;AACV,YAAIA,SAAS;AAAI,iBAAO,CAAC,IAAD;AAGxB,YAAII,WAAWJ,KAAK7vC,QAAQ,GAAb;AACf,YAAIkwC,WAAWL,KAAK7vC,QAAQ,GAAb;AACXiwC,YAAAA,aAAa,MAAMC,aAAa,IAAI;AAEpC,iBAAO,KAAKZ,KAAKO,IAAV;AAAA,QACV;AAGD,YAAIM;AACAD,YAAAA,aAAa,GAAG;AAChBC,kBAAQ;AACRN,iBAAOA,KAAK3vC,OAAO,CAAZ;AAAA,QACV,WAAU+vC,aAAa,GAAG;AACvBE,kBAAQ;AACRN,iBAAOA,KAAK3vC,OAAO,CAAZ;AAAA,QACV,OAAM;AACHiwC,kBAAQ;AAAA,QACX;AAED,eAAO,KAAKC,cAAcP,MAAMM,KAAzB;AAAA,MACV;AAAA;;aAED,SAAcN,cAAAA,MAAMM,OAAO;AACvB,YAAMF,WAAWJ,KAAK7vC,QAAQ,GAAb;AACjB,YAAMkwC,WAAWL,KAAK7vC,QAAQ,GAAb;AAEbiwC,YAAAA,aAAa,MAAMC,aAAa,IAAI;AACpC,cAAIC,OAAO;AACP,gBAAMpJ,MAAM,KAAKG,SAAS2I,IAAd;AACZ,mBAAO9I,MAAM,CAACA,GAAD,IAAQ;UACxB,OAAM;AACH,mBAAO,KAAKuI,KAAKO,IAAV;AAAA,UACV;AAAA,QACJ;AAED,YAAKK,aAAa,MAAQD,aAAa,MAAMA,WAAWC,UAAW;AAC/D,cAAIztC;AACE5C,cAAAA,MAAMgwC,KAAK3vC,OAAO,GAAG+vC,QAAf;AACZ,cAAIE,OAAO;AACP,gBAAMpJ,OAAM,KAAKG,SAASrnC,GAAd;AACZ4C,mBAAOskC,OAAM,CAACA,IAAD,IAAQ,CAAA;AAAA,UACxB,OAAM;AACHtkC,mBAAO,KAAK6sC,KAAKzvC,GAAV;AAAA,UACV;AACGsG,cAAAA,QAAQ,CAAA;AACNkqC,cAAAA,UAAUR,KAAK3vC,OAAO+vC,WAAW,CAAvB;AAChB,mBAAStxC,IAAI,GAAGF,IAAIgE,KAAK/D,QAAQC,IAAIF,GAAGE,KAAK;AACzCwH,oBAAQA,MAAMs4B,OAAOh8B,KAAK9D,CAAD,EAAIyxC,cAAcC,SAAS,KAA/B,CAAb;AAAA,UACX;AACD,iBAAOlqC;AAAAA,QACV,OAAM;AACH,cAAI1D;AACE5C,cAAAA,OAAMgwC,KAAK3vC,OAAO,GAAGgwC,QAAf;AACZ,cAAIC,OAAO;AACP,gBAAMpJ,QAAM,KAAKG,SAASrnC,IAAd;AACZ4C,oBAAOskC,QAAM,CAACA,KAAD,IAAQ,CAAA;AAAA,UACxB,OAAM;AACHtkC,oBAAO,KAAK6sC,KAAKzvC,IAAV;AAAA,UACV;AACGsG,cAAAA,SAAQ,CAAA;AACNkqC,cAAAA,WAAUR,KAAK3vC,OAAOgwC,WAAW,CAAvB;AAChB,mBAASvxC,KAAI,GAAGF,KAAIgE,MAAK/D,QAAQC,KAAIF,IAAGE,MAAK;AACzCwH,qBAAQA,OAAMs4B,OAAOh8B,MAAK9D,EAAD,EAAIyxC,cAAcC,UAAS,IAA/B,CAAb;AAAA,UACX;AACD,iBAAOlqC;AAAAA,QACV;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,SAAS4gC,KAAK;AACV,eAAO,KAAK8B,UAAU3B,SAASH,GAAxB;AAAA,MACV;AAAA;;aAED,SAAoB,oBAAA;AAChB,YAAIpoC;AACJA,YAAI,KAAK4uB,WAAW,KAAKA,SAASpT,UAAUktB,SAAS,IAAjC,IAAyC;AAC7D,YAAIiJ,YAAY,KAAKC;AACjB1wC,YAAAA,MAAM,KAAK0tB,WAAW,KAAKA,SAASijB,kBAA9B,IAAmD;AACzD,YAAA,KAAKzJ,KAAK;AACVlnC,iBAAO,OAAOlB,IAAI,MAAM,KAAKooC;AAAAA,QAChC,WAAUuJ,UAAU5xC,QAAQ;AACzBmB,iBAAO,OAAOlB,IAAI,MAAM2xC,UAAUx5B,KAAK,GAAf;AAAA,QAC3B,OAAM;AACHjX,iBAAO,OAAOlB,IAAI,OAAO,KAAKif;AAAAA,QACjC;AACD,eAAO/d;AAAAA,MACV;AAAA;;aAED,SAAW,WAAA;AACP,YAAIiB,MAAM,KAAK2vC;AACf,eAAOjH,SAAQkH,gBAAgB5vC,KAAK,EAA7B;AAAA,MACV;AAAA;;aA6CD,SAAc,cAAA;AAAA,YAAA,SAAA;AACV,YAAI0C,WAAW,KAAKmtC;AAEpB,YAAIz2B,WAAW,KAAKC,UAAUuuB,IAAf;AACf,YAAIxuB,UAAU;AACV,cAAIzb,IAAIyb,SAASxb;AACjB,cAAID,GAAG;AACGmyC,gBAAAA,aAAa,CAAA;AACfC,gBAAAA,UAAU;AACT,qBAAIlyC,IAAI,GAAGA,IAAIF,GAAGE,KAAK;AACxBiyC,yBAAWtuC,KAAK4X,SAASvb,CAAD,EAAI8xC,YAA5B,CAAA;AACAI,wBAAUA,WAAW,CAAC32B,SAASvb,CAAD,EAAIooC;AAAAA,YACrC;AAEG,gBAAA,CAAC8J,SAAS;AACVrtC,uBAAS0W,WAAW;AACpB02B,yBAAWvuC,QAAQ,SAAA+X,OAAS;AAAA,+BAAA,MAAA,MAAA;AACxB5W,yBAAS0W,SAASE,MAAM2sB,GAAxB,IAA+B3sB;AAAAA,cAClC,EAFD,KAAA,IAAA,CAAA;AAAA,YAGH,OAAM;AACH5W,uBAAS0W,WAAW02B;AAAAA,YACvB;AAAA,UACJ;AAAA,QACJ;AAEDptC,iBAASoa,KAAK,KAAKA;AAEnB,eAAOpa;AAAAA,MACV;AAAA;;aAED,SAAiB,iBAAA;AACTA,YAAAA,WAAW,CAAA;AAEf,YAAI,KAAKnC,gBAAgBmoC,UAAS;AAC9BhmC,mBAASpC,OAAO,KAAKC,YAAYkC;AAAAA,QACpC;AAEG,YAAA,KAAKqmC,OAAO;AACZpmC,mBAASujC,MAAM,KAAK6C;AAAAA,QACvB;AAED,YAAI,KAAKM,UAAU,KAAKA,OAAOxrC,QAAQ;AACnC8E,mBAASgrC,OAAO,KAAKtE;AAAAA,QACxB;AAEG,YAAA,KAAK1iC,MAAM;AAAGhE,mBAASgE,IAAI,KAAKA;AAChC,YAAA,KAAKC,MAAM;AAAGjE,mBAASiE,IAAI,KAAKA;AAChC,YAAA,KAAKX,MAAM;AAAGtD,mBAASsD,IAAI,KAAKA;AAChC,YAAA,KAAKC,MAAM;AAAGvD,mBAASuD,IAAI,KAAKA;AAEpC,YAAI,KAAK4hB,WAAW,KAAKgO,QAAQ;AACzB,cAAA,KAAKhO,WAAW;AAAGnlB,qBAASozB,QAAQ,KAAKjO;AAAAA,QAChD,OAAM;AACC,cAAA,KAAKA,WAAW;AAAGnlB,qBAASmlB,SAAS,KAAKA;AAC1C,cAAA,KAAKgO,WAAW;AAAGnzB,qBAASmzB,SAAS,KAAKA;AAAAA,QACjD;AAED,YAAI,KAAKma,WAAW,KAAKC,QAAQ;AACzB,cAAA,KAAKD,WAAW;AAAKttC,qBAASwtC,QAAQ,KAAKF;AAAAA,QAClD,OAAM;AACC,cAAA,KAAKA,WAAW;AAAKttC,qBAASstC,SAAS,KAAKA;AAC5C,cAAA,KAAKC,WAAW;AAAKvtC,qBAASutC,SAAS,KAAKA;AAAAA,QACnD;AAED,YAAI,KAAKE,WAAW,KAAKC,QAAQ;AACzB,cAAA,KAAKD,WAAW;AAAGztC,qBAAS2tC,QAAQ,KAAKF;AAAAA,QAChD,OAAM;AACC,cAAA,KAAKA,WAAW;AAAGztC,qBAASytC,SAAS,KAAKA;AAC1C,cAAA,KAAKC,WAAW;AAAG1tC,qBAAS0tC,SAAS,KAAKA;AAAAA,QACjD;AAEG,YAAA,KAAKtyC,UAAU;AAAG4E,mBAAS5E,QAAQ,KAAKA;AAExC,YAAA,CAAC,KAAK+c;AAASnY,mBAASmY,UAAU;AAElC,YAAA,KAAKy1B,aAAa;AAAG5tC,mBAAS4tC,WAAW,KAAKA;AAElD,YAAI,KAAKC,YAAY,KAAKC,WAAW,KAAKC,YAAY,KAAKC,WAAW,KAAKH,YAAY,KAAKE,SAAS;AACjG,cAAI,KAAKF,YAAY;AAAY7tC,qBAASrG,QAAQ,KAAKk0C,QAAQ9N,SAAS,EAAtB;AAAA,QACrD,OAAM;AACH,cAAI,KAAK8N,YAAY;AAAY7tC,qBAAS6tC,UAAU,KAAKA,QAAQ9N,SAAS,EAAtB;AACpD,cAAI,KAAK+N,YAAY;AAAY9tC,qBAAS8tC,UAAU,KAAKA,QAAQ/N,SAAS,EAAtB;AACpD,cAAI,KAAKgO,YAAY;AAAY/tC,qBAAS+tC,UAAU,KAAKA,QAAQhO,SAAS,EAAtB;AACpD,cAAI,KAAKiO,YAAY;AAAYhuC,qBAASguC,UAAU,KAAKA,QAAQjO,SAAS,EAAtB;AAAA,QACvD;AAEG,YAAA,KAAKvX;AAAQxoB,mBAASwoB,SAAS,KAAKA;AAExC,YAAI,KAAKylB;AAAoBjuC,mBAASiuC,qBAAqB;AAEvD,YAAA,KAAK/c;AAAUlxB,mBAASkxB,WAAW,KAAKA;AAExC,YAAA,CAAC,KAAKgd;AAASluC,mBAASkuC,UAAU,KAAKA;AAEvC,YAAA,KAAK1H,WAAW;AAChB,cAAI2H,MAAM,KAAK3H,UAAU2G,eAAf;AACV,cAAI3vC,OAAOD,KAAK4wC,GAAZ,EAAiBjzC,QAAQ;AACzB8E,qBAASyb,UAAU0yB;AAAAA,UACtB;AAAA,QACJ;AAED,YAAI,KAAKllB,UAAUjsB,QAAMmB,WAAW,KAAK8qB,OAAOkkB,cAA7B,GAA8C;AAC7D,cAAIgB,OAAM,KAAKllB,OAAOkkB,eAAZ;AACV,cAAI3vC,OAAOD,KAAK4wC,IAAZ,EAAiBjzC,QAAQ;AACzB8E,qBAASipB,SAASklB;AAAAA,UACrB;AAAA,QACJ;AAEG,YAAA,KAAK7E,kBAAkB;AACvB,cAAI,KAAKngB,WAAWlS,SAAS;AACzBjX,qBAASouC,kBAAkB,KAAKjlB,WAAWlS;AAAAA,UAC9C;AACD,cAAI,KAAKkS,WAAWjK,MAAM;AACtBlf,qBAASquC,sBAAsB,KAAKllB,WAAWjK;AAAAA,UAClD;AACD,cAAI,KAAKiK,WAAWmE,UAAU;AAC1BttB,qBAASsuC,wBAAwB,KAAKnlB,WAAWmE;AAAAA,UACpD;AACD,cAAI,KAAKnE,WAAWsC,iBAAiB;AACjCzrB,qBAASyrB,kBAAkB,KAAKtC,WAAWsC;AAAAA,UAC9C;AAAA,QACJ;AAED,eAAOzrB;AAAAA,MACV;AAAA;;WAoBD,SAAyB,MAAA;AACd,eAAA,KAAKmmC,OAAO9hB;AAAAA,MACtB;AAAA;;aAED,SAA4B,4BAAA;AAEpB,YAAA,KAAKiiB,WAAW;AAChB,eAAKyC,eAAL;AAAA,QACH;AAAA,MACJ;AAAA;;aAED,SAA6B,6BAAA;AAErB,YAAA,KAAKxC,UAAU;AACf,eAAKyC,iBAAL;AAAA,QACH;AAAA,MACJ;AAAA;;WASD,SAAmB,MAAA;AACR,eAAA,KAAK7C,OAAOoI;AAAAA;MARvB,KAAA,SAAAn8B,KAAiBjY,GAAG;AACZ,YAAA,CAACgD,MAAMC,QAAQjD,CAAd,KAAoBA,MAAM,MAAM;AACjC,gBAAM,IAAIgH,MAAM,0FAAV;AAAA,QACT;AACD,aAAKglC,OAAOoI,eAAep0C;AAAAA,MAC9B;AAAA;;WAMD,SAAQ,MAAA;AACG,eAAA,KAAKgsC,OAAOqI;AAAAA;MAGvB,KAAA,SAAAp8B,KAAMjY,GAAG;AACL,aAAKgsC,OAAOqI,UAAUr0C;AAAAA,MACzB;AAAA;;WAED,SAAQ,MAAA;AACG,eAAA,KAAKgsC,OAAOhQ;AAAAA;MAGvB,KAAA,SAAA/jB,KAAMjY,GAAG;AACL,aAAKgsC,OAAOhQ,UAAUh8B;AAAAA,MACzB;AAAA;;WAED,SAAQ,MAAA;AACJ,eAAO,KAAKyd;AAAAA;MAGhB,KAAA,SAAAxF,KAAMjY,GAAG;AACL,YAAI6C,QAAMmB,WAAWhE,CAAjB,GAAqB;AAChByd,eAAAA,KAAK;AACV,eAAKuuB,OAAO3iC,QAAQrJ;AAAAA,QACvB,OAAM;AACHA,cAAIN,KAAKI,IAAIE,GAAG,CAAZ;AACJ,cAAI,KAAKyd,OAAOzd,GAAG;AACVgsC,iBAAAA,OAAOsI;AACP72B,iBAAAA,KAAKzd;AACV,iBAAKkkB,kBAAL;AAAA,UACH;AAAA,QACJ;AAAA,MACJ;AAAA;;WAED,SAAQ,MAAA;AACJ,eAAO,KAAKxG;AAAAA;MAGhB,KAAA,SAAAzF,KAAMjY,GAAG;AACL,YAAI6C,QAAMmB,WAAWhE,CAAjB,GAAqB;AAChB0d,eAAAA,KAAK;AACV,eAAKsuB,OAAOviC,QAAQzJ;AAAAA,QACvB,OAAM;AACHA,cAAIN,KAAKI,IAAIE,GAAG,CAAZ;AACJ,cAAI,KAAK0d,OAAO1d,GAAG;AACVgsC,iBAAAA,OAAOuI;AACP72B,iBAAAA,KAAK1d;AACV,iBAAKkkB,kBAAL;AAAA,UACH;AAAA,QACJ;AAAA,MACJ;AAAA;;WAED,SAAgB,MAAA;AACZ,eAAO,KAAKswB;AAAAA;MAGhB,KAAA,SAAAv8B,KAAcjY,GAAG;AACRw0C,aAAAA,aAAax0C;AAAAA,MACrB;AAAA;;aAED,SAAmB,mBAAA;AACf,YAAI,KAAKy0C,aAAa,KAAK7kB,YAAY,KAAKA,SAAS6kB,cAAc36B,QAAW;AAK1E,eAAK8V,SAAS6kB,YAAY;AAAA,QAC7B;AAAA,MACJ;AAAA;;WAED,SAAa,MAAA;AACF,eAAA,KAAKzI,OAAOhhB;AAAAA;MAGvB,KAAA,SAAA/S,KAAWjY,GAAG;AACV,aAAKgsC,OAAOhhB,SAAShrB;AAAAA,MACxB;AAAA;;WAED,SAAa,MAAA;AACF,eAAA,KAAKgsC,OAAOhT;AAAAA;MAGvB,KAAA,SAAA/gB,KAAWjY,GAAG;AACV,aAAKgsC,OAAOhT,SAASh5B;AAAAA,MACxB;AAAA;;WAED,SAAY,MAAA;AACD,eAAA,KAAKgsC,OAAO/S;AAAAA;MAGvB,KAAA,SAAAhhB,KAAUjY,GAAG;AACT,aAAKgsC,OAAO/S,QAAQj5B;AAAAA,MACvB;AAAA;;WAED,SAAa,MAAA;AACF,eAAA,KAAKgsC,OAAOmH;AAAAA;MAGvB,KAAA,SAAAl7B,KAAWjY,GAAG;AACV,aAAKgsC,OAAOmH,SAASnzC;AAAAA,MACxB;AAAA;;WAED,SAAa,MAAA;AACF,eAAA,KAAKgsC,OAAOoH;AAAAA;MAGvB,KAAA,SAAAn7B,KAAWjY,GAAG;AACV,aAAKgsC,OAAOoH,SAASpzC;AAAAA,MACxB;AAAA;;WAED,SAAY,MAAA;AACD,eAAA,KAAKgsC,OAAOqH;AAAAA;MAGvB,KAAA,SAAAp7B,KAAUjY,GAAG;AACT,aAAKgsC,OAAOqH,QAAQrzC;AAAAA,MACvB;AAAA;;WAED,SAAa,MAAA;AACF,eAAA,KAAKgsC,OAAOsH;AAAAA;MAGvB,KAAA,SAAAr7B,KAAWjY,GAAG;AACV,aAAKgsC,OAAOsH,SAAStzC;AAAAA,MACxB;AAAA;;WAED,SAAa,MAAA;AACF,eAAA,KAAKgsC,OAAOuH;AAAAA;MAGvB,KAAA,SAAAt7B,KAAWjY,GAAG;AACV,aAAKgsC,OAAOuH,SAASvzC;AAAAA,MACxB;AAAA;;WAED,SAAY,MAAA;AACD,eAAA,KAAKgsC,OAAOwH;AAAAA;MAGvB,KAAA,SAAAv7B,KAAUjY,GAAG;AACT,aAAKgsC,OAAOwH,QAAQxzC;AAAAA,MACvB;AAAA;;WAED,SAAe,MAAA;AACJ,eAAA,KAAKgsC,OAAOyH;AAAAA;MAGvB,KAAA,SAAAx7B,KAAajY,GAAG;AACZ,aAAKgsC,OAAOyH,WAAWzzC;AAAAA,MAC1B;AAAA;;WAED,SAAY,MAAA;AACD,eAAA,KAAKgsC,OAAO/qC;AAAAA;MAGvB,KAAA,SAAAgX,KAAUjY,GAAG;AACT,aAAKgsC,OAAO/qC,QAAQjB;AAAAA,MACvB;AAAA;;WAED,SAAc,MAAA;AACH,eAAA,KAAKgsC,OAAOhuB;AAAAA;MAGvB,KAAA,SAAA/F,KAAYjY,GAAG;AACX,aAAKgsC,OAAOhuB,UAAUhe;AAAAA,MACzB;AAAA;;WAED,SAAc,MAAA;AACH,eAAA,KAAKgsC,OAAO0H;AAAAA;MAGvB,KAAA,SAAAz7B,KAAYjY,GAAG;AACX,aAAKgsC,OAAO0H,UAAU1zC;AAAAA,MACzB;AAAA;;WAED,SAAc,MAAA;AACH,eAAA,KAAKgsC,OAAO2H;AAAAA;MAGvB,KAAA,SAAA17B,KAAYjY,GAAG;AACX,aAAKgsC,OAAO2H,UAAU3zC;AAAAA,MACzB;AAAA;;WAED,SAAc,MAAA;AACH,eAAA,KAAKgsC,OAAO4H;AAAAA;MAGvB,KAAA,SAAA37B,KAAYjY,GAAG;AACX,aAAKgsC,OAAO4H,UAAU5zC;AAAAA,MACzB;AAAA;;WAED,SAAc,MAAA;AACH,eAAA,KAAKgsC,OAAO6H;AAAAA;MAGvB,KAAA,SAAA57B,KAAYjY,GAAG;AACX,aAAKgsC,OAAO6H,UAAU7zC;AAAAA,MACzB;AAAA;;WAED,SAAY,MAAA;AACD,eAAA,KAAKgsC,OAAO0H;AAAAA;MAGvB,KAAA,SAAAz7B,KAAUjY,GAAG;AACT,YAAI,KAAK0zC,YAAY1zC,KAAK,KAAK2zC,YAAY3zC,KAAK,KAAK4zC,YAAY5zC,KAAK,KAAK6zC,YAAY7zC,GAAG;AACjF0zC,eAAAA,UAAU1zC;AACV2zC,eAAAA,UAAU3zC;AACV4zC,eAAAA,UAAU5zC;AACV6zC,eAAAA,UAAU7zC;AAAAA,QAClB;AAAA,MACJ;AAAA;;WAED,SAAe,MAAA;AACX,eAAO,KAAK0zC;AAAAA;MAGhB,KAAA,SAAAz7B,KAAajY,GAAG;AACR,YAAA,KAAK0zC,YAAY1zC,KAAK,KAAK2zC,YAAY3zC,GAAG;AACrC0zC,eAAAA,UAAU1zC;AACV2zC,eAAAA,UAAU3zC;AAAAA,QAClB;AAAA,MACJ;AAAA;;WAED,SAAkB,MAAA;AACd,eAAO,KAAK4zC;AAAAA;MAGhB,KAAA,SAAA37B,KAAgBjY,GAAG;AACX,YAAA,KAAK4zC,YAAY5zC,KAAK,KAAK6zC,YAAY7zC,GAAG;AACrC4zC,eAAAA,UAAU5zC;AACV6zC,eAAAA,UAAU7zC;AAAAA,QAClB;AAAA,MACJ;AAAA;;WAED,SAAgB,MAAA;AACZ,eAAO,KAAK0zC;AAAAA;MAGhB,KAAA,SAAAz7B,KAAcjY,GAAG;AACT,YAAA,KAAK0zC,YAAY1zC,KAAK,KAAK4zC,YAAY5zC,GAAG;AACrC0zC,eAAAA,UAAU1zC;AACV4zC,eAAAA,UAAU5zC;AAAAA,QAClB;AAAA,MACJ;AAAA;;WAED,SAAiB,MAAA;AACb,eAAO,KAAK2zC;AAAAA;MAGhB,KAAA,SAAA17B,KAAejY,GAAG;AACV,YAAA,KAAK2zC,YAAY3zC,KAAK,KAAK6zC,YAAY7zC,GAAG;AACrC2zC,eAAAA,UAAU3zC;AACV6zC,eAAAA,UAAU7zC;AAAAA,QAClB;AAAA,MACJ;AAAA;;WAED,SAAa,MAAA;AAAQ,eAAA,KAAKgsC,OAAO3d;AAAAA;MACjC,KAAA,SAAApW,KAAWjY,GAAG;AACV,aAAKgsC,OAAO3d,SAASruB;AAAAA,MACxB;AAAA;;WAED,SAAyB,MAAA;AAAQ,eAAA,KAAKgsC,OAAO8H;AAAAA;MAC7C,KAAA,SAAA77B,KAAuBjY,GAAG;AACtB,aAAKgsC,OAAO8H,qBAAqB9zC;AAAAA,MACpC;AAAA;;WAED,SAAe,MAAA;AAAQ,eAAA,KAAKgsC,OAAOjV;AAAAA;MACnC,KAAA,SAAA9e,KAAajY,GAAG;AACZ,aAAKgsC,OAAOjV,WAAW/2B;AAAAA,MAC1B;AAAA;;WAED,SAAc,MAAA;AAAQ,eAAA,KAAKgsC,OAAO+H;AAAAA;MAClC,KAAA,SAAA97B,KAAYjY,GAAG;AACX,aAAKgsC,OAAO+H,UAAU/zC;AAAAA,MACzB;AAAA;;WAED,SAAW,MAAA;AACA,eAAA,KAAK4yC;;MAGhB,KAAA,SAAA36B,KAASjY,GAAG;AACR,YAAI,CAACgD,MAAMC,QAAQjD,CAAd;AAAkBA,cAAI,CAACA,CAAD;AACtB00C,aAAAA,QAAQ10C,CAAb;AAAA,MACH;AAAA;;MAED,KAAA,SAAAiY,KAAMjY,GAAG;AACA6wC,aAAAA,OAAO7wC;AAAAA,MACf;AAAA;;WAED,SAAgB,MAAA;AACR,YAAA,CAAC,KAAK0sC,aAAa;AACdA,eAAAA,cAAc,IAAI1B,iBAAiB,MAAM,KAA3B;AAAA,QACtB;AACD,eAAO,KAAK0B;AAAAA,MACf;AAAA;;WAED,SAAgB,MAAA;AACZ,YAAI,CAAC,KAAKiI,wBAAwB;AAC9B,eAAK/H,YAAY,iDAAiD,KAAKiG,kBAAvE,CAAA;AAAA,QACH;AACD,eAAO,KAAKr2B;AAAAA,MACf;AAAA;;aAED,SAAc,cAAA;AACH,eAAA,KAAKm4B,qBAAL,KAA+B,KAAKjI,eAAgB,KAAKA,YAAY3rC,SAAS;AAAA,MACxF;AAAA;;aAED,SAAuB,uBAAA;AACnB,eAAO;AAAA,MACV;AAAA;;WAED,SAAe,MAAA;AACX,eAAO,KAAKmqC,UAAUH;;MAG1B,KAAA,SAAA9yB,KAAasE,UAAU;AACnB,aAAK2uB,UAAUjvB,MAAMM,QAArB;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,IAAIsmB,GAAG;AACH,eAAO,KAAKqI,UAAU3rC,EAAEsjC,CAAjB;AAAA,MACV;AAAA;;WAED,SAAQ,MAAA;AACJ,eAAO,KAAKjT;AAAAA,MACf;AAAA;;WAED,SAAa,MAAA;AACT,eAAO,KAAKA;AAAAA,MACf;AAAA;;WAED,SAAU,MAAA;AACN,YAAI,KAAKtO,WAAW,KAAKA,mBAAmByY,cAAc;AAC/C,iBAAA,KAAKzY,QAAQ0Y;AAAAA,QACvB,OAAM;AACH,iBAAOlgB;AAAAA,QACV;AAAA;MAGL,KAAA,SAAA7B,KAAQjY,GAAG;AACP,YAAMshB,UAAU,IAAIyY,aAAa,KAAK7Z,KAAtB;AAChBoB,gBAAQ2Y,MAAMj6B;AACTshB,aAAAA,UAAUA;AAAAA,MAClB;AAAA;;MAED,KAAA,SAAArJ,KAAOjY,GAAG;AACF,YAAA,KAAKshB,SAAS;AACd,eAAKA,QAAQuV,KAAK72B;AAClB,eAAKkkB,kBAAL;AAAA,QACH,OAAM;AACE0oB,eAAAA,YAAY,wCAAjB;AAAA,QACH;AAAA,MACJ;AAAA;;MAED,KAAA,SAAA30B,KAAOjY,GAAG;AACF,YAAA,KAAKshB,SAAS;AACd,eAAKA,QAAQwV,KAAK92B;AAClB,eAAKkkB,kBAAL;AAAA,QACH,OAAM;AACE0oB,eAAAA,YAAY,wCAAjB;AAAA,QACH;AAAA,MACJ;AAAA;;WAED,SAAW,MAAA;AACP,eAAQ,KAAKtrB,YAAY,KAAKpB,MAAM00B;AAAAA;MAGxC,KAAA,SAAA38B,KAASjY,GAAG;AACR,YAAIA,GAAG;AACH,eAAKshB,UAAU,KAAKpB,MAAM00B;AAAAA,QAC7B,OAAM;AACEtzB,eAAAA,UAAU;AAAA,QAClB;AAAA,MACJ;AAAA;;aAED,SAAoB,oBAAA;AACZ,YAAA,CAAC,KAAKA,WAAW,EAAE,KAAKA,mBAAmBiiB,cAAc;AACzD,eAAKjiB,UAAU,IAAIiiB,YAAY,KAAKrjB,KAArB;AAEX,cAAA,CAAC,KAAKoB,QAAQnY,KAAK,CAAC,KAAKmY,QAAQlY,GAAG;AAGpC,iBAAKkY,QAAQnY,IAAI,KAAKA;AACtB,iBAAKmY,QAAQlY,IAAI,KAAKA;AAAAA,UACzB;AAAA,QACJ;AACD,eAAO,KAAKkY;AAAAA,MACf;AAAA;;WAED,SAAW,MAAA;AACP,YAAI,KAAKA,WAAY,KAAKA,mBAAmBiiB,aAAc;AACvD,iBAAO,KAAKjiB;AAAAA,QACf,OAAM;AACH,iBAAO;AAAA,QACV;AAAA;MAGL,KAAA,SAAArJ,KAASjY,GAAG;AACJ,YAAA,CAAC,KAAKshB,WAAW,EAAE,KAAKA,mBAAmBiiB,cAAc;AACzD,eAAKsR,kBAAL;AAAA,QACH;AACD,YAAIhyC,QAAMiyC,SAAS90C,CAAf,GAAmB;AACnB,eAAKshB,QAAQma,OAAOz7B;AAAAA,QACvB,OAAM;AACH,eAAKshB,QAAQrF,MAAMjc,CAAnB;AAAA,QACH;AAAA,MACJ;AAAA;;MAED,KAAA,SAAAiY,KAAac,GAAG;AACZ,aAAKizB,OAAO+I,WAAWh8B;AAAAA,MAC1B;AAAA;;MAED,KAAA,SAAAd,KAAiBc,GAAG;AAChB,aAAKizB,OAAOgJ,eAAej8B;AAAAA,MAC9B;AAAA;;MAED,KAAA,SAAAd,KAAkBc,GAAG;AACjB,aAAKizB,OAAOiJ,gBAAgBl8B;AAAAA,MAC/B;AAAA;;aAED,SAAc,cAAA;AAELizB,aAAAA,OAAO5f;MACf;AAAA;;WAED,SAAa,MAAA;AACF,eAAA,KAAK4f,OAAOld;AAAAA;MAGvB,KAAA,SAAA7W,KAAWjY,GAAG;AACN6C,YAAAA,QAAME,gBAAgB/C,CAAtB,KAA4B,CAACA,EAAEyD,MAAM;AAEjC,cAAA,KAAKqrB,QAAQ;AACb,iBAAKA,OAAO7S,MAAMjc,CAAlB;AAAA,UACH;AAAA,QACJ,OAAM;AACG8uB,cAAAA,SAASiH,OAAOmf,OAAO,KAAKh1B,OAAOlgB,CAA1B;AAEf,cAAI,KAAKmsC,aAAa,KAAKH,OAAOld,QAAQ;AACtC,iBAAKkd,OAAOld,OAAOggB,cAAc,KAAK9C,MAAtC;AAAA,UACH;AAED,eAAKA,OAAOld,SAASA;AAErB,cAAI,KAAKqd,aAAa,KAAKH,OAAOld,QAAQ;AACtC,iBAAKkd,OAAOld,OAAO6f,WAAW,KAAK3C,MAAnC;AAAA,UACH;AAAA,QACJ;AAAA,MACJ;AAAA;;aAED,SAAiB,iBAAA;AACb,eAAO,CAAC,CAAC,KAAKA,OAAOliB;AAAAA,MACxB;AAAA;;WAED,SAAsB,MAAA;AAClB,eAAO,KAAKqrB;AAAAA;MAGhB,KAAA,SAAAl9B,KAAoBjY,GAAG;AACdm1C,aAAAA,MAAMn1C;AAAAA,MACd;AAAA;;WAED,SAAU,MAAA;AACN,eAAO,KAAKmvC,eAAL,KAAyB,KAAKngB,WAAWlS;AAAAA;MAGpD,KAAA,SAAA7E,KAAQjY,GAAG;AACP,aAAKgvB,WAAWlS,UAAU9c;AAAAA,MAC7B;AAAA;;WAED,SAAc,MAAA;AACV,eAAO,KAAKmvC,eAAL,KAAyB,KAAKngB,WAAWjK;AAAAA;MAGpD,KAAA,SAAA9M,KAAYjY,GAAG;AACX,aAAKgvB,WAAWjK,OAAO/kB;AAAAA,MAC1B;AAAA;;WAED,SAAsB,MAAA;AAClB,eAAO,KAAKmvC,eAAL,KAAyB,KAAKngB,WAAWsC;AAAAA;MAGpD,KAAA,SAAArZ,KAAoBjY,GAAG;AACnB,aAAKgvB,WAAWsC,kBAAkBtxB;AAAAA,MACrC;AAAA;;WAED,SAA4B,MAAA;AACxB,eAAO,KAAKmvC,eAAL,KAAyB,KAAKngB,WAAWmE;AAAAA;MAGpD,KAAA,SAAAlb,KAA0BjY,GAAG;AACzB,aAAKgvB,WAAWmE,WAAWnzB;AAAAA,MAC9B;AAAA;;aAED,SAAa,aAAA;AACT,eAAO,KAAKgvB,WAAWkJ;MAC1B;AAAA;;WAED,SAAiB,MAAA;AACN,eAAA,KAAK8T,OAAOhd;AAAAA,MACtB;AAAA;;MAED,OAAA,SAAA,MAAMnpB,UAAU;AACZ,YAAIuvC,QAAQ/xC,OAAOD,KAAKyC,QAAZ;AAEZ,iBAAS7E,IAAI,GAAGF,IAAIs0C,MAAMr0C,QAAQC,IAAIF,GAAGE,KAAK;AAC1C,cAAIkxC,OAAOkD,MAAMp0C,CAAD;AAChB,cAAMhB,IAAI6F,SAASqsC,IAAD;AAElB,cAAMmD,gBAAgBnD,KAAK/X,WAAW,CAAhB;AACtB,cAAIt3B,QAAM8pC,SAAS0I,aAAf,GAA+B;AAE/B,gBAAM54B,QAAQ,KAAK8sB,SAAS2I,IAAd;AACV,gBAAA,CAACz1B,OAAO;AACJzc,kBAAAA,MAAM8Z,QAAW;AAEjB,oBAAIlZ,IAAJ;AACA,oBAAIiC,QAAME,gBAAgB/C,CAAtB,GAA0B;AAE1BY,sBAAI,KAAKsqC,UAAUhC,WAAWlpC,CAA1B;AACJY,oBAAEqb,MAAMjc,CAAR;AAAA,gBAHJ,WAIW6C,QAAMoB,SAASjE,CAAf,GAAmB;AAC1BY,sBAAIZ;AAAAA,gBACP;AACGY,oBAAAA,EAAEgrC,WAAW;AACbhrC,oBAAEwoC,MAAM8I;AAAAA,gBACX;AAED,qBAAKhH,UAAU3rC,EAAEqB,CAAjB;AAAA,cACH;AAAA,YACJ,OAAM;AACCZ,kBAAAA,MAAM8Z,QAAW;AACb2C,oBAAAA,MAAM3T,QAAQ;AACd2T,wBAAM3T,OAAOoiC,UAAUoK,OAAO74B,KAA9B;AAAA,gBACH;AAAA,cAHL,WAIW5Z,QAAME,gBAAgB/C,CAAtB,GAA0B;AACjCyc,sBAAMR,MAAMjc,CAAZ;AAAA,cACH,WAAUA,EAAE4rC,WAAW;AAEpB5rC,kBAAEopC,MAAM8I;AACR,qBAAKhH,UAAU1B,QAAQxpC,GAAGyc,KAA1B;AAAA,cACH,OAAM;AACEmwB,qBAAAA,YAAY,gCAAgCsF,IAAjD;AAAA,cACH;AAAA,YACJ;AAAA,UACJ,OAAM;AAEHvsC,iBAAKK,oBAAoB,MAAMksC,MAAMlyC,CAArC;AAAA,UACH;AAAA,QACJ;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,YAAYu1C,SAAS;AACjB,cAAM,IAAIvuC,MAAM,KAAKtD,YAAYkC,OAAO,OAAO,KAAKitC,kBAAL,IAA2B,QAAQ0C,OAA5E;AAAA,MACT;AAAA;;MAED,OAAA,SAAA,UAAU1vC,UAAU;AACT,eAAA,KAAKqa,MAAMs1B,WAAWC,gBAAgB,MAAM5vC,QAA5C;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,WAAWmhC,UAA2B;AAAjBnhC,YAAAA,4EAAW;AACxBA,YAAAA,aAAa,MAAM;AACnB,iBAAO,KAAK6vC,eAAe1O,QAApB;AAAA,QACV,OAAM;AACH,eAAK2O,eAAe3O,UAAUnhC,QAA9B;AAEA,iBAAO;AAAA,QACV;AAAA,MACJ;AAAA;;MAED,KAAA,SAAAoS,KAAgBsd,QAAQ;AAAA,YAAA,SAAA;AACpB,YAAInyB,OAAOC,OAAOD,KAAKmyB,MAAZ;AACXnyB,aAAKsB,QAAQ,SAAAsiC,UAAY;AAAA,yBAAA,MAAA,MAAA;AACrB,eAAK4O,WAAW5O,UAAUzR,OAAOyR,QAAD,CAAhC;AAAA,QACH,EAFD,KAAA,IAAA,CAAA;AAAA,MAGH;AAAA;;MAED,KAAA,SAAA/uB,KAAWsd,QAAQ;AAAA,YAAA,SAAA;AACf,YAAInyB,OAAOC,OAAOD,KAAKmyB,MAAZ;AACXnyB,aAAKsB,QAAQ,SAAAsiC,UAAY;AAAA,yBAAA,MAAA,MAAA;AACrB,cAAIlkC,QAAQyyB,OAAOyR,QAAD;AAClB,cAAIhkC,MAAMC,QAAQH,KAAd,GAAsB;AACtB,iBAAK+yC,UAAU7O,UAAUlkC,MAAM,CAAD,GAAKA,MAAM,CAAD,CAAxC;AAAA,UACH,OAAM;AACH,iBAAK+yC,UAAU7O,UAAUlkC,KAAzB;AAAA,UACH;AAAA,QACJ,EAPD,KAAA,IAAA,CAAA;AAAA,MAQH;AAAA;;MAED,OAAA,SAAA,YAAYkkC,UAAU;AACd,YAAA,KAAK8O,cAAc;AACnB,cAAIj1C,IAAI,KAAKi1C,aAAa9O,QAAlB;AACR,cAAInmC,KAAKA,EAAEgoC,cAAc;AACrBhoC,cAAEk1C,OAAF;AAAA,UACH;AAAA,QACJ;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,eAAe/O,UAAU;AACjB,YAAA,CAAC,KAAK8O,cAAc;AACfA,eAAAA,eAAe;QACvB;AACD,YAAIj1C,IAAI,KAAKi1C,aAAa9O,QAAlB;AACJ,YAAA,CAACnmC,GAAG;AAEJA,cAAI,IAAIkmC,WAAW,KAAK7mB,MAAM81B,aAAa,KAAK91B,MAAM81B,YAAYC,2BAA2B,MAAMjP,QAA/F;AAAA,QACP,WAAUnmC,EAAEq1C,sBAAsB;AAE/Br1C,cAAI,IAAIkmC,WACJ,KAAK7mB,MAAM81B,aACXn1C,GACA,MACAmmC,QAJA;AAAA,QAMP;AACD,aAAK8O,aAAa9O,QAAlB,IAA8BnmC;AAC9B,eAAOA;AAAAA,MACV;AAAA;;aAED,SAAemmC,eAAAA,UAAUnhC,UAAU;AAC3B,YAAA,CAACA,UAAU;AACNswC,eAAAA,kBAAkBnP,QAAvB;AAAA,QACH,OAAM;AACH,cAAInkC,QAAME,gBAAgB8C,QAAtB,GAAiC;AAEjCA,uBAAW,KAAKqa,MAAM81B,YAAYI,eAAevwC,QAAtC;AAAA,UACd;AAEG,cAAA,CAAC,KAAKiwC,cAAc;AACfA,iBAAAA,eAAe;UACvB;AAED,cAAInhB,UAAU,KAAKmhB,aAAa9O,QAAlB;AACd,cAAIrS,WAAWA,QAAQkU,cAAc;AAEjClU,oBAAQ9uB,WAAWA;AACnB,mBAAO8uB;AAAAA,UACV,OAAM;AAEH,iBAAKmhB,aAAa9O,QAAlB,IAA8BnhC;AAAAA,UACjC;AAAA,QACJ;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,kBAAkBmhC,UAAU;AACpB,YAAA,KAAK8O,cAAc;AACnB,iBAAO,KAAKA,aAAa9O,QAAlB;AAAA,QACV;AAAA,MACJ;AAAA;;aAED,SAAUA,UAAAA,UAAUhnC,GAAG;AACnB,YAAIa,IAAI,KAAK60C,eAAe1O,QAApB;AACR,YAAInmC,KAAKA,EAAEgnC,cAAc;AACdhnC,iBAAAA,EAAE+mC;AAAAA,QACZ,OAAM;AACH,iBAAO5nC;AAAAA,QACV;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,UAAUgnC,UAAUhnC,GAAG6F,UAAU;AAC7B,YAAIA,UAAU;AACV,eAAK8vC,eAAe3O,UAAUnhC,QAA9B;AAAA,QACH;AACD,YAAIhF,IAAI,KAAK60C,eAAe1O,QAApB;AACRnmC,UAAEw1C,MAAMr2C,CAAR;AACA,eAAOa;AAAAA,MACV;AAAA;;WAED,SAAW,MAAA;AACA,eAAA,KAAKmrC,OAAO7gC;AAAAA;MAGvB,KAAA,SAAA8M,KAASjY,GAAG;AACR,aAAKgsC,OAAO7gC,OAAOnL;AAAAA,MACtB;AAAA;;WAED,SAAe,MAAA;AACJ,eAAA,KAAKgsC,OAAOrhC;AAAAA;MAGvB,KAAA,SAAAsN,KAAajY,GAAG;AACZ,aAAKgsC,OAAOrhC,WAAW3K;AAAAA,MAC1B;AAAA;;aAcD,SAAS,SAAA;AACL,YAAMopC,MAAM,CAAA,GAAA,OAAI,KAAK1lC,YAAYkC,IAArB,CAAZ;AACM0wC,YAAAA,OAAO,CAAA;AACbA,aAAKlN,GAAD,IAAQ;AAER,YAAA,KAAKmN,eAAe;AACpB1K,UAAAA,SAAQ2K,gBAAgBF,KAAKlN,GAAD,GAAO,KAAKsD,WAAxC;AAAA,QACH,OAAM;AACH4J,eAAKlN,GAAD,IAAJlG,eAAA,CAAA,GAAgB2I,SAAQ4K,cAAc,IAAtB,CAAhB;AAAA,QACH;AACD,eAAOH;AAAAA,MACV;AAAA;;aA15BD,SAAuBnzC,gBAAAA,KAAK+8B,QAAQ;AAChC,YAAI3jB,WAAWpZ,IAAIoZ;AACZpZ,eAAAA,IAAIoZ;AAIX,YAAIm6B,YAAY,CAAC,SAAS,WAAW,WAAW,WAAW,SAA3C;AAChB,YAAIx0C,MAAMy0C,KAAKC,UAAUzzC,KAAK,SAAU0zC,GAAG72C,GAAG;AACtC02C,cAAAA,UAAUr0C,QAAQw0C,CAAlB,MAAyB,IAAI;AACtB,mBAAA,WAAW72C,EAAE4lC,SAAS,EAAX,IAAiB;AAAA,UACtC;AACD,iBAAO5lC;AAAAA,QACV,CALS;AAMVkC,cAAMA,IAAIsnC,QAAQ,+BAA+B,MAA3C;AAEN,YAAIjtB,UAAU;AACNu6B,cAAAA,WAAW;AACf,cAAIj0C,QAAME,gBAAgBwZ,QAAtB,GAAiC;AACjC,gBAAI4tB,OAAO9mC,OAAOD,KAAKmZ,QAAZ;AACXu6B,uBAAW;AACX,qBAAS91C,IAAI,GAAGF,IAAIqpC,KAAKppC,QAAQC,IAAIF,GAAGE,KAAK;AACzC81C,sCAAiB5W,QAAT,KAAA,EAAA,OAAqBiK,KAAKnpC,CAAD,GAAjC,IAAA;AACOub,qBAAAA,SAAS4tB,KAAKnpC,CAAD,CAAL,EAAUooC;AACzB0N,0BAAYjL,SAAQkH,gBAAgBx2B,SAAS4tB,KAAKnpC,CAAD,CAAL,GAAWk/B,SAAS,IAApD,KAA6Dl/B,IAAIF,IAAI,IAAI,MAAM;AAAA,YAC9F;AACD,gBAAIi2C,UAAW70C,QAAQ;AACvBA,kBAAMA,IAAIK,OAAO,GAAGL,IAAInB,SAAS,CAA3B,KAAiCg2C,UAAU,KAAK,OAAOD,WAAW,OAAO5W,SAAS;AAAA,UAC3F,OAAM;AACH,gBAAIp/B,MAAIyb,SAASxb;AACjB+1C,uBAAW;AACN,qBAAI91C,MAAI,GAAGA,MAAIF,KAAGE,OAAK;AACxB81C,0BAAYjL,SAAQkH,gBAAgBx2B,SAASvb,GAAD,GAAKk/B,SAAS,IAA9C,KAAuDl/B,MAAIF,MAAI,IAAI,MAAM,MAAM;AAAA,YAC9F;AACDg2C,wBAAY5W,SAAS;AACrB,gBAAI6W,WAAW70C,QAAQ;AACvBA,kBAAMA,IAAIK,OAAO,GAAGL,IAAInB,SAAS,CAA3B,KAAiCg2C,WAAU,KAAK,OAAO,kBAAoB7W,SAAS4W,WAAW;AAAA,UACxG;AAAA,QAEJ;AAED,eAAO50C;AAAAA,MACV;AAAA;;MAgID,OAAA,SAAA,UAAiB80C,cAAc;AACvBC,YAAAA,SAASpL,SAAQqL,aAAanM,IAAIiM,YAAzB;AACT,YAAA,CAACC,QAAQ;AACTA,mBAAS,IAAIE,SAAS,OAAO,gBAAgBH,YAApC;AACTnL,UAAAA,SAAQqL,aAAaj/B,IAAI++B,cAAcC,MAAvC;AAAA,QACH;AACD,eAAOA;AAAAA,MACV;AAAA;;MAED,OAAA,SAAA,UAAiBD,cAAc;AACvB/wC,YAAAA,SAAS4lC,SAAQuL,aAAarM,IAAIiM,YAAzB;AACT,YAAA,CAAC/wC,QAAQ;AACTA,mBAAS,IAAIkxC,SAAS,OAAO,KAAK,SAASH,eAAe,MAAjD;AACTnL,UAAAA,SAAQuL,aAAan/B,IAAI++B,cAAc/wC,MAAvC;AAAA,QACH;AACD,eAAOA;AAAAA,MACV;AAAA;;MA0sBD,OAAA,SAAA,gBAAuB+gC,UAAU;AACtBA,eAAAA,SAASqQ,YAAT,EAAuBh1C,QAAQ,OAA/B,KAA2C;AAAA,MACrD;AAAA;;MAED,OAAA,SAAA,UAAiB2kC,UAAU;AACvB,YAAI6E,SAAQyL,gBAAgBtQ,QAAxB,GAAmC;AAC5BhoC,iBAAAA,WAAWu4C;AAAAA,QACrB,OAAM;AACIv4C,iBAAAA,WAAWw4C;AAAAA,QACrB;AAAA,MACJ;AAAA;;aAeD,SAAuBlB,gBAAAA,MAAM/5B,UAAU;AAC7B2uB,YAAAA,YAAY3uB;AAClB,iBAASvb,IAAI,GAAGyyB,IAAIyX,UAAUnqC,QAAQC,IAAIyyB,GAAGzyB,KAAK;AAC9C,cAAMwgB,UAAU0pB,UAAUuM,MAAMz2C,CAAhB;AACVooC,cAAAA,MAAS5nB,GAAAA,OAAAA,QAAQyqB,2BAAoBzqB,QAAQvB,EAApC,CAAN;AACT,cAAMy3B,aAAa,KAAKjB,cAAcj1B,OAAnB;AAEnB80B,eAAKlN,GAAD,uBAAYsO,UAAhB;AAEA,cAAIl2B,QAAQ+0B,eAAe;AACvBD,iBAAKlN,GAAD,EAAM7sB,WAAW;AAChBi6B,iBAAAA,gBACDF,KAAKlN,GAAD,EAAM7sB,UAAUiF,QAAQkrB,WADhC;AAAA,UAGH;AAAA,QACJ;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,cAAqBlrB,SAAS;AACpBm2B,YAAAA,QAAQ,CAAA;AACd,YAAMjG,OAAO,CACT,SAAS,UAAU,YAAY,gBAAgB,SAAS,YAAY,WAAW,KAAK,MAAM,eAC1F,SAAS,UAAU,UAAU,SAAS,UAAU,UAAU,OAAO,mBAAmB,mBAAmB,SACvG,UAAU,UAAU,SAAS,OAAO,WAAW,KAAK,KAAK,KAAK,UAC9D,UAAU,cAAc,cAAc,iBAJ7B;AAMb,YAAI5wC,IAAI4wC,KAAK3wC;AAEND,eAAAA,KAAK;AACR,cAAI82C,MAAMlG,KAAK5wC,CAAD;AACR+2C,cAAAA,aAAa;AACb7zC,cAAAA,aAAa;AAEnB,cAAI6zC,WAAWnV,KAAKkV,GAAhB,GAAsB;AACtBA,kBAAMA,IAAI3X,UAAU,GAAG2X,IAAI72C,MAArB;AACN42C,kBAAMC,GAAD,IAAQ,CAAC,CAACp2B,QAAQo2B,GAAD;AAAA,UAF1B,WAGW5zC,WAAW0+B,KAAKkV,GAAhB,GAAsB;AAC7BA,kBAAMA,IAAI3X,UAAU,GAAG2X,IAAI72C,SAAS,CAA9B;AACN,gBAAI,OAAOygB,QAAQo2B,GAAD,MAAU,YAAY;AACpCD,oBAAMC,GAAD,IAAQp2B,QAAQo2B,GAAD,EAAP;AAAA,YAChB;AAAA,UACJ,OAAM;AACHD,kBAAMC,GAAD,IAAQp2B,QAAQo2B,GAAD;AAAA,UACvB;AAAA,QACJ;AACD,eAAA1U,eAAAA,eAAA,CAAA,GAAWyU,KAAX,GAAqBn2B,QAAQwxB,eAAR,CAArB;AAAA,MACH;AAAA;;;AAIL1e,eAAakB,WAAWqW,OAAxB;AAEAA,UAAQrnB,UAAUonB,YAAY;AAE9BC,UAAQ5rB,KAAK;AAGb4rB,UAAQqL,eAAe,oBAAIhG;AAG3BrF,UAAQuL,eAAe,oBAAIlG,IAA3B;MC1kEqB4G;AAEH,aAAAA,gBAAA;AAAA,sBAAA,MAAAA,aAAA;AACVA,MAAAA,cAAaC,kBAAkB,IAA/B;AAAA,IACH;;;MAiCD,OAAA,SAAA,KAAKC,OAAgB;AACjB,YAAI,KAAKC,WAAWD,KAAhB,GAAwB;AAAA,mBAAA,OAAA,UAAA,QADjBlS,OACiB,IAAA,MAAA,OAAA,IAAA,OAAA,IAAA,CAAA,GAAA,OAAA,GAAA,OAAA,MAAA,QAAA;AADjBA,iBACiB,OAAA,CAAA,IAAA,UAAA,IAAA;AAAA,UAAA;AACxB,iBAAO,KAAKkS,KAAL,EAAelS,MAAAA,MAAAA,IAAf;AAAA,QACV;AAAA,MACJ;AAAA;;aAOD,SAAY,YAAA;AACD,eAAA,KAAKoS,OAAOC;AAAAA,MACtB;AAAA;;MASD,OAAA,SAAA,SAASC,WAAkD;AAAA,YAAvCC,mBAAuC,UAAA,SAAA,KAAA,UAAA,CAAA,MAAA,SAAA,UAAA,CAAA,IAApB,KAAKH,OAAOC;AACzCG,YAAAA,QAAQ,KAAKC,IAAIC,eAAeJ,SAAxB;AACRK,YAAAA,eAAe,KAAKF,IAAIC,eAAeH,gBAAxB;AACrB,YAAMrG,QAAQsG,MAAMI;AACdC,YAAAA,eAAeb,cAAac,iBAAiBH,cAAczG,KAA5C;AACb2G,eAAAA,iBAAiBL;AAAAA,MAC5B;AAAA;;MAQD,OAAA,SAAA,WAAW1yC,MAAM;AACN,eAAA,CAAC,CAAC,KAAKlC,YAAY8gB,UAAU5e,IAA3B;AAAA,MACZ;AAAA;;MAQD,OAAA,SAAA,WAAWA,MAAM;AACPizC,YAAAA,SAAS,KAAKn1C,YAAY8gB,UAAU5e,IAA3B;AACf,eAAO,CAAC,CAACizC,UAAW,OAAOA,WAAW;AAAA,MACzC;AAAA;;aAUD,SAAUT,UAAAA,WAAWtS,MAAM;AACvB,YAAMgT,aAAa,EAAE,KAAKC;AACrBC,aAAAA,cAAcF;AAEnB,YAAI,KAAKZ,OAAOC,WAAWC,WAAW;AAE9Ba,cAAAA,WAAW,KAAKV,IAAIW,UAAUd,SAAnB;AACX,cAAA,CAACa,UAAU;AAEXA,uBAAW,KAAKV,IAAIC,eAAeJ,SAAxB;AAAA,UACd;AAEKe,cAAAA,YAAY,KAAKjB;AAEvB,cAAMkB,0BAA2BH,SAASz0B,UAAU60B,WAAW,KAAKnB,OAAO1zB,UAAU60B;AACrF,cAAMC,yBAA0BL,SAASz0B,UAAU+0B,UAAU,KAAKrB,OAAO1zB,UAAU+0B;AAC/EH,cAAAA,2BAA2BE,wBAAwB;AAC7CE,gBAAAA,cAAc1B,cAAa2B,gBAAgB,KAAKvB,QAAQe,QAA1C;AACpB,gBAAMS,UAAU;AAAA,cACZT,UAAUA,SAASd;AAAAA,cACnBgB,WAAWA,UAAUhB;AAAAA,cACrBqB,aAAaA,YAAYrB;AAAAA,YAHb;AAKhB,gBAAMwB,cAAcH,YAAYd;AAEhC,gBAAIY,wBAAwB;AAClBM,kBAAAA,aAAa9B,cAAa+B,qBAAqB,KAAK3B,QAAQyB,WAA/C;AACnB,uBAAS34C,IAAI,GAAGF,IAAI84C,WAAW74C,QAAQC,IAAIF,GAAGE,KAAK;AAC/C,qBAAK84C,WAAWF,WAAW54C,CAAD,CAA1B;AACA,qBAAK+4C,UAAU,KAAK7B,QAAQpS,MAAM4T,OAAlC;AACA,oBAAMM,wBAAyB,KAAKhB,gBAAgBF;AACpD,oBAAIkB,uBAAuB;AACvB;AAAA,gBACH;AAAA,cACJ;AAAA,YACJ;AAED,gBAAIZ,yBAAyB;AACnBa,kBAAAA,cAAcnC,cAAa+B,qBAAqBZ,UAAUU,WAA5C,EAAyDO;AAC7E,uBAASl5C,KAAI,GAAGF,KAAIm5C,YAAYl5C,QAAQC,KAAIF,IAAGE,MAAK;AAChD,qBAAK84C,WAAWG,YAAYj5C,EAAD,CAA3B;AACA,qBAAKm5C,WAAW,KAAKjC,QAAQpS,MAAM4T,OAAnC;AACA,oBAAMM,yBAAyB,KAAKhB,gBAAgBF;AACpD,oBAAIkB,wBAAuB;AACvB;AAAA,gBACH;AAAA,cACJ;AAAA,YACJ;AAAA,UAEJ;AAEIF,eAAAA,WAAWb,QAAhB;AAEI,cAAA,KAAKmB,eAAe;AACpB,gBAAMV,WAAU;AAAA,cACZT,UAAUA,SAASd;AAAAA,cACnBgB,WAAWA,UAAUhB;AAAAA,YAFT;AAKhB,gBAAIrS,MAAM;AACN,mBAAKsU,cAAL,MAAA,MAAA,CAAmBV,QAAnB,EAAA,OAAA,mBAA+B5T,IAA/B,CAAA,CAAA;AAAA,YACH,OAAM;AACEsU,mBAAAA,cAAcV,QAAnB;AAAA,YACH;AAAA,UACJ;AAEG,cAAA,KAAKW,gBAAgB;AACrB,gBAAMX,YAAU;AAAA,cACZT,UAAUA,SAASd;AAAAA,cACnBgB,WAAWA,UAAUhB;AAAAA,YAFT;AAIXkC,iBAAAA,eAAeX,SAApB;AAAA,UACH;AAAA,QAEJ;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,WAAWpB,OAA2B;AAApBxS,YAAAA,wEAAO,CAAA;AAAa,YAAT4T,UAAS,UAAA,SAAA,IAAA,UAAA,CAAA,IAAA;AAClC,YAAMY,YAAY,CAAC,CAAChC,MAAM1oB;AAC1B,YAAI0oB,MAAM9zB,UAAU60B,QAAQ;AACxB,cAAI,CAACiB,aAAchC,MAAM1oB,SAASpL,UAAU60B,WAAWf,MAAM9zB,UAAU60B,QAAS;AAC5Ef,kBAAM9zB,UAAU60B,OAAOkB,MAAM,MAA7B,CAAoCb,OAApC,EAAA,OAAA,mBAAgD5T,IAAhD,CAAA,CAAA;AAAA,UACH;AAAA,QACJ;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,UAAUwS,OAA2B;AAApBxS,YAAAA,wEAAO,CAAA;AAAa,YAAT4T,UAAS,UAAA,SAAA,IAAA,UAAA,CAAA,IAAA;AACjC,YAAMY,YAAY,CAAC,CAAChC,MAAM1oB;AAC1B,YAAI0oB,MAAM9zB,UAAU+0B,OAAO;AACvB,cAAI,CAACe,aAAchC,MAAM1oB,SAASpL,UAAU+0B,UAAUjB,MAAM9zB,UAAU+0B,OAAQ;AAC1EjB,kBAAM9zB,UAAU+0B,MAAMgB,MAAM,MAA5B,CAAmCb,OAAnC,EAAA,OAAA,mBAA+C5T,IAA/C,CAAA,CAAA;AAAA,UACH;AAAA,QACJ;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,WAAWwS,OAAO;AACTJ,aAAAA,SAASI;AACd,aAAKkC,cAAclC,MAAMmC;AACpB/2C,aAAAA,cAAc40C;AAAAA,MACtB;AAAA;;aAED,SAAoB,oBAAA;AACXJ,aAAAA,SAAS;AACTsC,aAAAA,cAAc;AACdzB,aAAAA,mBAAmB;AACxB,aAAKR,MAAM,KAAKmC,YAAYnC;AACvBuB,aAAAA,WAAW,KAAKvB,IAAIC,eAAe,EAAxB,CAAhB;AACA,YAAMkB,UAAU;AAAA,UAACT,UAAU;AAAA,UAAIE,WAAWr/B;AAAAA,UAAW0/B,aAAa1/B;AAAAA,QAAlD;AAChB,aAAKqgC,WAAW,KAAKjC,QAAQ,CAA7B,GAAiCwB,OAAjC;AACKW,aAAAA,iBAAiBvgC;AAAAA,MACzB;AAAA;;MASD,OAAA,SAAA,8BAA8B6gC,aAAa;AACnCC,YAAAA,MAAM,KAAK1C;AACZ,WAAA;AACC,mBAASl3C,IAAI,GAAGF,IAAI65C,YAAY55C,QAAQC,IAAIF,GAAGE,KAAK;AAChD,gBAAM65C,aAAaF,YAAY35C,CAAD;AAC9B,gBAAI,CAAC45C,IAAIhrB,UAAU;AACf,kBAAIgrB,IAAIp2B,UAAUq2B,UAAd,GAA2B;AAC3B,uBAAOA;AAAAA,cACV;AAAA,YACJ,OAAM;AACGC,kBAAAA,QAAQC,iBAAiBC,oBAAoBJ,IAAIzC,QAAQ0C,UAAjD;AACV,kBAAA,KAAKC,KAAL,GAAa;AACb,uBAAOD;AAAAA,cACV;AAAA,YACJ;AAAA,UACJ;AACDD,gBAAMA,IAAIhrB;AAAAA,QAdd,SAeSgrB;AAAAA,MACZ;AAAA;;MAnOD,OAAA,SAAA,kBAAyB/xC,QAAQ;AAC7B,YAAMoyC,oBAAoBpyC,OAAOnF;AACjC,YAAMw3C,SAASpD,cAAa5C,OAAO+F,iBAApB;AACf53C,eAAO83C,eAAetyC,QAAQqyC,OAAO12B,SAArC;AACA3b,eAAOnF,cAAcu3C;AACrBpyC,eAAOuyC,kBAAP;AAAA,MACH;AAAA;;MAUD,OAAA,SAAA,OAAc33C,MAAM;AAChB,YAAI,CAACA,KAAK4f,eAAe,KAApB,GAA4B;AAE7B,cAAMg4B,mBAAmB,IAAIN,iBAAiBt3C,IAArB;AACzBA,eAAK80C,MAAM8C;AAAAA,QACd;AAED,eAAO53C,KAAK80C,IAAI2C;AAAAA,MACnB;AAAA;;aA6MD,SAA4B5C,qBAAAA,OAAOtG,OAAO;AAChCsJ,YAAAA,SAAS,CAAA;AACf,eAAOhD,MAAMI,UAAU1G,OAAO;AAC1BsJ,iBAAO32C,KAAK2zC,KAAZ;AACAA,kBAAQA,MAAM1oB;AAAAA,QACjB;AACD,eAAO0rB;AAAAA,MACV;AAAA;;aAED,SAAuBC,gBAAAA,QAAQC,QAAQ;AACnC,YAAMC,cAAc3D,cAAa4D,mBAAmBH,MAAhC;AACpB,YAAMI,cAAc7D,cAAa4D,mBAAmBF,MAAhC;AACpB,YAAM16C,IAAIpB,KAAKK,IAAI07C,YAAY16C,QAAQ46C,YAAY56C,MAAzC;AACL,iBAAIC,IAAI,GAAGA,IAAIF,GAAGE,KAAK;AACpBy6C,cAAAA,YAAYz6C,CAAD,MAAQ26C,YAAY36C,CAAD,GAAK;AACnC,mBAAOy6C,YAAYz6C,IAAI,CAAL;AAAA,UACrB;AAAA,QACJ;AACD,eAAOy6C,YAAY36C,IAAI,CAAL;AAAA,MACrB;AAAA;;MAED,OAAA,SAAA,mBAA0Bw3C,OAAO;AACvB7zC,YAAAA,SAAS,CAAA;AACZ,WAAA;AACCA,iBAAOE,KAAK2zC,KAAZ;AAAA,QACH,SAAOA,QAAQA,MAAM1oB;AACfnrB,eAAAA,OAAOy1C;MACjB;AAAA;;aAED,SAAwB5B,iBAAAA,OAAOtG,OAAO;AAClC,YAAIA,QAAQsG,MAAMI,SAAS;AACvB,iBAAO5+B;AAAAA,QACV;AAED,eAAMk4B,QAAQsG,MAAMI,SAAS;AACzBJ,kBAAQA,MAAM1oB;AAAAA,QACjB;AACD,eAAO0oB;AAAAA,MACV;AAAA;;;MAGCyC;AAEF,aAAAA,kBAAYt3C,MAAM;AAAA,sBAAA,MAAAs3C,iBAAA;AACTa,WAAAA,QAAQn4C;AACRo4C,WAAAA,UAAU;AAEf,WAAKzkC,KAAL;AAAA,IACH;;;WAED,SAAa,MAAA;AACT,eAAO,KAAKykC;AAAAA,MACf;AAAA;;aAED,SAAO,OAAA;AACH,aAAKA,UAAU,KAAKC;AAEpB,aAAK5C,YAAY,KAAK6C;AAEtB,aAAKC,kCAAL;AAAA,MAEH;AAAA;;aAED,SAAgB,gBAAA;AACNv4C,YAAAA,OAAO,KAAKm4C;AAElB,YAAMV,SAAM,yBAAA,OAAA;AAAA,oBAAA,oBAAA,KAAA;AAAA,cAAA,SAAA,aAAA,kBAAA;AACM,mBAAA,qBAAA;AAAA,gBAAA;AAAA,4BAAA,MAAA,kBAAA;AACV,oBAAA,OAAA,MAAA,MAASe,SAAT;AACI,gBAAA,CAAC,MAAKv4C,YAAY2f,eAAe,WAAhC,GAA8C;AACzC,oBAAA,IAAIrc,MAAJ,sBAAA,OAAgCvD,KAAKmC,MAA4BnC,uBAAAA,EAAAA,OAAAA,KAAKmC,MAA5E,GAAA,CAAA;AAAA,YACH;AAJS,mBAAA;AAAA,UAKb;AANO,iBAAA;AAAA,QAAA,EAAoCnC,IAApC;AAQZy3C,eAAOgB,YAAY;AACnBhB,eAAO12B,UAAUk2B,cAAcj3C;AAC/By3C,eAAOiB,WAAW14C;AAEb24C,aAAAA,0BAA0BlB,MAA/B;AAEA,eAAOA;AAAAA,MACV;AAAA;;MAED,OAAA,SAAA,0BAA0BA,QAAQ;AAExBn1C,YAAAA,QAAQ1C,OAAOg5C,oBAAoBvE,aAAatzB,SAAxC;AACd,iBAASxjB,IAAI,GAAGF,IAAIiF,MAAMhF,QAAQC,IAAIF,GAAGE,KAAK;AAC1C,cAAM4E,OAAOG,MAAM/E,CAAD;AACd4E,cAAAA,SAAS,eAAe;AAClB02C,gBAAAA,aAAaj5C,OAAOk5C,yBAAyBzE,aAAatzB,WAAW5e,IAAxD;AACnBvC,mBAAOm5C,eAAetB,OAAO12B,WAAW5e,MAAM02C,UAA9C;AAAA,UACH;AAAA,QACJ;AAAA,MACJ;AAAA;;aAED,SAAoC,oCAAA;AAAA,YAAA,SAAA;AAChC,YAAMG,UAAU,KAAKC;AAErBD,gBAAQ/3C,QAAQ,SAAAm0C,QAAU;AAAA,yBAAA,MAAA,MAAA;AACjB8D,eAAAA,iBAAiB9D,MAAtB;AAAA,QACH,EAFD,KAAA,IAAA,CAAA;AAAA,MAGH;AAAA;;MAKD,OAAA,SAAA,iBAAiBA,QAAQ;AAAA,YAAA,SAAA;AACf+D,YAAAA,aAAav5C,OAAOD,KAAK,KAAK81C,SAAjB;AACb2D,YAAAA,cAAc,CAAA;AACdC,YAAAA,UAAU,CAAA;AAChBF,mBAAWl4C,QAAQ,SAAC0zC,WAAWz0C,OAAU;AAAA,yBAAA,MAAA,MAAA;AACrC,cAAM20C,QAAQ,KAAKY,UAAUd,SAAf;AACRkE,cAAAA,aAAa,KAAKS,eAAezE,OAAOO,MAA3B;AACnB,cAAIyD,YAAY;AACZO,wBAAYl5C,KAAD,IAAU24C;AAGrB,gBAAMxB,QAAQC,kBAAiBC,oBAAoBsB,WAAW5lB,QAAQyhB,QAAQU,MAAhE;AACdiE,oBAAQn5C,KAAD,IAAUm3C;AAEb,gBAAA,CAAC,KAAKe,QAAQr3B,UAAUnB,eAAey3B,KAAtC,GAA8C;AAC/Cz3C,qBAAOm5C,eAAe,KAAKX,QAAQr3B,WAAWs2B,OAAOwB,UAArD;AAAA,YACH;AAAA,UACJ,OAAM;AACHO,wBAAYl5C,KAAD,IAAU;AACrBm5C,oBAAQn5C,KAAD,IAAU;AAAA,UACpB;AAAA,QACJ,EAjBD,KAAA,IAAA,CAAA;AAmBIF,YAAAA,OAAOqW;AACX+iC,oBAAYn4C,QAAQ,SAAA43C,YAAc;AAAA,yBAAA,MAAA,MAAA;AAC9B,cAAIA,YAAY;AACZ,gBAAMU,WAAW,KAAKC,mBAAmBX,UAAxB;AACjB,gBAAI74C,QAASA,SAASu5C,UAAW;AAC7Bv6C,sBAAQC,KAAR,sBAAA,OAAmCm2C,QAAa,MAAA,EAAA,OAAA,KAAK+C,MAAMh2C,MAA3D,0BAAA,CAAA;AACA;AAAA,YACH;AACDnC,mBAAOu5C;AAAAA,UACV;AAAA,QACJ,EATD,KAAA,IAAA,CAAA;AAWA,gBAAOv5C,MAAP;AAAA,UACI,KAAK;AACD,iBAAKy5C,iBAAiBrE,QAAQgE,aAAaC,OAA3C;AACA;AAAA,UACJ,KAAK;AACIK,iBAAAA,wBAAwBtE,MAA7B;AACA;AAAA,UACJ,KAAK;AACDp2C,oBAAQC,KAAK,8EAAb;AACA;AAAA,QATR;AAAA,MAWH;AAAA;;aAED,SAAe41C,eAAAA,OAAOO,QAA8B;AAAA,YAAA,SAAA;AAAA,YAAtBuE,UAAU,UAAA,SAAA,KAAA,UAAA,CAAA,MAAA,SAAA,UAAA,CAAA,IAAA,WAAA;AAAA,yBAAA,MAAA,MAAA;AAAA,iBAAM;AAAA,QAAN,EAAY,KAAA,IAAA;AAC5C35C,YAAAA,OAAO60C;AACP+E,YAAAA,WAAW/E;AAEZ,WAAA;AACOgE,cAAAA,aAAaj5C,OAAOk5C,yBAAyB94C,KAAK+gB,WAAWq0B,MAAhD;AACnB,cAAIyD,YAAY;AACZ,gBAAIc,QAAQd,UAAD,GAAc;AACrBA,yBAAW5lB,UAAU2mB;AACrB,qBAAOf;AAAAA,YACV;AAAA,UACJ;AACD74C,iBAAOJ,OAAOi6C,eAAe75C,IAAtB;AACHA,cAAAA,QAAQA,KAAK4f,eAAe,SAApB,GAAgC;AACxCg6B,uBAAW55C;AAAAA,UACd;AAAA,QACJ,SAAOA,QAAQA,KAAK+gB;AACrB,eAAO1K;AAAAA,MACV;AAAA;;MAED,OAAA,SAAA,mBAAmBwiC,YAAY;AAC3B,YAAIA,WAAWvR,OAAOuR,WAAWrkC,KAAK;AAClC,iBAAO;AAAA,QACV,OAAM;AACH,cAAI,OAAOqkC,WAAWx5C,UAAU,YAAY;AACxC,mBAAO;AAAA,UACV,OAAM;AACH,mBAAO;AAAA,UACV;AAAA,QACJ;AAAA,MACJ;AAAA;;MAcD,OAAA,SAAA,iBAAiB+1C,QAAQgE,aAAaC,SAAS;AAC3C,YAAMS,OAAO,CAET,uCACA,2BAHS;AAKb,YAAI3C,MAAMkC,QAAQ,CAAD;AACjB,YAAMU,iBAAiBzC,kBAAiB0C;AACxC,iBAASz8C,IAAI,GAAGF,IAAIg8C,QAAQ/7C,QAAQC,IAAIF,GAAGE,KAAK;AAC5C,cAAM85C,QAAQgC,QAAQ97C,CAAD;AACjB85C,cAAAA,UAAUF,KAAK;AACf,gBAAIA,KAAK;AACL,kBAAI4C,gBAAgB;AAChBD,qBAAK54C,KAAgB3D,WAAAA,OAAAA,6BAAmB45C,KAAxC,wBAAA,CAAA;AAAA,cACH,OAAM;AACH2C,qBAAK54C,KAAgB3D,WAAAA,OAAAA,6BAAmB45C,KAAxC,iCAAA,CAAA;AAAA,cACH;AAAA,YACJ,OAAM;AACH2C,mBAAK54C,KAAL,WAAA,OAAqB3D,GAArB,iBAAA,CAAA;AAAA,YACH;AAAA,UACJ;AACD45C,gBAAME;AAAAA,QACT;AACD,YAAIF,KAAK;AACL,cAAI4C,gBAAgB;AAChBD,iBAAK54C,KAAL,gBAAA,OAA0Bi2C,KAA1B,mBAAA,CAAA;AAAA,UACH,OAAM;AACH2C,iBAAK54C,KAAL,gBAAA,OAA0Bi2C,KAA1B,4BAAA,CAAA;AAAA,UACH;AAAA,QACJ,OAAM;AACH2C,eAAK54C,KAAL,GAAA;AAAA,QACH;AACD,YAAM+4C,eAAeH,KAAKpkC,KAAK,IAAV;AACf+hC,YAAAA,SAAS,IAAI/D,SAAS,CAAb,GAAiBuG,YAAjB;AAEf,YAAMpB,aAAa;AAAA,UAACx5C,OAAOo4C;AAAAA,QAAR;AACnB73C,eAAOm5C,eAAe,KAAKX,QAAQr3B,WAAWq0B,QAAQyD,UAAtD;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,wBAAwBzD,QAAQ;AAC5B,YAAM5B,SAAS,KAAK0G,iBAAiB9E,MAAtB;AACf,YAAM5yC,SAAS,KAAK23C,iBAAiB/E,MAAtB;AACf,YAAMyD,aAAa;AAAA,UACfvR,KAAKkM;AAAAA,UACLh/B,KAAKhS;AAAAA,QAFU;AAInB5C,eAAOm5C,eAAe,KAAKX,QAAQr3B,WAAWq0B,QAAQyD,UAAtD;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,iBAAiBzD,QAAQ;AAAA,YAAA,SAAA;AACf+D,YAAAA,aAAav5C,OAAOD,KAAK,KAAK81C,SAAjB;AAEb4D,YAAAA,UAAU,CAAA;AAChBF,mBAAWl4C,QAAQ,SAAC0zC,WAAWz0C,OAAU;AAAA,cAAA,SAAA;AAAA,yBAAA,MAAA,MAAA;AACrC,cAAM20C,QAAQ,KAAKY,UAAUd,SAAf;AACRkE,cAAAA,aAAa,KAAKS,eAAezE,OAAOO,QAAS,SAAAyD,aAAU;AAAA,2BAAA,MAAA,MAAA;AAAIA,mBAAAA,YAAWvR;AAAAA,UAAf,EAAjE,KAAA,IAAA,CAAA;AACA,cAAIuR,YAAY;AAIZ,gBAAMxB,SAAQC,kBAAiBC,oBAAoBsB,WAAW5lB,QAAQyhB,QAAQU,MAAhE;AACdiE,oBAAQn5C,KAAD,IAAUm3C;AAEb,gBAAA,CAAC,KAAKe,QAAQr3B,UAAUnB,eAAey3B,MAAtC,GAA8C;AAC/Cz3C,qBAAOm5C,eAAe,KAAKX,QAAQr3B,WAAWs2B,QAAOwB,UAArD;AAAA,YACH;AAAA,UACJ,OAAM;AAEHQ,oBAAQn5C,KAAD,IAAU;AAAA,UACpB;AAAA,QACJ,EAjBD,KAAA,IAAA,CAAA;AAmBA,YAAM45C,OAAO,CAET,uCACA,2BAHS;AAKb,YAAI3C,MAAMkC,QAAQ,CAAD;AACjB,iBAAS97C,IAAI,GAAGF,IAAIg8C,QAAQ/7C,QAAQC,IAAIF,GAAGE,KAAK;AAC5C,cAAM85C,QAAQgC,QAAQ97C,CAAD;AACjB85C,cAAAA,UAAUF,KAAK;AACf,gBAAIA,KAAK;AACL2C,mBAAK54C,KAAgB3D,WAAAA,OAAAA,6BAAmB45C,KAAxC,UAAA,CAAA;AAAA,YACH,OAAM;AACH2C,mBAAK54C,KAAL,WAAA,OAAqB3D,GAArB,iBAAA,CAAA;AAAA,YACH;AAAA,UACJ;AACD45C,gBAAME;AAAAA,QACT;AACD,YAAIF,KAAK;AACL2C,eAAK54C,KAAL,gBAAA,OAA0Bi2C,KAA1B,KAAA,CAAA;AAAA,QACH,OAAM;AACH2C,eAAK54C,KAAL,GAAA;AAAA,QACH;AACD,YAAM+4C,eAAeH,KAAKpkC,KAAK,IAAV;AACf+hC,YAAAA,SAAS,IAAI/D,SAAS,CAAb,GAAiBuG,YAAjB;AACf,eAAOxC;AAAAA,MACV;AAAA;;MAED,OAAA,SAAA,iBAAiBrC,QAAQ;AAAA,YAAA,SAAA;AACf+D,YAAAA,aAAav5C,OAAOD,KAAK,KAAK81C,SAAjB;AAEb4D,YAAAA,UAAU,CAAA;AAChBF,mBAAWl4C,QAAQ,SAAC0zC,WAAWz0C,OAAU;AAAA,cAAA,SAAA;AAAA,yBAAA,MAAA,MAAA;AACrC,cAAM20C,QAAQ,KAAKY,UAAUd,SAAf;AACRkE,cAAAA,aAAa,KAAKS,eAAezE,OAAOO,QAAS,SAAAyD,aAAU;AAAA,2BAAA,MAAA,MAAA;AAAIA,mBAAAA,YAAWrkC;AAAAA,UAAf,EAAjE,KAAA,IAAA,CAAA;AACA,cAAIqkC,YAAY;AAIZ,gBAAMxB,SAAQC,kBAAiBC,oBAAoBsB,WAAW5lB,QAAQyhB,QAAQU,MAAhE;AACdiE,oBAAQn5C,KAAD,IAAUm3C;AAEb,gBAAA,CAAC,KAAKe,QAAQr3B,UAAUnB,eAAey3B,MAAtC,GAA8C;AAC/Cz3C,qBAAOm5C,eAAe,KAAKX,QAAQr3B,WAAWs2B,QAAOwB,UAArD;AAAA,YACH;AAAA,UACJ,OAAM;AAEHQ,oBAAQn5C,KAAD,IAAU;AAAA,UACpB;AAAA,QACJ,EAjBD,KAAA,IAAA,CAAA;AAmBA,YAAM45C,OAAO,CAET,uCACA,2BAHS;AAKb,YAAI3C,MAAMkC,QAAQ,CAAD;AACjB,iBAAS97C,IAAI,GAAGF,IAAIg8C,QAAQ/7C,QAAQC,IAAIF,GAAGE,KAAK;AAC5C,cAAM85C,QAAQgC,QAAQ97C,CAAD;AACjB85C,cAAAA,UAAUF,KAAK;AACf,gBAAIA,KAAK;AACL2C,mBAAK54C,KAAgB3D,WAAAA,OAAAA,sBAAY45C,KAAjC,gBAAA,CAAA;AAAA,YACH,OAAM;AACH2C,mBAAK54C,KAAL,WAAA,OAAqB3D,GAArB,UAAA,CAAA;AAAA,YACH;AAAA,UACJ;AACD45C,gBAAME;AAAAA,QACT;AACD,YAAIF,KAAK;AACL2C,eAAK54C,KAAL,SAAA,OAAmBi2C,KAAnB,WAAA,CAAA;AAAA,QACH,OAAM;AACH2C,eAAK54C,KAAL,GAAA;AAAA,QACH;AACD,YAAM+4C,eAAeH,KAAKpkC,KAAK,IAAV;AACf+hC,YAAAA,SAAS,IAAI/D,SAAS,CAAC,KAAD,GAASuG,YAAtB;AACf,eAAOxC;AAAAA,MACV;AAAA;;aAMD,SAAqB,qBAAA;AAAA,YAAA,SAAA;AACX2C,YAAAA,WAAW,KAAK3E;AACtB,YAAM5jB,MAAMjyB,OAAOD,KAAKy6C,QAAZ;AACZ,YAAIpB,UAAU,oBAAIr8B;AAClBkV,YAAI5wB,QAAQ,SAAA0zC,WAAa;AAAA,cAAA,UAAA;AAAA,yBAAA,MAAA,MAAA;AACjBA,cAAAA,cAAc,IAAI;AAElB;AAAA,UACH;AACD,cAAME,QAAQuF,SAASzF,SAAD;AACtB,cAAMryC,QAAQ,KAAK+3C,qBAAqBxF,KAA1B;AACdvyC,gBAAMrB,QAAQ,SAAAkB,MAAQ;AAAA,2BAAA,MAAA,OAAA;AAClB62C,oBAAQx7B,IAAIrb,IAAZ;AAAA,UACH,EAFD,KAAA,IAAA,CAAA;AAAA,QAGH,EAVD,KAAA,IAAA,CAAA;AAWA,eAAA,mBAAW62C,OAAX;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,qBAAqBnE,OAAO;AAAA,YAAA,UAAA;AACpB70C,YAAAA,OAAO60C;AACX,YAAImE,UAAU,oBAAIr8B;AAClB,YAAM+sB,SAAS,KAAKyO,UAAUtD;AAC3B,WAAA;AACC,cAAMvyC,QAAQ,KAAKg4C,4BAA4Bt6C,IAAjC;AACdsC,gBAAMrB,QAAQ,SAAAkB,MAAQ;AAAA,2BAAA,MAAA,OAAA;AAClB62C,oBAAQx7B,IAAIrb,IAAZ;AAAA,UACH,EAFD,KAAA,IAAA,CAAA;AAIAnC,iBAAOJ,OAAOi6C,eAAe75C,IAAtB;AAAA,QACV,SAAOA,QAAQA,KAAK+gB,cAAc,CAAC/gB,KAAK4f,eAAe,SAApB,KAAkC8pB;AAEtE,eAAOsP;AAAAA,MACV;AAAA;;MAED,OAAA,SAAA,4BAA4Bh5C,MAAM;AAAA,YAAA,UAAA;AACxBk3C,YAAAA,cAAct3C,OAAOg5C,oBAAoB54C,KAAK+gB,SAAhC;AACpB,eAAOm2B,YAAYjZ,OAAO,SAAAmZ,YAAc;AAAA,yBAAA,MAAA,OAAA;AAC5BA,iBAAAA,eAAe,iBAAkB,CAACE,kBAAiBiD,oBAAoBnD,UAArC;AAAA,QAC7C,EAFD,KAAA,IAAA,CAAA;AAAA,MAGH;AAAA;;MAMD,OAAA,SAAA,eAAezC,WAAW;AACtB,YAAI,KAAKc,UAAUd,SAAf,GAA2B;AAC3B,iBAAO,KAAKc,UAAUd,SAAf;AAAA,QACV;AAGD,YAAM91C,QAAQ81C,UAAU51C,MAAM,GAAhB;AACd,eAAMF,MAAMk/B,OAAO;AACf,cAAM4W,aAAY91C,MAAM6W,KAAK,GAAX;AAClB,cAAI,KAAK+/B,UAAUd,UAAf,GAA2B;AAC3B,mBAAO,KAAKc,UAAUd,UAAf;AAAA,UACV;AAAA,QACJ;AAAA,MACJ;AAAA;;aAED,SAAe,eAAA;AACP,YAAA,CAAC,KAAKc,WAAW;AACjB,eAAKA,YAAY,KAAK+E;QACzB;AACD,eAAO,KAAK/E;AAAAA,MACf;AAAA;;aAED,SAAkB,kBAAA;AACR2E,YAAAA,WAAW,CAAA;AACZK,aAAAA,UAAU,KAAKtC,OAAO,MAAM,IAAIiC,QAArC;AACA,eAAOA;AAAAA,MACV;AAAA;;MAED,OAAA,SAAA,UAAUvF,OAAO6F,aAAav4C,MAAMi4C,UAAU;AAAA,YAAA,UAAA;AAC1CvF,cAAM8F,UAAU;AAChB9F,cAAM+F,SAASz4C;AAEf,aAAK04C,wBAAwBhG,OAAO6F,WAApC;AAEMI,YAAAA,aAAcJ,cAAcA,YAAYhG,SAAS;AACnDjG,YAAAA,QAAQqM,aAAaA,aAAa,MAAM,MAAM34C;AAClD0yC,cAAMH,SAASjG;AACfoG,cAAMI,UAAUyF,cAAcA,YAAYzF,UAAU,IAAI;AACxDJ,cAAM1oB,WAAWuuB;AACjB7F,cAAMmC,UAAUp3C,OAAOD,KAAKy6C,QAAZ,EAAsB98C;AACtC88C,iBAAS3L,IAAD,IAASoG;AAEjB,YAAMgD,SAAShD,MAAMkG;AACrB,YAAIlD,QAAQ;AACFmD,cAAAA,wBAAyBN,eAAeA,YAAYK,YAAYlD;AAClE,cAAA,CAACmD,uBAAuB;AACxB,gBAAMC,YAAYpG,MAAMkG;AACxBE,sBAAUh6C,QAAQ,SAAAi6C,UAAY;AAAA,6BAAA,MAAA,OAAA;AAC1B,kBAAMC,YAAY7D,kBAAiB8D,cAAcF,QAA/B;AACbT,mBAAAA,UAAUS,UAAUrG,OAAOsG,WAAWf,QAA3C;AAAA,YACH,EAHD,KAAA,IAAA,CAAA;AAAA,UAIH;AAAA,QACJ;AAAA,MACJ;AAAA;;aAcD,SAAwBvF,wBAAAA,OAAO6F,aAAa;AACxC,YAAIA,aAAa;AACb,cAAMW,oBAAoBX,eAAe,CAACA,YAAYvuB;AACtD,cAAIkvB,mBAAmB;AACnB,iBAAKjD,QAAQvD,MAAM+F,MAAnB,IAA6B/F;AAAAA,UAChC,OAAM;AACH6F,wBAAY7F,MAAM+F,MAAP,IAAiB/F;AAAAA,UAC/B;AAAA,QACJ;AAAA,MACJ;AAAA;;aA9RD,SAAyB,kBAAA;AACrB,YAAI,KAAKyG,qBAAqBjlC,QAAW;AAChCilC,eAAAA,mBAAmB;AACpB,cAAA;AACA,gBAAMz4C,OAAO,IAAI6wC,SAAS,iCAAb;AACb7wC;AACKy4C,iBAAAA,mBAAmB;AAAA,UAC3B,SAAO56B,GAAN;AAAA,UAAW;AAAA,QAChB;AACD,eAAO,KAAK46B;AAAAA,MACf;AAAA;;aAuJD,SAA2B7M,oBAAAA,MAAM2G,QAAQ;AAC9B,eAAA,OAAO3G,OAAOA,OAAO,MAAM,MAAM2G;AAAAA,MAC3C;AAAA;;MA2CD,OAAA,SAAA,oBAA2BgC,YAAY;AACnC,eAAQA,eAAe,YAAcA,eAAe;AAAA,MACvD;AAAA;;MAyDD,OAAA,SAAA,cAAqBvC,OAAO;AACxB,YAAM1yC,OAAO0yC,MAAM1yC;AAEnB,YAAMjC,QAAQiC,KAAKvD,QAAQ,GAAb;AACVsB,YAAAA,QAAQ,GAAG;AAEX,iBAAOiC,KAAKrD,OAAO,GAAGoB,KAAf;AAAA,QACV;AAED,eAAOiC;AAAAA,MACV;AAAA;;;MCjrBgBo5C;;;AAEL9+B,aAAAA,WAAAA,OAAOw3B,YAAY;AAAA,UAAA;AAAA,sBAAA,MAAAsH,UAAA;AAC3B,cAAA,OAAA,KAAA,MAAM9+B,KAAN;AAGK++B,YAAAA,UAAU;AAEf,UAAIp8C,QAAME,gBAAgB20C,UAAtB,GAAmC;AACnCr0C,eAAOqjC,OAAP,uBAAA,KAAA,GAAoBgR,UAApB;AAAA,MACH;AAEIwH,YAAAA,gBAAgB;AAChBC,YAAAA,gBAAgB;AAChBC,YAAAA,gBAAgB;AAEhBC,YAAAA,YAAYvlC;AAEZwlC,YAAAA,gBAAgBxlC;AAErB,YAAKylC,YAAL;AAGA,UAAMj5C,OAAO,MAAK5C,YAAY87C,gBAA9B,uBAAA,KAAA,CAAA;AACAl5C,WAAKyS,EAAQzS,uBAAAA,KAAAA,GAAAA,KAAK/G,CAAlB;AAEA,YAAKkgD,OAAL;AAxB2B,aAAA;AAAA,IAyB9B;;;aAED,SAAU,UAAA;AACN3H,qBAAaC,kBAAkB,IAA/B;AACA,aAAKsC,iBAAiB2E,WAAUx6B,UAAUk7B;AAAAA,MAC7C;AAAA;;WAED,SAAY,MAAA;AACD,eAAA,KAAKC;MACf;AAAA;;aAED,SAAkB,kBAAA;AAEV,YAAA,KAAKC,aAAa;AACbA,eAAAA,YAAYC;QACpB;AAAA,MACJ;AAAA;;aAED,SAAW,WAAA;AAEH,YAAA,KAAKD,aAAa;AACbA,eAAAA,YAAYC;QACpB;AAAA,MACJ;AAAA;;MAMD,OAAA,SAAA,eAAeC,SAASC,WAAWC,YAAY;AAAA,YAAA,SAAA;AAErC78C,YAAAA,MAAM48C;AACNE,YAAAA,OAAOD;AACb,YAAME,mBAAmBl9C,MAAMC,QAAQ68C,QAAQzB,MAAtB,IAAgCyB,QAAQzB,SAAS,CAACyB,QAAQzB,MAAT;AAJ/B,YAAA,QAAA,SAAArN,OAOlChwC,IAPkC;AAAA,cAAA,SAAA;AAQvC,cAAMm/C,WAAWD,iBAAiBl/C,EAAD;AAC3BsF,cAAAA,OAAOw5C,QAAQM,SAASN,QAAQM,SAAS,SAAC1G,SAAD;AAAA,2BAAA,MAAA,MAAA;AAAaA,mBAAAA,QAAQyG,QAAD;AAAA,UAApB,EAA/C,KAAA,IAAA;AAEA,cAAI,CAAC,OAAK98B,eAAe88B,QAApB,GAA+B;AAChC,mBAAI,mBAAA,OAAoBA,QAApB,CAAA,IAAkC,CAAC;AAAA,cAACE,OAAOl9C;AAAAA,cAAKm9C,QAAQL;AAAAA,cAAMG,QAAQ95C;AAAAA,YAAnC,CAAD;AACtCjD,mBAAOm5C,eAAe,QAAM2D,UAAU;AAAA,cAClCloC,KAAK,SAACnV,KAAAA,OAAU;AAAA,+BAAA,MAAA,MAAA;AACZ,uBAAI,UAAA,OAAWq9C,QAAX,CAAA,IAAyBr9C;AACS,oBAAA,YAAA,2BAAA,OAAwBq9C,mBAAAA,OAAAA,QAApB,CAF9B,CAAA,GAAA;AAAA,oBAAA;AAE+D,uBAAA,UAAA,EAAA,GAAA,EAAA,QAAA,UAAA,EAAA,GAAA,QAAA;AAAA,wBAAA,cAAA,MAAA,OAA/DE,oBAAAA,OAAOC,qBAAAA,QAAQF,qBAAAA;AACvBC,0BAAMC,MAAD,IAAWF,OAAO,MAAD;AAAA,kBACzB;AAAA,gBAJW,SAAA,KAAA;AAAA,4BAAA,EAAA,GAAA;AAAA,gBAAA,UAAA;AAAA,4BAAA,EAAA;AAAA,gBAAA;AAAA,cAKf,EANiC,KAAA,IAAA;AAAA,cAOlCrV,KAAK,SAAA,MAAA;AAAA,+BAAA,MAAA,MAAA;AAAM,uBAAA,OAAeoV,UAAAA,OAAAA,QAAX,CAAV;AAAA,cAAA,EAAF,KAAA,IAAA;AAAA,YAP+B,CAAtC;AAAA,UASH,OAAM;AACH,mBAAwBA,mBAAAA,OAAAA,QAApB,CAAJ,EAAoCx7C,KAAK;AAAA,cAAC07C,OAAOl9C;AAAAA,cAAKm9C,QAAQL;AAAAA,cAAMG,QAAQ95C;AAAAA,YAAnC,CAAzC;AAAA,UACH;AAAA,QAxBsC;AAO3C,iBAAStF,IAAI,GAAGA,IAAIk/C,iBAAiBn/C,QAAQC,KAAK;AAAA,gBAAzCA,CAAyC;AAAA,QAkBjD;AAAA,MACJ;AAAA;;aA2JD,SAAW,WAAA;AACH,YAAA,CAAC,KAAKk+C,eAAe;AACrB,eAAKjtC,OAAL;AAAA,QACH;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,SAAS;AAAA,MACR;AAAA;;aAED,SAAY,YAAA;AACJ,YAAA,CAAC,KAAKitC,eAAe;AACrB,eAAKqB,OAAL;AACKrB,eAAAA,gBAAgB;AAAA,QACxB;AAED,aAAKsB,QAAL;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,UAAU;AAAA,MACT;AAAA;;aAED,SAAY,YAAA;AACR,aAAKC,QAAL;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,UAAU;AAAA,MACT;AAAA;;aAED,SAAa,aAAA;AACL,YAAA,CAAC,KAAKrB,eAAe;AACrB,eAAKsB,aAAL;AACKtB,eAAAA,gBAAgB;AAAA,QACxB;AAED,aAAKpiC,QAAL;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,eAAe;AAAA,MACd;AAAA;;MAED,OAAA,SAAA,UAAU;AAAA,MACT;AAAA;;aAED,SAAc,cAAA;AACV,aAAKC,SAAL;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,WAAW;AAAA,MACV;AAAA;;aAED,SAAY,YAAA;AACJ,YAAA,CAAC,KAAKkiC,eAAe;AACrB,eAAKwB,aAAL;AACKxB,eAAAA,gBAAgB;AAAA,QACxB;AAED,aAAKyB,QAAL;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,eAAe;AAAA,MACd;AAAA;;MAED,OAAA,SAAA,UAAU;AAAA,MACT;AAAA;;aAED,SAAc,cAAA;AACV,aAAKC,UAAL;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,YAAY;AAAA,MACX;AAAA;;WAED,SAAkB,MAAA;AACP,eAAA,KAAK3gC,MAAM0/B;AAAAA,MACrB;AAAA;;aAED,SAAc,cAAA;AACV,aAAKkB,WAAL;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,aAAa;AAAA,MACZ;AAAA;;MAED,OAAA,SAAA,SAAS;AAAA,MACR;AAAA;;aAED,SAAS,SAAA;AACL,aAAKC,MAAL;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,QAAQ;AAAA,MACP;AAAA;;MAED,OAAA,SAAA,OAAOC,WAAWC,YAAY;AAAA,MAC7B;AAAA;;aAED,SAASD,SAAAA,WAAW;AAAA,MACnB;AAAA;;MAED,OAAA,SAAA,aAAan4C,QAAQm4C,WAAW;AAAA,MAC/B;AAAA;;aAED,SAAc,cAAA;AAEV,eAAO;AAAA,MACV;AAAA;;aAED,SAAkBn7C,kBAAAA,UAAU;AAAA,MAE3B;AAAA;;aAED,SAAqBA,qBAAAA,UAAU;AAAA,MAE9B;AAAA;;aAMD,SAAgB,gBAAA;AACZ,YAAIqsC,OAAO,KAAK0N,YAAYsB;AAC5B,eAAOhP,QAAQA,KAAKnxC,UAAUmxC,KAAKA,KAAKnxC,SAAS,CAAf,MAAsB;AAAA,MAC3D;AAAA;;aAED,SAAW,WAAA;AACP,YAAImxC,OAAO,KAAK0N,YAAYsB;AACrBhP,eAAAA,QAASA,KAAK7vC,QAAQ,IAAb,KAAsB;AAAA,MACzC;AAAA;;WAED,SAAc,MAAA;AACV,eAAO28C,WAAUj2C,UAAU,IAApB;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,mBAAmBtF,MAAM;AACjB7C,YAAAA,IAAI,KAAKugD;AACb,eAAOvgD,GAAG;AACN,cAAIA,EAAE8C,gBAAgBD,MAAM;AACxB,mBAAO7C;AAAAA,UACV;AACDA,cAAIA,EAAEugD;AAAAA,QACT;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,2BAA2B3/B,SAAS;AAChC,YAAI4/B,WAAW,KAAKC,kBAAkB7/B,OAAvB;AACf,eAAO4/B,YAAY,CAACA,SAASE,aAAa;AACtCF,qBAAWA,SAASt4C;AAAAA,QACvB;AACD,eAAOs4C;AAAAA,MACV;AAAA;;WAED,SAAc,MAAA;AACV,eAAO,KAAK/B;AAAAA;MAGhB,KAAA,SAAApnC,KAAYjY,GAAG;AACX,YAAI,CAAC6C,QAAME,gBAAgB/C,CAAtB,GAA0B;AACtB4sC,eAAAA,YAAY,yDAAjB;AAAA,QACH;AACIyS,aAAAA,YAAYr/C;AAAAA,MACpB;AAAA;;MAED,KAAA,SAAAiY,KAAiBjY,GAAG;AAChB,YAAI,CAAC6C,QAAME,gBAAgB/C,CAAtB,GAA0B;AACtB4sC,eAAAA,YAAY,yDAAjB;AAAA,QACH;AACG,YAAA,CAAC,KAAKyS,WAAW;AACZA,eAAAA,YAAY;QACpB;AACD,iBAASzH,OAAO53C,GAAG;AACf,cAAMoB,IAAIpB,EAAE43C,GAAD;AACPx2C,cAAAA,MAAM0Y,QAAW;AACjB,mBAAO,KAAKulC,UAAUzH,GAAf;AAAA,UACV,OAAM;AACH,iBAAKyH,UAAUzH,GAAf,IAAsB53C;AAAAA,UACzB;AAAA,QACJ;AAAA,MACJ;AAAA;;WAED,SAAkB,MAAA;AACP,eAAA,KAAKs/C,iBAAiB;;MAGjC,KAAA,SAAArnC,KAAgBjY,GAAG;AACf,aAAKs/C,gBAAgBj8C,OAAOqjC,OAAO,KAAK4Y,iBAAiB,CAAA,GAAIt/C,CAAxC;AAAA,MACxB;AAAA;;MAED,KAAA,SAAAiY,KAAqBjY,GAAG;AACpB,YAAI,CAAC6C,QAAME,gBAAgB/C,CAAtB,GAA0B;AACtB4sC,eAAAA,YAAY,yDAAjB;AAAA,QACH;AACG,YAAA,CAAC,KAAK0S,eAAe;AAChBA,eAAAA,gBAAgB;QACxB;AACD,iBAAS1H,OAAO53C,GAAG;AACf,cAAMoB,IAAIpB,EAAE43C,GAAD;AACPx2C,cAAAA,MAAM0Y,QAAW;AACjB,mBAAO,KAAKwlC,cAAc1H,GAAnB;AAAA,UACV,OAAM;AACH,iBAAK0H,cAAc1H,GAAnB,IAA0B53C;AAAAA,UAC7B;AAAA,QACJ;AAAA,MACJ;AAAA;;MAQD,OAAA,SAAA,OAAOg4C,OAAgB;AAAA,iBAAA,OAAA,UAAA,QAANlS,OAAM,IAAA,MAAA,OAAA,IAAA,OAAA,IAAA,CAAA,GAAA,OAAA,GAAA,OAAA,MAAA,QAAA;AAANA,eAAM,OAAA,CAAA,IAAA,UAAA,IAAA;AAAA,QAAA;AACnB,eAAO,KAAKyb,QAAQvJ,OAAOlS,IAApB;AAAA,MACV;AAAA;;aAED,SAAQkS,QAAAA,OAAOlS,MAAM;AACjB,YAAM0b,eAAe,KAAKC;AAC1B,YAAID,cAAc;AACV,cAAA,KAAKnC,WAAW;AAChB,gBAAIqC,YAAY,KAAKrC,UAAUrH,KAAf;AACZ0J,gBAAAA,cAAc,OAAO;AAErB;AAAA,YACH;AACD,gBAAIA,WAAW;AACPA,kBAAAA,cAAc,MAAM;AACpBA,4BAAY1J;AAAAA,cACf;AAED,kBAAIn1C,QAAMmB,WAAW09C,SAAjB,GAA6B;AAC7B,uBAAOA,UAAS,MAAI5b,QAAAA,mBAAAA,IAAb,CAAP;AAAA,cACH;AAED,kBAAI0b,aAAavJ,WAAWyJ,SAAxB,GAAoC;AAC7BF,uBAAAA,aAAaE,SAAD,QAAZF,cAAY,mBAAe1b,IAAf,CAAnB;AAAA,cACH;AAAA,YACJ;AAAA,UACJ;AAEG6b,cAAAA,aAAc,KAAKrC,iBAAiB,KAAKA,cAActH,KAAnB;AACxC,cAAI2J,YAAY;AAEZ,gBAAIA,cAAcA,eAAe,MAAM;AAEnC3J,sBAAQ2J;AAAAA,YACX;AAED,mBAAOH,aAAaD,QAAQvJ,OAAOlS,IAA5B;AAAA,UACV;AAAA,QACJ;AAAA,MACJ;AAAA;;aAED,SAA0B,0BAAA;AACf,eAAA,KAAKqb,UAAU,KAAKA,QAAQS,kBAA5B,IAAkD;AAAA,MAC5D;AAAA;;aAED,SAAoB,oBAAA;AACZ,YAAA,KAAKC,cAAc;AACZ,iBAAA,KAAKV,UAAU,KAAKA,QAAQS,kBAA5B,IAAkD;AAAA,QAC5D;AACD,eAAO;AAAA,MACV;AAAA;;WAED,SAAmB,MAAA;AACf,eAAO;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,cAAch8C,MAAe;AACzB,YAAI,CAACA,KAAKk8C,WAAW,GAAhB,GAAsB;AACvB,gBAAM,IAAI96C,MAAM,sDAAV;AAAA,QACT;AAED,YAAM8B,SAAS,KAAK24C;AACpB,YAAI34C,QAAQ;AAAA,mBAAA,QAAA,UAAA,QANOg9B,OAMP,IAAA,MAAA,QAAA,IAAA,QAAA,IAAA,CAAA,GAAA,QAAA,GAAA,QAAA,OAAA,SAAA;AANOA,iBAMP,QAAA,CAAA,IAAA,UAAA,KAAA;AAAA,UAAA;AACR,iBAAOh9B,OAAOi5C,iBAAiBn8C,MAAMkgC,IAA9B;AAAA,QACV;AAAA,MACJ;AAAA;;aAED,SAAiBlgC,iBAAAA,MAAMkgC,MAAM;AACzB,YAAI,KAAKmS,WAAWryC,IAAhB,GAAuB;AACvB,iBAAO,KAAKo8C,KAAL,MAAA,MAAA,CAAUp8C,IAAV,EAAA,OAAA,mBAAmBkgC,IAAnB,CAAP,CAAA;AAAA,QACH,OAAM;AACH,cAAM0b,eAAe,KAAKC;AAC1B,cAAID,cAAc;AACd,mBAAOA,aAAaO,iBAAiBn8C,MAAMkgC,IAApC;AAAA,UACV;AAAA,QACJ;AAAA,MACJ;AAAA;;MAvdD,OAAA,SAAA,SAAgBlgC,MAAmB;AAAbU,YAAAA,wEAAO;AAClB,eAAA;AAAA,UAAC27C,mBAAmB;AAAA,UAAM5D,QAAQz4C;AAAAA,UAAMw6C,QAAQ95C;AAAAA,QAAhD;AAAA,MACV;AAAA;;MAiCD,OAAA,SAAA,gBAAuBwe,KAAK;AAElBlf,YAAAA,OAAO;AAGPs8C,YAAAA,UAAU,UAAUt8C;AAC1B,YAAI,KAAKs8C,OAAL,MAAkB,MAAM;AACnBA,eAAAA,OAAL,IAAgB;AACXt8C,eAAAA,IAAL,IAAa,KAAKu8C,cAAc,KAAKC,UAAUt9B,GAAf,CAAnB;AAAA,QAChB;AACM,eAAA,KAAKlf,IAAL;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,cAAqBzC,KAAK;AACtB,YAAMu2C,UAAU;AAAA,UACZ2I,KAAK,CADO;AAAA,UAEZC,OAAO,CAFK;AAAA,UAGZC,KAAK;AAAA,QAHO;AAMhB,aAAKC,iBAAiBr/C,KAAKu2C,SAAS,SAApC;AAEM6D,YAAAA,OAAO7D,QAAQ2I,IAAIlpC,KAAK,KAAjB;AACPJ,YAAAA,IAAI,IAAIo+B,SAAS,WAAW,SAASoG,IAAjC;AACH,eAAA;AAAA,UAACxkC;AAAAA,UAAMxZ,GAAGm6C,QAAQ4I;AAAAA,QAAlB;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,iBAAwBn/C,KAAKu2C,SAAS+I,QAAQ;AAAA,YAAA,SAAA;AAC1C,YAAMH,QAAQ5I,QAAQ4I;AACtB,YAAMD,MAAM3I,QAAQ2I;AACpB,YAAMj/C,OAAOC,OAAOD,KAAKD,GAAZ;AACbC,aAAKsB,QAAQ,SAAAkzC,KAAO;AAAA,yBAAA,MAAA,MAAA;AAChB,cAAI90C,QAAQK,IAAIy0C,GAAD;AACX/0C,cAAAA,QAAM8pC,SAASiL,IAAIzd,WAAW,CAAf,CAAf,GAAmC;AAEnC,gBAAIt3B,QAAME,gBAAgBD,KAAtB,GAA8B;AAE9B,kBAAM4/C,cAAW,IAAA,OAAO9K,IAAIpO,QAAQ,eAAe,EAA3B,IAAiCkQ,QAAQ6I,GAAhD;AACb9+C,kBAAAA,OAAOX,MAAMW,OAAOX,MAAMW,OAAOooC;AACjCpoC,kBAAAA,SAASooC,SAAS;AAClBwW,oBAAI19C,KAAJ,OAAA,OAAgB+9C,aAAhB,kCAAA,CAAA;AAAA,cACH,OAAM;AACHJ,sBAAM39C,KAAKlB,IAAX;AACA4+C,oBAAI19C,KAAJ,OAAA,OAAgB+9C,aAAhB,eAAA,EAAA,OAA2CJ,MAAMvhD,SAAS,GAA1D,IAAA,EAAA,OAAgE0hD,QAAhE,SAAA,CAAA;AAAA,cACH;AACDJ,kBAAI19C,KAAQ+9C,GAAAA,OAAAA,gCAAsB9K,KAAlC,GAAA,CAAA;AACA8B,sBAAQ6I;AAGR,mBAAKC,iBAAiB1/C,OAAO42C,SAASgJ,WAAtC;AAEAL,kBAAI19C,KAAQ89C,GAAAA,OAAAA,kCAAwBC,aAApC,GAAA,CAAA;AAAA,YAhBJ,WAiBW7/C,QAAMoB,SAASnB,KAAf,GAAuB;AAE9Bw/C,oBAAM39C,KAAK7B,KAAX;AACAu/C,kBAAI19C,KAAQ89C,GAAAA,OAAAA,wCAA8BH,MAAMvhD,SAAS,GAAzD,IAAA,CAAA;AAAA,YACH;AAAA,UACJ,OAAM;AACC62C,gBAAAA,QAAQ,QAAQ;AAChB,kBAAM+K,UAAUF,SAAS;AACzBJ,kBAAI19C,KAAYg+C,OAAAA,OAAAA,uBAAaF,QAA7B,sBAAA,CAAA;AACA,kBAAI3/C,MAAMm/C,sBAAsB,MAAM;AAElCK,sBAAM39C,KAAK7B,KAAX;AACAu/C,oBAAI19C,KAAJ,gCAAA,OAAyC29C,MAAMvhD,SAAS,GAAxD,KAAA,EAAA,OAA+D0hD,QAA/D,KAAA,EAAA,OAA2E7K,KAA3E,IAAA,CAAA;AAAA,cACH,OAAM;AACH,qBAAKgL,qBAAqB9/C,OAAO42C,SAASiJ,OAA1C;AAAA,cACH;AAAA,YACJ,WAAU/K,QAAQ,YAAY/0C,QAAME,gBAAgBD,KAAtB,GAA8B;AACnD+/C,kBAAAA,eAAkBJ,GAAAA,OAAAA,QAAxB,YAAA;AACAH,oBAAM39C,KAAK7B,KAAX;AACAu/C,kBAAI19C,KAAJ,GAAA,OAAY89C,QAAZ,IAAA,EAAA,OAAuB7K,KAAvB,aAAA,EAAA,OAAwC0K,MAAMvhD,SAAS,GAAvD,GAAA,CAAA;AACA,mBAAK+hD,sBAAsBhgD,OAAO42C,SAASmJ,YAA3C;AAAA,YACH,WAAUjL,QAAQ,aAAa/0C,QAAME,gBAAgBD,KAAtB,GAA8B;AAC1D,kBAAM6/C,WAAUF,SAAS;AACzB,kBAAMh/C,QAAOX,MAAMW;AACnB,kBAAIA,OAAM;AACN6+C,sBAAM39C,KAAKlB,KAAX;AACA4+C,oBAAI19C,KAAJ,OAAA,OAAgBg+C,UAAhB,eAAA,EAAA,OAAuCL,MAAMvhD,SAAS,GAAtD,IAAA,EAAA,OAA4D0hD,QAA5D,SAAA,CAAA;AACA,qBAAKG,qBAAqB9/C,OAAO42C,SAASiJ,QAA1C;AACAN,oBAAI19C,KAAJ,GAAA,OAAY89C,QAAW7K,IAAAA,EAAAA,OAAAA,qBAAW+K,QAAlC,CAAA;AAAA,cACH,OAAM;AACHN,oBAAI19C,KAAQg+C,GAAAA,OAAAA,wBAAaF,QAAzB,UAAA,CAAA;AACA,qBAAKG,qBAAqB9/C,OAAO42C,SAASiJ,QAA1C;AAAA,cACH;AAAA,YACJ,WAAU9/C,QAAME,gBAAgBD,KAAtB,KAAgCA,MAAMm/C,sBAAsB,MAAM;AACzEK,oBAAM39C,KAAK7B,KAAX;AACAu/C,kBAAI19C,KAAJ,gCAAA,OAAyC29C,MAAMvhD,SAAS,GAAxD,KAAA,EAAA,OAA+D0hD,QAA/D,KAAA,EAAA,OAA2E7K,KAA3E,IAAA,CAAA;AAAA,YACH,OAAM;AAEH,kBAAI/0C,QAAMkgD,SAASjgD,KAAf,GAAuB;AACvBu/C,oBAAI19C,KAAJ,GAAA,OAAY89C,QAAW7K,IAAAA,EAAAA,OAAAA,qBAAW90C,KAAlC,CAAA;AAAA,cADJ,WAEWD,QAAMyjC,UAAUxjC,KAAhB,GAAwB;AAC/Bu/C,oBAAI19C,KAAJ,GAAA,OAAY89C,QAAZ,IAAA,EAAA,OAAuB7K,KAAvB,OAAA,EAAA,OAAkC90C,QAAQ,SAAS,OAAnD,CAAA;AAAA,cACH,WAAUD,QAAMoB,SAASnB,KAAf,KAAyBE,MAAMC,QAAQH,KAAd,GAAsB;AAGtDw/C,sBAAM39C,KAAK7B,KAAX;AACAu/C,oBAAI19C,KAAJ,GAAA,OAAY89C,QAAZ,IAAA,EAAA,OAAuB7K,KAAvB,aAAA,EAAA,OAAwC0K,MAAMvhD,SAAS,GAAvD,GAAA,CAAA;AAAA,cACH,OAAM;AAEHshD,oBAAI19C,KAAJ,GAAA,OAAY89C,QAAZ,IAAA,EAAA,OAAuB7K,KAAvB,OAAA,EAAA,OAAkCjB,KAAKC,UAAU9zC,KAAf,CAAlC,CAAA;AAAA,cACH;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ,EA1ED,KAAA,IAAA,CAAA;AAAA,MA2EH;AAAA;;MAED,OAAA,SAAA,qBAA4BK,KAAKu2C,SAAS+I,QAAQ;AAAA,YAAA,SAAA;AAC9C,YAAMH,QAAQ5I,QAAQ4I;AACtB,YAAMD,MAAM3I,QAAQ2I;AACpB,YAAMj/C,OAAOC,OAAOD,KAAKD,GAAZ;AACbC,aAAKsB,QAAQ,SAAAkzC,KAAO;AAAA,yBAAA,MAAA,MAAA;AACZA,cAAAA,QAAQ,QAAQ;AAChB,gBAAM90C,QAAQK,IAAIy0C,GAAD;AACjB,gBAAI/0C,QAAMkgD,SAASjgD,KAAf,GAAuB;AACvBu/C,kBAAI19C,KAAJ,GAAA,OAAY89C,QAAW7K,IAAAA,EAAAA,OAAAA,qBAAW90C,KAAlC,CAAA;AAAA,YADJ,WAEWD,QAAMyjC,UAAUxjC,KAAhB,GAAwB;AAC/Bu/C,kBAAI19C,KAAJ,GAAA,OAAY89C,QAAZ,IAAA,EAAA,OAAuB7K,KAAvB,OAAA,EAAA,OAAkC90C,QAAQ,SAAS,OAAnD,CAAA;AAAA,YACH,WAAUD,QAAMoB,SAASnB,KAAf,KAAyBA,MAAMm/C,sBAAsB,MAAM;AAClEK,oBAAM39C,KAAK7B,KAAX;AACAu/C,kBAAI19C,KAAJ,gCAAA,OAAyC29C,MAAMvhD,SAAS,GAAxD,KAAA,EAAA,OAA+D0hD,QAA/D,KAAA,EAAA,OAA2E7K,KAA3E,IAAA,CAAA;AAAA,YACH,WAAU/0C,QAAMoB,SAASnB,KAAf,KAAyBE,MAAMC,QAAQH,KAAd,GAAsB;AAGtDw/C,oBAAM39C,KAAK7B,KAAX;AACAu/C,kBAAI19C,KAAJ,GAAA,OAAY89C,QAAZ,IAAA,EAAA,OAAuB7K,KAAvB,aAAA,EAAA,OAAwC0K,MAAMvhD,SAAS,GAAvD,GAAA,CAAA;AAAA,YACH,OAAM;AAEHshD,kBAAI19C,KAAJ,GAAA,OAAY89C,QAAZ,IAAA,EAAA,OAAuB7K,KAAvB,OAAA,EAAA,OAAkCjB,KAAKC,UAAU9zC,KAAf,CAAlC,CAAA;AAAA,YACH;AAAA,UACJ;AAAA,QACJ,EApBD,KAAA,IAAA,CAAA;AAAA,MAqBH;AAAA;;MAED,OAAA,SAAA,sBAA6BK,KAAKu2C,SAAS+I,QAAQ;AAAA,YAAA,SAAA;AAC/C,YAAMH,QAAQ5I,QAAQ4I;AACtB,YAAMD,MAAM3I,QAAQ2I;AACpB,YAAMj/C,OAAOC,OAAOD,KAAKD,GAAZ;AACbC,aAAKsB,QAAQ,SAAAkzC,KAAO;AAAA,yBAAA,MAAA,MAAA;AACZA,cAAAA,QAAQ,QAAQ;AAChB,gBAAM90C,QAAQK,IAAIy0C,GAAD;AACb/0C,gBAAAA,QAAME,gBAAgBD,KAAtB,KAAgCA,MAAMm/C,sBAAsB,MAAM;AAClEK,oBAAM39C,KAAK7B,KAAX;AACAu/C,kBAAI19C,KAAJ,gCAAA,OAAyC29C,MAAMvhD,SAAS,GAAxD,KAAA,EAAA,OAA+D0hD,QAA/D,KAAA,EAAA,OAA2E7K,KAA3E,IAAA,CAAA;AAAA,YACH;AAAA,UACJ;AAAA,QACJ,EARD,KAAA,IAAA,CAAA;AAAA,MASH;AAAA;;aAqHD,SAAmB,YAAA;AACf,eAAO;MACV;AAAA;;aA2KD,SAA4BoL,qBAAAA,MAAMxhC,SAAS;AACvC,YAAIA,QAAQ+0B,eAAe;AACvB,cAAMrL,YAAY1pB,QAAQkrB;AAC1B,mBAAS1rC,IAAI,GAAGF,IAAIoqC,UAAUnqC,QAAQC,IAAIF,GAAGE,KAAK;AAC9C,gBAAMyb,QAAQyuB,UAAUuM,MAAMz2C,CAAhB;AACVyb,gBAAAA,MAAM6kC,aAAa;AACnB0B,mBAAKr+C,KAAK8X,KAAV;AAAA,YACH,OAAM;AACHuiC,cAAAA,WAAUiE,qBAAqBD,MAAMvmC,KAArC;AAAA,YACH;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,aAAoB+E,SAAS;AACrB1Y,YAAAA,SAAS0Y;AACb,eAAO1Y,UAAU,CAACA,OAAOw4C,aAAa;AAClCx4C,mBAASA,OAAOA;AAAAA,QACnB;AACD,eAAOA;AAAAA,MACV;AAAA;;MAED,OAAA,SAAA,UAAiB0Y,SAAS;AACtB,eAAOw9B,WAAUkE,aAAa1hC,QAAQ1Y,MAA/B;AAAA,MACV;AAAA;;IAriBkC+iC;AAwiBvCmT,YAAUx6B,UAAU88B,cAAc;MC/iBb6B;AAEjB,aAAAA,cAAYr+B,KAAK;AAAA,sBAAA,MAAAq+B,aAAA;AAERr+B,WAAAA,MAAMA;AAENs+B,WAAAA,eAAe;AAEfC,WAAAA,eAAe;IACvB;;;WAED,SAAa,MAAA;AACF,eAAA,KAAKD,aAAariD;AAAAA,MAC5B;AAAA;;aAED,SAAQ,QAAA;AACCqiD,aAAAA,eAAe;AACfC,aAAAA,eAAe;AACfC,aAAAA,aAAa;AAAA,MACrB;AAAA;;MAED,OAAA,SAAA,WAAW3/C,OAAO;AACd,eAAO,KAAK0/C,aAAa1/C,KAAlB,EAAyBihB;AAAAA,MACnC;AAAA;;MAED,OAAA,SAAA,eAAejhB,OAAO;AAClB,eAAO,KAAK0/C,aAAa1/C,KAAlB;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,WAAWA,OAAO;AACd,eAAO,KAAKy/C,aAAaz/C,KAAlB;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,gBAAgBA,OAAO;AACnB,YAAImiB,gBAAgB,KAAKs9B,aAAaz/C,KAAlB;AAChBmiB,YAAAA,cAAc3c,GAAG;AAEV2c,iBAAAA,cAAc3c;AAAAA,QACxB,OAAM;AACH,iBAAO,KAAKk6C,aAAa1/C,KAAlB,EAAyB8jB,wBAAwBte;AAAAA,QAC3D;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,iBAAiBxF,OAAO;AACpB,YAAImiB,gBAAgB,KAAKs9B,aAAaz/C,KAAlB;AAChBmiB,YAAAA,cAAc1c,GAAG;AAEV0c,iBAAAA,cAAc1c;AAAAA,QACxB,OAAM;AACH,iBAAO,KAAKi6C,aAAa1/C,KAAlB,EAAyB8jB,wBAAwBre;AAAAA,QAC3D;AAAA,MACJ;AAAA;;;MCjDgBm6C;;;AAEjB,aAAAA,mBAAYz+B,KAAK;AAAA,UAAA;AAAA,sBAAA,MAAAy+B,kBAAA;AACb,cAAA,OAAA,KAAA,MAAMz+B,GAAN;AAIM0+B,UAAAA,WAAW1+B,IAAI5E,MAAM2P,UAAU,cAApB;AAEZyzB,YAAAA,aAAa;AAElB,YAAKG,OAAO,IAAIC,YAAYF,QAAhB;AACZ,YAAKG,SAAS,IAAIC,aAAa,MAAKH,IAAtB;AACd,YAAKI,QAAQ,IAAIC,YAAY,MAAKL,IAArB;AAXA,aAAA;AAAA,IAYhB;;;MAED,OAAA,SAAA,yBAAyB9/C,OAAO;AAErBA,eAAAA,QAAQ;AAAA,MAClB;AAAA;;aAED,SAAkB,kBAAA;AAEVggD,YAAAA,SAAS,KAAKA;AACdE,YAAAA,QAAQ,KAAKA;AACbp8C,YAAAA,QAAQ,CAAA;AACZ,iBAASzG,IAAI,GAAGA,KAAK,KAAKD,QAAQC,KAAK;AACnC,cAAIkB,MAAM,WAAWlB,IAAI;AACpB,mBAAIyyB,IAAI,GAAGA,IAAI,GAAGA,KAAK;AACpBn0B,gBAAAA,IAAI0B,IAAI,KAAKyyB,IAAI;AACrBvxB,mBAAOyhD,OAAOrkD,CAAD,IAAM,MAAMqkD,OAAOrkD,IAAE,CAAH,IAAQ,MAAMqkD,OAAOrkD,IAAE,CAAH,IAAQ,MAAMqkD,OAAOrkD,IAAE,CAAH,IAAQ,MAAMukD,MAAMvkD,IAAE,CAAH,EAAMsmC,SAAS,EAApB,IAA0B;AAAA,UAClH;AACDn+B,gBAAM9C,KAAKzC,GAAX;AAAA,QACH;AAED,eAAOuF;AAAAA,MACV;AAAA;;IApC0C07C;MCD1BY;AAELj/B,aAAAA,mBAAAA,KAAKgK,QAAQk1B,aAAa7xB,mBAAmB8xB,SAAStgD,OAAO;AAAA,sBAAA,MAAAogD,kBAAA;AAEhEj/B,WAAAA,MAAMA;AACNgK,WAAAA,SAASA;AACTk1B,WAAAA,cAAcA;AACd7xB,WAAAA,oBAAoBA;AACpB8xB,WAAAA,UAAUA;AACVtgD,WAAAA,QAAQA;AACR5C,WAAAA,SAAS;AAAA,IAEjB;;;WAED,SAAY,MAAA;AACR,eAAO,KAAK+jB,IAAI+C,YAAYq8B;AAAAA,MAC/B;AAAA;;MAED,OAAA,SAAA,WAAWvgD,OAAO;AACP,eAAA,KAAKugD,MAAMC,WAAW,KAAKxgD,QAAQA,KAAnC;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,eAAeA,OAAO;AACX,eAAA,KAAKugD,MAAME,eAAe,KAAKzgD,QAAQA,KAAvC;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,WAAWA,OAAO;AACP,eAAA,KAAKugD,MAAMG,WAAW,KAAK1gD,QAAQA,KAAnC;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,gBAAgBA,OAAO;AACnB,eAAO,KAAK0gD,WAAW1gD,KAAhB,EAAuB2gD;AAAAA,MACjC;AAAA;;MAED,OAAA,SAAA,iBAAiB3gD,OAAO;AACpB,eAAO,KAAK0gD,WAAW1gD,KAAhB,EAAuB4gD;AAAAA,MACjC;AAAA;;MAED,OAAA,SAAA,gBAAgB5gD,OAAO;AACZ,eAAA,KAAKugD,MAAMM,gBAAgB,KAAK7gD,QAAQA,KAAxC;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,iBAAiBA,OAAO;AACb,eAAA,KAAKugD,MAAMO,iBAAiB,KAAK9gD,QAAQA,KAAzC;AAAA,MACV;AAAA;;aAED,SAAiB,iBAAA;AACT,YAAA,KAAKwuB,mBAAmB;AACjB,iBAAA,KAAKA,kBAAkBhpB;AAAAA,QACjC,OAAM;AACH,iBAAO,KAAK2b,IAAI5E,MAAM/W;AAAAA,QACzB;AAAA,MACJ;AAAA;;aAED,SAAkB,kBAAA;AACV,YAAA,KAAKgpB,mBAAmB;AACjB,iBAAA,KAAKA,kBAAkB/oB;AAAAA,QACjC,OAAM;AACH,iBAAO,KAAK0b,IAAI5E,MAAM9W;AAAAA,QACzB;AAAA,MACJ;AAAA;;;MC3DgBs7C;;;AAEL5/B,aAAAA,wBAAAA,KAAKgK,QAAQk1B,aAAa7xB,mBAAmB8xB,SAAStgD,OAAO;AAAA,UAAA;AAAA,sBAAA,MAAA+gD,uBAAA;AAC/D5/B,cAAAA,OAAAA,KAAAA,MAAAA,KAAKgK,QAAQk1B,aAAa7xB,mBAAmB8xB,SAAStgD,KAA5D;AAEKghD,YAAAA,6BAA6B;AAHmC,aAAA;AAAA,IAIxE;;;MAED,OAAA,SAAA,yBAAyBhhD,OAAO;AAErB,eAAA,KAAKugD,MAAMU,yBAAyB,KAAKjhD,QAAQA,KAAjD;AAAA,MACV;AAAA;;aAQD,SAA6BkG,6BAAAA,GAAGC,GAAG;AAC3B+6C,YAAAA,SAAS,KAAKb,YAAYc,uBAAuBj7C,GAAGC,CAA3C;AACb+6C,eAAO,CAAD,KAAO,KAAKjrB,eAAL;AACbirB,eAAO,CAAD,KAAO,KAAKhrB,gBAAL;AACbgrB,eAAO,CAAD,IAAMA,OAAO,CAAD,IAAM,IAAI;AAC5BA,eAAO,CAAD,IAAM,IAAIA,OAAO,CAAD,IAAM;AAC5B,eAAOA;AAAAA,MACV;AAAA;;aAED,SAAgB,gBAAA;AACZ,YAAI,KAAK1yB,sBAAsB,MAAM;AACjC,iBAAO,KAAKrN,IAAIigC,WAAWC;AAAAA,QAC9B,OAAM;AACH,iBAAO,KAAK7yB,kBAAkBrM,cAAcm/B;AAAAA,QAC/C;AAAA,MACJ;AAAA;;IAlC+ClB;MCD/BmB;AAEjB,aAAAA,oBAAYpgC,KAAK;AAAA,sBAAA,MAAAogC,mBAAA;AACRpgC,WAAAA,MAAMA;AAEX,WAAK+C,cAAc/C,IAAI+C;AAEvB,WAAKme,KAAK,KAAKlhB,IAAI5E,MAAM8lB;AAAAA,IAC5B;;;aAED,SAAU,UAAA;AACDlhB,aAAAA,MAAM;AACN+C,aAAAA,cAAc;AACdme,aAAAA,KAAK;AAEV,eAAO,KAAKlhB;AACZ,eAAO,KAAK+C;AACZ,eAAO,KAAKme;AAAAA,MACf;AAAA;;aAED,SAAS,SAAA;AACAmf,aAAAA,mBAAmB,IAAxB;AACKC,aAAAA,YAAY,IAAjB;AACA,aAAKC,oBAAL;AAAA,MACH;AAAA;;aAED,SAAU,UAAA;AACN,aAAKC,OAAL;AAEA,YAAIC,OAAO,KAAK19B,YAAY29B;AAExBxkD,YAAAA,IAAI,GAAUF,IAAIykD,KAAKxkD;AACpBC,eAAAA,IAAIF,GAAG;AACV,eAAK2kD,sBAAsBF,KAAKvkD,CAAD,CAA/B;AACAA;AAAAA,QACH;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,sBAAsB0kD,eAAe;AAC7BA,YAAAA,cAAcvzB,qBAAqBuzB,cAAcvzB,kBAAkBK,QAAQ;AAE3E;AAAA,QACH;AAEImzB,aAAAA,oBAAoBD,aAAzB;AACKE,aAAAA,mBAAmBF,aAAxB;AAAA,MAEH;AAAA;;aAED,SAAoBA,oBAAAA,eAAe;AAAA,MAClC;AAAA;;MAED,OAAA,SAAA,mBAAmBG,IAAI;AAEnB,YAAI//B,gBAAgB+/B,GAAG1zB,oBAAoB0zB,GAAG1zB,kBAAkBrM,gBAAgB;AAEhF,YAAI,KAAKb,mBAAmBa,eAAe;AAClCq/B,eAAAA,mBAAmBr/B,aAAxB;AAAA,QACH;AAEG+/B,YAAAA,GAAG1zB,qBAAqB,CAAC0zB,GAAG1zB,kBAAkBI,SAAS;AAClD6yB,eAAAA,YAAY,IAAjB;AACA,eAAKC,oBAAL;AACAQ,aAAG1zB,kBAAkBI,UAAU;AAC/B,eAAK6yB,YAAYS,GAAG5B,OAApB;AAAA,QACH,OAAM;AACH,eAAKmB,YAAYS,GAAG5B,OAApB;AAAA,QACH;AAEI6B,aAAAA,qBAAqBD,EAA1B;AAAA,MACH;AAAA;;aAED,SAAqBA,qBAAAA,IAAI;AAAA,MACxB;AAAA;;MAED,OAAA,SAAA,mBAAmBE,eAAe;AACzB9gC,aAAAA,iBAAiB8gC;AAAAA,MACzB;AAAA;;aAED,SAAoBA,oBAAAA,eAAe;AAAA,MAClC;AAAA;;aAED,SAAY90B,YAAAA,MAAM;AAAA,MACjB;AAAA;;;MClFgB+0B;;;AAEjB,aAAAA,yBAAYlhC,KAAK;AAAA,UAAA;AAAA,sBAAA,MAAAkhC,wBAAA;AACb,cAAA,OAAA,KAAA,MAAMlhC,GAAN;AAEA,YAAKkhB,KAAK,MAAKlhB,IAAI5E,MAAM8lB;AAEzB,YAAK5uB,KAAL;AALa,aAAA;AAAA,IAMhB;;;aAED,SAAO,OAAA;AACC4uB,YAAAA,KAAK,KAAKA;AAGd,aAAKigB,iBAAiBjgB,GAAGkgB;AAEzB,YAAIC,WAAWzmD,KAAKC,MAAM,KAAKkoB,YAAYq8B,MAAMT,KAAK2C,aAAa,EAApD;AAGXC,YAAAA,aAAa,IAAIC,YAAYH,WAAW,CAA3B;AAGZ,iBAAInlD,IAAI,GAAGyyB,IAAI,GAAGzyB,IAAImlD,UAAUnlD,KAAK,GAAGyyB,KAAK,GAAG;AACjD4yB,qBAAWrlD,CAAD,IAAMyyB;AAChB4yB,qBAAWrlD,IAAI,CAAL,IAAUyyB,IAAI;AACxB4yB,qBAAWrlD,IAAI,CAAL,IAAUyyB,IAAI;AACxB4yB,qBAAWrlD,IAAI,CAAL,IAAUyyB;AACpB4yB,qBAAWrlD,IAAI,CAAL,IAAUyyB,IAAI;AACxB4yB,qBAAWrlD,IAAI,CAAL,IAAUyyB,IAAI;AAAA,QAC3B;AAGD,aAAK8yB,eAAevgB,GAAGkgB;AACvBlgB,WAAGwgB,WAAWxgB,GAAGygB,sBAAsB,KAAKF,YAA5C;AACAvgB,WAAG0gB,WAAW1gB,GAAGygB,sBAAsBJ,YAAYrgB,GAAG2gB,WAAtD;AAGK3B,aAAAA,cAAc,IAAIpB,aAAa,CAAC,IAAE,KAAK9+B,IAAI5E,MAAM6N,aAAa,KAAG,KAAKjJ,IAAI5E,MAAM8N,YAAjD,CAAjB;AAAA,MAEtB;AAAA;;aAED,SAAU,UAAA;AACN,aAAA,gBAAAg4B,yBAAA,SAAA,GAAA,WAAA,IAAA,EAAA,KAAA,IAAA;AACA,aAAKhgB,GAAG4gB,aAAa,KAAKX,cAA1B;AACA,aAAKjgB,GAAG4gB,aAAa,KAAKL,YAA1B;AAEKvgB,aAAAA,KAAK;AACV,eAAO,KAAKA;AAAAA,MACf;AAAA;;aAED,SAAS,SAAA;AACL,aAAA,gBAAAggB,yBAAA,SAAA,GAAA,UAAA,IAAA,EAAA,KAAA,IAAA;AAEIhgB,YAAAA,KAAK,KAAKA;AACdA,WAAG6gB,UAAU7gB,GAAG8gB,KAAK9gB,GAAG+gB,mBAAxB;AACA/gB,WAAGghB,OAAOhhB,GAAGihB,KAAb;AACAjhB,WAAGkhB,QAAQlhB,GAAGmhB,UAAd;AAEA,aAAKC,mBAAL;AACA,aAAKC,cAAL;AAAA,MACH;AAAA;;aAED,SAAgB,gBAAA;AACRrhB,YAAAA,KAAK,KAAKA;AACdA,WAAGwgB,WAAWxgB,GAAGygB,sBAAsB,KAAKF,YAA5C;AACI/kC,YAAAA,UAAU,IAAIoiC,aAAa,KAAK/7B,YAAYq8B,MAAMT,MAAM,GAAG,KAAK57B,YAAYq8B,MAAMZ,UAAxE;AACdtd,WAAGwgB,WAAWxgB,GAAGshB,cAAc,KAAKrB,cAApC;AACAjgB,WAAG0gB,WAAW1gB,GAAGshB,cAAc9lC,SAASwkB,GAAGuhB,YAA3C;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,oBAAoB7B,eAAe;AAC/B,aAAA,gBAAAM,yBAAA,SAAA,GAAA,uBAAA,IAAA,EAAA,KAAA,MAA0BN,aAA1B;AACA,aAAK8B,kBAAkB9B,cAAc52B,QAAQ42B,aAA7C;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,qBAAqBG,IAAI;AACrB,YAAI/2B,SAAS+2B,GAAG/2B;AAEZ+2B,YAAAA,GAAG9kD,UAAU8kD,GAAG/2B,OAAO24B,SAAV,GAAsB;AACnC34B,iBAAO44B,WAAW7B,EAAlB;AACA/2B,iBAAOoX,KAAK2f,EAAZ;AACA/2B,iBAAO64B,UAAU9B,EAAjB;AAAA,QACH;AAAA,MACJ;AAAA;;aAMD,SAAkB/2B,kBAAAA,QAAQ84B,WAAW;AAC7B,YAAA,CAAC94B,OAAO+4B,eAAe,KAAKC,qBAA3B,GAAmD;AAChD,cAAA,KAAKA,uBAAuB;AACvBA,iBAAAA,sBAAsBC;UAC9B;AACDj5B,iBAAOk5B,WAAP;AACKF,eAAAA,wBAAwBh5B;AAAAA,QAChC;AACDA,eAAOm5B,cAAcL,SAArB;AAAA,MACH;AAAA;;aAED,SAAqB,qBAAA;AACb,YAAA,KAAKE,uBAAuB;AAEvBA,eAAAA,sBAAsBC;AACtBD,eAAAA,wBAAwB;AAAA,QAChC;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,mBAAmB/B,eAAe;AAC9B,aAAA,gBAAAC,yBAAA,SAAA,GAAA,sBAAA,IAAA,EAAA,KAAA,MAAyBD,aAAzB;AAEI/f,YAAAA,KAAK,KAAKA;AACV,YAAA,CAAC,KAAK/gB,gBAAgB;AACtB+gB,aAAGkiB,gBAAgBliB,GAAGmiB,aAAa,IAAnC;AACAniB,aAAGoiB,SAAS,GAAE,GAAE,KAAKtjC,IAAI5E,MAAM/W,GAAE,KAAK2b,IAAI5E,MAAM9W,CAAhD;AAAA,QACH,OAAM;AACH48B,aAAGkiB,gBAAgBliB,GAAGmiB,aAAa,KAAKljC,eAAeojC,WAAvD;AACAriB,aAAGoiB,SAAS,GAAE,GAAE,KAAKnjC,eAAe9b,GAAG,KAAK8b,eAAe7b,CAA3D;AAAA,QACH;AAAA,MACJ;AAAA;;aAED,SAAsB,sBAAA;AAClB,aAAA,gBAAA48C,yBAAA,SAAA,GAAA,uBAAA,IAAA,EAAA,KAAA,IAAA;AACIhgB,YAAAA,KAAK,KAAKA;AACV,YAAA,CAAC,KAAK/gB,gBAAgB;AAClBqjC,cAAAA,eAAe,KAAKxjC,IAAI5E,MAAMqoC,cAAf;AACnB,cAAID,cAAc;AACdtiB,eAAGwiB,WAAWF,aAAa,CAAD,IAAMA,aAAa,CAAD,GAAKA,aAAa,CAAD,IAAMA,aAAa,CAAD,GAAKA,aAAa,CAAD,IAAMA,aAAa,CAAD,GAAKA,aAAa,CAAD,CAAnI;AACAtiB,eAAGyiB,MAAMziB,GAAG0iB,gBAAZ;AAAA,UACH;AAAA,QACJ,OAAM;AAEH1iB,aAAGwiB,WAAW,GAAG,GAAG,GAAG,CAAvB;AACAxiB,aAAGyiB,MAAMziB,GAAG0iB,gBAAZ;AAAA,QACH;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,YAAYz3B,MAAM;AACd,aAAA,gBAAA+0B,yBAAA,SAAA,GAAA,eAAA,IAAA,EAAA,KAAA,MAAkB/0B,IAAlB;AAEA,YAAI,KAAKnJ,aAAamJ,MAAM;AACxB;AAAA,QACH;AACInJ,aAAAA,WAAWmJ;AAEZ+U,YAAAA,KAAK,KAAKA;AACV,YAAA,CAAC/U,MAAM;AACP+U,aAAGkhB,QAAQlhB,GAAG2iB,YAAd;AAAA,QACH,OAAM;AACH3iB,aAAGghB,OAAOhhB,GAAG2iB,YAAb;AACIjvB,cAAAA,YAAY,KAAK5U,IAAI5E,MAAMqmB,mBAAf;AAChB,cAAIz8B,IAAImnB,KAAK,CAAD;AACZ,cAAI,KAAKhM,mBAAmB,MAAM;AAE9Bnb,gBAAK,KAAKgb,IAAI5E,MAAM9W,IAAIswB,aAAazI,KAAK,CAAD,IAAMA,KAAK,CAAD;AAAA,UACtD;AACD+U,aAAGie,QAAQvkD,KAAKiB,MAAMswB,KAAK,CAAD,IAAMyI,SAArB,GAAiCh6B,KAAKiB,MAAMmJ,IAAI4vB,SAAf,GAA2Bh6B,KAAKiB,MAAMswB,KAAK,CAAD,IAAMyI,SAArB,GAAiCh6B,KAAKiB,MAAMswB,KAAK,CAAD,IAAMyI,SAArB,CAAxG;AAAA,QACH;AAAA,MACJ;AAAA;;IA9JgDwrB;MCFhC0D;AAEjB,aAAAA,iBAAY9jC,KAAK;AAAA,sBAAA,MAAA8jC,gBAAA;AACR9jC,WAAAA,MAAMA;AAEX,WAAK5E,QAAQ4E,IAAI5E;AAEZ6O,WAAAA,gBAAgB,KAAK7O,MAAMkW,SAASyyB,iBAAiB/jC,GAArC;AAErB,WAAKsR,WAAWtR,IAAI5E,MAAMkW;AAErB8tB,WAAAA,QAAQ,KAAK9tB,SAAS0yB,mBAAmBhkC,GAAjC;AAAA,IAEhB;;;aAED,SAAQ,QAAA;AACCikC,aAAAA,qBAAqB;AAErBjhC,aAAAA,WAAW;AAEX8B,aAAAA,UAAU;AAEV7B,aAAAA,eAAe;AAEfihC,aAAAA,cAAc;AAEdC,aAAAA,SAAS;AAETzD,aAAAA,iBAAiB;AAEjB17B,aAAAA,cAAc;AAEdo/B,aAAAA,uBAAuB;AAEvBC,aAAAA,iBAAiB;AAEjBjF,aAAAA,MAAMnc;AAENqhB,aAAAA,wBAAwB;AAExBC,aAAAA,uBAAuB;AAAA,MAE/B;AAAA;;WAED,SAAa,MAAA;AACT,eAAO,KAAKnF,MAAMd,aAAariD;AAAAA,MAClC;AAAA;;aAED,SAAU+tB,UAAAA,QAAQw6B,OAAO;AACjB,YAAA,KAAKvhC,iBAAiBuhC,SAAS,KAAKN,gBAAgBl6B,QAAQ;AAIvDk6B,eAAAA,cAAcl6B;AAEnB,cAAIA,OAAOy6B,cAAc;AAErBz6B,qBAAS,KAAKC;AAAAA,UACjB;AACG,cAAA,KAAKnF,YAAYkF,UAAU,KAAK/G,iBAAiBuhC,OAAO;AACnD1/B,iBAAAA,UAAUkF;AACV/G,iBAAAA,eAAeuhC;AACfL,iBAAAA,SAAS;AAAA,UACjB;AAAA,QACJ;AAAA,MACJ;AAAA;;WAED,SAAwB,MAAA;AACpB,eAAO,KAAKF;AAAAA,MACf;AAAA;;MAED,OAAA,SAAA,WAAW93B,MAAM;AACb,YAAI,KAAKnJ,aAAamJ,MAAM;AACxB,cAAIA,MAAM;AACDnJ,iBAAAA,WAAWmJ;AAAAA,UACnB,OAAM;AACEnJ,iBAAAA,WAAW;AAAA,UACnB;AACImhC,eAAAA,SAAS;AAAA,QACjB;AAAA,MACJ;AAAA;;aAED,SAAa,aAAA;AACT,eAAO,KAAKnhC;AAAAA,MACf;AAAA;;MAED,OAAA,SAAA,qBAAqBqK,mBAAmB;AACpC,YAAI,KAAK42B,uBAAuB52B,mBAAmB;AAC1C42B,eAAAA,qBAAqB52B;AACrBrK,eAAAA,WAAW;AACXmhC,eAAAA,SAAS;AAAA,QACjB;AAAA,MACJ;AAAA;;MAMD,OAAA,SAAA,cAAcj6B,YAA2B;AAAfyD,YAAAA,yEAAQ;AACzB3I,aAAAA,cAAckF;AACdw6B,aAAAA,mBAAmB/2B;AAAAA,MAC3B;AAAA;;WAMD,SAA0B,MAAA;AACtB,eAAO,KAAK42B;AAAAA;MALhB,KAAA,SAAApxC,KAAwBjY,GAAG;AAClBqpD,aAAAA,uBAAuBrpD;AAAAA,MAC/B;AAAA;;MAMD,OAAA,SAAA,QAAQ2kB,aAAa;AACb,YAAA,CAAC,KAAKwkC,gBAAgB;AACtB,eAAKM,qBAAL;AAAA,QADJ,WAEW,KAAKR,UAAU,KAAKS,YAAL,GAAoB;AAC1C,eAAKC,qBAAL;AACKV,eAAAA,SAAS;AAAA,QACjB;AAEGnjC,YAAAA,gBAAgB;AAChB,YAAA,KAAKgE,aAAa;AAClBhE,0BAAgB,KAAKgE,YAAYjE;AAE7B,cAAA,CAAC,KAAK2jC,kBAAkB;AAExB,iBAAKJ,sBAAsBzkD,KAAK,KAAKmlB,WAArC;AAAA,UACH;AAAA,QACJ;AAEG,YAAA,CAAChE,eAAe;AAChBA,0BAAgBnB,YAAY8C,wBAAwB3B;AAAAA,QACvD;AAEG,YAAA,KAAKijC,oBAAoB;AACrB,cAAA,KAAKn/B,YAAY,KAAKmF,iBAAiB,KAAKg6B,mBAAmB1jC,OAAO;AAEtE,iBAAK0jC,mBAAmBjjC,gBAAgBA;AACxC,iBAAKijC,mBAAmBv6C,SAAS,KAAKzN;AAAAA,UACzC,OAAM;AAEH,iBAAKgoD,mBAAmBjjC,gBAAgB;AAAA,UAC3C;AACD,eAAKijC,mBAAmB1jC,QAAQ;AAAA,QACnC;AAED,aAAK6+B,MAAMd,aAAaz+C,KAAKmhB,aAA7B;AACA,aAAKo+B,MAAMb,aAAa1+C,KAAKggB,WAA7B;AAEKwkC,aAAAA,eAAepoD;AAEpB,aAAKq1B,SAASpE,QAAQ,MAAM,KAAKkyB,OAAO,KAAKnjD,SAAS,CAAtD;AAAA,MACH;AAAA;;aAED,SAAwB,wBAAA;AACpB,YAAI,KAAKgoD,mBAAmBjjC,eAAe;AAIvC,cAAI,CAAC,KAAK8jC,4BAA4B;AAClC,iBAAKb,mBAAmBjjC,gBAAgB;AAAA,UAC3C;AAAA,QACJ;AAAA,MACJ;AAAA;;aAED,SAA2B,2BAAA;AACvB,YAAMtX,SAAS,KAAKu6C,mBAAmBv6C;AACvC,eAAQ,KAAK01C,MAAMd,aAAa50C,MAAxB,EAAgCrF,MAAM,KAAK4/C,mBAAmB5/C,KACjE,KAAK+6C,MAAMd,aAAa50C,MAAxB,EAAgCpF,MAAM,KAAK2/C,mBAAmB3/C,KAC/D,KAAKgtB,SAASyzB,wBAAwB,MAAM,KAAKd,kBAAjD;AAAA,MACP;AAAA;;aAED,SAAc,cAAA;AACNe,YAAAA,IAAI,KAAKX;AACT,YAAA,KAAKv/B,YAAYkgC,EAAEh7B;AAAQ,iBAAO;AAClC,YAAA,KAAK/G,iBAAiB+hC,EAAE9F;AAAa,iBAAO;AAC5C,YAAA,KAAK+E,uBAAuBe,EAAE33B;AAAmB,iBAAO;AAC5D,YAAI,KAAKrK,aAAagiC,EAAE7F,SAAS;AACxB,cAAA,KAAKn8B,SAAS,CAAd,MAAqBgiC,EAAE7F,QAAQ,CAAV,KAAkB,KAAKn8B,SAAS,CAAd,MAAqBgiC,EAAE7F,QAAQ,CAAV,KAAkB,KAAKn8B,SAAS,CAAd,MAAqBgiC,EAAE7F,QAAQ,CAAV,KAAkB,KAAKn8B,SAAS,CAAd,MAAqBgiC,EAAE7F,QAAQ,CAAV,GAAe;AAC1J,mBAAO;AAAA,UACV;AAAA,QACJ;AAED,eAAO;AAAA,MACV;AAAA;;aAED,SAAoC,uBAAA;AAAf/O,YAAAA,0EAAS;AACtB,YAAA,KAAKiU,gBAAgB;AACjB,cAAA,KAAKA,eAAepoD,UAAU,KAAK6oB,QAAQ69B,YAAY;AACnD,gBAAA,CAAC,KAAK0B,eAAelF,WAAa,KAAKkF,eAAelF,QAAQ,CAA5B,IAAiC,KAAO,KAAKkF,eAAelF,QAAQ,CAA5B,IAAiC,GAAK;AAEhH,mBAAKuB,eAAe7gD,KAAK,KAAKwkD,cAA9B;AAAA,YACH;AAAA,UACJ;AAED,cAAI,KAAKC,sBAAsBroD,QAAQ;AACnC,qBAASC,IAAI,GAAGF,IAAI,KAAKsoD,sBAAsBroD,QAAQC,IAAIF,GAAGE,KAAK;AAG/D,mBAAKooD,sBAAsBpoD,CAA3B,EAA8BmlB,qBAA9B;AAAA,YACH;AACIijC,iBAAAA,wBAAwB;UAChC;AAEID,eAAAA,iBAAiB;AAAA,QACzB;AAED,YAAIjU,QAAQ;AACR,eAAKuU,qBAAL;AAAA,QACH;AAAA,MACJ;AAAA;;aAED,SAAuB,uBAAA;AACdN,aAAAA,iBAAiB,KAAK/yB,SAAS2zB,wBAChC,KAAKjlC,KACL,KAAK8E,SACL,KAAK7B,cACL,KAAKghC,oBACL,KAAKjhC,UACL,KAAK/mB,MANa;AAQjBkoD,aAAAA,SAAS;AAAA,MACjB;AAAA;;aAED,SAAS,SAAA;AACD,YAAA,KAAKE,gBAAgB;AAEhBQ,eAAAA,qBAAqB,KAA1B;AAAA,QACH;AAED,aAAKvzB,SAAS4zB,kBAAkB,IAAhC;AAAA,MACH;AAAA;;;MCnOgBC;AAELC,aAAAA,oBAAAA,oBAAoBC,sBAAsB;AAAA,sBAAA,MAAAF,mBAAA;AAE7CC,WAAAA,qBAAqBA;AACrBC,WAAAA,uBAAuBA;AAEvBC,WAAAA,WAAW;AACXpkB,WAAAA,KAAK;AAEV,WAAKqkB,oBAAoB,oBAAInZ;AAC7B,WAAKoZ,sBAAsB,oBAAIpZ;AAE1BqZ,WAAAA,wBAAwB;IAChC;;;MAED,OAAA,SAAA,QAAQvkB,IAAI;AACJ,YAAA,KAAKokB;AAAU;AAEdpkB,aAAAA,KAAKA;AAEV,aAAKokB,WAAWpkB,GAAGwkB;AAEfC,YAAAA,eAAe,KAAKC,WAAW1kB,GAAG2kB,eAAe,KAAKT,kBAAvC;AACfU,YAAAA,eAAe,KAAKF,WAAW1kB,GAAG6kB,iBAAiB,KAAKV,oBAAzC;AAEnBnkB,WAAG8kB,aAAa,KAAKV,UAAUK,YAA/B;AACAzkB,WAAG8kB,aAAa,KAAKV,UAAUQ,YAA/B;AACA5kB,WAAG+kB,YAAY,KAAKX,QAApB;AAGA,YAAI,CAACpkB,GAAGglB,oBAAoB,KAAKZ,UAAUpkB,GAAGilB,WAAzC,GAAuD;AACxDxoD,kBAAQqD,MAAM,iDAAd;AACArD,kBAAQqD,MAAM,kCAAkCkgC,GAAGglB,oBAAoB,KAAKZ,UAAUpkB,GAAGklB,eAAzC,CAAhD;AACAzoD,kBAAQqD,MAAM,6BAA6BkgC,GAAGmlB,SAA9C,CAAA;AAGInlB,cAAAA,GAAGolB,kBAAkB,KAAKhB,QAA1B,MAAwC,IAAI;AAC5C3nD,oBAAQC,KAAK,+CAA+CsjC,GAAGolB,kBAAkB,KAAKhB,QAA1B,CAA5D;AAAA,UACH;AAEDpkB,aAAGqlB,cAAc,KAAKjB,QAAtB;AACKA,eAAAA,WAAW;AAAA,QACnB;AAGDpkB,WAAGslB,aAAab,YAAhB;AACAzkB,WAAGslB,aAAaV,YAAhB;AAAA,MACH;AAAA;;aAED,SAAWnnD,WAAAA,MAAMw2B,KAAK;AAAA,YAAA,QAAA;AACdnL,YAAAA,SAAS,KAAKkX,GAAG3P,aAAa5yB,IAArB;AAEb,aAAKuiC,GAAGulB,aAAaz8B,QAAQmL,GAA7B;AACA,aAAK+L,GAAGwlB,cAAc18B,MAAtB;AAEA,YAAI,CAAC,KAAKkX,GAAGylB,mBAAmB38B,QAAQ,KAAKkX,GAAG0lB,cAA3C,GAA4D;AAC7DjpD,kBAAQqD,MAAM,eAAe,KAAKpC,YAAYkC,MAAM,YAAYnC,SAAS,KAAKuiC,GAAG2kB,gBAAgB,kBAAkB,kBAAnH;AACAloD,kBAAQqD,MAAM,eAAe,KAAKkgC,GAAG2lB,iBAAiB78B,MAAzB,CAA7B;AACIyb,cAAAA,MAAM;AACV9nC,kBAAQqD,MAAM,eAAe,mCAAmCm0B,IAAIz3B,MAAM,IAAV,EAAgB8yB,IAAI,SAAA7sB,MAAI;AAAA,2BAAA,MAAA,KAAA;AAAA,mBAAI,KAAM,EAAE8hC,MAAO,OAAO9hC;AAAAA,UAA1B,EAAgC0Q,KAAAA,IAAAA,CAAAA,EAAAA,KAAK,IAA7D,CAAhE;AACA,iBAAO;AAAA,QACV;AAED,eAAO2V;AAAAA,MACV;AAAA;;MAED,OAAA,SAAA,mBAAmBlpB,MAAM;AACjBgmD,YAAAA,WAAW,KAAKvB,kBAAkBtf,IAAInlC,IAA3B;AACXgmD,YAAAA,aAAa9xC,QAAW;AACxB8xC,qBAAW,KAAK5lB,GAAG6lB,mBAAmB,KAAKzB,UAAUxkD,IAA1C;AACX,eAAKykD,kBAAkBpyC,IAAIrS,MAAMgmD,QAAjC;AAAA,QACH;AAED,eAAOA;AAAAA,MACV;AAAA;;MAED,OAAA,SAAA,kBAAkBhmD,MAAM;AAChBgmD,YAAAA,WAAW,KAAKtB,oBAAoBvf,IAAInlC,IAA7B;AACXgmD,YAAAA,aAAa9xC,QAAW;AACxB8xC,qBAAW,KAAK5lB,GAAG8lB,kBAAkB,KAAK1B,UAAUxkD,IAAzC;AACX,eAAK0kD,oBAAoBryC,IAAIrS,MAAMgmD,QAAnC;AAAA,QACH;AAED,eAAOA;AAAAA,MACV;AAAA;;aAED,SAAU,UAAA;AACF,YAAA,KAAKxB,UAAU;AACf,eAAKpkB,GAAGqlB,cAAc,KAAKjB,QAA3B;AAAA,QACH;AAEIE,aAAAA,sBAAsB;AACtBC,aAAAA,wBAAwB;AACxBJ,aAAAA,uBAAuB;AACvBC,aAAAA,WAAW;AACXpkB,aAAAA,KAAK;AACLqkB,aAAAA,oBAAoB;AACpBH,aAAAA,qBAAqB;AAE1B,eAAO,KAAKA;AACZ,eAAO,KAAKE;AACZ,eAAO,KAAKG;AACZ,eAAO,KAAKJ;AACZ,eAAO,KAAKnkB;AACZ,eAAO,KAAKqkB;AACZ,eAAO,KAAKC;AAAAA,MAEf;AAAA;;WAED,SAAgB,MAAA;AACZ,eAAO,KAAKF;AAAAA,MACf;AAAA;;WAED,SAAe,MAAA;AACJ,eAAA,CAAC,CAAC,KAAKA;AAAAA,MACjB;AAAA;;aAED,SAAanrD,aAAAA,IAAIC,IAAI;AAEjB,YAAID,GAAG8B,UAAU7B,GAAG6B,QAAQ;AACxB,mBAASC,IAAI,GAAGF,IAAI7B,GAAG8B,QAAQC,IAAIF,GAAGE,KAAK;AACnC/B,gBAAAA,GAAG+B,CAAD,MAAQ9B,GAAG8B,CAAD;AAAK,qBAAO;AAAA,UAC/B;AACD,iBAAO;AAAA,QACV,OAAM;AACK/B,iBAAAA,OAAOC;AAAAA,QAClB;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,YAAYc,GAAG;AACPA,YAAAA,EAAEe,QAAQ;AACV,iBAAOf,EAAE4uB,MAAM,CAAR;AAAA,QACV,OAAM;AACH,iBAAO5uB;AAAAA,QACV;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,gBAAgB4F,MAAM9C,OAAOipD,YAAY;AACrC,YAAI/rD,IAAI,KAAKuqD,sBAAsB3kD,IAA3B;AACR,YAAI5F,MAAM8Z,UAAa,CAAC,KAAKkyC,aAAahsD,GAAG8C,KAArB,GAA6B;AACjD,cAAImpD,cAAc,KAAKC,YAAYppD,KAAjB;AAClB,eAAKynD,sBAAsB3kD,IAA3B,IAAmCqmD;AAEnC,cAAI5J,MAAM,KAAKwJ,mBAAmBjmD,IAAxB;AACV,cAAIy8C,KAAK;AACD8J,gBAAAA,WAAYJ,eAAe,KAAK/lB,GAAGomB,oBAAoBL,eAAe,KAAK/lB,GAAGqmB,oBAAoBN,eAAe,KAAK/lB,GAAGsmB;AAC7H,gBAAIH,UAAU;AACVJ,yBAAWQ,KAAK,KAAKvmB,IAAIqc,KAAK,OAAO4J,WAArC;AAAA,YACH,OAAM;AACHF,yBAAWQ,KAAK,KAAKvmB,IAAIqc,KAAK4J,WAA9B;AAAA,YACH;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA;;;MC1JgBO;;;AAEjB,aAAAA,aAAY1nC,KAAK;AAAA,UAAA;AAAA,sBAAA,MAAA0nC,YAAA;AACb,cAAA,OAAA,KAAA,MAAM1nC,GAAN;AAEA,UAAM5E,QAAQ4E,IAAI5E;AAElB,YAAKkqC,WAAWlqC,MAAMkW,SAASq2B,eAAe1hB,IAAI,MAAKrnC,WAAvC;AACZ,UAAA,CAAC,MAAK0mD,UAAU;AAChB,cAAKA,WAAW,IAAIH,mBAAmB,MAAKvmD,YAAYwmD,oBAAoB,MAAKxmD,YAAYymD,oBAA7E;AAGhBjqC,cAAMkW,SAASq2B,eAAex0C,IAAI,MAAKvU,aAAa,MAAK0mD,QAAzD;AAAA,MACH;AAED,YAAKpkB,KAAK9lB,MAAM8lB;AAbH,aAAA;AAAA,IAchB;;;WAED,SAAgB,MAAA;AACL,eAAA,KAAKokB,SAASsC;AAAAA,MACxB;AAAA;;aAED,SAAQ,QAAA;AACA,YAAA,CAAC,KAAKz2B,cAAc;AACpB,eAAK02B,WAAL;AACK12B,eAAAA,eAAe;AAAA,QACvB;AAAA,MACJ;AAAA;;aAED,SAAa,aAAA;AACT,aAAKm0B,SAASwC,QAAQ,KAAK5mB,EAA3B;AAAA,MACH;AAAA;;WAED,SAAkB,MAAA;AACd,eAAO,KAAK/P;AAAAA,MACf;AAAA;;MAED,OAAA,SAAA,SAASrwB,MAAM;AACX,eAAO,KAAKwkD,SAASyB,mBAAmBjmD,IAAjC;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,QAAQA,MAAM;AACV,eAAO,KAAKwkD,SAAS0B,kBAAkBlmD,IAAhC;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,YAAYA,MAAM9C,OAAOipD,YAAY;AAC5B3B,aAAAA,SAASyC,gBAAgBjnD,MAAM9C,OAAOipD,UAA3C;AAAA,MACH;AAAA;;aAED,SAAa,aAAA;AACT,aAAKhL,MAAL;AACA,aAAK/a,GAAGgiB,WAAW,KAAK0E,SAAxB;AACA,aAAKI,YAAL;AACA,aAAKC,cAAL;AAAA,MACH;AAAA;;aAED,SAAc,cAAA;AACV,aAAKC,WAAL;AACA,aAAKC,eAAL;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,eAAeC,OAAO;AAElB,eAAQA,UAAWA,UAAU,QAAUA,MAAM9C,aAAa,KAAKA;AAAAA,MAClE;AAAA;;MAED,OAAA,SAAA,cAAc;AAAA,MAEb;AAAA;;MAED,OAAA,SAAA,aAAa;AAAA,MAEZ;AAAA;;MAED,OAAA,SAAA,gBAAgB;AAAA,MAEf;AAAA;;MAED,OAAA,SAAA,iBAAiB;AAAA,MAEhB;AAAA;;aAED,SAA+B,+BAAA;AAC3B,eAAO;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,6BAA6BxC,WAAW;AACpC,eAAOA,UAAUjD,6BAA6BiD,UAAUjkD,QAAQ,IAAI,KAAKwpD;MAC5E;AAAA;;aAED,SAAwBvF,wBAAAA,WAAW;AAAA,MAGlC;AAAA;;aAED,SAAcA,cAAAA,WAAW;AAAA,MAIxB;AAAA;;MAED,OAAA,SAAA,eAAeA,WAAW;AACfA,eAAAA,UAAUwF;MACpB;AAAA;;MAED,OAAA,SAAA,SAASxF,WAAW;AAChB,eAAO,KAAKyF,eAAezF,SAApB,EAA+B,CAA/B,IAAoC;AAAA,MAC9C;AAAA;;aAED,SAAWA,WAAAA,WAAW;AAAA,MACrB;AAAA;;aAED,SAAKA,KAAAA,WAAW;AAAA,MACf;AAAA;;aAED,SAAUA,UAAAA,WAAW;AAAA,MACpB;AAAA;;aAED,SAAU,UAAA;AACD3xB,aAAAA,eAAe;AAAA,MAEvB;AAAA;;IAzHoCF;MCDpBu3B;;;;;;;;;aAEjB,SAAgB,gBAAA;AAERtnB,YAAAA,KAAK,KAAKA;AACdA,WAAGunB,oBAAoB,KAAKC,QAAQ,iBAAb,GAAiC,GAAGxnB,GAAGynB,OAAO,OAAO,IAAI,CAAhF;AACAznB,WAAG0nB,wBAAwB,KAAKF,QAAQ,iBAAb,CAA3B;AAEA,YAAI,KAAKA,QAAQ,eAAb,MAAkC,IAAI;AACtCxnB,aAAGunB,oBAAoB,KAAKC,QAAQ,eAAb,GAA+B,GAAGxnB,GAAGynB,OAAO,OAAO,IAAI,IAAI,CAAlF;AACAznB,aAAG0nB,wBAAwB,KAAKF,QAAQ,eAAb,CAA3B;AAAA,QACH;AAED,YAAI,KAAKA,QAAQ,QAAb,MAA2B,IAAI;AAE/BxnB,aAAGunB,oBAAoB,KAAKC,QAAQ,QAAb,GAAwB,GAAGxnB,GAAG2nB,eAAe,MAAM,IAAI,IAAI,CAAlF;AACA3nB,aAAG0nB,wBAAwB,KAAKF,QAAQ,QAAb,CAA3B;AAAA,QACH;AAAA,MACJ;AAAA;;aAED,SAAiB,iBAAA;AAETxnB,YAAAA,KAAK,KAAKA;AACdA,WAAG4nB,yBAAyB,KAAKJ,QAAQ,iBAAb,CAA5B;AAEA,YAAI,KAAKA,QAAQ,eAAb,MAAkC,IAAI;AACtCxnB,aAAG4nB,yBAAyB,KAAKJ,QAAQ,eAAb,CAA5B;AAAA,QACH;AAED,YAAI,KAAKA,QAAQ,QAAb,MAA2B,IAAI;AAC/BxnB,aAAG4nB,yBAAyB,KAAKJ,QAAQ,QAAb,CAA5B;AAAA,QACH;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,cAAc5F,WAAW;AACrB,aAAKiG,YAAY,cAAc,KAAKR,eAAezF,SAApB,GAAgC,KAAK5hB,GAAG8nB,YAAY,KAAnF;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,KAAKlG,WAAW;AACR5hB,YAAAA,KAAK,KAAKA;AAEd,YAAIjlC,SAAS6mD,UAAU7mD;AAEvB,YAAIA,QAAQ;AACR,cAAIgtD,YAAYnG,UAAUzD,WAAW,CAArB;AACZp6C,cAAAA,MAAM;AACL,mBAAI/I,IAAI,GAAGA,IAAID,QAAQC,KAAK;AAC7B,gBAAIizB,KAAK2zB,UAAUzD,WAAWnjD,CAArB;AACL+sD,gBAAAA,cAAc95B,IAAI;AAClB+R,iBAAGgoB,YAAYhoB,GAAGioB,YAAYF,SAA9B;AACA/nB,iBAAGkoB,aAAaloB,GAAGmoB,WAAW,KAAKntD,IAAI+I,MAAMi8B,GAAGooB,iBAAiBrkD,MAAM69C,UAAUjkD,SAAS,IAAI,CAA9F;AACAoqD,0BAAY95B;AACZlqB,oBAAM/I;AAAAA,YACT;AAAA,UACJ;AAEDglC,aAAGgoB,YAAYhoB,GAAGioB,YAAYF,SAA9B;AACA/nB,aAAGkoB,aAAaloB,GAAGmoB,WAAW,KAAKptD,SAASgJ,MAAMi8B,GAAGooB,iBAAiBrkD,MAAM69C,UAAUjkD,SAAS,IAAI,CAAnG;AAAA,QACH;AAAA,MACJ;AAAA;;IA3DsC6oD;AA+D3Cc,kBAAcpD,qBAAd;AAsBa,kBAACC,uBAAd;MCvFqBkE;AAEjB,aAAAA,UAAYnuC,OAAO;AAAA,sBAAA,MAAAmuC,SAAA;AACVnuC,WAAAA,QAAQA;AACRouC,WAAAA,iBAAiBx0C;AAAAA,IACzB;;;aAED,SAAGy0C,GAAAA,YAAY;AAAA,MACd;AAAA;;MAED,OAAA,SAAA,UAAU;AAAA,MACT;AAAA;;aAED,SAAuC,mBAAA;AAAA,YAAtBzpC,MAAsB,UAAA,SAAA,KAAA,UAAA,CAAA,MAAA,SAAA,UAAA,CAAA,IAAhB,KAAK5E,MAAM4E;AAC1B,YAAA,CAAC,KAAKwpC,gBAAgB;AACtB,eAAKA,iBAAiB,KAAKE,qBAAqB1pC,GAA1B;AAAA,QACzB;AACD,eAAO,KAAKwpC;AAAAA,MACf;AAAA;;aAED,SAAqBxpC,qBAAAA,KAAK;AAAA,MACzB;AAAA;;MAED,OAAA,SAAA,kBAAkB2pC,YAAY;AAC1B,eAAQA,WAAWjqC,qBAAqB,KAAKkqC,mBAAL;AAAA,MAC3C;AAAA;;aAED,SAAa5pC,aAAAA,KAAKjf,UAAU;AACxB,YAAM4oD,aAAa5oD,SAASpC;AAE5B,YAAI,CAAC,KAAK8yB,kBAAkBk4B,UAAvB,GAAoC;AACrC,cAAME,sBAAsB,KAAKC,sBAAsBH,UAA3B;AACxB,cAAA,CAACE,qBAAqB;AACtBlsD,oBAAQC,KAAK,iEAAiE+rD,WAAW7oD,IAAzF;AACA,mBAAO,KAAK4oD,qBAAqB1pC,GAA1B;AAAA,UACV;AACD,iBAAO,IAAI6pC,oBAAoB7pC,GAAxB;AAAA,QACV,OAAM;AACH,cAAMgK,SAAS,IAAI2/B,WAAW3pC,GAAf;AACfnf,eAAK4T,YAAY,MAAM1T,QAAvB;AACA,iBAAOipB;AAAAA,QACV;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,qBAAqB;AAAA,MACpB;AAAA;;MAED,OAAA,SAAA,sBAAsB2/B,YAAY;AACvB,eAAA,KAAK5F;MACf;AAAA;;MAED,OAAA,SAAA,kBAAkB9C,eAAejgC,eAAe1D,SAAS;AACrD3f,gBAAQC,KAAK,yDAAb;AAAA,MACH;AAAA;;;MC3CgBmsD;;;AAEjB,aAAAA,eAAY3uC,OAAO;AAAA,UAAA;AAAA,sBAAA,MAAA2uC,cAAA;AACf,cAAA,OAAA,KAAA,MAAM3uC,KAAN;AACA,YAAKusC,iBAAiB,oBAAIvb;AAC1B,YAAK4d,+BAA+B;AAAA,QAChCC,MAAM7uC,MAAM8lB,GAAGgpB,aAAa,+BAAtB;AAAA,QACNC,MAAM/uC,MAAM8lB,GAAGgpB,aAAa,+BAAtB;AAAA,QACNE,MAAMhvC,MAAM8lB,GAAGgpB,aAAa,+BAAtB;AAAA,QACNG,OAAOjvC,MAAM8lB,GAAGgpB,aAAa,gCAAtB;AAAA,MAJyB;AAHrB,aAAA;AAAA,IASlB;;;aAED,SAAiC,iCAAA;AAC7B,eAAO,KAAKF;AAAAA,MACf;AAAA;;aAED,SAAU,UAAA;AAAA,YAAA,SAAA;AACN,aAAKrC,eAAe/nD,QAAQ,SAAA0qD,eAAa;AAAA,yBAAA,MAAA,MAAA;AAAIA,iBAAAA,cAAcC;QAAlB,EAAzC,KAAA,IAAA,CAAA;AAEK5C,aAAAA,iBAAiB;AACjBqC,aAAAA,+BAA+B;AAEpC,eAAO,KAAKrC;AACZ,eAAO,KAAKqC;AAAAA,MACf;AAAA;;MAED,OAAA,SAAA,qBAAqBhqC,KAAK;AACtB,eAAO,IAAIwoC,gBAAcxoC,GAAlB;AAAA,MACV;AAAA;;aAED,SAAqB,qBAAA;AACjB,eAAO0nC;AAAAA,MACV;AAAA;;MAED,OAAA,SAAA,sBAAsBiC,YAAY;AAC9B,eAAOA,WAAWa,YAAYb,WAAWa,SAAX;AAAA,MACjC;AAAA;;MAED,OAAA,SAAA,mBAAmBxqC,KAAK;AACpB,eAAO,IAAIy+B,kBAAkBz+B,GAAtB;AAAA,MACV;AAAA;;aAED,SAAwBA,wBAAAA,KAAKgK,QAAQk1B,aAAa7xB,mBAAmB8xB,SAAStgD,OAAO;AACjF,eAAO,IAAI+gD,uBAAuB5/B,KAAKgK,QAAQk1B,aAAa7xB,mBAAmB8xB,SAAStgD,KAAjF;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,yBAAyBmhB,KAAK;AAC1B,eAAO,IAAIkhC,wBAAwBlhC,GAA5B;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,sBAAsBA,KAAK;AACvB,eAAO,IAAI8jC,gBAAgB9jC,GAApB;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,oBAAoB3b,GAAGC,GAAGqmB,IAAI+gB,IAAI;AAC9B,YAAMxK,KAAK,KAAK9lB,MAAM8lB;AACtB,YAAM+nB,YAAY/nB,GAAGupB;AACrBvpB,WAAGgoB,YAAYhoB,GAAGioB,YAAYF,SAA9B;AAEA/nB,WAAGwpB,WAAWxpB,GAAGioB,YAAY,GAAGjoB,GAAGypB,MAAMhgC,IAAI+gB,IAAI,GAAGxK,GAAGypB,MAAMzpB,GAAG2nB,eAAe,IAA/E;AAEA3nB,WAAG0pB,cAAc1pB,GAAGioB,YAAYjoB,GAAGQ,oBAAoBR,GAAG2pB,MAA1D;AACA3pB,WAAG0pB,cAAc1pB,GAAGioB,YAAYjoB,GAAG4pB,oBAAoB5pB,GAAG2pB,MAA1D;AACA3pB,WAAG0pB,cAAc1pB,GAAGioB,YAAYjoB,GAAG6pB,gBAAgB7pB,GAAG8pB,aAAtD;AACA9pB,WAAG0pB,cAAc1pB,GAAGioB,YAAYjoB,GAAG+pB,gBAAgB/pB,GAAG8pB,aAAtD;AAEA/B,kBAAUiC,SAAS;AACnBjC,kBAAUiC,OAAOhqB,GAAGQ,kBAApB,IAA0CR,GAAG2pB;AAC7C5B,kBAAUiC,OAAOhqB,GAAG4pB,kBAApB,IAA0C5pB,GAAG2pB;AAC7C5B,kBAAUiC,OAAOhqB,GAAG6pB,cAApB,IAAsC7pB,GAAG8pB;AACzC/B,kBAAUiC,OAAOhqB,GAAG+pB,cAApB,IAAsC/pB,GAAG8pB;AACzC/B,kBAAU3rC,UAAU;AAAA,UAAE6tC,QAAQjqB,GAAGypB;AAAAA,UAAMS,gBAAgBlqB,GAAGypB;AAAAA,UAAMhsD,MAAMuiC,GAAG2nB;AAAAA,QAArD;AAGpBI,kBAAU1F,cAAcriB,GAAGmqB;AAC3BpC,kBAAU9I,aAAa,IAAIrB,aAAa,CAAC,IAAIz6C,GAAG,IAAIC,CAAZ,CAAjB;AAEvB48B,WAAGkiB,gBAAgBliB,GAAGmiB,aAAa4F,UAAU1F,WAA7C;AACAriB,WAAGoqB,qBAAqBpqB,GAAGmiB,aAAaniB,GAAGqqB,mBAAmBrqB,GAAGioB,YAAYF,WAAW,CAAxF;AAEA,eAAOA;AAAAA,MACV;AAAA;;MAED,OAAA,SAAA,kBAAkBA,WAAW;AACzB,YAAI/nB,KAAK,KAAK9lB,MAAM8lB;AACpBA,WAAGsqB,kBAAkBvC,UAAU1F,WAA/B;AACAriB,WAAGuqB,cAAcxC,SAAjB;AAAA,MACH;AAAA;;aAED,SAAkByC,kBAAAA,KAAK/sD,MAAM;AACzB,YAAMuiC,KAAK,KAAK9lB,MAAM8lB;AAEtB,YAAIwqB,QAAQxqB,GAAGypB,MAAM;AACjB,kBAAQhsD,MAAR;AAAA,YACSuiC,KAAAA,GAAG2nB;AACJ,qBAAO;AAAA,YAEN3nB,KAAAA,GAAGyqB;AACJ,qBAAO;AAAA,YAENzqB,KAAAA,GAAG0qB;AACJ,qBAAO;AAAA,YAEX;AACI,oBAAM,IAAI1pD,MAAM,2CAAV;AAAA,UAXd;AAAA,QAaH,WACQwpD,QAAQxqB,GAAG2qB,KAAK;AACrB,kBAAQltD,MAAR;AAAA,YACSuiC,KAAAA,GAAG2nB;AACJ,qBAAO;AAAA,YAEN3nB,KAAAA,GAAG4qB;AACJ,qBAAO;AAAA,YAEX;AACI,oBAAM,IAAI5pD,MAAM,0CAAV;AAAA,UARd;AAAA,QAUH,OACI;AACD,gBAAM,IAAIA,MAAM,yDAAV;AAAA,QACT;AAAA,MACJ;AAAA;;aAED,SAAoB6mB,oBAAAA,eAAezL,SAAS;AAAA,YAAA,SAAA;AACxC,YAAM4jB,KAAK,KAAK9lB,MAAM8lB;AAEtB,YAAMzjB,SAASH,QAAQG;AACnBsuC,YAAAA,aAAa;AACbzuC,YAAAA,QAAQzB,YAAY;AACpBkwC,uBAAazuC,QAAQzB,WAAWkwC,cAAc;AAAA,QACjD;AAED,YAAMZ,SAAS;AAAA,UACXa,kBAAkB;AAAA,UAClBhuC,UAAU;AAAA,QAFC;AAKXV,YAAAA,WAAWA,QAAQiB,eAAe,kBAAvB,GAA4C;AACvD4sC,iBAAOa,mBAAmB1uC,QAAQ0uC;AAAAA,QACrC;AAEG1uC,YAAAA,WAAWA,QAAQiB,eAAe,aAAvB,GAAuC;AAClD4sC,iBAAOc,cAAc3uC,QAAQ2uC;AAAAA,QAChC;AAEG3uC,YAAAA,WAAWA,QAAQiB,eAAe,UAAvB,GAAoC;AAC/C4sC,iBAAOntC,WAAWV,QAAQU;AAAAA,QAC7B;AAED,YAAI,CAACmtC,OAAOntC,UAAU;AAClBmtC,iBAAOa,mBAAmB;AAAA,QAC7B;AAEDb,eAAO9pB,YAAY/jB,QAAQ+jB,aAAa,CAAA;AACxC8pB,eAAOe,aAAa5uC,QAAQ4uC,cAAc,CAAA;AAE1C,YAAIjD,YAAY/nB,GAAGupB;AACnBvpB,WAAGgoB,YAAYhoB,GAAGioB,YAAYF,SAA9B;AAEA/nB,WAAGirB,YAAYjrB,GAAGkrB,gCAAgCjB,OAAOa,gBAAzD;AAEIjuD,YAAAA,QAAM2C,QAAQ;AACdwgC,aAAGirB,YAAYjrB,GAAGmrB,sBAAsB,CAAC,CAAClB,OAAOc,WAAjD;AAAA,QACH;AAED,YAAM5qB,YAAY8pB,OAAO9pB;AACzB,YAAI,CAACA,UAAUH,GAAGQ,kBAAJ;AAAyBL,oBAAUH,GAAGQ,kBAAJ,IAA0BR,GAAG2pB;AAC7E,YAAI,CAACxpB,UAAUH,GAAG4pB,kBAAJ;AAAyBzpB,oBAAUH,GAAG4pB,kBAAJ,IAA0B5pB,GAAG2pB;AAC7E,YAAI,CAACxpB,UAAUH,GAAG6pB,cAAJ;AAAqB1pB,oBAAUH,GAAG6pB,cAAJ,IAAsB7pB,GAAG8pB;AACrE,YAAI,CAAC3pB,UAAUH,GAAG+pB,cAAJ;AAAqB5pB,oBAAUH,GAAG+pB,cAAJ,IAAsB/pB,GAAG8pB;AAErEzsD,eAAOD,KAAK+iC,SAAZ,EAAuBzhC,QAAQ,SAAAkzC,KAAO;AAAA,yBAAA,MAAA,MAAA;AAClC,cAAM90C,QAAQqjC,UAAUyR,GAAD;AACvB5R,aAAG0pB,cAAc1pB,GAAGioB,YAAY1zC,SAASq9B,GAAD,GAAO90C,KAA/C;AAAA,QACH,EAHD,KAAA,IAAA,CAAA;AAKA,YAAI+tD,YAAY;AACP3wC,eAAAA,MAAMka,SAASg3B,0BAA0BprB,IAAInY,eAAetL,MAAjE;AACA,iBAAOwrC;AAAAA,QACV;AAED,YAAMiD,aAAaf,OAAOe;AAC1BA,mBAAWf,SAASe,WAAWf,WAAWA,OAAOntC,WAAWkjB,GAAGypB,OAAOzpB,GAAG2qB;AACzEK,mBAAWvtD,OAAOutD,WAAWvtD,QAAQuiC,GAAG2nB;AACxCqD,mBAAWd,iBAAiBc,WAAWd,kBAAkBc,WAAWf;AACpE,YAAI7tC,WAAWA,QAAQa,UAAU;AAC7B+tC,qBAAW/tC,WAAWb,QAAQa;AAAAA,QACjC;AAED,aAAK/C,MAAMka,SAASi3B,gBAAgBrrB,IAAInY,eAAetL,QAAQyuC,UAA/D;AAEAjD,kBAAUiC,SAASntD,QAAMyuD,gBAAgBnrB,SAAtB;AACnB4nB,kBAAU3rC,UAAUvf,QAAMyuD,gBAAgBN,UAAtB;AAGpBjD,kBAAUwD,gBAAgB,KAAKC,kBAAkBR,WAAWf,QAAQe,WAAWvtD,IAArD;AAE1B,eAAOsqD;AAAAA,MACV;AAAA;;MAED,OAAA,SAAA,kBAAkBlgC,eAAe;AACxB3N,aAAAA,MAAM8lB,GAAGuqB,cAAc1iC,cAAc/H,aAA1C;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,QAAQ+B,aAAaq8B,OAAOvgD,OAAO;AAC/B,YAAI6K,SAAU7K,QAAQ;AACtB,YAAMghB,cAAcu/B,MAAMb,aAAa1/C,KAAnB;AAEpB,YAAIvE,IAAIulB,YAAYiD;AAEpB,YAAI+7B,SAAS97B,YAAYq8B,MAAMP;AAC/B,YAAIE,QAAQh8B,YAAYq8B,MAAML;AAC9B,YAAM4N,MAAMzyD,WAAW0yD;AAEnBtyD,YAAAA,EAAE4wB,OAAO,KAAK5wB,EAAE6wB,OAAO,GAAG;AAC1B0zB,iBAAOn1C,QAAD,IAAapP,EAAE0sB;AACrB63B,iBAAOn1C,QAAD,IAAapP,EAAE4sB;AACrB23B,iBAAOn1C,QAAD,IAAamW,YAAYwE;AAC/Bw6B,iBAAOn1C,QAAD,IAAamW,YAAYyE;AAC/By6B,gBAAMr1C,QAAD,IAAaijD,IAAI9sC,YAAYsD,UAAU7oB,EAAE6B,KAAzB;AACrB0iD,iBAAOn1C,QAAD,IAAapP,EAAE0sB,KAAKnH,YAAYlH,KAAKre,EAAE0wB;AAC7C6zB,iBAAOn1C,QAAD,IAAapP,EAAE4sB,KAAKrH,YAAYlH,KAAKre,EAAE6wB;AAC7C0zB,iBAAOn1C,QAAD,IAAamW,YAAY0E;AAC/Bs6B,iBAAOn1C,QAAD,IAAamW,YAAYyE;AAC/By6B,gBAAMr1C,QAAD,IAAaijD,IAAI9sC,YAAYuD,UAAU9oB,EAAE6B,KAAzB;AACrB0iD,iBAAOn1C,QAAD,IAAapP,EAAE0sB,KAAKnH,YAAYlH,KAAKre,EAAE0wB,KAAKnL,YAAYjH,KAAKte,EAAE4wB;AACrE2zB,iBAAOn1C,QAAD,IAAapP,EAAE4sB,KAAKrH,YAAYlH,KAAKre,EAAE6wB,KAAKtL,YAAYjH,KAAKte,EAAE2wB;AACrE4zB,iBAAOn1C,QAAD,IAAamW,YAAY0E;AAC/Bs6B,iBAAOn1C,QAAD,IAAamW,YAAY2E;AAC/Bu6B,gBAAMr1C,QAAD,IAAaijD,IAAI9sC,YAAYyD,UAAUhpB,EAAE6B,KAAzB;AACrB0iD,iBAAOn1C,QAAD,IAAapP,EAAE0sB,KAAKnH,YAAYjH,KAAKte,EAAE4wB;AAC7C2zB,iBAAOn1C,QAAD,IAAapP,EAAE4sB,KAAKrH,YAAYjH,KAAKte,EAAE2wB;AAC7C4zB,iBAAOn1C,QAAD,IAAamW,YAAYwE;AAC/Bw6B,iBAAOn1C,QAAD,IAAamW,YAAY2E;AAC/Bu6B,gBAAMr1C,MAAD,IAAWijD,IAAI9sC,YAAYwD,UAAU/oB,EAAE6B,KAAzB;AAAA,QACtB,OAAM;AAEH,cAAI0wD,KAAKvyD,EAAE0sB,KAAKnH,YAAYlH,KAAKre,EAAE0wB;AACnC,cAAI8hC,KAAKxyD,EAAE4sB,KAAKrH,YAAYjH,KAAKte,EAAE2wB;AAEnC4zB,iBAAOn1C,QAAD,IAAapP,EAAE0sB;AACrB63B,iBAAOn1C,QAAD,IAAapP,EAAE4sB;AACrB23B,iBAAOn1C,QAAD,IAAamW,YAAYwE;AAC/Bw6B,iBAAOn1C,QAAD,IAAamW,YAAYyE;AAC/By6B,gBAAMr1C,QAAD,IAAaijD,IAAI9sC,YAAYsD,UAAU7oB,EAAE6B,KAAzB;AACrB0iD,iBAAOn1C,QAAD,IAAamjD;AACnBhO,iBAAOn1C,QAAD,IAAapP,EAAE4sB;AACrB23B,iBAAOn1C,QAAD,IAAamW,YAAY0E;AAC/Bs6B,iBAAOn1C,QAAD,IAAamW,YAAYyE;AAC/By6B,gBAAMr1C,QAAD,IAAaijD,IAAI9sC,YAAYuD,UAAU9oB,EAAE6B,KAAzB;AACrB0iD,iBAAOn1C,QAAD,IAAamjD;AACnBhO,iBAAOn1C,QAAD,IAAaojD;AACnBjO,iBAAOn1C,QAAD,IAAamW,YAAY0E;AAC/Bs6B,iBAAOn1C,QAAD,IAAamW,YAAY2E;AAC/Bu6B,gBAAMr1C,QAAD,IAAaijD,IAAI9sC,YAAYyD,UAAUhpB,EAAE6B,KAAzB;AACrB0iD,iBAAOn1C,QAAD,IAAapP,EAAE0sB;AACrB63B,iBAAOn1C,QAAD,IAAaojD;AACnBjO,iBAAOn1C,QAAD,IAAamW,YAAYwE;AAC/Bw6B,iBAAOn1C,QAAD,IAAamW,YAAY2E;AAC/Bu6B,gBAAMr1C,MAAD,IAAWijD,IAAI9sC,YAAYwD,UAAU/oB,EAAE6B,KAAzB;AAAA,QACtB;AAAA,MACJ;AAAA;;aAED,SAAwB4mB,wBAAAA,aAAasK,mBAAmB;AAChD3jB,YAAAA,SAAUqZ,YAAYkhC,mBAAmBv6C,SAAS,KAAM;AAC5D,YAAIm1C,SAAS97B,YAAYq8B,MAAMP;AAC/B,YAAIE,QAAQh8B,YAAYq8B,MAAML;AAC9B,eAASF,OAAOn1C,MAAD,MAAa,KACvBm1C,OAAOn1C,SAAS,CAAV,MAAiB,KACvBm1C,OAAOn1C,SAAS,CAAV,MAAiB,KACvBm1C,OAAOn1C,SAAS,CAAV,MAAiB,KACvBq1C,MAAMr1C,SAAS,CAAV,MAAiB,cACtBm1C,OAAOn1C,SAAS,CAAV,MAAiB2jB,kBAAkBhpB,KACzCw6C,OAAOn1C,SAAS,CAAV,MAAiB,KACvBm1C,OAAOn1C,SAAS,CAAV,MAAiB,KACvBm1C,OAAOn1C,SAAS,CAAV,MAAiB,KACvBq1C,MAAMr1C,SAAS,CAAV,MAAiB,cACtBm1C,OAAOn1C,SAAS,EAAV,MAAkB2jB,kBAAkBhpB,KAC1Cw6C,OAAOn1C,SAAS,EAAV,MAAkB2jB,kBAAkB/oB,KAC1Cu6C,OAAOn1C,SAAS,EAAV,MAAkB,KACxBm1C,OAAOn1C,SAAS,EAAV,MAAkB,KACxBq1C,MAAMr1C,SAAS,EAAV,MAAkB,cACvBm1C,OAAOn1C,SAAS,EAAV,MAAkB,KACxBm1C,OAAOn1C,SAAS,EAAV,MAAkB2jB,kBAAkB/oB,KAC1Cu6C,OAAOn1C,SAAS,EAAV,MAAkB,KACxBm1C,OAAOn1C,SAAS,EAAV,MAAkB,KACxBq1C,MAAMr1C,SAAS,EAAV,MAAkB;AAAA,MAC/B;AAAA;;MAED,OAAA,SAAA,kBAAkBqZ,aAAa;AAE3B,YAAIrZ,SAASqZ,YAAY9mB,SAAS;AAClC,iBAASC,IAAI,GAAGF,IAAI+mB,YAAY29B,eAAezkD,QAAQC,IAAIF,GAAGE,KAAK;AAC/D6mB,sBAAY29B,eAAexkD,CAA3B,EAA8B2jD,6BAA6Bn2C;AACvDqjD,cAAAA,QAAQhqC,YAAY29B,eAAexkD,CAA3B,EAA8B8tB,OAAOq+B,6BAAiC,IAAA,IAAItlC,YAAY29B,eAAexkD,CAA3B,EAA8BD;AACpHyN,oBAAUqjD;AACV,cAAIA,OAAO;AACPhqC,wBAAY29B,eAAexkD,CAA3B,EAA8B8tB,OAAOgjC,wBAAwBjqC,YAAY29B,eAAexkD,CAA3B,GAA+B6mB,YAAYq8B,KAAxG;AAAA,UACH;AAAA,QACJ;AACDr8B,oBAAYq8B,MAAMZ,aAAa90C;AAAAA,MAClC;AAAA;;MAED,OAAA,SAAA,kBAAkBu3C,eAAejgC,eAAe1D,SAAS;AACrD,YAAM4jB,KAAK,KAAK9lB,MAAM8lB;AACtBA,WAAGgoB,YAAYhoB,GAAGioB,YAAYnoC,aAA9B;AACAkgB,WAAGkiB,gBAAgBliB,GAAGmiB,aAAapC,cAAcsC,WAAjD;AACA,YAAM3uB,YAAYqsB,cAAcrsB;AAChCsM,WAAG+rB,kBACC/rB,GAAGioB,YACH,GACAv0B,aAAatX,QAAQqO,MAAM,IAC3BiJ,aAAatX,QAAQsO,MAAM,IAC3BgJ,aAAatX,QAAQvY,KAAK,IAC1B6vB,aAAatX,QAAQtY,KAAK,IAC1B4vB,aAAatX,QAAQjZ,KAAK48C,cAAciM,KACxCt4B,aAAatX,QAAQhZ,KAAK28C,cAAckM,GAR5C;AAAA,MASH;AAAA;;IA/TsC5D;MCRtB6D;;;AAEjB,aAAAA,iBAAYptC,KAAK;AAAA,UAAA;AAAA,sBAAA,MAAAotC,gBAAA;AACb,cAAA,OAAA,KAAA,MAAMptC,GAAN;AAEKqtC,YAAAA,iBAAiB;AACjBC,YAAAA,QAAQ;AAJA,aAAA;AAAA,IAKhB;;;aAED,SAAiBzuD,iBAAAA,OAAO3D,GAAG;AACvB,aAAKmyD,eAAexuD,KAApB,IAA6B3D;AAAAA,MAChC;AAAA;;aAED,SAAY2D,YAAAA,OAAO3D,GAAG;AAClB,YAAIA,GAAG;AACH,eAAKoyD,MAAMzuD,KAAX,KAAqB;AAAA,QACxB,OAAM;AACEyuD,eAAAA,MAAMzuD,KAAX,KAAsB,KAAKyuD,MAAMzuD,KAAX,IAAoB;AAAA,QAC7C;AAAA,MACJ;AAAA;;aAED,SAASA,SAAAA,OAAO3D,GAAG;AACf,YAAIA,GAAG;AACH,eAAKoyD,MAAMzuD,KAAX,KAAqB;AAAA,QACxB,OAAM;AACEyuD,eAAAA,MAAMzuD,KAAX,KAAsB,KAAKyuD,MAAMzuD,KAAX,IAAoB;AAAA,QAC7C;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,iBAAiBA,OAAO;AACpB,eAAO,KAAKwuD,eAAexuD,KAApB;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,YAAYA,OAAO;AACf,eAAQ,KAAKyuD,MAAMzuD,KAAX,IAAoB;AAAA,MAC/B;AAAA;;MAED,OAAA,SAAA,SAASA,OAAO;AACZ,eAAQ,KAAKyuD,MAAMzuD,KAAX,IAAoB;AAAA,MAC/B;AAAA;;IAvCwCw/C;MCAxBkP;;;;;;;;;MAEjB,OAAA,SAAA,iBAAiB1uD,OAAO;AACb,eAAA,KAAKugD,MAAMoO,iBAAiB,KAAK3uD,QAAQA,KAAzC;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,YAAYA,OAAO;AACR,eAAA,KAAKugD,MAAMqO,YAAY,KAAK5uD,QAAQA,KAApC;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,SAASA,OAAO;AACL,eAAA,KAAKugD,MAAMsO,SAAS,KAAK7uD,QAAQA,KAAjC;AAAA,MACV;AAAA;;IAZ6CogD;MCE7B0O;;;;;;;;;aAEjB,SAAO,OAAA;AACEC,aAAAA,qBAAqB,KAAK5tC,IAAI5E,MAAMyyC,UAAf;AAAA,MAC7B;AAAA;;MAED,OAAA,SAAA,qBAAqB9M,IAAI;AACrB,YAAI/2B,SAAS+2B,GAAG/2B;AAEZ+2B,YAAAA,GAAG9kD,UAAU8kD,GAAG/2B,OAAO24B,SAAV,GAAsB;AACnC,cAAM5+C,SAAS,KAAKoc,kBAAkB,KAAKytC;AAC3C5jC,iBAAO44B,WAAW7B,IAAIh9C,MAAtB;AACAimB,iBAAOoX,KAAK2f,IAAIh9C,MAAhB;AACAimB,iBAAO64B,UAAU9B,IAAIh9C,MAArB;AAAA,QACH;AAAA,MACJ;AAAA;;aAED,SAAsB,sBAAA;AAClB,YAAMic,MAAM,KAAK8tC;AAEbpK,YAAAA,aAAa,CAAC,GAAG,GAAG,GAAG,CAAV;AACjB,YAAI,KAAKkK,mBAAmB5tC,QAAQA,KAAK;AACrC0jC,uBAAa,KAAK1jC,IAAI5E,MAAMqoC,cAAf;AAAA,QAChB;AAED,YAAMxC,gBAAgBjhC,IAAIyV;AAC1BzV,YAAI+tC,aAAa,GAAG,GAAG,GAAG,GAAG,GAAG,CAAhC;AACI,YAAA,CAACrK,WAAW,CAAD,KAAO,CAACA,WAAW,CAAD,KAAO,CAACA,WAAW,CAAD,KAAO,CAACA,WAAW,CAAD,GAAK;AACtE1jC,cAAIguC,UAAU,GAAG,GAAG/M,cAAchjC,OAAOgjC,cAAc/iC,MAAvD;AAAA,QACH,OAAM;AACH8B,cAAIia,YAAY//B,WAAW+zD,uBAAuBvK,UAAlC;AAEhB1jC,cAAIkuC,2BAA2B;AAC/BluC,cAAImuC,UAAJ;AACAnuC,cAAIouC,KAAK,GAAG,GAAGnN,cAAchjC,OAAOgjC,cAAc/iC,MAAlD;AACA8B,cAAIquC,UAAJ;AACAruC,cAAIsuC,KAAJ;AACAtuC,cAAIkuC,2BAA2B;AAAA,QAClC;AAAA,MACJ;AAAA;;aAED,SAAc,cAAA;AACN,YAAA,KAAK/tC,gBAAgB;AACd,iBAAA,KAAKA,eAAeH;AAAAA,QAC9B,OAAM;AACI,iBAAA,KAAK4tC,mBAAmB5tC;AAAAA,QAClC;AAAA,MACJ;AAAA;;aAED,SAAkB,kBAAA;AACd,YAAMA,MAAM,KAAK8tC;AACjB9tC,YAAIuuC,QAAJ;AACAvuC,YAAIwuC,KAAJ;AACAxuC,YAAIgD,WAAW;AAAA,MAClB;AAAA;;MAED,OAAA,SAAA,YAAYmJ,MAAM;AACd,YAAMnM,MAAM,KAAK8tC;AAEjB,YAAI,CAACH,uBAAsBc,mBAAmBzuC,IAAIyV,QAAQzV,IAAIgD,UAAUmJ,IAAnE,GAA0E;AAG3E,eAAKuiC,gBAAL;AAEI95B,cAAAA,YAAY,KAAK5U,IAAI5E,MAAMqmB,mBAAf;AAChB,cAAItV,MAAM;AACNnM,gBAAImuC,UAAJ;AACAnuC,gBAAIouC,KAAKxzD,KAAKiB,MAAMswB,KAAK,CAAD,IAAMyI,SAArB,GAAiCh6B,KAAKiB,MAAMswB,KAAK,CAAD,IAAMyI,SAArB,GAAiCh6B,KAAKiB,MAAMswB,KAAK,CAAD,IAAMyI,SAArB,GAAiCh6B,KAAKiB,MAAMswB,KAAK,CAAD,IAAMyI,SAArB,CAA5G;AACA5U,gBAAIquC,UAAJ;AACAruC,gBAAI2uC,KAAJ;AAAA,UACH;AACD3uC,cAAIgD,WAAWmJ;AAAAA,QAClB;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,mBAA0BsJ,QAAQtJ,MAAM0D,SAAS;AACzC,YAAA,CAAC1D,MAAM;AACPA,iBAAO,CAAC,GAAG,GAAGsJ,OAAOxX,OAAOwX,OAAOvX,MAA5B;AAAA,QACV;AACG,YAAA,CAAC2R,SAAS;AACVA,oBAAU,CAAC,GAAG,GAAG4F,OAAOxX,OAAOwX,OAAOvX,MAA5B;AAAA,QACb;AACD,eAAOngB,QAAM2B,YAAYysB,MAAM0D,OAAxB;AAAA,MACV;AAAA;;IAnF8CuwB;MCF9BwO;;;;;;;;;aAEjB,SAAW9L,WAAAA,WAAW;AAAA,MACrB;AAAA;;aAED,SAAKA,KAAAA,WAAW;AAAA,MACf;AAAA;;aAED,SAAUA,UAAAA,WAAW;AAAA,MACpB;AAAA;;IATkC7xB;MCClBu3B;;;AAEjB,aAAAA,eAAYxoC,KAAK;AAAA,UAAA;AAAA,sBAAA,MAAAwoC,cAAA;AACb,cAAA,OAAA,KAAA,MAAMxoC,GAAN;AACK6uC,YAAAA,oBAAoB7uC,IAAI5E,MAAM00B,iBAAiBryB,OAAOuD;AACtD8tC,YAAAA,eAAe,MAAK9uC,IAAI5E,MAAMkW,SAASy9B;AAH/B,aAAA;AAAA,IAIhB;;;aAED,SAAKjM,KAAAA,WAAW/+C,QAAQ;AACpB,YAAMic,MAAMjc,OAAOic;AACnB,YAAI/jB,SAAS6mD,UAAU7mD;AAClB,iBAAIC,IAAI,GAAGA,IAAID,QAAQC,KAAK;AAC7B,cAAMizB,KAAK2zB,UAAUzD,WAAWnjD,CAArB;AACX,cAAM8yD,KAAKlM,UAAUxD,eAAepjD,CAAzB;AACX,cAAM+yD,KAAKnM,UAAU0K,iBAAiBtxD,CAA3B;AACX,cAAMgzD,QAAQpM,UAAU4K,SAASxxD,CAAnB;AACd,cAAMizD,MAAMrM,UAAU2K,YAAYvxD,CAAtB;AAGN04B,cAAAA,YAAY,KAAK5U,IAAI5E,MAAMqmB,mBAAf;AAClBzhB,cAAI+tC,aAAakB,GAAGjkC,KAAK4J,WAAWq6B,GAAG9jC,KAAKyJ,WAAWq6B,GAAG/jC,KAAK0J,WAAWq6B,GAAGhkC,KAAK2J,WAAWq6B,GAAGjoC,KAAK4N,WAAWq6B,GAAG/nC,KAAK0N,SAAxH;AAEA,cAAMw5B,OAAQj/B,OAAO,KAAK0/B;AAC1B,cAAMO,OAAO;AAAA,YAACtM;AAAAA,YAAW/+C;AAAAA,YAAQlF,OAAO3C;AAAAA,YAAGkyD;AAAAA,UAA9B;AAEb,cAAIA,MAAM;AAEN,gBAAIc,OAAO;AACPlvC,kBAAIia,YAAY;AAAA,YACnB,OAAM;AACH,mBAAKo1B,kBAAkBrvC,KAAKgvC,EAA5B;AAAA,YACH;AAEDhvC,gBAAIiZ,cAAcg2B,GAAG9yD;AAChBmzD,iBAAAA,cAAcF,IAAnB;AACApvC,gBAAIkZ,SAAS,GAAG,GAAG81B,GAAG3qD,GAAG2qD,GAAG1qD,CAA5B;AACKirD,iBAAAA,aAAaH,IAAlB;AACApvC,gBAAIiZ,cAAc;AAAA,UACrB,OAAM;AAIHjZ,gBAAIiZ,cAAcg2B,GAAG9yD;AAChBmzD,iBAAAA,cAAcF,IAAnB;AAMA,gBAAMI,UAAUL,MAAM,IAAKH,GAAG3qC,OAAO8K,GAAG9qB;AACxC,gBAAMorD,UAAUN,MAAM,IAAKH,GAAG1qC,OAAO6K,GAAG7qB;AACxC,gBAAMorD,WAAWP,MAAM,IAAKH,GAAGzqC,OAAOyqC,GAAG3qC,QAAS8K,GAAG9qB;AACrD,gBAAMsrD,WAAWR,MAAM,IAAKH,GAAGxqC,OAAOwqC,GAAG1qC,QAAS6K,GAAG7qB;AAEjD+pB,gBAAAA,WAAW,CAAC6gC;AAChB,gBAAI7gC,UAAU;AAOV,kBAAI3zB,QAAQs0D,GAAG7rC;AACX6rC,kBAAAA,GAAG7rC,aAAa6rC,GAAG5rC,YAAY4rC,GAAG5rC,aAAa4rC,GAAG3rC,YAAY2rC,GAAG1rC,aAAa0rC,GAAG3rC,UAAU;AAC3F3oB,wBAAQR,WAAW01D,sBAAsB,CAACZ,GAAG7rC,UAAU6rC,GAAG5rC,UAAU4rC,GAAG3rC,UAAU2rC,GAAG1rC,QAA3C,CAAjC;AAAA,cACX;AAEKnnB,kBAAAA,SAAUzB,QAAQ,WAAY,KAAK;AACzCslB,kBAAIiZ,eAAe98B;AAEnB,kBAAM0zD,MAAMn1D,QAAQ;AACdo1D,kBAAAA,cAAc,KAAKhB,aAAaiB,eAAe5gC,IAAI0gC,GAArC;AAGpB7vC,kBAAIia,YAAY;AAChBja,kBAAIgwC,UAAUF,aAAaN,SAASC,SAASC,SAASC,SAAS,GAAG,GAAGX,GAAG3qD,GAAG2qD,GAAG1qD,CAA9E;AAAA,YACH,OAAM;AACH0b,kBAAIia,YAAY;AAChBja,kBAAIgwC,UAAU7gC,IAAIqgC,SAASC,SAASC,SAASC,SAAS,GAAG,GAAGX,GAAG3qD,GAAG2qD,GAAG1qD,CAArE;AAAA,YACH;AACIirD,iBAAAA,aAAaH,IAAlB;AACApvC,gBAAIiZ,cAAc;AAAA,UACrB;AAAA,QACJ;AAAA,MACJ;AAAA;;aAED,SAAkBjZ,kBAAAA,KAAKgvC,IAA6C;AAAA,YAAzC3qD,IAAyC,UAAA,SAAA,KAAA,UAAA,CAAA,MAAA,SAAA,UAAA,CAAA,IAArC2qD,GAAG3qD;AAAkC,YAA/BC,IAA+B,UAAA,SAAA,KAAA,UAAA,CAAA,MAAA,SAAA,UAAA,CAAA,IAA3B0qD,GAAG1qD;AAAG2rD,YAAAA,gFAAe;AAC1D,YAAIv1D,QAAQs0D,GAAG7rC;AACf,YAAI+sC;AAIJ,YAAIlB,GAAG7rC,aAAa6rC,GAAG5rC,UAAU;AAC7B,cAAI4rC,GAAG3rC,aAAa2rC,GAAG1rC,UAAU;AACzB0rC,gBAAAA,GAAG7rC,aAAa6rC,GAAGlgB;AAAS;AAAA,iBAEzB;AAEHohB,yBAAWlwC,IAAImwC,qBAAqB,GAAG,GAAG,GAAG7rD,CAAlC;AACX,kBAAI2rD,cAAc;AACdC,yBAASE,aAAa,GAAGl2D,WAAWggC,cAAc80B,GAAG7rC,QAA5B,CAAzB;AACA+sC,yBAASE,aAAa,GAAGl2D,WAAWggC,cAAc80B,GAAG3rC,QAA5B,CAAzB;AAAA,cACH,OAAM;AACH6sC,yBAASE,aAAa,GAAGl2D,WAAWm2D,aAAarB,GAAG7rC,QAA3B,CAAzB;AACA+sC,yBAASE,aAAa,GAAGl2D,WAAWm2D,aAAarB,GAAG3rC,QAA3B,CAAzB;AAAA,cAEH;AAAA,YACJ;AAAA,UAGJ;AAAA,QACJ,OAAM;AACH,cAAI2rC,GAAG7rC,aAAa6rC,GAAG3rC,YAAY2rC,GAAG5rC,aAAa4rC,GAAG1rC,UAAU;AAE5D4sC,uBAAWlwC,IAAImwC,qBAAqB,GAAG,GAAG9rD,GAAG,CAAlC;AACX,gBAAI4rD,cAAc;AACdC,uBAASE,aAAa,GAAGl2D,WAAWggC,cAAc80B,GAAG7rC,QAA5B,CAAzB;AACA+sC,uBAASE,aAAa,GAAGl2D,WAAWggC,cAAc80B,GAAG1rC,QAA5B,CAAzB;AAAA,YACH,OAAM;AACH4sC,uBAASE,aAAa,GAAGl2D,WAAWm2D,aAAarB,GAAG7rC,QAA3B,CAAzB;AACA+sC,uBAASE,aAAa,GAAGl2D,WAAWm2D,aAAarB,GAAG1rC,QAA3B,CAAzB;AAAA,YACH;AAAA,UACJ;AAAA,QACJ;AAED,YAAI4sC,UAAU;AACVlwC,cAAIia,YAAYi2B;AAAAA,QACnB,OAAM;AACHlwC,cAAIia,YAAYg2B,eAAe/1D,WAAWggC,cAAcx/B,KAAzB,IAAkCR,WAAWm2D,aAAa31D,KAAxB;AAAA,QACpE;AAAA,MACJ;AAAA;;aAED,SAAc00D,cAAAA,MAAM;AAAA,MACnB;AAAA;;aAED,SAAaA,aAAAA,MAAM;AAAA,MAClB;AAAA;;IAxIsCR;MCHtB0B;AAEjB,aAAAA,uBAAYl1C,OAAO;AAAA,sBAAA,MAAAk1C,sBAAA;AACVl1C,WAAAA,QAAQA;AACRm1C,WAAAA,cAAc;AACnB,WAAKC,wBAAwB,oBAAIl1C;IACpC;;;aAED,SAAU,UAAA;AACDmrB,aAAAA,GAAG,IAAR;AAEKrrB,aAAAA,QAAQ;AACb,eAAO,KAAKA;AAAAA,MACf;AAAA;;MAED,OAAA,SAAA,gBAAgBq1C,OAAO;AACdF,aAAAA,eAAeE;AAEpB,aAAKr1C,MAAMs1C,eAAeD,KAA1B;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,QAAOzvC,eAAe;AAElB,YAAI,KAAK2vC,UAAU3vC,aAAf,GAA+B;AAC/B,cAAM2M,QAAQ,KAAKijC,UAAU5vC,aAAf;AACd,cAAM6vC,eAAeljC,MAAMmjC;AAC3BnjC,gBAAMg2B,MAAN;AACA,eAAK6M,sBAAsBp0C,OAAO4E,aAAlC;AACA,eAAK+vC,gBAAgBpjC,MAAMmjC,cAAcD,YAAzC;AAAA,QACH;AAAA,MACJ;AAAA;;aAED,SAAe7vC,eAAAA,eAAetmB,OAAO;AACjC,YAAMs2D,QAAQ,KAAK51C,MAAMuD;AAEzB,aAAK6xC,sBAAsBr0C,IAAI6E,aAA/B;AAEA,YAAM2M,QAAQ,KAAKijC,UAAU5vC,aAAf;AAEd,YAAMnd,OAAO8pB,MAAMsY,IAAIvrC,KAAV;AACbmJ,aAAKotD,KAAKD;AAENntD,YAAAA,KAAKsrB,IAAI;AACT,cAAInO,cAActC,SAAS7a,KAAKqtD,GAAG;AAE1BC,iBAAAA,aAAattD,KAAKsrB,IAAInO,eAAetmB,KAA1C;AAAA,UACH;AAEMmJ,iBAAAA,KAAKsrB;AAAAA,QACf,OAAM;AACH,cAAMiiC,SAASzjC,MAAMmjC;AAGrB,cAAI/sD,SAAS4pB,MAAM0jC,aAAaL,KAAnB;AACb,cAAIjtD,QAAQ;AACRA,mBAAOic,IAAIguC,UAAU,GAAG,GAAGjqD,OAAOka,OAAOla,OAAOma,MAAhD;AAAA,UACH,OAAM;AAEHna,qBAASwyB,SAASsQ,cAAc,QAAvB;AACT9iC,mBAAOka,QAAQ+C,cAAc3c;AAC7BN,mBAAOma,SAAS8C,cAAc1c;AAC9BP,mBAAOic,MAAMjc,OAAO8xB,WAAW,IAAlB;AAAA,UAChB;AAED,eAAKs7B,aAAaptD,QAAQid,eAAetmB,KAAzC;AACAizB,gBAAMxa,IAAIzY,OAAOqJ,QAAQitD,KAAzB;AAEA,cAAMM,QAAQ3jC,MAAMmjC;AAEhBQ,cAAAA,UAAUF,QAAQ;AAClB,iBAAKL,gBAAgBO,QAAQF,MAA7B;AAAA,UACH;AAED,iBAAOrtD;AAAAA,QACV;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,aAAaA,QAAQ0Z,QAAQ/iB,OAAO;AAChC,YAAI62D,MAAM72D,MAAMomC,SAAS,EAAf;AACV,eAAOywB,IAAIt1D,SAAS,GAAG;AACnBs1D,gBAAM,MAAMA;AAAAA,QACf;AACDxtD,eAAOic,IAAIia,YAAY,MAAMs3B;AAC7BxtD,eAAOic,IAAIkuC,2BAA2B;AACtCnqD,eAAOic,IAAIkZ,SAAS,GAAG,GAAGzb,OAAOpZ,GAAGoZ,OAAOnZ,CAA3C;AACAP,eAAOic,IAAIkuC,2BAA2B;AACtCnqD,eAAOic,IAAIgwC,UAAUvyC,QAAQ,GAAG,GAAGA,OAAOpZ,GAAGoZ,OAAOnZ,GAAG,GAAG,GAAGP,OAAOka,OAAOla,OAAOma,MAAlF;AAGAna,eAAOic,IAAIkuC,2BAA2B;AACtCnqD,eAAOic,IAAIgwC,UAAUvyC,QAAQ,GAAG,GAAGA,OAAOpZ,GAAGoZ,OAAOnZ,GAAG,GAAG,GAAGP,OAAOka,OAAOla,OAAOma,MAAlF;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,UAAU8C,eAAe;AACrB,eAAO,CAAC,CAACA,cAAcwwC;AAAAA,MAC1B;AAAA;;MAED,OAAA,SAAA,UAAUxwC,eAAe;AACrB,YAAI,CAACA,cAAcwwC,YAAY;AAC3BxwC,wBAAcwwC,aAAa,IAAIC,aAAazwC,aAAjB;AAAA,QAC9B;AACMA,eAAAA,cAAcwwC;AAAAA,MACxB;AAAA;;aAED,SAAuB,KAAA;AAAA,YAAA,QAAA;AAApB/H,YAAAA,8EAAa;AACZ,YAAMuH,QAAQ,KAAK51C,MAAMuD;AACrB8xC,YAAAA,QAAQ;AACZ,aAAKD,sBAAsB5wD,QAAQ,SAAA4c,SAAW;AAAA,yBAAA,MAAA,KAAA;AAC1C,cAAMmR,QAAQ,KAAKijC,UAAUp0C,OAAf;AACd,cAAIitC,YAAY;AACZgH,qBAAS9iC,MAAMmjC;AACfnjC,kBAAMg2B,MAAN;AAAA,UACH,OAAM;AACH,gBAAMyN,SAASzjC,MAAMmjC;AACrBnjC,kBAAM0D,QAAQ2/B,KAAd;AACArjC,kBAAM+jC,sBAAN;AACAjB,qBAAU9iC,MAAMmjC,cAAcM;AAAAA,UACjC;AAAA,QACJ,EAXD,KAAA,IAAA,CAAA;AAaA,YAAI3H,YAAY;AACP+G,eAAAA,sBAAsB7M;QAC9B;AAED,YAAI8M,OAAO;AACFM,eAAAA,gBAAgBN,KAArB;AAAA,QACH;AAAA,MACJ;AAAA;;;MAICgB;AAEF,aAAAA,cAAYzwC,eAAe;AAAA,sBAAA,MAAAywC,aAAA;AAClBE,WAAAA,MAAM3wC;AACX,WAAK4wC,UAAU,oBAAIxlB;AACdylB,WAAAA,kBAAkB;AAClBC,WAAAA,oBAAoB;AACpBC,WAAAA,eAAe;AAAA,IACvB;;;WAED,SAAkB,MAAA;AACP,eAAA,KAAKA,eAAe,KAAKJ,IAAIttD,IAAI,KAAKstD,IAAIrtD;AAAAA,MACpD;AAAA;;aAED,SAAwB,wBAAA;AACpB,aAAKytD,gBAAgB,KAAKF,gBAAgB51D;AACrC41D,aAAAA,kBAAkB;MAC1B;AAAA;;aAED,SAAQ,QAAA;AAECA,aAAAA,kBAAkB;AAClBD,aAAAA,QAAQjO;AACRoO,aAAAA,eAAe;AAAA,MACvB;AAAA;;MAED,OAAA,SAAA,IAAIr3D,OAAO;AACHmJ,YAAAA,OAAO,KAAK+tD,QAAQ3rB,IAAIvrC,KAAjB;AACP,YAAA,CAACmJ,MAAM;AACPA,iBAAO;AAAA,YAACotD,IAAI;AAAA,YAAI9hC,IAAIna;AAAAA,YAAWk8C,GAAG;AAAA,UAA3B;AACP,eAAKU,QAAQz+C,IAAIzY,OAAOmJ,IAAxB;AAAA,QACH;AACD,eAAOA;AAAAA,MACV;AAAA;;MAED,OAAA,SAAAsP,KAAIzY,OAAO8hB,SAASw0C,OAAO;AACvB,YAAMntD,OAAO,KAAKoiC,IAAIvrC,KAAT;AACbmJ,aAAKotD,KAAKD;AACVntD,aAAKsrB,KAAK3S;AACV3Y,aAAKqtD,IAAIF;AACT,aAAKe;AAAAA,MACR;AAAA;;MAED,OAAA,SAAA,QAAQf,OAAO;AAAA,YAAA,SAAA;AAEX,YAAI,KAAKc,sBAAsBd,OAAO;AAG7Ba,eAAAA,kBAAkB;AAElBD,eAAAA,QAAQhyD,QAAQ,SAACiE,MAAMnJ,OAAU;AAAA,2BAAA,MAAA,MAAA;AAElC,gBAAImJ,KAAKotD,KAAKD,QAAQ,GAAG;AACjBntD,kBAAAA,KAAKsrB,IAAI;AAET,qBAAK0iC,gBAAgBhyD,KAAKgE,KAAKsrB,EAA/B;AAAA,cACH;AACD,mBAAKyiC,QAAQx1C,OAAO1hB,KAApB;AAAA,YACH;AAAA,UACJ,EATD,KAAA,IAAA,CAAA;AAWKo3D,eAAAA,oBAAoBd;AAAAA,QAC5B;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,aAAaA,OAAO;AAEX3/B,aAAAA,QAAQ2/B,KAAb;AACA,YAAI,KAAKa,mBAAmB,KAAKA,gBAAgB51D,QAAQ;AACrD,eAAK81D;AACL,iBAAO,KAAKF,gBAAgBn1B;QAC/B;AAAA,MACJ;AAAA;;;MClMgBs1B;;;AAEjB,aAAAA,aAAY52C,OAAO;AAAA,UAAA;AAAA,sBAAA,MAAA42C,YAAA;AACf,cAAA,OAAA,KAAA,MAAM52C,KAAN;AAEA,YAAK2zC,cAAc,IAAIkD,sBAAmB72C,KAAvB;AAEnB,YAAK82C,SAAS,MAAK92C,MAAM+2C,IAAI18B,MAA7B;AALe,aAAA;AAAA,IAMlB;;;aAED,SAAU,UAAA;AACDs5B,aAAAA,YAAYxE;AAEZwE,aAAAA,cAAc;AACnB,eAAO,KAAKA;AAAAA,MACf;AAAA;;MAED,OAAA,SAAA,qBAAqB/uC,KAAK;AACtB,eAAO,IAAIwoC,cAAcxoC,GAAlB;AAAA,MACV;AAAA;;aAED,SAAqB,qBAAA;AACjB,eAAO4uC;AAAAA,MACV;AAAA;;MAED,OAAA,SAAA,sBAAsBjF,YAAY;AAC9B,eAAOA,WAAWyI,UAAUzI,WAAWyI,OAAX;AAAA,MAC/B;AAAA;;MAED,OAAA,SAAA,mBAAmBpyC,KAAK;AACpB,eAAO,IAAIotC,gBAAgBptC,GAApB;AAAA,MACV;AAAA;;aAED,SAAwBA,wBAAAA,KAAKgK,QAAQk1B,aAAa7xB,mBAAmB8xB,SAAStgD,OAAO;AACjF,eAAO,IAAI0uD,qBAAqBvtC,KAAKgK,QAAQk1B,aAAa7xB,mBAAmB8xB,SAAStgD,KAA/E;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,yBAAyBmhB,KAAK;AAC1B,eAAO,IAAI2tC,sBAAsB3tC,GAA1B;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,sBAAsBA,KAAK;AACvB,eAAO,IAAI8jC,gBAAgB9jC,GAApB;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,oBAAoB3b,GAAGC,GAAGqmB,IAAI+gB,IAAI;AAC9B,YAAMjW,SAASc,SAASsQ,cAAc,QAAvB;AACfpR,eAAOxX,QAAQ0M;AACf8K,eAAOvX,SAASwtB;AACXwmB,aAAAA,SAASz8B,MAAd;AACA,eAAOA;AAAAA,MACV;AAAA;;MAED,OAAA,SAAA,kBAAkBzU,eAAe;AAC7B,aAAK+tC,YAAY3yC,OAAO4E,aAAxB;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,GAAGyoC,YAAY;AACX,aAAKsF,YAAYtoB,GAAGgjB,UAApB;AAAA,MACH;AAAA;;aAED,SAAoB1gC,oBAAAA,eAAezL,SAAS;AAExC,YAAIA,QAAQG,OAAO40C,QAAQ;AAEvB,cAAM58B,SAASc,SAASsQ,cAAc,QAAvB;AACfpR,iBAAOxX,QAAQX,QAAQjZ;AACvBoxB,iBAAOvX,SAASZ,QAAQhZ;AAElBguD,cAAAA,YAAY,IAAIC,UAAU,IAAIC,kBAAkBl1C,QAAQG,OAAO40C,MAArC,GAA8C/0C,QAAQjZ,GAAGiZ,QAAQhZ,CAA/E;AAClBmxB,iBAAOI,WAAW,IAAlB,EAAwB48B,aAAaH,WAAW,GAAG,CAAnD;AACA,iBAAO78B;AAAAA,QACV;AAEMnY,eAAAA,QAAQG;AAAAA,MAClB;AAAA;;MAED,OAAA,SAAA,kBAAkBsL,eAAe;AAC7B,aAAKgmC,YAAY3yC,OAAO2M,cAAc/H,aAAtC;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,QAAQ+B,aAAaq8B,OAAOvgD,OAAO;AAE/B,YAAMghB,cAAcu/B,MAAMb,aAAa1/C,KAAnB;AACpBugD,cAAMsT,iBAAiB7zD,OAAOghB,YAAYiD,cAA1C;AACAs8B,cAAMuT,SAAS9zD,OAAOghB,YAAY+yC,QAAlC,CAAA;AACAxT,cAAMyT,YAAYh0D,OAAOghB,YAAYizC,mBAArC,CAAA;AAAA,MACH;AAAA;;aAED,SAAwB/vC,wBAAAA,aAAasK,mBAAmB;AAEpD,eAAO;AAAA,MACV;AAAA;;aAED,SAAkBtK,kBAAAA,aAAa;AAAA,MAC9B;AAAA;;MAED,OAAA,SAAA,SAAS0S,QAAQ;AACb,YAAMzV,MAAMyV,OAAOI,WAAW,IAAlB;AACZJ,eAAOzV,MAAMA;AAEbA,YAAIgD,WAAW;AAGfyS,eAAOzV,IAAIwuC;MACd;AAAA;;IAzGoCjF;MCPpBwJ;;;;;;;;;aAEjB,SAAgB,gBAAA;AAER7xB,YAAAA,KAAK,KAAKA;AACdA,WAAGunB,oBAAoB,KAAKC,QAAQ,iBAAb,GAAiC,GAAGxnB,GAAGynB,OAAO,OAAO,IAAI,CAAhF;AACAznB,WAAG0nB,wBAAwB,KAAKF,QAAQ,iBAAb,CAA3B;AAEA,YAAI,KAAKA,QAAQ,eAAb,MAAkC,IAAI;AACtCxnB,aAAGunB,oBAAoB,KAAKC,QAAQ,eAAb,GAA+B,GAAGxnB,GAAGynB,OAAO,OAAO,IAAI,IAAI,CAAlF;AACAznB,aAAG0nB,wBAAwB,KAAKF,QAAQ,eAAb,CAA3B;AAAA,QACH;AAED,YAAI,KAAKA,QAAQ,QAAb,MAA2B,IAAI;AAE/BxnB,aAAGunB,oBAAoB,KAAKC,QAAQ,QAAb,GAAwB,GAAGxnB,GAAG2nB,eAAe,MAAM,IAAI,IAAI,CAAlF;AACA3nB,aAAG0nB,wBAAwB,KAAKF,QAAQ,QAAb,CAA3B;AAAA,QACH;AAAA,MACJ;AAAA;;aAED,SAAiB,iBAAA;AAETxnB,YAAAA,KAAK,KAAKA;AACdA,WAAG4nB,yBAAyB,KAAKJ,QAAQ,iBAAb,CAA5B;AAEA,YAAI,KAAKA,QAAQ,eAAb,MAAkC,IAAI;AACtCxnB,aAAG4nB,yBAAyB,KAAKJ,QAAQ,eAAb,CAA5B;AAAA,QACH;AAED,YAAI,KAAKA,QAAQ,QAAb,MAA2B,IAAI;AAC/BxnB,aAAG4nB,yBAAyB,KAAKJ,QAAQ,QAAb,CAA5B;AAAA,QACH;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,cAAc5F,WAAW;AACrB,aAAKiG,YAAY,cAAc,KAAKR,eAAezF,SAApB,GAAgC,KAAK5hB,GAAG8nB,YAAY,KAAnF;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,KAAKlG,WAAW;AACR5hB,YAAAA,KAAK,KAAKA;AAEd,YAAIjlC,SAAS6mD,UAAU7mD;AAEvB,YAAIA,QAAQ;AACR,cAAIgtD,YAAYnG,UAAUzD,WAAW,CAArB;AACZp6C,cAAAA,MAAM;AACL,mBAAI/I,IAAI,GAAGA,IAAID,QAAQC,KAAK;AAC7B,gBAAIizB,KAAK2zB,UAAUzD,WAAWnjD,CAArB;AACL+sD,gBAAAA,cAAc95B,IAAI;AACd85B,kBAAAA,UAAU3rC,WAAW2rC,UAAU3rC,QAAQa,UAAU;AAC7C60C,oBAAAA,iBAAkB92D,IAAI,IAAMA,IAAI,IAAKA;AACnC04B,oBAAAA,YAAY,KAAK5U,IAAI5E,MAAM2P,UAAU,WAAzB;AAClB,oBAAIikC,KAAKlM,UAAUxD,eAAe0T,cAAzB;AACT,qBAAKhzC,IAAI5E,MAAMka,SAAS29B,MAAM/xB,IAAI+nB,UAAU3rC,QAAQa,UAAU6wC,GAAGttC,cAAcsF,KAAG4N,WAAWo6B,GAAGttC,cAAcwF,KAAG0N,WAAWo6B,GAAG7rC,UAAU6rC,EAAzI;AAAA,cACH,OAAM;AACH9tB,mBAAGgoB,YAAYhoB,GAAGioB,YAAYF,SAA9B;AACA/nB,mBAAGkoB,aAAaloB,GAAGmoB,WAAW,KAAKntD,IAAI+I,MAAMi8B,GAAGooB,iBAAiBrkD,MAAM69C,UAAUjkD,SAAS,IAAI,CAA9F;AAAA,cACH;AACDoqD,0BAAY95B;AACZlqB,oBAAM/I;AAAAA,YACT;AAAA,UACJ;AACG+I,cAAAA,MAAMhJ,QAAQ;AACVgtD,gBAAAA,UAAU3rC,WAAW2rC,UAAU3rC,QAAQa,UAAU;AAC3CyW,kBAAAA,aAAY,KAAK5U,IAAI5E,MAAM2P,UAAU,WAAzB;AAClB,kBAAIikC,MAAKlM,UAAUxD,eAAer6C,GAAzB;AACT,mBAAK+a,IAAI5E,MAAMka,SAAS29B,MAAM/xB,IAAI+nB,UAAU3rC,QAAQa,UAAU6wC,IAAGttC,cAAcsF,KAAG4N,YAAWo6B,IAAGttC,cAAcwF,KAAG0N,YAAWo6B,IAAG7rC,UAAU6rC,GAAzI;AAAA,YACH,OAAM;AACH9tB,iBAAGgoB,YAAYhoB,GAAGioB,YAAYF,SAA9B;AACA/nB,iBAAGkoB,aAAaloB,GAAGmoB,WAAW,KAAKptD,SAASgJ,MAAMi8B,GAAGooB,iBAAiBrkD,MAAM69C,UAAUjkD,SAAS,IAAI,CAAnG;AAAA,YACH;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA;;IAzEoC6oD;AA6EzCqL,cAAY3N,qBAAZ;AAsBA2N,cAAY1N,uBAAZ;MClGqB6N;;;AAEjB,aAAAA,eAAY93C,OAAO;AAAA,sBAAA,MAAA83C,cAAA;AAAA,aAAA,OAAA,KAAA,MACT93C,KADS;AAAA,IAElB;;;MAED,OAAA,SAAA,qBAAqB4E,KAAK;AACtB,eAAO,IAAI+yC,YAAY/yC,GAAhB;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,yBAAyBA,KAAK;AAC1BmzC,eAAOC,aAAP;AACIC,YAAAA,MAAqCrzC,KAAAA,gBAAAA,eAAAA,SAAAA,GAAAA,4BAAAA,IAAAA,EAAAA,KAAAA,MAAAA,GAAlC;AACPmzC,eAAOG,WAAP;AACA,eAAOD;AAAAA,MACV;AAAA;;IAfsCtJ;MCHtBwJ;AAES,aAAAA,eAAA;AAAA,sBAAA,MAAAA,YAAA;AACtB,WAAKz8C,SAAS,oBAAIs1B;AACbonB,WAAAA,MAAM;AAEX,WAAKC,YAAL;AAAA,IACH;;;aAED,SAAU,UAAA;AACF,YAAA,KAAKC,SAAS;AACTA,eAAAA,QAAQC;QAChB;AAEI78C,aAAAA,SAAS;AACT48C,aAAAA,UAAU;AAEf,eAAO,KAAK58C;AACZ,eAAO,KAAK48C;AAAAA,MACf;AAAA;;aAED,SAAc,cAAA;AAAA,YAAA,QAAA;AACV,YAAMjb,OAAWmb,IAAAA,OAAAA,aAAa9yB,SAAb,GAAjB,KAAA;AACA,YAAM+yB,OAAO,IAAIC,KAAK,CAACrb,KAAK/T,QAAQ,iBAAiB,EAA9B,CAAD,CAAT;AACb,YAAMqvB,WAAW3zD,OAAO4zD,MAAMA,MAAMC,WAAWC,gBAAgBL,MAAM;AAAA,UACjEl1D,MAAM;AAAA,QAD2D,CAArD;AAGhB,aAAK+0D,UAAU,IAAIS,OAAOJ,OAAX;AAEVL,aAAAA,QAAQU,YAAY;AAAA,UAACz1D,MAAM;AAAA,UAAU01D,QAAQ;AAAA,YAACjnB,MAAMhtC,OAAO0mD,SAASwN;AAAAA,YAAMC,UAAUn0D,OAAO0mD,SAASyN;AAAAA,UAAvD;AAAA,QAAzB,CAAzB;AAEA,aAAKb,QAAQc,YAAY,SAACn1C,GAAM;AAAA,yBAAA,MAAA,KAAA;AACxBA,cAAAA,EAAEs/B,QAAQt/B,EAAEs/B,KAAKxjC,IAAI;AACrB,gBAAMA,KAAKkE,EAAEs/B,KAAKxjC;AACZtX,gBAAAA,OAAO,KAAKiT,OAAOmvB,IAAI9qB,EAAhB;AACb,gBAAItX,MAAM;AACN,kBAAIwb,EAAEs/B,KAAKhgD,QAAQ,QAAQ;AAClBsyC,qBAAAA,OAAOptC,MAAMwb,EAAEs/B,KAAKyQ,IAAzB;AAAA,cACH,OAAM;AACEpuD,qBAAAA,MAAM6C,MAAMwb,EAAEs/B,KAAKyQ,IAAxB;AAAA,cACH;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ,EAZD,KAAA,IAAA;AAAA,MAaH;AAAA;;MAED,OAAA,SAAA,OAAOj6B,KAAK;AACR,YAAMha,KAAK,EAAE,KAAKq4C;AACZ3vD,YAAAA,OAAO,IAAI4wD,iBAAiB,MAAMt5C,IAAIga,GAA/B;AACb,aAAKre,OAAO3D,IAAIgI,IAAItX,IAApB;AACK6vD,aAAAA,QAAQU,YAAY;AAAA,UAACz1D,MAAM;AAAA,UAAOwc;AAAAA,UAAQga;AAAAA,QAAtB,CAAzB;AACA,eAAOtxB;AAAAA,MACV;AAAA;;MAED,OAAA,SAAA,OAAO6wD,OAAO;AACLhB,aAAAA,QAAQU,YAAY;AAAA,UAACz1D,MAAM;AAAA,UAAUwc,IAAIu5C,MAAMv5C;AAAAA,QAA3B,CAAzB;AACA,aAAKrE,OAAOsF,OAAOs4C,MAAMv5C,EAAzB;AAAA,MACH;AAAA;;aAED,SAAMu5C,MAAAA,OAAOtF,MAAM;AACfsF,cAAM1zD,MAAMouD,IAAZ;AACA,aAAKt4C,OAAOsF,OAAOs4C,MAAMv5C,EAAzB;AAAA,MACH;AAAA;;aAED,SAAOu5C,OAAAA,OAAOtF,MAAM;AAChBsF,cAAM73C,KAAKuyC,IAAX;AACA,aAAKt4C,OAAOsF,OAAOs4C,MAAMv5C,EAAzB;AAAA,MACH;AAAA;;;MAICs5C;AAEF,aAAAA,kBAAYx5C,SAASE,IAAIga,KAAK;AAAA,sBAAA,MAAAs/B,iBAAA;AACrBE,WAAAA,WAAW15C;AACXu4C,WAAAA,MAAMr4C;AACN+Z,WAAAA,OAAOC;AACPy/B,WAAAA,WAAW;AACXC,WAAAA,UAAU;AAAA,IAClB;;;WAED,SAAS,MAAA;AACL,eAAO,KAAKrB;AAAAA,MACf;AAAA;;WAED,SAAU,MAAA;AACN,eAAO,KAAKt+B;AAAAA,MACf;AAAA;;MAED,KAAA,SAAA/hB,KAAYc,GAAG;AACN2gD,aAAAA,WAAW3gD;AAAAA,MACnB;AAAA;;MAED,KAAA,SAAAd,KAAWc,GAAG;AACL4gD,aAAAA,UAAU5gD;AAAAA,MAClB;AAAA;;aAED,SAAS,SAAA;AACL,aAAK0gD,SAAS73C,OAAO,IAArB;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,KAAKsyC,MAAM;AACH,YAAA,KAAKyF,SAAS;AACTA,eAAAA,QAAQzF,IAAb;AAAA,QACH;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,MAAMA,MAAM;AACJ,YAAA,KAAKwF,UAAU;AACVA,eAAAA,SAASxF,IAAd;AAAA,QACH;AAAA,MACJ;AAAA;;;AAQL,MAAMwE,eAAe,SAAfA,gBAA0B;AAE5B,aAASkB,oBAAoB;AAEzB,WAAKztD,QAAQ,oBAAI+kC;AAEbrwC,UAAAA,IAAI;AACRy4D,kBAAY,SAASn1C,WAAAA,GAAG;AACpBtjB,UAAEg5D,gBAAgB11C,CAAlB;AAAA,MACH;AAAA,IAEJ;AAEDy1C,sBAAkBE,iBAAiB,SAAS5nB,MAAM;AAC9C,aAAO,sBAAsBxP,KAAKwP,IAA3B,KAAoCA,KAAK3vC,OAAO,GAAG,CAAf,KAAqB;AAAA,IACnE;AAEDq3D,sBAAkBp1C,UAAUq1C,kBAAkB,SAAS11C,GAAG;AACtD,UAAIA,EAAEs/B,KAAKhgD,SAAS,UAAU;AAC1B,aAAK01D,SAASh1C,EAAEs/B,KAAK0V;AAErB,YAAIY,OAAO,KAAKZ,OAAOjnB;AAGnB8nB,YAAAA,cAAc;AAClB,YAAGA,YAAYt3B,KAAKq3B,IAAjB,GAAuB;AACtBA,iBAAOA,KAAKvwB,QAAQ,QAAO,EAApB;AAAA,QACV;AAED,YAAIlnC,QAAQy3D,KAAKv3D,MAAM,GAAX;AACZF,cAAMk/B,IAAN;AACKy4B,aAAAA,gBAAgB33D,MAAM6W,KAAK,GAAX,IAAkB;AAAA,MAb3C,WAeWgL,EAAEs/B,KAAKhgD,SAAS,OAAO;AAC9B,aAAKwd,IAAIkD,EAAEs/B,KAAKxjC,IAAIkE,EAAEs/B,KAAKxpB,GAA3B;AAAA,MADG,WAEI9V,EAAEs/B,KAAKhgD,SAAS,UAAU;AACjC,aAAKme,OAAOuC,EAAEs/B,KAAKxjC,EAAnB;AAAA,MACH;AAAA,IACJ;AAED25C,sBAAkBp1C,UAAUvD,MAAM,SAAShB,IAAIga,KAAK;AAEhD,UAAI,CAAC2/B,kBAAkBE,eAAe7/B,GAAjC,GAAuC;AACxCA,cAAM,KAAKggC,gBAAgBhgC;AAAAA,MAC9B;AAEGA,UAAAA,IAAI13B,OAAO,GAAE,CAAb,MAAoB,MAAM;AAE1B03B,cAAM,KAAKk/B,OAAOE,WAAWp/B;AAAAA,MAChC;AAEGtxB,UAAAA,OAAO,IAAIuxD,sBAAsBj6C,IAAIga,GAA9B;AACPp5B,UAAAA,IAAI;AACR8H,WAAKwxD,WAAW,SAAS11D,QAAQ;AAC7B5D,UAAEk1C,OAAOptC,MAAMlE,MAAf;AAAA,MACH;AACDkE,WAAK2Z,UAAU,SAAS4xC,MAAM;AAC1BrzD,UAAEiF,MAAM6C,MAAMurD,IAAd;AAAA,MACH;AACD,WAAK/nD,MAAM8L,IAAIgI,IAAItX,IAAnB;AACAA,WAAK0tC,MAAL;AAAA,IACH;AAEDujB,sBAAkBp1C,UAAU5C,SAAS,SAAS3B,IAAI;AAC1CtX,UAAAA,OAAO,KAAKwD,MAAM4+B,IAAI9qB,EAAf;AACX,UAAItX,MAAM;AACNA,aAAKiZ,OAAL;AACA,aAAKzV,MAAM+U,OAAOjB,EAAlB;AAAA,MACH;AAAA,IACJ;AAED25C,sBAAkBp1C,UAAUuxB,SAAS,SAASptC,MAAsC,MAAA;AAA/ByxD,UAAAA,mBAAAA,aAAaC,uBAAAA;AAC9DnB,kBAAY;AAAA,QACRz1D,MAAM;AAAA,QACNwc,IAAItX,KAAKsX;AAAAA,QACTi0C,MAAM;AAAA,UACFkG;AAAAA,UACAC;AAAAA,QAFE;AAAA,MAHE,GAOT,CAACD,WAAD,CAPQ;AAQX,WAAKjuD,MAAM+U,OAAOvY,KAAKsX,EAAvB;AAAA,IACH;AAED25C,sBAAkBp1C,UAAU1e,QAAQ,SAAS6C,MAAuB,OAAA;AAAhBlF,UAAAA,aAAAA,MAAM8xC,gBAAAA;AACtD2jB,kBAAY;AAAA,QACRz1D,MAAM;AAAA,QACNwc,IAAItX,KAAKsX;AAAAA,QACTi0C,MAAM;AAAA,UACFzwD;AAAAA,UACA8xC;AAAAA,QAFE;AAAA,MAHE,CAAD;AAQX,WAAKppC,MAAM+U,OAAOvY,KAAKsX,EAAvB;AAAA,IACH;AAED25C,sBAAkBU,eAAe,WAAW;AAChCj1D,aAAAA,UAAUC,UAAUjD,QAAQ,KAA5B,MAAuC;AAAA,IAClD;AAED,aAAS63D,sBAAsBj6C,IAAIga,KAAK;AAE/By/B,WAAAA,WAAW5/C;AACXygD,WAAAA,YAAYzgD;AACZw+C,WAAAA,MAAMr4C;AACN+Z,WAAAA,OAAOC;AACPugC,WAAAA,OAAO1gD;AACP2gD,WAAAA,YAAY3gD;AACZ4gD,WAAAA,YAAY;AAAA,IAEpB;AAEDr3D,WAAOm5C,eAAe0d,sBAAsB11C,WAAW,MAAM;AAAA,MACzDumB,KAAK,SAAW,MAAA;AACZ,eAAO,KAAKutB;AAAAA,MACf;AAAA,IAHwD,CAA7D;AAMAj1D,WAAOm5C,eAAe0d,sBAAsB11C,WAAW,YAAY;AAAA,MAC/DumB,KAAK,SAAW,MAAA;AACZ,eAAO,KAAKwvB;AAAAA,MAF+C;AAAA,MAI/DtiD,KAAK,SAASc,KAAAA,GAAG;AACRwhD,aAAAA,YAAYxhD;AAAAA,MACpB;AAAA,IAN8D,CAAnE;AASA1V,WAAOm5C,eAAe0d,sBAAsB11C,WAAW,WAAW;AAAA,MAC9DumB,KAAK,SAAW,MAAA;AACZ,eAAO,KAAK2uB;AAAAA,MAF8C;AAAA,MAI9DzhD,KAAK,SAASc,KAAAA,GAAG;AACR2gD,aAAAA,WAAW3gD;AAAAA,MACnB;AAAA,IAN6D,CAAlE;AASAmhD,0BAAsB11C,UAAU6xB,QAAQ,WAAW;AAC/C,WAAKmkB,OAAO,IAAIG;AACXH,WAAAA,KAAKI,KAAK,OAAO,KAAK5gC,MAAM,IAAjC;AACA,WAAKwgC,KAAKK,eAAe;AAErBh6D,UAAAA,IAAI;AACR,WAAK25D,KAAKM,UAAU,SAASC,QAAQ;AACjCl6D,UAAEiF,MAAM;AAAA,UAACrC,MAAM;AAAA,UAAc8xC,SAAS;AAAA,QAA9B,CAAR;AAAA,MACH;AAED,WAAKilB,KAAKQ,SAAS,SAASD,QAAQ;AAChC,YAAIpC,OAAO93D,EAAE25D,KAAKS;AAClBp6D,UAAE45D,YAAY9B,KAAKl1D;AAEnB5C,UAAEq6D,mBAAmBvC,IAArB;AAAA,MACH;AAEI6B,WAAAA,KAAKW;IACb;AAEDjB,0BAAsB11C,UAAU02C,qBAAqB,SAASvC,MAAM;AAC5D93D,UAAAA,IAAI;AACRu6D,wBAAkBzC,MAAM;AAAA,QAAC7H,kBAAkB;AAAA,QAAeuK,sBAAsB;AAAA,QAAQC,kBAAkB;AAAA,MAAlF,CAAP,EAAkG3/B,KAAK,SAASy+B,aAAa;AAC1Iv5D,UAAEk1C,OAAO;AAAA,UACLqkB;AAAAA,UACAC,iBAAiBx5D,EAAE06D,iBAAF;AAAA,QAFZ,CAAT;AAAA,MAIH,CALD,EAKG7/B,MAAM,SAASvX,GAAG;AACjBtjB,UAAEiF,MAAM;AAAA,UAACrC,MAAM;AAAA,UAAS8xC,SAAS;AAAA,QAAzB,CAAR;AAAA,MACH,CAPD;AAAA,IAQH;AAED2kB,0BAAsB11C,UAAU+2C,mBAAmB,WAAW;AAC1D,UAAI3B,kBAAkBU,gBAAgB;AAIlC,eAAO;AAAA,MACV,OAAM;AACK,eAAA,KAAKG,UAAUp4D,QAAQ,WAAvB,MAAwC;AAAA,MACnD;AAAA,IACJ;AAED63D,0BAAsB11C,UAAU5C,SAAS,WAAW;AAC5C,UAAA,KAAK84C;AAAW;AAChB,UAAA,KAAKF,MAAM;AACNA,aAAAA,KAAKgB;MACb;AACId,WAAAA,YAAY;AAAA,IACpB;AAEDR,0BAAsB11C,UAAU1e,QAAQ,SAASrC,MAAM8xC,SAAS;AAC5D,UAAI,CAAC,KAAKmlB,aAAa,KAAKhB,UAAU;AAClC,aAAKA,SAAS;AAAA,UAACj2D;AAAAA,UAAM8xC;AAAAA,QAAP,CAAd;AAAA,MACH;AAAA,IACJ;AAED2kB,0BAAsB11C,UAAUuxB,SAAS,SAASme,MAAM;AACpD,UAAI,CAAC,KAAKwG,aAAa,KAAKH,WAAW;AAC9BA,aAAAA,UAAUrG,IAAf;AAAA,MACH;AAAA,IACJ;AAEY,QAAI0F,kBAAjB;AAAA,EACH;MCxToB6B;;;;;;MAEjB,OAAA,SAAA,KAAKv7C,OAAO;AACHA,aAAAA,QAAQA;AACRw7C,aAAAA,WAAW;AACXC,aAAAA,gBAAgB;AAGhBC,aAAAA,eAAe;AACfC,aAAAA,mBAAmB;AACnBC,aAAAA,iBAAiB;AAEtB,YAAI,KAAK57C,MAAM2P,UAAU,gBAArB,GAAwC;AACpC,cAAA,CAAC3qB,OAAOk2D,qBAAqB,CAACl2D,OAAO+zD,QAAQ;AAC7Cx2D,oBAAQC,KAAK,2GAAb;AAAA,UACH,OAAM;AACH,iBAAKq5D,eAAe,IAAI1D;UAC3B;AAAA,QACJ;AAED,aAAK2D,iCAAL;AAAA,MACH;AAAA;;aAED,SAAU,UAAA;AACF,YAAA,KAAKD,cAAc;AACdA,eAAAA,aAAa1M;QACrB;AAED4M,sBAAc,KAAKL,YAAN;AAEb,aAAKM,kBAAL;AACA,aAAKC,oBAAL;AACA,aAAKC,oBAAL;AACA,aAAKC,0BAAL;AACA,aAAKC,+BAAL;AAEKp8C,aAAAA,QAAQ;AACb,eAAO,KAAKA;AAAAA,MACf;AAAA;;aAED,SAAY,YAAA;AACHw7C,aAAAA,WAAW;AACZ,YAAA,CAAC,KAAKC,eAAe;AACrB,eAAKY,KAAL;AAAA,QACH;AAAA,MACJ;AAAA;;aAED,SAAW,WAAA;AACFb,aAAAA,WAAW;AAAA,MACnB;AAAA;;aAED,SAAa,aAAA;AAAA,YAAA,QAAA;AACT,YAAI,KAAKG,mBAAmB,KAAKC,gBAAgB;AAC7C,eAAKD;AACL;AAAA,QACH;AACG,YAAA,CAAC,KAAK37C,MAAM4E,IAAImN,iBAAf,GAAmC;AACpC,eAAKuqC,SAAL;AACA,eAAKZ,eAAea,YAAY,WAAM;AAAA,2BAAA,MAAA,KAAA;AAC7Bv8C,iBAAAA,MAAMw8C;AACNx8C,iBAAAA,MAAMy8C;AACX,gBAAI,KAAKz8C,MAAM4E,IAAImN,iBAAf,GAAmC;AACnCgqC,4BAAc,KAAKL,YAAN;AACb,mBAAKgB,UAAL;AAAA,YACH;AAAA,UAN0B,EAAA,KAAA,IAAA,GAO5B,MAAO,EAPqB;AAAA,QAQlC,OAAM;AACEf,eAAAA,mBAAmB;AAAA,QAC3B;AAAA,MACJ;AAAA;;aAED,SAAO,OAAA;AACCxiC,YAAAA,QAAO;AACX,YAAIwjC,KAAK,SAALA,MAAiB;AACjBxjC,UAAAA,MAAKsiC,gBAAgB;AACjBtiC,cAAAA,MAAKqiC,UAAU;AACfriC,YAAAA,MAAKnZ,MAAMw8C;AACPrjC,gBAAAA,MAAKnZ,MAAM2P,UAAU,oBAArB,GAA4C;AAC5CwJ,cAAAA,MAAKyjC,WAAL;AAAA,YACH;AACDzjC,YAAAA,MAAKnZ,MAAM68C;AACXC,kCAAsBH,GAAD;AACrBxjC,YAAAA,MAAKsiC,gBAAgB;AAAA,UACxB;AAAA,QACJ;AACDqB,8BAAsBH,EAAD;AAAA,MACxB;AAAA;;MAED,OAAA,SAAA,0BAA0B72B,IAAInY,eAAetL,QAAQH,SAAS;AACpD66C,YAAAA,OAAO,CAAC16C,OAAO26C,MAAM,IAAIC,SAAS56C,OAAO66C,QAAQ,CAAf,CAAb,IAAkC76C,OAAO66C,QAAQ,CAAf;AAC7Dp3B,WAAGq3B,qBACCr3B,GAAGioB,YACH,GACA1rC,OAAO+6C,kBACP/6C,OAAOg7C,YACPh7C,OAAOi7C,aACP,GACAP,IAPJ;AASAj3B,WAAG0pB,cAAc1pB,GAAGioB,YAAYjoB,GAAG6pB,gBAAgB7pB,GAAG8pB,aAAtD;AACA9pB,WAAG0pB,cAAc1pB,GAAGioB,YAAYjoB,GAAG+pB,gBAAgB/pB,GAAG8pB,aAAtD;AACA9pB,WAAG0pB,cAAc1pB,GAAGioB,YAAYjoB,GAAGQ,oBAAoBR,GAAG2pB,MAA1D;AACA3pB,WAAG0pB,cAAc1pB,GAAGioB,YAAYjoB,GAAG4pB,oBAAoB5pB,GAAG2pB,MAA1D;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,gBAAgB3pB,IAAInY,eAAetL,QAAQH,SAAS;AAChD,YAAIG,kBAAkB80C,aAAa90C,kBAAkBk7C,oBAAoBl7C,kBAAkBm7C,oBAAqBx4D,OAAOy4D,eAAep7C,kBAAkBo7C,aAAc;AAElK33B,aAAGwpB,WAAWxpB,GAAGioB,YAAY,GAAG7rC,QAAQ8tC,gBAAgB9tC,QAAQ6tC,QAAQ7tC,QAAQ3e,MAAM8e,MAAtF;AAAA,QACH,WAAUA,kBAAkBq7C,mBAAmB;AACxC/6D,cAAAA,QAAM6C,WAAW,KAAKwa,MAAM2P,UAAU,qBAArB,GAA6C;AAE9DmW,eAAGwpB,WAAWxpB,GAAGioB,YAAY,GAAG7rC,QAAQ8tC,gBAAgB9tC,QAAQ6tC,QAAQ7tC,QAAQ3e,MAAM8e,MAAtF;AAAA,UACH,WAAUA,OAAOQ,QAAQ,KAAKR,OAAOS,SAAS,GAAG;AAG9C,gBAAM8B,MAAMvC,OAAOoY,WAAW,IAAlB;AACZqL,eAAGwpB,WAAWxpB,GAAGioB,YAAY,GAAG7rC,QAAQ8tC,gBAAgB9tC,QAAQ6tC,QAAQ7tC,QAAQ3e,MAAMqhB,IAAI+4C,aAAa,GAAG,GAAGt7C,OAAOQ,OAAOR,OAAOS,MAA5C,CAAtF;AAAA,UACH;AAAA,QACJ,OAAM;AACHgjB,aAAGwpB,WAAWxpB,GAAGioB,YAAY,GAAG7rC,QAAQ8tC,gBAAgBriC,cAAc1kB,GAAG0kB,cAAczkB,GAAG,GAAGgZ,QAAQ6tC,QAAQ7tC,QAAQ3e,MAAM8e,MAA3H;AAAA,QACH;AAAA,MACJ;AAAA;;aAMD,SAAclB,cAAAA,IAAI4Y,KAAK;AACfZ,YAAAA,QAAO;AACX,eAAO,WAAY;AAAA,cAAA,SAAA;AACXykC,cAAAA,cAAc,KAAK7C;AACvB,cAAIgC,OAAO,IAAIE,SAASW,WAAb;AAGPC,cAAAA,mBAAmB;AACnBA,cAAAA,qBAAsBd,KAAKe,UAAU,CAAf,IAAoBf,KAAKe,UAAU,CAAf,IAAoBf,KAAKe,UAAU,CAAf,GAAoB;AAClF38C,eAAG,4CAA4C4Y,GAA7C;AAAA,UACL;AAED,cAAIgkC,eAAgBhB,KAAKe,UAAU,EAAf,MAAuB,WAAY,OAAO;AAC9D,cAAIva,OAAO;AAAA,YACPya,QAAQjB,KAAKe,UAAU,IAAIC,YAAnB;AAAA,YACRE,YAAYlB,KAAKe,UAAU,IAAIC,YAAnB;AAAA,YACZG,UAAUnB,KAAKe,UAAU,IAAIC,YAAnB;AAAA,YACVX,kBAAkBL,KAAKe,UAAU,IAAIC,YAAnB;AAAA,YAClBI,sBAAsBpB,KAAKe,UAAU,IAAIC,YAAnB;AAAA,YACtBV,YAAYN,KAAKe,UAAU,IAAIC,YAAnB;AAAA,YACZT,aAAaP,KAAKe,UAAU,IAAIC,YAAnB;AAAA,YACbK,YAAYrB,KAAKe,UAAU,IAAIC,YAAnB;AAAA,YACZM,uBAAuBtB,KAAKe,UAAU,IAAIC,YAAnB;AAAA,YACvBO,eAAevB,KAAKe,UAAU,IAAIC,YAAnB;AAAA,YACfQ,sBAAsBxB,KAAKe,UAAU,IAAIC,YAAnB;AAAA,YACtBS,qBAAqBzB,KAAKe,UAAU,IAAIC,YAAnB;AAAA,YACrBU,MAAM,CAbC;AAAA,YAcPvB,SAAS,CAdF;AAAA,YAeP,IAAIr6C,QAAQ;AAAE,qBAAO,KAAKw6C;AAAAA,YAfnB;AAAA,YAgBP,IAAIv6C,SAAS;AAAE,qBAAO,KAAKw6C;AAAAA,YAAa;AAAA,UAhBjC;AAmBX,cAAM7lB,QAAQ,SAACx0C,OAAAA,KAAQ;AAAA,2BAAA,MAAA,MAAA;AACbhE,gBAAAA,IAAI,CAAA;AACV,qBAASa,KAAKmD,KAAK;AACfhE,gBAAEwF,KAAKxB,IAAInD,CAAD,CAAV;AAAA,YACH;AACD,mBAAOb;AAAAA,UACV,EAND,KAAA,IAAA;AAQA,cAAMy/D,UAAUv7D,OAAOuuC,OAAOvY,MAAKnZ,MAAMkW,SAASyoC,+BAAlC,CAAA,EACXn9B,OAAO,SAACv+B,KAAD;AAAA,2BAAA,MAAA,MAAA;AAASA,mBAAAA,OAAO;AAAA,UADZ,EAEXmyB,KAAAA,IAAAA,CAAAA,EAAAA,IAAI,SAACnyB,KAAD;AAAA,2BAAA,MAAA,MAAA;AAASw0C,mBAAAA,MAAMx0C,GAAD;AAAA,UAAd,cACJy9B,OAAO,SAAC1V,MAAMyJ,SAAP;AAAA,2BAAA,MAAA,MAAA;AAAA,mBAAmBzJ,KAAK4V,OAAOnM,OAAZ;AAAA,UAAnB,EAHZ,KAAA,IAAA,CAAA;AAKI,cAAA,CAACiqC,QAAQE,SAASrb,KAAK6Z,gBAAtB,GAAyC;AAC1C76D,oBAAQC,KAAK,sDAAsDu3B,KAAKwpB,KAAK6Z,kBAAkBjkC,MAAKnZ,MAAMkW,SAASyoC,+BAAnH,CAAA;AAAA,UACH;AAEGrwD,cAAAA,SAAS;AAGbA,oBAAUi1C,KAAKib;AAEf,mBAAS19D,IAAI,GAAGA,IAAIyiD,KAAKgb,sBAAsBz9D,KAAK;AAChD,gBAAI+9D,YAAY9B,KAAKe,UAAUxvD,MAAf;AAChBA,sBAAU;AACVi1C,iBAAK2Z,QAAQz4D,KAAKs4D,KAAK9F,OAAOvoC,MAAMpgB,QAAQuwD,SAA1B,CAAlB;AACAvwD,sBAAUuwD;AAAAA,UACb;AAED19C,aAAG,MAAM;AAAA,YACLkB,QAAQkhC;AAAAA,YACR9iC,YAAY;AAAA,cAAEsZ;AAAAA,cAAU42B,YAAY;AAAA,YAAxB;AAAA,UAFP,CAAP;AAAA,QAIL;AAAA,MACJ;AAAA;;aAED,SAAcxvC,cAAAA,IAAI4Y,KAAK;AACnB,eAAO,WAAY;AAET+kC,cAAAA,kBAAkB;AAElBC,cAAAA,gBAAgB;AAChBC,cAAAA,WAAW;AACXC,cAAAA,YAAY;AACZC,cAAAA,iBAAiB;AACjBC,cAAAA,cAAc;AACdC,cAAAA,cAAc,KAAKrE;AACnBsE,cAAAA,SAAS,IAAIC,WAAWF,aAAa,GAAGN,eAA/B;AACf,cAAMS,aAAaF,OAAOF,WAAD,IAAgB;AACnCK,cAAAA,YAAY,IAAIC,WAAWL,aAAaG,UAA5B;AAElB,cAAIhc,OAAO;AAAA,YACP6Z,kBAAkB2B;AAAAA,YAClB1B,YAAYgC,OAAOL,QAAD;AAAA,YAClB1B,aAAa+B,OAAOJ,SAAD;AAAA,YACnBV,sBAAsBc,OAAOH,cAAD;AAAA,YAC5BhC,SAAS,CALF;AAAA,YAMPF,KAAK;AAAA,YACL,IAAIn6C,QAAQ;AAAE,qBAAO,KAAKw6C;AAAAA,YAPnB;AAAA,YAQP,IAAIv6C,SAAS;AAAE,qBAAO,KAAKw6C;AAAAA,YAAa;AAAA,UARjC;AAWPhvD,cAAAA,SAAS;AACb,cAAIuU,QAAQ0gC,KAAK8Z;AACjB,cAAIv6C,SAASygC,KAAK+Z;AAElB,mBAASx8D,IAAI,GAAGA,IAAIyiD,KAAKgb,sBAAsBz9D,KAAK;AAChD,gBAAMgxC,SAAUjvB,QAAQ,KAAM,MAAOC,SAAS,KAAM,KAAK;AACzD,gBAAMi6C,OAAO,IAAI0C,WAAWL,aAAaI,UAAUE,aAAapxD,QAAQwjC,KAA3D;AACbyR,iBAAK2Z,QAAQz4D,KAAKs4D,IAAlB;AACAzuD,sBAAUwjC;AACVjvB,oBAAQA,SAAS;AACjBC,qBAASA,UAAU;AAAA,UACtB;AAED3B,aAAG,MAAM;AAAA,YACLkB,QAAQkhC;AAAAA,YACR9iC,YAAY;AAAA,cAAEsZ;AAAAA,cAAU42B,YAAY;AAAA,YAAxB;AAAA,UAFP,CAAP;AAAA,QAIL;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,eAAA,MAAkCxvC,IAAI;AAArB4Y,YAAAA,WAAAA,KAAKnX,gBAAAA;AACd+8C,YAAAA,WAAW/lD;AACXgmD,YAAAA,QAAS7lC,IAAIod,YAAch1C,EAAAA,QAAQ,MAA1B,KAAqC,KAAM43B,IAAI13B,OAAO,GAAG,EAAd,KAAqB;AAC7E,YAAIw9D,QAAQ9lC,IAAI53B,QAAQ,MAAZ,KAAuB,KAAK43B,IAAI53B,QAAQ,UAAZ,KAA2B;AAC/D29D,YAAAA,QAAQ/lC,IAAI53B,QAAQ,MAAZ,KAAuB;AAC/B09D,YAAAA,SAASC,OAAO;AAChB,cAAIC,UAAU,IAAItF;AAClBsF,kBAAQC,iBACJ,QAAQH,QAAQ,KAAKI,cAAc9+C,IAAI4Y,GAAvB,IAA8B,KAAKmmC,cAAc/+C,IAAI4Y,GAAvB,CADlD;AAGAgmC,kBAAQrF,KAAK,OAAO3gC,GAApB;AACAgmC,kBAAQpF,eAAe;AACvBoF,kBAAQ9E,KAAR;AACA0E,qBAAW,SAAYA,YAAA;AACnBI,oBAAQzE,MAAR;AAAA,UACH;AAAA,QACJ,WAAU,KAAKO,cAAc;AAEpBvC,cAAAA,QAAQ,KAAKuC,aAAa7mB,OAAOjb,GAAzB;AACdu/B,gBAAMl3C,UAAU,SAAUH,KAAK;AACpBd,mBAAAA,GAAG,kBAAD;AAAA,UACZ;AACDm4C,gBAAMj2C,SAAS,SAA4C,OAAA;AAAhC62C,gBAAAA,oBAAAA,aAAaC,wBAAAA;AACpCh5C,eAAG,MAAM;AAAA,cACLkB,QAAQ63C;AAAAA,cACRz5C,YAAY;AAAA,gBAAEsZ;AAAAA,gBAAU42B,YAAY;AAAA,cAF/B;AAAA,cAGL/tC,UAAUu3C;AAAAA,cACVvJ,kBAAkB;AAAA,YAJb,CAAP;AAAA,UAML;AACD+O,qBAAW,SAAYA,YAAA;AACnBrG,kBAAM53C,OAAN;AAAA,UACH;AAAA,QACJ,OAAM;AACH,cAAI43C,SAAQ,IAAI6G;AAIhB,cAAI,EAAEpmC,IAAI13B,OAAO,GAAG,CAAd,KAAoB,YAAY,CAACM,QAAM4C,OAAO;AAEhD+zD,mBAAM8G,cAAc;AAAA,UACvB;AACD9G,iBAAMsB,UAAU,SAAU34C,KAAK;AAEvBq3C,gBAAAA,OAAMv/B,KAAK;AACJ5Y,qBAAAA,GAAG,kBAAD;AAAA,YACZ;AAAA,UACJ;AACDm4C,iBAAMwB,SAAS,WAAY;AACvB35C,eAAG,MAAM;AAAA,cACLkB,QAAQi3C;AAAAA,cACR74C,YAAY;AAAA,gBAAEsZ;AAAAA,gBAAU42B,YAAY;AAAA,cAF/B;AAAA,cAGL/tC,UAAUg9C,SAASh9C;AAAAA,YAHd,CAAP;AAAA,UAKL;AACD02C,iBAAMv/B,MAAMA;AAEZ4lC,qBAAW,SAAYA,YAAA;AACnBrG,mBAAMsB,UAAU;AAChBtB,mBAAMwB,SAAS;AACfxB,mBAAM+G,gBAAgB,KAAtB;AAAA,UACH;AAAA,QACJ;AAED,eAAOV;AAAAA,MACV;AAAA;;aAED,SAAmB12D,mBAAAA,GAAGC,GAAG;AACrB,YAAImxB,SAAS,KAAKra,MAAM2P,UAAU,QAArB,KAAkCwL,SAASsQ,cAAc,QAAvB;AAE3CxiC,YAAAA,KAAKC,GAAG;AACRmxB,iBAAOxX,QAAQ5Z;AACfoxB,iBAAOvX,SAAS5Z;AAAAA,QACnB;AAED,YAAIo3D,OAAO;AAAA,UACPv/D,OAAO;AAAA,UACPw/D,WAAW;AAAA,UACXC,oBAAoB;AAAA,UACpBC,SAAS;AAAA,UACTC,uBAAuB;AAAA,QALhB;AAQP56B,YAAAA,KAAKzL,OAAOI,WAAW,SAAS6lC,IAA3B,KAAoCjmC,OAAOI,WAAW,sBAAsB6lC,IAAxC,KAAiDjmC,OAAOI,WAAW,UAAU6lC,IAA5B;AAE1F,YAAA,CAACx6B,IAAI;AACL,gBAAM,IAAIh/B,MAAM,sCAAV;AAAA,QACT;AAED,eAAOg/B;AAAAA,MACV;AAAA;;aAED,SAAoB78B,oBAAAA,GAAGC,GAAG;AACtB,YAAImxB,SAAS,KAAKra,MAAM2P,UAAU,QAArB,KAAkCwL,SAASsQ,cAAc,QAAvB;AAE3CxiC,YAAAA,KAAKC,GAAG;AACRmxB,iBAAOxX,QAAQ5Z;AACfoxB,iBAAOvX,SAAS5Z;AAAAA,QACnB;AAED,YAAI6tD,MAAM18B,OAAOI,WAAW,IAAlB;AACN,YAAA,CAACs8B,KAAK;AACN,gBAAM,IAAIjwD,MAAM,0CAAV;AAAA,QACT;AAED,eAAOiwD;AAAAA,MACV;AAAA;;aAED,SAAY,YAAA;AACR,eAAO/xD,OAAO27D,cAAc37D,OAAO27D,YAAYC,IAAnB,IAA4B,IAAI7+C,OAAQC;MACvE;AAAA;;aAED,SAAmB,mBAAA;AAEf,eAAOmZ,SAASsQ,cAAc,QAAvB;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,kCAAkCpR,QAAQ;AAClCnY,YAAAA,UAAU,CAAA;AACdA,gBAAQG,SAASgY;AACjB,eAAOnY;AAAAA,MACV;AAAA;;aAED,SAAU2+C,UAAAA,SAAS;AAAA,MAElB;AAAA;;MAED,OAAA,SAAA,uBAAuBC,YAAY;AAAA,YAAA,SAAA;AAC/B,aAAKC,mBAAmB,SAAC98C,GAAM;AAAA,yBAAA,MAAA,MAAA;AAC3B68C,qBAAW78C,CAAD;AAAA,QACb,EAFD,KAAA,IAAA;AAGAjf,eAAOg7D,iBAAiB,WAAW,KAAKe,gBAAxC;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,qBAAqBD,YAAY;AAAA,YAAA,SAAA;AAC7B,aAAKE,iBAAiB,SAAC/8C,GAAM;AAAA,yBAAA,MAAA,MAAA;AACzB68C,qBAAW78C,CAAD;AAAA,QACb,EAFD,KAAA,IAAA;AAGAjf,eAAOg7D,iBAAiB,SAAS,KAAKgB,cAAtC;AAAA,MACH;AAAA;;aAED,SAAoB,oBAAA;AACZ,YAAA,KAAKD,kBAAkB;AACvB/7D,iBAAOi8D,oBAAoB,WAAW,KAAKF,gBAA3C;AAAA,QACH;AAEG,YAAA,KAAKC,gBAAgB;AACrBh8D,iBAAOi8D,oBAAoB,SAAS,KAAKD,cAAzC;AAAA,QACH;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,qBAAqBE,cAAc;AAAA,YAAA,SAAA;AAC/B,aAAKC,iBAAiB,SAAAl9C,GAAK;AAAA,yBAAA,MAAA,MAAA;AACvBi9C,uBAAaj9C,CAAD;AAAA,QACf,EAFD,KAAA,IAAA;AAGAjf,eAAOg7D,iBAAiB,aAAa,KAAKmB,cAA1C;AAAA,MACH;AAAA;;aAED,SAAsB,sBAAA;AACd,YAAA,KAAKA,gBAAgB;AACrBn8D,iBAAOi8D,oBAAoB,aAAa,KAAKE,cAA7C;AAAA,QACH;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,qBAAqBC,cAAc;AAAA,YAAA,SAAA;AAC/B,aAAKC,iBAAiB,SAAAp9C,GAAK;AAAA,yBAAA,MAAA,MAAA;AACvBm9C,uBAAan9C,CAAD;AAAA,QACf,EAFD,KAAA,IAAA;AAGAjf,eAAOg7D,iBAAiB,aAAa,KAAKqB,cAA1C;AAAA,MACH;AAAA;;aAED,SAAsB,sBAAA;AACd,YAAA,KAAKA,gBAAgB;AACrBr8D,iBAAOi8D,oBAAoB,aAAa,KAAKI,cAA7C;AAAA,QACH;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,2BAA2BC,6BAA4B;AAAA,YAAA,SAAA;AACnD,aAAKC,uBAAuB,SAAAt9C,GAAK;AAAA,yBAAA,MAAA,MAAA;AAC7Bq9C,sCAA2Br9C,CAAD;AAAA,QAC7B,EAFD,KAAA,IAAA;AAGAjf,eAAOg7D,iBAAiB,SAAS,KAAKuB,oBAAtC;AAAA,MACH;AAAA;;aAED,SAA4B,4BAAA;AACpB,YAAA,KAAKA,sBAAsB;AAC3Bv8D,iBAAOi8D,oBAAoB,SAAS,KAAKM,oBAAzC;AAAA,QACH;AAAA,MACJ;AAAA;;aAKD,SAAmC,mCAAA;AAAA,YAAA,SAAA;AAC1BC,aAAAA,2BAA2B,WAAM;AAAA,yBAAA,MAAA,MAAA;AAClC,cAAIrmC,SAASsmC,oBAAoB,WAAW;AACnCzhD,iBAAAA,MAAM4N,KAAK9H,KAAKT,oBAAoB,CAAzC;AACKrF,iBAAAA,MAAM68C;UACd;AAAA,QACJ,EALD,KAAA,IAAA;AAMA1hC,iBAAS6kC,iBAAiB,oBAAoB,KAAKwB,wBAAnD;AAAA,MACH;AAAA;;aAED,SAAiC,iCAAA;AACzB,YAAA,KAAKA,0BAA0B;AAC/BrmC,mBAAS8lC,oBAAoB,oBAAoB,KAAKO,wBAAtD;AAAA,QACH;AAAA,MACJ;AAAA;;;MCrcgBE;;;;;;MACjB,OAAA,SAAA,KAAYx/C,SAAS;AACbA,YAAAA,QAAQgY,UAAU;AACXhY,iBAAAA,QAAQgY;AAAAA,QAClB,OAAM;AACH,iBAAOqhC;AAAAA,QACV;AAAA,MACJ;AAAA;;;MCTC54D;;;;;;MAEF,OAAA,SAAA,WAAkBC,OAAO;AACd,eAAA,OAAOA,UAAU;AAAA,MAC3B;AAAA;;MAED,OAAA,SAAA,SAAgBA,OAAO;AACZ,eAAA,OAAOA,UAAU;AAAA,MAC3B;AAAA;;MAED,OAAA,SAAA,UAAiBA,OAAO;AACZ,eAAA,OAAOA,UAAU,YAAaA,QAAQ,MAAO;AAAA,MACxD;AAAA;;MAED,OAAA,SAAA,UAAiBA,OAAO;AACpB,eAAOA,UAAU,QAAQA,UAAU;AAAA,MACtC;AAAA;;MAED,OAAA,SAAA,SAAgBA,OAAO;AACZ,eAAA,OAAOA,SAAS;AAAA,MAC1B;AAAA;;MAED,OAAA,SAAA,SAAgBA,OAAO;AACfW,YAAAA,OAAO,OAAOX;AACX,eAAA,CAAC,CAACA,UAAUW,QAAQ,YAAYA,QAAQ;AAAA,MAClD;AAAA;;MAED,OAAA,SAAA,cAAqBX,OAAO;AACpBW,YAAAA,OAAO,OAAOX;AAClB,eAAO,CAAC,CAACA,SAAUW,QAAQ;AAAA,MAC9B;AAAA;;MAED,OAAA,SAAA,gBAAuBX,OAAM;AAClB,eAAA,OAAOA,UAAU,YAAYA,SAASA,MAAMY,gBAAgBL;AAAAA,MACtE;AAAA;;aAED,SAAqBM,cAAAA,OAAOC,KAAK;AACtBf,eAAAA,OAAMgB,eAAeF,OAAOC,IAAI7C,MAAhC;AAAA,MACV;AAAA;;aAED,SAAmB9B,YAAAA,IAAIC,IAAI;AACvB,YAAK,OAAOD,OAAS,OAAOC;AAAK,iBAAO;AACxC,YAAI2D,OAAME,gBAAgB9D,EAAtB,GAA2B;AAC3B,iBAAO4D,OAAME,gBAAgB7D,EAAtB,KAA6B2D,OAAMqB,oBAAoBjF,IAAIC,EAA9B;AAAA,QADxC,WAEW8D,MAAMC,QAAQhE,EAAd,GAAmB;AAC1B,iBAAO+D,MAAMC,QAAQ/D,EAAd,KAAqB2D,OAAMsB,YAAYlF,IAAIC,EAAtB;AAAA,QAC/B,OAAM;AACID,iBAAAA,OAAOC;AAAAA,QACjB;AAAA,MACJ;AAAA;;aAED,SAA2BqE,oBAAAA,MAAMC,MAAM;AACnC,YAAIY,QAAQf,OAAOD,KAAKG,IAAZ;AACZ,YAAIc,QAAQhB,OAAOD,KAAKI,IAAZ;AACZ,YAAIY,MAAMrD,WAAWsD,MAAMtD,QAAQ;AAC/B,iBAAO;AAAA,QACV;AAED,iBAASC,IAAI,GAAGF,IAAIsD,MAAMrD,QAAQC,IAAIF,GAAGE,KAAK;AAC1C,cAAMsD,KAAKF,MAAMpD,CAAD;AAChB,cAAMuD,KAAKF,MAAMrD,CAAD;AACZsD,cAAAA,OAAOC,IAAI;AACX,mBAAO;AAAA,UACV;AAED,cAAMtF,KAAKsE,KAAKe,EAAD;AACf,cAAMpF,KAAKsE,KAAKe,EAAD;AAEX,cAAA,CAAC1B,OAAM2B,YAAYvF,IAAIC,EAAtB,GAA2B;AAC5B,mBAAO;AAAA,UACV;AAAA,QACJ;AAED,eAAO;AAAA,MACV;AAAA;;aAED,SAAmBD,YAAAA,IAAIC,IAAI;AACvB,YAAID,GAAG8B,WAAW7B,GAAG6B,QAAQ;AACzB,iBAAO;AAAA,QACV;AACD,iBAASC,IAAI,GAAGF,IAAI7B,GAAG8B,QAAQC,IAAIF,GAAGE,KAAK;AACvC,cAAI,CAAC,KAAKwD,YAAYvF,GAAG+B,CAAD,GAAK9B,GAAG8B,CAAD,CAA1B,GAAgC;AACjC,mBAAO;AAAA,UACV;AAAA,QACJ;AAED,eAAO;AAAA,MACV;AAAA;;;MAOC6gE;AAEU5hD,aAAAA,YAAAA,IAAI+lB,IAAI;AAAA,sBAAA,MAAA67B,WAAA;AACXvJ,WAAAA,MAAMr4C;AACN6hD,WAAAA,MAAM97B;AACNokB,WAAAA,WAAWtwC;AAChB,WAAKioD,WAAW,oBAAI7wB;AACpB,WAAK8wB,gBAAgB,oBAAI9wB;AACzB,WAAK+wB,iBAAiB,oBAAI/wB;AAG1B,WAAKgxB,iBAAiB,IAAIl/D,MAAM,EAAV;AACtB,WAAKm/D,mBAAmB,oBAAI/hD;AAC5B,WAAKwa,YAAY,oBAAIsW;AACrB,WAAKkxB,YAAY,IAAIp/D,MAAM,CAAV;AACZq/D,WAAAA,cAAc;AACnB,WAAKC,iBAAiBt8B,GAAGu8B;AACzB,WAAKC,eAAe,IAAIx/D,MAAM,CAAV;AAAA,IACvB;;;MAED,OAAA,SAAA,gBAAgBy/D,KAAK;AACjB,eAAQA,QAAQ,KAAKX,IAAIY;AAAAA,MAC5B;AAAA;;aAED,SAAQD,QAAAA,KAAKziE,GAAG;AACZ,YAAM2iE,MAAM,KAAKC,gBAAgBH,GAArB;AACRziE,YAAAA,MAAM2iE,KAAK;AACX,iBAAO,KAAKR,iBAAiBjhD,OAAOuhD,GAA7B;AAAA,QACV,OAAM;AACC,cAAA,CAAC,KAAKN,iBAAiBnhD,IAAIyhD,GAA1B,GAAgC;AACjC,iBAAKN,iBAAiBlhD,IAAIwhD,GAA1B;AACA,mBAAO;AAAA,UACV,OAAM;AACH,mBAAO;AAAA,UACV;AAAA,QACJ;AAAA,MACJ;AAAA;;aAED,SAAU55D,UAAAA,QAAQsuD,QAAQ;AAChB0L,YAAAA,SAAS,KAAKd,SAASh3B,IAAIliC,MAAlB,MAA8BsuD;AAC7C,aAAK4K,SAAS9pD,IAAIpP,QAAQsuD,MAA1B;AAEI0L,YAAAA,UAAWh6D,WAAW,KAAKi5D,IAAIxa,cAAe;AAEzC4a,eAAAA,iBAAiB;QACzB;AAED,eAAOW;AAAAA,MACV;AAAA;;aAED,SAAeh6D,eAAAA,QAAQsuD,QAAQ;AACrB0L,YAAAA,SAAS,KAAKb,cAAcj3B,IAAIliC,MAAvB,MAAmCsuD;AAClD,aAAK6K,cAAc/pD,IAAIpP,QAAQsuD,MAA/B;AACA,eAAO0L;AAAAA,MACV;AAAA;;aAED,SAAgBh6D,gBAAAA,QAAQsuD,QAAQ;AACtB0L,YAAAA,SAAS,KAAKZ,eAAel3B,IAAIliC,MAAxB,MAAoCsuD;AACnD,aAAK8K,eAAehqD,IAAIpP,QAAQsuD,MAAhC;AACA,eAAO0L;AAAAA,MACV;AAAA;;MAED,OAAA,SAAA,WAAWC,SAAS;AAChB,YAAMD,SAAS,KAAKzY,aAAa0Y;AAC5B1Y,aAAAA,WAAW0Y;AAChB,eAAOD;AAAAA,MACV;AAAA;;aAED,SAAWv8D,WAAAA,MAAMtG,GAAG;AACVoC,YAAAA,IAAI,KAAKw4B,UAAUmQ,IAAIzkC,IAAnB;AACV,YAAMu8D,SAAS,CAACzgE,KAAK,CAACS,MAAM2B,YAAYpC,GAAGpC,CAArB;AACtB,aAAK46B,UAAU3iB,IAAI3R,MAAMtG,CAAzB;AACA,eAAO6iE;AAAAA,MACV;AAAA;;MAED,OAAA,SAAA,yBAAyBl/D,OAAO;AAC5B,YAAMo/D,KAAK,KAAKb,eAAev+D,KAApB;AACX,YAAIo/D,MAAMA,GAAG,CAAD,GAAK;AACbA,aAAG,CAAD,IAAM;AACR,iBAAO;AAAA,QACV;AACD,eAAO;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,wBAAwBp/D,OAAO;AAC3B,YAAMo/D,KAAK,KAAKb,eAAev+D,KAApB;AACX,YAAIo/D,IAAI;AACJ,cAAI,CAACA,GAAG,CAAD,GAAK;AACRA,eAAG,CAAD,IAAM;AACR,mBAAO;AAAA,UACV;AAAA,QACJ,OAAM;AACH,eAAKb,eAAev+D,KAApB,IAA6B,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,IAAhB;AAC7B,iBAAO;AAAA,QACV;AACD,eAAO;AAAA,MACV;AAAA;;aAED,SAAoBA,oBAAAA,OAAOg0C,OAAO;AAC9B,YAAIorB,KAAK,KAAKb,eAAev+D,KAApB;AACLq/D,YAAAA,QAAQ;AACZ,YAAID,IAAI;AACJC,kBAAQD,GAAG,CAAD,MAAQprB,MAAM,CAAD,KACnBorB,GAAG,CAAD,MAAQprB,MAAM,CAAD,KACforB,GAAG,CAAD,MAAQprB,MAAM,CAAD,KACforB,GAAG,CAAD,MAAQprB,MAAM,CAAD,KACforB,GAAG,CAAD,MAAQprB,MAAM,CAAD;AAAA,QACtB;AAED,YAAIqrB,OAAO;AACP,iBAAO;AAAA,QACV,OAAM;AACHrrB,gBAAM,CAAD,IAAMorB,KAAKA,GAAG,CAAD,IAAM;AACxB,iBAAO;AAAA,QACV;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,iBAAiBzhD,SAAS;AACtB,YAAM2hD,UAAU,KAAKX,mBAAmBhhD;AACnCghD,aAAAA,iBAAiBhhD;AACtB,eAAO2hD;AAAAA,MACV;AAAA;;aAED,SAAYp6D,YAAAA,QAAQyY,SAAS;AACnB4hD,YAAAA,cAAcrB,YAAWsB,iBAAiB,KAAKb,cAAjC;AACpB,aAAKD,cAAc3iE,KAAKI,IAAI,KAAKuiE,aAAaa,cAAc,CAAzC;AACnB,YAAMvuC,UAAU,KAAKytC,UAAUc,WAAf;AAChB,YAAME,cAAcvB,YAAWwB,uBAAuBx6D,MAAlC;AACpB,YAAI8rB,SAAS;AACT,cAAIA,QAAQyuC,WAAD,MAAkB9hD,SAAS;AAClC,mBAAO;AAAA,UACV;AACDqT,kBAAQyuC,WAAD,IAAgB9hD;AACvB,iBAAO;AAAA,QACV,OAAM;AACH,cAAIA,SAAS;AACT,iBAAK8gD,UAAUc,WAAf,IAA8B;AAC9B,iBAAKd,UAAUc,WAAf,EAA4BE,WAA5B,IAA2C9hD;AAC3C,mBAAO;AAAA,UACV,OAAM;AACH,mBAAO;AAAA,UACV;AAAA,QACJ;AAAA,MACJ;AAAA;;aAED,SAAegiD,eAAAA,OAAOC,OAAO;AACzB,YAAMviE,IAAI6gE,YAAW2B,qBAAqBF,KAAhC;AACV,YAAMT,SAAS,CAAChgE,MAAM2B,YAAY,KAAKg+D,aAAaxhE,CAAlB,GAAsBuiE,KAAxC;AAChB,aAAKf,aAAaxhE,CAAlB,IAAuBuiE;AACvB,eAAOV;AAAAA,MACV;AAAA;;MAED,OAAA,SAAA,QAAQzgE,GAAG;AACDvB,YAAAA,IAAI;AAIV,aAAK4iE,cAAc5iE,GAAGuB,CAAtB;AAGA,YAAIA,EAAEgoD,aAAavpD,EAAEupD,UAAU;AAC3B,eAAK0X,IAAI4B,YAAYthE,EAAEgoD,QAAvB;AAAA,QACH;AAED,aAAKuZ,qBAAqB9iE,GAAGuB,CAA7B;AACA,aAAKwhE,sBAAsB/iE,GAAGuB,CAA9B;AAEMyhE,YAAAA,iBAAiB,KAAKC,gBAAgBjjE,GAAGuB,CAAxB;AACvB,aAAK2hE,mBAAmBljE,GAAGuB,GAAGyhE,cAA9B;AAEA,aAAKJ,cAAc5iE,GAAGuB,CAAtB;AAEA,aAAK4hE,iBAAiBnjE,GAAGuB,CAAzB;AAEA,aAAK6hE,oBAAoBpjE,GAAGuB,CAA5B;AAEA,aAAK8hE,iBAAiBrjE,GAAGuB,CAAzB;AAAA,MAEH;AAAA;;aAED,SAAoBvB,oBAAAA,GAAGuB,GAAG;AACtB,iBAASpB,IAAI,GAAGF,IAAID,EAAE2hE,aAAazhE,QAAQC,IAAIF,GAAGE,KAAK;AACnD,cAAIH,EAAE2hE,aAAaxhE,CAAf,MAAsBoB,EAAEogE,aAAaxhE,CAAf,GAAmB;AACnC8B,gBAAAA,QAAQV,EAAEogE,aAAaxhE,CAAf,MAAsB8Y,SAAY1X,EAAEogE,aAAaxhE,CAAf,IAAoB6gE,YAAWsC,8BAA8BnjE,CAAzC;AAC/D8gE,iBAAAA,IAAIU,aAAaX,YAAWuC,uBAAuBpjE,CAAlC,GAAsC8B,KAA5D;AAAA,UACH;AAAA,QACJ;AAAA,MACJ;AAAA;;aAED,SAAiBjC,iBAAAA,GAAGuB,GAAG;AACnB,YAAMtC,MAAMJ,KAAKI,IAAIe,EAAEwhE,aAAajgE,EAAEigE,WAA1B;AAEZ,YAAIgC,gBAAgBxjE,EAAEyhE;AAEjB,iBAAIthE,IAAI,GAAGA,IAAIlB,KAAKkB,KAAK;AAC1B,cAAMsjE,WAAWliE,EAAEggE,UAAUphE,CAAZ;AACjB,cAAMujE,WAAW1jE,EAAEuhE,UAAUphE,CAAZ;AACjB,cAAMwjE,cAAc3C,YAAW4C,mBAAmBzjE,CAA9B;AAEd0jE,cAAAA,YAAYhlE,KAAKI,IAAIykE,WAAWA,SAASxjE,SAAS,GAAGujE,WAAWA,SAASvjE,SAAS,CAAtE;AAClB,mBAAS0yB,IAAI,GAAG3yB,IAAI4jE,WAAWjxC,IAAI3yB,GAAG2yB,KAAK;AACvC,gBAAM5qB,SAASg5D,YAAW8C,yBAAyBlxC,CAApC;AACX4wC,gBAAAA,kBAAkBG,aAAa;AAC/B,mBAAK1C,IAAIQ,eAAekC,WAAxB;AACAH,8BAAgBG;AAAAA,YACnB;AAEKljD,gBAAAA,UAAWgjD,YAAYA,SAAS7wC,CAAD,KAAQ;AAC7C,iBAAKquC,IAAI8C,aAAa/7D,QAAQyY,OAA9B;AAAA,UACH;AAAA,QACJ;AAED,YAAIlf,EAAEkgE,mBAAmB+B,eAAe;AACpC,eAAKvC,IAAIQ,eAAelgE,EAAEkgE,cAA1B;AAAA,QACH;AAAA,MACJ;AAAA;;aAED,SAAgBzhE,gBAAAA,GAAGuB,GAAG;AAAA,YAAA,QAAA;AAClBA,UAAE2/D,SAASr9D,QAAQ,SAAC2jD,aAAax/C,QAAW;AAAA,yBAAA,MAAA,KAAA;AACpChI,cAAAA,EAAEkhE,SAASh3B,IAAIliC,MAAf,MAA2Bw/C,aAAa;AACxC,iBAAKyZ,IAAI+C,YAAYh8D,QAAQw/C,WAA7B;AAAA,UACH;AAAA,QACJ,EAJD,KAAA,IAAA,CAAA;AAMAxnD,UAAEkhE,SAASr9D,QAAQ,SAACyyD,QAAQtuD,QAAW;AAAA,yBAAA,MAAA,KAAA;AAC7BvJ,cAAAA,IAAI8C,EAAE2/D,SAASh3B,IAAIliC,MAAf;AACNvJ,cAAAA,MAAMwa,QAAW;AACjB,iBAAKgoD,IAAI+C,YAAYh8D,QAAQ,IAA7B;AAAA,UACH;AAAA,QACJ,EALD,KAAA,IAAA,CAAA;AAMQzG,eAAAA,EAAE2/D,SAASh3B,IAAI,KAAK+2B,IAAIxa,YAAxB,MAA0CzmD,EAAEkhE,SAASh3B,IAAI,KAAK+2B,IAAIxa,YAAxB;AAAA,MACrD;AAAA;;aAED,SAAqBzmD,qBAAAA,GAAGuB,GAAG;AAAA,YAAA,SAAA;AACvBA,UAAE4/D,cAAct9D,QAAQ,SAAC2jD,aAAax/C,QAAW;AAAA,yBAAA,MAAA,MAAA;AACzChI,cAAAA,EAAEmhE,cAAcj3B,IAAIliC,MAApB,MAAgCw/C,aAAa;AAC7C,iBAAKyZ,IAAIgD,iBAAiBj8D,QAAQw/C,WAAlC;AAAA,UACH;AAAA,QACJ,EAJD,KAAA,IAAA,CAAA;AAMAxnD,UAAEmhE,cAAct9D,QAAQ,SAAC2jD,aAAax/C,QAAW;AAAA,yBAAA,MAAA,MAAA;AACvCk8D,cAAAA,KAAK3iE,EAAE4/D,cAAcj3B,IAAIliC,MAApB;AACPk8D,cAAAA,OAAOjrD,QAAW;AAClB,iBAAKgoD,IAAIgD,iBAAiBj8D,QAAQ,IAAlC;AAAA,UACH;AAAA,QACJ,EALD,KAAA,IAAA,CAAA;AAAA,MAMH;AAAA;;aAED,SAAsBhI,sBAAAA,GAAGuB,GAAG;AAAA,YAAA,SAAA;AACxBA,UAAE6/D,eAAev9D,QAAQ,SAACsgE,cAAcn8D,QAAW;AAAA,yBAAA,MAAA,MAAA;AAC3ChI,cAAAA,EAAEohE,eAAel3B,IAAIliC,MAArB,MAAiCm8D,cAAc;AAC/C,iBAAKlD,IAAImD,kBAAkBp8D,QAAQm8D,YAAnC;AAAA,UACH;AAAA,QACJ,EAJD,KAAA,IAAA,CAAA;AAMAnkE,UAAEohE,eAAev9D,QAAQ,SAACsgE,cAAcn8D,QAAW;AAAA,yBAAA,MAAA,MAAA;AACzCk8D,cAAAA,KAAK3iE,EAAE6/D,eAAel3B,IAAIliC,MAArB;AACPk8D,cAAAA,OAAOjrD,QAAW;AAClB,iBAAKgoD,IAAImD,kBAAkBp8D,QAAQ,IAAnC;AAAA,UACH;AAAA,QACJ,EALD,KAAA,IAAA,CAAA;AAAA,MAMH;AAAA;;MAED,OAAA,SAAA,mBAAmBhI,GAAGuB,GAAGyhE,gBAAgB;AAAA,YAAA,SAAA;AAEjC,YAAA,CAACA,gBAAgB;AACjBhjE,YAAEqhE,eAAex9D,QAAQ,SAACwgE,QAAQvhE,OAAU;AAAA,2BAAA,MAAA,MAAA;AACxC,gBAAI,CAACvB,EAAE8/D,eAAev+D,KAAjB,GAAyB;AAE1B,mBAAKm+D,IAAIqD,0BAA0BxhE,KAAnC;AAAA,YACH;AAAA,UACJ,EALD,KAAA,IAAA,CAAA;AAOAvB,YAAE8/D,eAAex9D,QAAQ,SAACwgE,QAAQvhE,OAAU;AAAA,2BAAA,MAAA,MAAA;AACnCm+D,iBAAAA,IAAIsD,qBAAqBzhE,OAAOuhE,OAAO,CAAD,GAAKA,OAAO,CAAD,GAAKA,OAAO,CAAD,GAAKA,OAAO,CAAD,CAA5E;AACA,gBAAIA,OAAO,CAAD,GAAK;AACX,mBAAKpD,IAAIuD,yBAAyB1hE,KAAlC;AAAA,YACH,OAAM;AACH,mBAAKm+D,IAAIqD,0BAA0BxhE,KAAnC;AAAA,YACH;AAAA,UACJ,EAPD,KAAA,IAAA,CAAA;AAAA,QAQH,OAAM;AAEHvB,YAAE8/D,eAAex9D,QAAQ,SAACwgE,QAAQvhE,OAAU;AAAA,2BAAA,MAAA,MAAA;AACxC,gBAAIuhE,OAAO,CAAD,GAAK;AAEX,mBAAKpD,IAAIsD,qBAAqBzhE,OAAOuhE,OAAO,CAAD,GAAKA,OAAO,CAAD,GAAKA,OAAO,CAAD,GAAKA,OAAO,CAAD,GAAKA,OAAO,CAAD,CAAvF;AAAA,YACH;AACD,gBAAIA,OAAO,CAAD,GAAK;AACX,mBAAKpD,IAAIuD,yBAAyB1hE,KAAlC;AAAA,YACH;AAAA,UACJ,EARD,KAAA,IAAA,CAAA;AAAA,QASH;AAAA,MACJ;AAAA;;aAED,SAAiB9C,iBAAAA,GAAGuB,GAAG;AAAA,YAAA,SAAA;AACnB,YAAMkjE,WAAW,KAAK5hE,YAAY6hE,mBAAjB;AACjB1kE,UAAE+5B,UAAUl2B,QAAQ,SAAC5B,OAAOwD,MAAS;AAAA,yBAAA,MAAA,MAAA;AAC3BV,cAAAA,OAAOU,KAAKV,QAAQU,KAAKk/D;AAC3B,cAAA,CAACpjE,EAAEw4B,UAAU5Z,IAAI1a,IAAhB,GAAuB;AACxB,gBAAIw/B,OAAOw/B,SAASv6B,IAAInlC,IAAb;AACX,gBAAI/C,MAAMmB,WAAW8hC,IAAjB,GAAwB;AACxBA,qBAAOA,KAAK,KAAKg8B,GAAN;AAAA,YACd;AAED1/D,cAAEw4B,UAAU3iB,IAAI3R,MAAMw/B,IAAtB;AACAx/B,iBAAKi0C,MAAM,KAAKunB,KAAKh8B,IAArB;AAAA,UACH;AAAA,QACJ,EAXD,KAAA,IAAA,CAAA;AAYA1jC,UAAEw4B,UAAUl2B,QAAQ,SAAC5B,OAAOwD,MAAS;AAAA,yBAAA,MAAA,MAAA;AAC3Bm/D,cAAAA,SAAS5kE,EAAE+5B,UAAUmQ,IAAIzkC,IAAhB;AACf,cAAI,CAACm/D,UAAU,CAAC5iE,MAAM2B,YAAYihE,QAAQ3iE,KAA1B,GAAkC;AAC9CwD,iBAAKi0C,MAAM,KAAKunB,KAAKh/D,KAArB;AAAA,UACH;AAAA,QACJ,EALD,KAAA,IAAA,CAAA;AAAA,MAMH;AAAA;;aAED,SAAcjC,cAAAA,GAAGuB,GAAG;AAAA,YAAA,SAAA;AAChBvB,UAAEshE,iBAAiBz9D,QAAQ,SAAAghE,SAAW;AAAA,yBAAA,MAAA,MAAA;AAC9B,cAAA,CAACtjE,EAAE+/D,iBAAiBnhD,IAAI0kD,OAAvB,GAAiC;AAClC,gBAAI,KAAK9C,gBAAgB8C,OAArB,GAA+B;AAC/B,mBAAK5D,IAAI9kD,QAAQ0oD,OAAjB;AAAA,YACH,OAAM;AACH,mBAAK5D,IAAI7kD,SAASyoD,OAAlB;AAAA,YACH;AAAA,UACJ;AAAA,QACJ,EARD,KAAA,IAAA,CAAA;AASAtjE,UAAE+/D,iBAAiBz9D,QAAQ,SAAAghE,SAAW;AAAA,yBAAA,MAAA,MAAA;AAC9B,cAAA,CAAC7kE,EAAEshE,iBAAiBnhD,IAAI0kD,OAAvB,GAAiC;AAClC,gBAAI,KAAK9C,gBAAgB8C,OAArB,GAA+B;AAC/B,mBAAK5D,IAAI7kD,SAASyoD,OAAlB;AAAA,YACH,OAAM;AACH,mBAAK5D,IAAI9kD,QAAQ0oD,OAAjB;AAAA,YACH;AAAA,UACJ;AAAA,QACJ,EARD,KAAA,IAAA,CAAA;AAAA,MASH;AAAA;;aAED,SAA4B,qBAAA;AACpB,YAAA,CAAC,KAAKC,kBAAkB;AACxB,eAAKA,mBAAmB,oBAAIz0B;AACtB9vC,cAAAA,IAAI,KAAKukE;AACf,cAAMtmE,IAAIumE,sBAAsBphD;AAChCpjB,YAAE6W,IAAI,YAAY,SAAS+tB,IAAI;AAAC,mBAAO,CAAC,GAAE,GAAEA,GAAGzL,OAAOxX,OAAOijB,GAAGzL,OAAOvX,MAAhC;AAAA,UAAwC,CAA/E;AACA5hB,YAAE6W,IAAI,WAAW,SAAS+tB,IAAI;AAAC,mBAAO,CAAC,GAAE,GAAEA,GAAGzL,OAAOxX,OAAOijB,GAAGzL,OAAOvX,MAAhC;AAAA,UAAwC,CAA9E;AACA5hB,YAAE6W,IAAI,cAAc,CAAC,GAAG,GAAG,GAAG,CAAV,CAApB;AACA7W,YAAE6W,IAAI,iBAAiB,CAAC5Y,EAAEwmE,QAAH,CAAvB;AACAzkE,YAAE6W,IAAI,yBAAyB,CAAC5Y,EAAEwmE,UAAUxmE,EAAEwmE,QAAf,CAA/B;AACAzkE,YAAE6W,IAAI,aAAa,CAAC5Y,EAAEynD,KAAKznD,EAAEymE,IAAV,CAAnB;AACA1kE,YAAE6W,IAAI,qBAAqB,CAAC5Y,EAAEynD,KAAKznD,EAAEymE,MAAMzmE,EAAEynD,KAAKznD,EAAEymE,IAAzB,CAA3B;AACA1kE,YAAE6W,IAAI,cAAc,CAAC,GAAG,GAAG,GAAG,CAAV,CAApB;AACA7W,YAAE6W,IAAI,cAAc,CAAC,CAAD,CAApB;AACA7W,YAAE6W,IAAI,gBAAgB,CAAC,CAAD,CAAtB;AACA7W,YAAE6W,IAAI,aAAa,CAAC,MAAM,MAAM,MAAM,IAAnB,CAAnB;AACA7W,YAAE6W,IAAI,YAAY,CAAC5Y,EAAE0mE,IAAH,CAAlB;AACA3kE,YAAE6W,IAAI,aAAa,CAAC5Y,EAAE2mE,IAAH,CAAnB;AACA5kE,YAAE6W,IAAI,aAAa,CAAC,IAAD,CAAnB;AACA7W,YAAE6W,IAAI,cAAc,CAAC,GAAG,CAAJ,CAApB;AACA7W,YAAE6W,IAAI,aAAa,CAAC5Y,EAAE4mE,GAAH,CAAnB;AACA7kE,YAAE6W,IAAI,aAAa,CAAC,CAAD,CAAnB;AACA7W,YAAE6W,IAAI,iBAAiB,CAAC,GAAG,CAAJ,CAAvB;AACA7W,YAAE6W,IAAI,kBAAkB,CAAC,GAAG,KAAJ,CAAxB;AACA7W,YAAE6W,IAAI,eAAe,CAAC5Y,EAAE6mE,QAAQ,GAAG,CAAd,CAArB;AACA9kE,YAAE6W,IAAI,6BAA6B,CAAC5Y,EAAE6mE,QAAQ,GAAG,CAAd,CAAnC;AACA9kE,YAAE6W,IAAI,4BAA4B,CAAC5Y,EAAE6mE,QAAQ,GAAG,CAAd,CAAlC;AACA9kE,YAAE6W,IAAI,oCAAoC,CAAC5Y,EAAE6mE,QAAQ,GAAG,CAAd,CAA1C;AACA9kE,YAAE6W,IAAI,eAAe,CAAC,CAAD,CAArB;AACA7W,YAAE6W,IAAI,6BAA6B,CAAC,CAAD,CAAnC;AACA7W,YAAE6W,IAAI,4BAA4B,CAAC,CAAD,CAAlC;AACA7W,YAAE6W,IAAI,oCAAoC,CAAC,CAAD,CAA1C;AACA7W,YAAE6W,IAAI,aAAa,CAAC5Y,EAAE8mE,MAAM9mE,EAAE8mE,MAAM9mE,EAAE8mE,IAAnB,CAAnB;AACA/kE,YAAE6W,IAAI,2BAA2B,CAAC5Y,EAAE8mE,MAAM9mE,EAAE8mE,MAAM9mE,EAAE8mE,IAAnB,CAAjC;AACA/kE,YAAE6W,IAAI,0BAA0B,CAAC5Y,EAAE8mE,MAAM9mE,EAAE8mE,MAAM9mE,EAAE8mE,IAAnB,CAAhC;AACA/kE,YAAE6W,IAAI,kCAAkC,CAAC5Y,EAAE8mE,MAAM9mE,EAAE8mE,MAAM9mE,EAAE8mE,IAAnB,CAAxC;AACA/kE,YAAE6W,IAAI,kBAAkB,CAAA,CAAxB;AACA7W,YAAE6W,IAAI,mBAAmB,CAAA,CAAzB;AACA7W,YAAE6W,IAAI,kBAAkB,CAAA,CAAxB;AACA7W,YAAE6W,IAAI,mBAAmB,CAAA,CAAzB;AACA7W,YAAE6W,IAAI,kBAAkB,CAAA,CAAxB;AACA7W,YAAE6W,IAAI,mBAAmB,CAAA,CAAzB;AACA7W,YAAE6W,IAAI,kBAAkB,CAAA,CAAxB;AACA7W,YAAE6W,IAAI,mBAAmB,CAAA,CAAzB;AAAA,QACH;AACD,eAAO,KAAK0tD;AAAAA,MACf;AAAA;;MAED,OAAA,SAAA,uBAA8B98D,QAAQ;AAClC,gBAAOA,QAAP;AAAA,UACI,KAAK;AAED,mBAAO;AAAA,UACX,KAAK;AAED,mBAAO;AAAA,UACX;AAEI,kBAAM,IAAI7B,MAAM,6BAA6B6B,MAAvC;AAAA,QATd;AAAA,MAWH;AAAA;;MAED,OAAA,SAAA,yBAAgClF,OAAO;AAC/B,YAAA,CAAC,KAAKyiE,uBAAuB;AAC7B,eAAKA,wBAAwB,CAAC,MAAQ,KAAT;AAAA,QAChC;AACD,eAAO,KAAKA,sBAAsBziE,KAA3B;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,iBAAwBA,OAAO;AACpBA,eAAAA,QAAQ;AAAA,MAClB;AAAA;;MAED,OAAA,SAAA,mBAA0BA,OAAO;AACtBA,eAAAA,QAAQ;AAAA,MAClB;AAAA;;MAED,OAAA,SAAA,qBAA4B2/D,OAAO;AAC/B,gBAAOA,OAAP;AAAA,UACI,KAAK;AAED,mBAAO;AAAA,UACX,KAAK;AAED,mBAAO;AAAA,UACX,KAAK;AAED,mBAAO;AAAA,UACX,KAAK;AAED,mBAAO;AAAA,UACX,KAAK;AAED,mBAAO;AAAA,UAEX,KAAK;AAED,mBAAO;AAAA,UACX;AAEI,kBAAM,IAAIt8D,MAAM,0BAA0Bs8D,KAApC;AAAA,QAtBd;AAAA,MAwBH;AAAA;;MAED,OAAA,SAAA,uBAA8B3/D,OAAO;AAC7B,YAAA,CAAC,KAAK0iE,qBAAqB;AAC3B,eAAKA,sBAAsB,CAAC,MAAQ,MAAQ,OAAQ,OAAQ,KAAjC;AAAA,QAC9B;AACD,eAAO,KAAKA,oBAAoB1iE,KAAzB;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,8BAAqCA,OAAO;AACpC,YAAA,CAAC,KAAK2iE,sBAAsB;AAC5B,eAAKA,uBAAuB,CAAC,GAAG,GAAG,OAAO,OAAOV,sBAAsBphD,UAAU+hD,qBAArD;AAAA,QAC/B;AACD,eAAO,KAAKD,qBAAqB3iE,KAA1B;AAAA,MACV;AAAA;;;MAGC6iE;;;;;;aAEF,SAAkC,oBAAA;AAAhBvmD,YAAAA,sEAAK;AACdu+B,aAAAA,UAAU;AACf,aAAKtG,SAAS,KAAKyH,UAAU1/B,EAAf;AAAA,MACjB;AAAA;;MAED,OAAA,SAAA,UAAUA,IAAI;AACV,YAAI,CAAC,KAAKu+B,QAAQv+B,EAAb,GAAkB;AACdu+B,eAAAA,QAAQv+B,EAAb,IAAmB,IAAI4hD,WAAW5hD,IAAI,IAAnB;AAAA,QACtB;AACD,eAAO,KAAKu+B,QAAQv+B,EAAb;AAAA,MACV;AAAA;;aAED,SAA4B,cAAA;AAAhBA,YAAAA,sEAAK;AACb,YAAI,KAAKi4B,OAAOogB,QAAQr4C,IAAI;AACxB,cAAMg5B,WAAW,KAAK0G,UAAU1/B,EAAf;AACjB,eAAKi4B,OAAOuuB,QAAQxtB,QAApB;AACKf,eAAAA,SAASe;AAAAA,QACjB;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,YAAY6pB,SAAS;AACb,YAAA,KAAK5qB,OAAOwuB,WAAW5D,OAAvB;AACA,eAAKY,YAAYZ,OAAjB;AAAA,MACP;AAAA;;aAED,SAAYj6D,YAAAA,QAAQk8D,IAAI;AACpB,YAAI,KAAK7sB,OAAOyuB,UAAU99D,QAAQk8D,EAA9B;AACA,eAAKF,YAAYh8D,QAAQk8D,EAAzB;AAAA,MACP;AAAA;;aAED,SAAiBl8D,iBAAAA,QAAQk8D,IAAI;AACzB,YAAI,KAAK7sB,OAAO0uB,eAAe/9D,QAAQk8D,EAAnC;AACA,eAAKD,iBAAiBj8D,QAAQk8D,EAA9B;AAAA,MACP;AAAA;;aAED,SAAkBl8D,kBAAAA,QAAQk8D,IAAI;AAC1B,YAAI,KAAK7sB,OAAO2uB,gBAAgBh+D,QAAQk8D,EAApC;AACA,eAAKE,kBAAkBp8D,QAAQk8D,EAA/B;AAAA,MACP;AAAA;;MAED,OAAA,SAAA,QAAQtC,KAAK;AACT,YAAI,KAAKvqB,OAAO4uB,QAAQrE,KAAK,IAAzB;AACA,eAAKzlD,QAAQylD,GAAb;AAAA,MACP;AAAA;;MAED,OAAA,SAAA,SAASA,KAAK;AACV,YAAI,KAAKvqB,OAAO4uB,QAAQrE,KAAK,KAAzB;AACA,eAAKxlD,SAASwlD,GAAd;AAAA,MACP;AAAA;;MAED,OAAA,SAAA,UAAU54D,GAAGC,GAAGX,GAAGC,GAAG;AAClB,YAAI,KAAK8uC,OAAOhyC,WAAW,KAAKikB,WAAW,CAACtgB,GAAGC,GAAGX,GAAGC,CAAV,CAAvC;AACA,eAAK+gB,UAAUtgB,GAAGC,GAAGX,GAAGC,CAAxB;AAAA,MACP;AAAA;;MAED,OAAA,SAAA,SAASS,GAAGC,GAAGX,GAAGC,GAAG;AACjB,YAAI,KAAK8uC,OAAOhyC,WAAW,KAAK4hB,UAAU,CAACje,GAAGC,GAAGX,GAAGC,CAAV,CAAtC;AACA,eAAK0e,SAASje,GAAGC,GAAGX,GAAGC,CAAvB;AAAA,MACP;AAAA;;MAED,OAAA,SAAA,0BAA0BzF,OAAO;AACzB,YAAA,KAAKu0C,OAAO0V,yBAAyBjqD,KAArC;AACA,eAAKwhE,0BAA0BxhE,KAA/B;AAAA,MACP;AAAA;;MAED,OAAA,SAAA,yBAAyBA,OAAO;AACxB,YAAA,KAAKu0C,OAAOwV,wBAAwB/pD,KAApC;AACA,eAAK0hE,yBAAyB1hE,KAA9B;AAAA,MACP;AAAA;;aAED,SAAqBA,qBAAAA,OAAOqG,MAAMvG,MAAMsjE,YAAYC,QAAQx4D,QAAQ;AAChE,YAAI,KAAK0pC,OAAOqV,oBAAoB5pD,OAAO,CAACqG,MAAMvG,MAAMsjE,YAAYC,QAAQx4D,MAAjC,CAAvC;AACA,eAAK42D,qBAAqBzhE,OAAOqG,MAAMvG,MAAMsjE,YAAYC,QAAQx4D,MAAjE;AAAA,MACP;AAAA;;MAED,OAAA,SAAA,eAAe8S,SAAS;AAChB,YAAA,KAAK42B,OAAO+uB,iBAAiB3lD,OAA7B;AACA,eAAKghD,eAAehhD,OAApB;AAAA,MACP;AAAA;;aAED,SAAazY,aAAAA,QAAQyY,SAAS;AAC1B,YAAI,KAAK42B,OAAO8V,YAAYnlD,QAAQyY,OAAhC;AACA,eAAKsjD,aAAa/7D,QAAQyY,OAA1B;AAAA,MACP;AAAA;;aAED,SAAagiD,aAAAA,OAAOC,OAAO;AACnB,YAAA,KAAKrrB,OAAOgvB,eAAe5D,OAAOC,KAAlC,GAA0C;AAC1C,eAAKf,aAAac,OAAOC,KAAzB;AAAA,QACH;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,qBAAqB4D,MAAM7gE,MAAM8iC,KAAKg+B,MAAM;AACxC,YAAIruD;AACJ,gBAAOouD,MAAP;AAAA,UACI,KAAK,KAAKE;AACNtuD,gBAAI,KAAKuuD;AACT;AAAA,UACJ,KAAK,KAAKvB;AACNhtD,gBAAI,KAAKwuD;AACT;AAAA,UACJ,KAAK,KAAKC;AACNzuD,gBAAI,KAAK0uD;AACT;AAAA,QATR;AAYA,YAAI,KAAKvvB,OAAOhyC,WAAW6S,GAAG,CAACzS,MAAM8iC,KAAKg+B,IAAZ,CAA1B;AACAruD,YAAEwhC,MAAM,MAAM,CAACj0C,MAAM8iC,KAAKg+B,IAAZ,CAAd;AAAA,MACP;AAAA;;MAED,OAAA,SAAA,0BAA0B9gE,MAAM8iC,KAAKg+B,MAAM;AAClCM,aAAAA,qBAAqB,KAAKL,OAAO/gE,MAAM8iC,KAAKg+B,IAAjD;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,yBAAyB9gE,MAAM8iC,KAAKg+B,MAAM;AACjCM,aAAAA,qBAAqB,KAAK3B,MAAMz/D,MAAM8iC,KAAKg+B,IAAhD;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,iCAAiC9gE,MAAM8iC,KAAKg+B,MAAM;AACzCM,aAAAA,qBAAqB,KAAKF,gBAAgBlhE,MAAM8iC,KAAKg+B,IAA1D;AAAA,MACH;AAAA;;aAED,SAAqBD,qBAAAA,MAAMC,MAAM;AAC7B,YAAIruD;AACJ,gBAAOouD,MAAP;AAAA,UACI,KAAK,KAAKE;AACNtuD,gBAAI,KAAK4uD;AACT;AAAA,UACJ,KAAK,KAAK5B;AACNhtD,gBAAI,KAAK6uD;AACT;AAAA,UACJ,KAAK,KAAKJ;AACNzuD,gBAAI,KAAK8uD;AACT;AAAA,QATR;AAYI,YAAA,KAAK3vB,OAAOhyC,WAAW6S,GAAG,CAACquD,IAAD,CAA1B;AACAruD,YAAEwhC,MAAM,MAAM,CAAC6sB,IAAD,CAAd;AAAA,MACP;AAAA;;MAED,OAAA,SAAA,0BAA0BA,MAAM;AAC5B,aAAKU,qBAAqB,KAAKT,OAAOD,IAAtC;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,yBAAyBA,MAAM;AAC3B,aAAKU,qBAAqB,KAAK/B,MAAMqB,IAArC;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,iCAAiCA,MAAM;AACnC,aAAKU,qBAAqB,KAAKN,gBAAgBJ,IAA/C;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,mBAAmBD,MAAMY,MAAMC,OAAOC,OAAO;AACzC,YAAIlvD;AACJ,gBAAOouD,MAAP;AAAA,UACI,KAAK,KAAKE;AACNtuD,gBAAI,KAAKmvD;AACT;AAAA,UACJ,KAAK,KAAKnC;AACNhtD,gBAAI,KAAKovD;AACT;AAAA,UACJ,KAAK,KAAKX;AACNzuD,gBAAI,KAAKqvD;AACT;AAAA,QATR;AAYA,YAAI,KAAKlwB,OAAOhyC,WAAW6S,GAAG,CAACgvD,MAAMC,OAAOC,KAAd,CAA1B;AACAlvD,YAAEwhC,MAAM,MAAM,CAACwtB,MAAMC,OAAOC,KAAd,CAAd;AAAA,MACP;AAAA;;MAED,OAAA,SAAA,wBAAwBF,MAAMC,OAAOC,OAAO;AACnCI,aAAAA,mBAAmB,KAAKhB,OAAOU,MAAMC,OAAOC,KAAjD;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,uBAAuBF,MAAMC,OAAOC,OAAO;AAClCI,aAAAA,mBAAmB,KAAKtC,MAAMgC,MAAMC,OAAOC,KAAhD;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,+BAA+BF,MAAMC,OAAOC,OAAO;AAC1CI,aAAAA,mBAAmB,KAAKb,gBAAgBO,MAAMC,OAAOC,KAA1D;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,YAAYK,KAAKC,OAAOC,MAAMvnE,OAAO;AACjC,YAAI,KAAKi3C,OAAOhyC,WAAW,KAAKuiE,aAAa,CAACH,KAAKC,OAAOC,MAAMvnE,KAAnB,CAAzC;AACA,eAAKwnE,YAAYH,KAAKC,OAAOC,MAAMvnE,KAAnC;AAAA,MACP;AAAA;;MAED,OAAA,SAAA,eAAeuF,MAAM;AACjB,YAAI,KAAK0xC,OAAOhyC,WAAW,KAAKwiE,gBAAgB,CAACliE,IAAD,CAA5C;AACA,eAAKkiE,eAAeliE,IAApB;AAAA,MACP;AAAA;;aAED,SAAuBmiE,uBAAAA,SAASC,WAAW;AACnC,YAAA,KAAK1wB,OAAOhyC,WAAW,KAAK2iE,wBAAwB,CAACF,SAASC,SAAV,CAApD;AACA,eAAKC,uBAAuBF,SAASC,SAArC;AAAA,MACP;AAAA;;aAED,SAAWE,WAAAA,SAASC,SAAS;AACrB,YAAA,KAAK7wB,OAAOhyC,WAAW,KAAK8iE,YAAY,CAACF,SAASC,OAAV,CAAxC;AACA,eAAKC,WAAWF,SAASC,OAAzB;AAAA,MACP;AAAA;;MAED,OAAA,SAAA,mBAAmBE,QAAQC,QAAQC,UAAUC,UAAU;AACnD,YAAI,KAAKlxB,OAAOhyC,WAAW,KAAKmjE,oBAAoB,CAACJ,QAAQC,QAAQC,UAAUC,QAA3B,CAAhD;AACA,eAAKC,mBAAmBJ,QAAQC,QAAQC,UAAUC,QAAlD;AAAA,MACP;AAAA;;MAED,OAAA,SAAA,YAAYd,KAAKC,OAAOC,MAAMvnE,OAAO;AACjC,YAAI,KAAKi3C,OAAOhyC,WAAW,KAAKojE,aAAa,CAAChB,KAAKC,OAAOC,MAAMvnE,KAAnB,CAAzC;AACA,eAAKqoE,YAAYhB,KAAKC,OAAOC,MAAMvnE,KAAnC;AAAA,MACP;AAAA;;MAED,OAAA,SAAA,YAAYssC,OAAO;AACf,YAAI,KAAK2K,OAAOhyC,WAAW,KAAKqjE,aAAa,CAACh8B,KAAD,CAAzC;AACA,eAAKg8B,YAAYh8B,KAAjB;AAAA,MACP;AAAA;;MAED,OAAA,SAAA,cAAcnrC,GAAG;AACb,YAAI,KAAK81C,OAAOhyC,WAAW,KAAKsjE,eAAe,CAACpnE,CAAD,CAA3C;AACA,eAAKonE,cAAcpnE,CAAnB;AAAA,MACP;AAAA;;MAED,OAAA,SAAA,WAAWkmE,KAAKC,OAAOC,MAAMvnE,OAAO;AAChC,YAAI,KAAKi3C,OAAOhyC,WAAW,KAAKujE,YAAY,CAACnB,KAAKC,OAAOC,MAAMvnE,KAAnB,CAAxC;AACA,eAAKwoE,WAAWnB,KAAKC,OAAOC,MAAMvnE,KAAlC;AAAA,MACP;AAAA;;MAED,OAAA,SAAA,UAAUuF,MAAM;AACZ,YAAI,KAAK0xC,OAAOhyC,WAAW,KAAKwjE,WAAW,CAACljE,IAAD,CAAvC;AACA,eAAKkjE,UAAUljE,IAAf;AAAA,MACP;AAAA;;MAED,OAAA,SAAA,WAAWF,MAAM;AACb,YAAI,KAAK4xC,OAAOhyC,WAAW,KAAKyjE,YAAY,CAACrjE,IAAD,CAAxC;AACA,eAAKqjE,WAAWrjE,IAAhB;AAAA,MACP;AAAA;;MAED,OAAA,SAAA,WAAWsjE,MAAM;AACb,YAAI,KAAK1xB,OAAOhyC,WAAW,KAAK2jE,YAAY,CAACD,IAAD,CAAxC;AACA,eAAKC,WAAWD,IAAhB;AAAA,MACP;AAAA;;aAED,SAAYE,YAAAA,OAAOC,MAAM;AACjB,YAAA,KAAK7xB,OAAOhyC,WAAW,KAAK8jE,aAAa,CAACF,OAAOC,IAAR,CAAzC;AACA,eAAKC,YAAYF,OAAOC,IAAxB;AAAA,MACP;AAAA;;MAED,OAAA,SAAA,WAAWvjE,MAAM;AACb,YAAI,KAAK0xC,OAAOhyC,WAAW,KAAK+jE,YAAY,CAACzjE,IAAD,CAAxC;AACA,eAAKyjE,WAAWzjE,IAAhB;AAAA,MACP;AAAA;;MAED,OAAA,SAAA,WAAWuc,OAAO;AACd,YAAI,KAAKm1B,OAAOhyC,WAAW,KAAKgkE,YAAY,CAACnnD,KAAD,CAAxC;AACA,eAAKmnD,WAAWnnD,KAAhB;AAAA,MACP;AAAA;;aAED,SAAeonD,eAAAA,QAAQC,OAAO;AACtB,YAAA,KAAKlyB,OAAOhyC,WAAW,KAAKmkE,gBAAgB,CAACF,QAAQC,KAAT,CAA5C;AACA,eAAKC,eAAeF,QAAQC,KAA5B;AAAA,MACP;AAAA;;aAED,SAAgBtnE,gBAAAA,OAAOwnE,QAAQ;AACvB,YAAA,KAAKpyB,OAAOhyC,WAAW,KAAKqkE,iBAAiB,CAACznE,OAAOwnE,MAAR,CAA7C;AACA,eAAKC,gBAAgBznE,OAAOwnE,MAA5B;AAAA,MACP;AAAA;;MAED,OAAA,SAAA,aAAahkE,MAAM8iC,KAAKg+B,MAAM;AACtB,YAAA,KAAKlvB,OAAOhyC,WAAW,KAAKskE,cAAc,CAAClkE,MAAM8iC,KAAKg+B,IAAZ,CAA1C;AACA,eAAKoD,aAAalkE,MAAM8iC,KAAKg+B,IAA7B;AAAA,MACP;AAAA;;MAED,OAAA,SAAA,aAAaA,MAAM;AACf,YAAI,KAAKlvB,OAAOhyC,WAAW,KAAKukE,cAAc,CAACrD,IAAD,CAA1C;AACA,eAAKqD,aAAarD,IAAlB;AAAA,MACP;AAAA;;MAED,OAAA,SAAA,WAAWW,MAAMC,OAAOC,OAAO;AACvB,YAAA,KAAK/vB,OAAOhyC,WAAW,KAAKwkE,YAAY,CAAC3C,MAAMC,OAAOC,KAAd,CAAxC;AACA,eAAKyC,WAAW3C,MAAMC,OAAOC,KAA7B;AAAA,MACP;AAAA;;aAED,SAAgB0C,gBAAAA,MAAM9gE,GAAG;AACjB,YAAA,KAAKquC,OAAOhyC,WAAW,KAAK0kE,iBAAiB,CAACD,MAAM9gE,CAAP,CAA7C;AACA,eAAK+gE,gBAAgBD,MAAM9gE,CAA3B;AAAA,MACP;AAAA;;aAED,SAAiB8gE,iBAAAA,MAAM/4B,QAAQ;AACvB,YAAA,KAAKsG,OAAOhyC,WAAW,KAAK2kE,kBAAkB,CAACF,MAAM/4B,MAAP,CAA9C;AACA,eAAKi5B,iBAAiBF,MAAM/4B,MAA5B;AAAA,MACP;AAAA;;MAED,OAAA,SAAA,gBAAgB+4B,MAAM9gE,GAAGC,GAAG;AACpB,YAAA,KAAKouC,OAAOhyC,WAAW,KAAK4kE,iBAAiB,CAACH,MAAM9gE,GAAGC,CAAV,CAA7C;AACA,eAAKghE,gBAAgBH,MAAM9gE,GAAGC,CAA9B;AAAA,MACP;AAAA;;aAED,SAAiB6gE,iBAAAA,MAAM/4B,QAAQ;AACvB,YAAA,KAAKsG,OAAOhyC,WAAW,KAAK6kE,kBAAkB,CAACJ,MAAM/4B,MAAP,CAA9C;AACA,eAAKm5B,iBAAiBJ,MAAM/4B,MAA5B;AAAA,MACP;AAAA;;MAED,OAAA,SAAA,gBAAgB+4B,MAAM9gE,GAAGC,GAAGkhE,GAAG;AAC3B,YAAI,KAAK9yB,OAAOhyC,WAAW,KAAK+kE,iBAAiB,CAACN,MAAM9gE,GAAGC,GAAGkhE,CAAb,CAA7C;AACA,eAAKC,gBAAgBN,MAAM9gE,GAAGC,GAAGkhE,CAAjC;AAAA,MACP;AAAA;;aAED,SAAiBL,iBAAAA,MAAM/4B,QAAQ;AACvB,YAAA,KAAKsG,OAAOhyC,WAAW,KAAKglE,kBAAkB,CAACP,MAAM/4B,MAAP,CAA9C;AACA,eAAKs5B,iBAAiBP,MAAM/4B,MAA5B;AAAA,MACP;AAAA;;aAED,SAAgB+4B,gBAAAA,MAAM9gE,GAAGC,GAAGkhE,GAAG7hE,GAAG;AAC9B,YAAI,KAAK+uC,OAAOhyC,WAAW,KAAKilE,iBAAiB,CAACR,MAAM9gE,GAAGC,GAAGkhE,GAAG7hE,CAAhB,CAA7C;AACA,eAAKgiE,gBAAgBR,MAAM9gE,GAAGC,GAAGkhE,GAAG7hE,CAApC;AAAA,MACP;AAAA;;aAED,SAAiBwhE,iBAAAA,MAAM/4B,QAAQ;AACvB,YAAA,KAAKsG,OAAOhyC,WAAW,KAAKklE,kBAAkB,CAACT,MAAM/4B,MAAP,CAA9C;AACA,eAAKw5B,iBAAiBT,MAAM/4B,MAA5B;AAAA,MACP;AAAA;;MAOD,OAAA,SAAA,OAAc5L,IAAoB;AAAA,YAAA,SAAA;AAAhB/lB,YAAAA,sEAAK;AACbla,YAAAA,QAAQ1C,OAAOg5C,oBAAoBmqB,mBAAkBhiD,SAA7C;AACqBwhB,WAAGqlC;AACtCtlE,cAAMrB,QAAQ,SAAAkB,MAAQ;AAAA,yBAAA,MAAA,MAAA;AACdA,cAAAA,SAAS,eAAe;AACxB,gBAAM0lE,SAAS9E,mBAAkBhiD,UAAU5e,IAA5B;AACf,gBAAIA,KAAKQ,OAAO,CAAZ,MAAmB,KAAK;AACxBR,qBAAOA,KAAKrD,OAAO,CAAZ;AAAA,YACV;AACD,gBAAIyjC,GAAGpgC,IAAD,MAAW0lE,QAAQ;AACrB,kBAAItlC,GAAGpgC,IAAD,GAAQ;AACV,oBAAI,CAACogC,GAAGpgC,IAAD,EAAOA,MAAM;AAEhBogC,qBAAGpgC,IAAD,EAAO4/D,QAAQ5/D;AAAAA,gBACpB;AACDogC,mBAAG,MAAMpgC,IAAP,IAAeogC,GAAGpgC,IAAD;AAAA,cACtB;AACDogC,iBAAGpgC,IAAD,IAAS0lE;AAAAA,YACd;AAAA,UACJ;AAAA,QACJ,EAjBD,KAAA,IAAA,CAAA;AAmBA9E,QAAAA,mBAAkBhiD,UAAU+mD,kBAAkBhf,KAAKvmB,IAAI/lB,EAAvD;AAEA,eAAO+lB;AAAAA,MACV;AAAA;;;AAIL,QAAA,sBAAewgC;MCz4BMgF;AAEjB,aAAAA,gBAAYtrD,OAAO;AAAA,sBAAA,MAAAsrD,eAAA;AACVtrD,WAAAA,QAAQA;AAMRm1C,WAAAA,cAAc;AAMdoW,WAAAA,0BAA0B;AAM/B,WAAKC,uBAAuB,oBAAIx6B;IAEnC;;;WAED,SAAiB,MAAA;AACb,eAAO,KAAKmkB;AAAAA,MACf;AAAA;;aAED,SAAU,UAAA;AACN,iBAASr0D,IAAI,GAAGF,IAAI,KAAK2qE,wBAAwB1qE,QAAQC,IAAIF,GAAGE,KAAK;AACjE,eAAK2qE,yBAAyB,KAAKF,wBAAwBzqE,CAA7B,CAA9B;AAAA,QACH;AAEI0qE,aAAAA,qBAAqBjjB;AACrB4M,aAAAA,cAAc;AAAA,MACtB;AAAA;;MAED,OAAA,SAAA,yBAAyBp1C,IAAI;AACzB,eAAO,KAAKyrD,qBAAqB3gC,IAAI9qB,EAA9B;AAAA,MACV;AAAA;;aAED,SAAiB3Z,iBAAAA,MAAM2Z,IAAI;AAEvB,YAAI4N,gBAAgB5N,KAAK,KAAKyrD,qBAAqB3gC,IAAI9qB,EAA9B,IAAoC;AACzD,YAAA,CAAC4N,eAAe;AAEhBA,0BAAgB,IAAI/N,cAAc,MAAMxZ,IAAxB;AAEhB,cAAI2Z,IAAI;AACJ4N,0BAAcvN,WAAWL;AACzB,iBAAKyrD,qBAAqBzzD,IAAIgI,IAAI4N,aAAlC;AAAA,UACH;AAAA,QACJ;AAED,eAAOA;AAAAA,MACV;AAAA;;aAED,SAAoBA,oBAAAA,eAAezL,SAAS;AACxC,YAAIyL,cAAcxJ,SAAd;AAA0B;AAEzBwxC,aAAAA,gBAAgBhoC,cAAc1kB,IAAI0kB,cAAczkB,CAArD;AAGM0c,YAAAA,gBAAgB,KAAK8lD,2BAA2B/9C,eAAezL,OAA/C;AAEtByL,sBAAcpN,iBAAiBqF;AAG/BA,sBAAc3c,IAAI0kB,cAAc1kB;AAChC2c,sBAAc1c,IAAIykB,cAAczkB;AAEhC0c,sBAActC,SAAS,KAAKtD,MAAMuD;AAElC,aAAKgoD,wBAAwB9mE,KAAKkpB,aAAlC;AAEKg+C,aAAAA,eAAeh+C,aAApB;AAGA,aAAKi+C,iBAAiBj+C,eAAe,CAArC;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,gBAAgB0nC,OAAO;AACdF,aAAAA,eAAeE;AACpB,aAAKr1C,MAAMs1C,eAAeD,KAA1B;AAAA,MACH;AAAA;;aAED,SAAiB1nC,iBAAAA,eAAek+C,MAAM;AAClC,YAAMjmD,gBAAgB+H,cAAc/H;AACpC,YAAIkmD;AAGJ,YAAI,CAACC,MAAMC,iBAAN;AACD;AAGJ,YAAI,CAACr+C,cAAcxJ,SAAd;AACD;AAGJ,YAAI,CAACyB,cAAczC,eAAe,eAA7B,KAAiDzgB,MAAMkjB,cAAcyrC,aAAf;AACvD;AAEJya,gBAAQD,QAAQl+C,cAAc1kB,IAAI0kB,cAAczkB,IAAI0c,cAAcyrC;AAE7DrxC,aAAAA,MAAMisD,aAAaH,OAAOn+C,cAAc/K,QAA7C;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,eAAe+K,eAAe;AAC1B,YAAMvN,WAAWuN,cAAcvN;AAC/B,YAAIA,UAAU;AACN,cAAA,CAAC,KAAKorD,qBAAqB1qD,IAAIV,QAA9B,GAAyC;AAC1C,iBAAKorD,qBAAqBzzD,IAAIqI,UAAUuN,aAAxC;AAAA,UACH;AAAA,QACJ;AAAA,MACJ;AAAA;;aAED,SAAK,KAAA;AACD,aAAKu+C,yBAAL;AACA,aAAKC,kBAAL;AAAA,MACH;AAAA;;aAED,SAA2B,2BAAA;AACnBC,YAAAA,0BAA0B,CAAA;AAC9B,iBAAStrE,IAAI,GAAGF,IAAI,KAAK2qE,wBAAwB1qE,QAAQC,IAAIF,GAAGE,KAAK;AACjE,cAAIurE,KAAK,KAAKd,wBAAwBzqE,CAA7B;AACT,cAAIurE,GAAGC,gBAAgB;AACdC,iBAAAA,0BAA0BF,EAA/B;AAAA,UACH,OAAM;AACHD,oCAAwB3nE,KAAK4nE,EAA7B;AAAA,UACH;AAAA,QACJ;AAEId,aAAAA,0BAA0Ba;AAE/B,aAAKD,kBAAL;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,0BAA0Bx+C,eAAe;AACrC,YAAIA,cAAcxJ,YAAY;AACrBsnD,eAAAA,yBAAyB99C,aAA9B;AACKgoC,eAAAA,gBAAgB,CAAChoC,cAAc1kB,IAAI0kB,cAAczkB,CAAtD;AAGA,eAAK0iE,iBAAiBj+C,eAAe,EAArC;AAAA,QACH;AAGDA,sBAAcrN,eAAe;AAAA,MAChC;AAAA;;aAED,SAAoB,oBAAA;AAAA,YAAA,QAAA;AAEXkrD,aAAAA,qBAAqBhnE,QAAQ,SAACmpB,eAAevN,UAAa;AAAA,yBAAA,MAAA,KAAA;AAC3D,cAAI,EAAEuN,cAAcxJ,SAAd,KAA4BwJ,cAAchM,UAAd,MAA8B,CAACgM,cAAcnM,UAAU;AACrF,iBAAKgqD,qBAAqBxqD,OAAOZ,QAAjC;AAAA,UACH;AAAA,QACJ,EAJD,KAAA,IAAA,CAAA;AAAA,MAKH;AAAA;;MAMD,OAAA,SAAA,kBAAkBuN,eAAe;AACvBlqB,YAAAA,QAAQ,KAAK8nE,wBAAwBppE,QAAQwrB,aAArC;AACd,YAAM6+C,UAAW/oE,UAAU;AAE3B,YAAIkqB,cAAcxJ,YAAY;AAC1B,cAAIqoD,SAAS;AACJ7W,iBAAAA,gBAAgB,CAAChoC,cAAc1kB,IAAI0kB,cAAczkB,CAAtD;AACA,iBAAKqiE,wBAAwBv+C,OAAOvpB,OAAO,CAA3C;AAAA,UACH;AACIgoE,eAAAA,yBAAyB99C,aAA9B;AAAA,QACH;AAGDA,sBAAcrN,eAAe;AAAA,MAChC;AAAA;;aAED,SAA2BqN,2BAAAA,eAAezL,SAAS;AACxC,eAAA,KAAKlC,MAAMkW,SAAS9S,oBAAoBuK,eAAezL,OAAvD;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,yBAAyByL,eAAe;AACpC,aAAK3N,MAAMkW,SAAS9R,kBAAkBuJ,aAAtC;AACAA,sBAAc8+C,mBAAd;AAAA,MACH;AAAA;;;MC3LgBC;AAEjB,aAAAA,kBAAY1sD,OAAO;AAAA,UAAA,QAAA;AAAA,sBAAA,MAAA0sD,iBAAA;AACV1sD,WAAAA,QAAQA;AAEb,WAAKyC,kBAAkB,SAACkL,eAAkB;AAAA,uBAAA,MAAA,KAAA;AACjCg/C,aAAAA,QAAQh/C,aAAb;AAAA,MACH,EAFD,KAAA,IAAA;AAIKi/C,WAAAA,WAAW;AACXC,WAAAA,QAAQ;IAChB;;;aAED,SAAU,UAAA;AACDD,aAAAA,WAAW;AACXC,aAAAA,QAAQ;AACR7sD,aAAAA,QAAQ;AAEb,eAAO,KAAK4sD;AACZ,eAAO,KAAKC;AACZ,eAAO,KAAK7sD;AAAAA,MACf;AAAA;;aAED,SAAc,cAAA;AACV,YAAI,KAAK4sD,SAAS/rE,QAAQ;AACtB,cAAMs1C,QAAQp0B,KAAK6+C;AAChB,aAAA;AACC,iBAAKkM,aAAL;AAAA,UACH,SAAO,KAAKF,SAAS/rE,UAAWkhB,KAAK6+C,QAAQzqB,QAAQu2B,kBAAiBK;AAAAA,QAC1E;AAAA,MACJ;AAAA;;aAED,SAAe,eAAA;AACX,YAAM1qD,SAAS,KAAKuqD,SAAStrC,IAAd;AACf,YAAMiiB,OAAO,KAAKspB,MAAMvrC,IAAX;AACb,YAAIjf,OAAOV,aAAa;AACpBU,iBAAOK,oBAAoB6gC,IAA3B;AAAA,QACH;AAAA,MACJ;AAAA;;aAED,SAAI51B,IAAAA,eAAe41B,MAAM;AACrB,aAAKqpB,SAASnoE,KAAKkpB,aAAnB;AACA,aAAKk/C,MAAMpoE,KAAK8+C,IAAhB;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,QAAQ51B,eAAe;AACblqB,YAAAA,QAAQ,KAAKmpE,SAASzqE,QAAQwrB,aAAtB;AACVlqB,YAAAA,SAAS,GAAG;AACZ,eAAKmpE,SAAS5/C,OAAOvpB,OAAO,CAA5B;AACA,eAAKopE,MAAM7/C,OAAOvpB,OAAO,CAAzB;AAAA,QACH;AAAA,MACJ;AAAA;;;AAILipE,mBAAiBK,4BAA4B;MCzDxBC;AAEjB,aAAAA,aAAYhtD,OAAO;AAAA,sBAAA,MAAAgtD,YAAA;AACVhtD,WAAAA,QAAQA;AAER4N,WAAAA,OAAO;AAEPsC,WAAAA,kBAAkB;AAElBvI,WAAAA,cAAc,KAAK3H,MAAMkW,SAAS+2C,sBAAsB,IAA1C;AAEdpoB,WAAAA,aAAa,KAAK7kC,MAAMkW,SAASg3C,yBAAyB,IAA7C;AACbroB,WAAAA,WAAW3tC;AAEXi+C,WAAAA,cAAc;AACdgY,WAAAA,qBAAqB;AAErBC,WAAAA,mBAAmB;AAEnBC,WAAAA,UAAU;AAEVj7C,WAAAA,uBAAuB;AAAA,IAC/B;;;WAED,SAAiB,MAAA;AACb,eAAO,KAAK+iC;AAAAA,MACf;AAAA;;aAED,SAAU,UAAA;AAAA,YAAA,QAAA;AACN,aAAKgY,mBAAmB3oE,QAAQ,SAAA4c,SAAO;AAAA,yBAAA,MAAA,KAAA;AAAA,iBAAI,KAAKksD,mBAAmBlsD,OAAxB;AAAA,QAAJ,EAAvC,KAAA,IAAA,CAAA;AACK+zC,aAAAA,cAAc;AAEdn1C,aAAAA,QAAQ;AACR4N,aAAAA,OAAO;AAEPjG,aAAAA,cAAc;AACdk9B,aAAAA,aAAa;AACbsoB,aAAAA,qBAAqB;AACrBE,aAAAA,UAAU;AAEf,eAAO,KAAKrtD;AACZ,eAAO,KAAK4N;AACZ,eAAO,KAAKjG;AACZ,eAAO,KAAKk9B;AACZ,eAAO,KAAKsoB;AACZ,eAAO,KAAKE;AAAAA,MACf;AAAA;;aAED,SAAmB,mBAAA;AACf,eAAO,CAAC,CAAC,KAAKz/C,KAAKlR,QAAQqJ;AAAAA,MAC9B;AAAA;;aAED,SAAS,SAAA;AAEL,aAAK6H,KAAKlR,QAAQqJ,oBAAoB;AAEtC,aAAKwnD,QAAL;AAAA,MACH;AAAA;;aAED,SAAS,SAAA;AACL,aAAKC,QAAL;AAKA,YAAI,KAAK5/C,KAAKpH,aAAa;AACvB,eAAKgnD,QAAL;AAAA,QACH;AAED,aAAKC,qBAAL;AAAA,MACH;AAAA;;aAKD,SAAuB,uBAAA;AACnB,YAAM7sE,IAAI,KAAKysE,QAAQxsE;AACvB,YAAID,GAAG;AAEH,mBAASE,IAAI,GAAGF,KAAI,KAAKysE,QAAQxsE,QAAQC,IAAIF,IAAGE,KAAK;AACjD,gBAAI,KAAKusE,QAAQvsE,CAAb,EAAgB4sE,OAAO;AACvB,mBAAKL,QAAQvsE,CAAb,EAAgB2tB,qBAAhB;AAAA,YACH;AAAA,UACJ;AACI4+C,eAAAA,UAAU;QAClB;AAAA,MACJ;AAAA;;aAED,SAAU,UAAA;AACDn9C,aAAAA,kBAAkB;AAElBtC,aAAAA,KAAKtK;MACb;AAAA;;aAED,SAAU,UAAA;AACAqqD,YAAAA,aAAa,KAAK3tD,MAAM2P,UAAU,YAArB;AAEnB,aAAKi+C,iBAAL;AAEA,YAAI,KAAK5tD,MAAM2P,UAAU,sBAArB,GAA8C;AAC9C,eAAKk+C,YAAL;AAAA,QACH;AAGD,aAAKC,eAAL;AAEA,YAAIH,YAAY;AACZprE,kBAAQwrE,IAAR,qCAAA,OAAiD,KAAK37C,oBAAtD,CAAA;AAAA,QACH;AAID,YAAI,KAAKpS,MAAM2P,UAAU,qBAArB,KACA,KAAKyC,wBAAwB,KAAKpS,MAAM2P,UAAU,8BAArB,GAC/B;AACE,cAAIg+C,YAAY;AACZprE,oBAAQwrE,IAAR,oDAAA;AAAA,UACH;AACD,eAAKF,YAAL;AAAA,QACH;AAEIz7C,aAAAA,uBAAuB;AAAA,MAC/B;AAAA;;aAED,SAAc,cAAA;AACV,YAAM47C,SAAS,IAAIvO,WAAW,CAAf;AACf,YAAM35B,KAAK,KAAK9lB,MAAM8lB;AACtBA,WAAGmoC,WAAW,GAAG,GAAG,GAAG,GAAGnoC,GAAGypB,MAAMzpB,GAAG2nB,eAAeugB,MAArD;AAAA,MACH;AAAA;;aAED,SAAmB,mBAAA;AACVrmD,aAAAA,YAAYkgB;AACZja,aAAAA,KAAKzD;AACLxC,aAAAA,YAAYkuB;MACpB;AAAA;;aAED,SAAiB,iBAAA;AACRgP,aAAAA,WAAWqpB;MACnB;AAAA;;MAED,OAAA,SAAA,gBAAgB7Y,OAAO;AACdF,aAAAA,eAAeE;AACpB,aAAKr1C,MAAMs1C,eAAeD,KAA1B;AAAA,MACH;AAAA;;aAED,SAAsBpsD,sBAAAA,GAAGC,GAAG;AACxB,YAAIilE,OAAO,KAAKnuD,MAAMqmB,mBAAX;AACX,YAAI9W,KAAK/vB,KAAKI,IAAI,GAAGJ,KAAKiB,MAAMwI,IAAIklE,IAAf,CAAZ;AACT,YAAI79B,KAAK9wC,KAAKI,IAAI,GAAGJ,KAAKiB,MAAMyI,IAAIilE,IAAf,CAAZ;AAGT,YAAMvtE,IAAI,KAAKusE,mBAAmBtsE;AAClC,iBAASC,IAAIF,IAAI,GAAGE,KAAK,GAAGA,KAAK;AAC7B,cAAMsgB,WAAU,KAAK+rD,mBAAmBrsE,CAAxB;AAEZsgB,cAAAA,SAAQnY,MAAMsmB,MAAMnO,SAAQlY,MAAMonC,MAAOlvB,SAAQkC,WAAW,KAAKtD,MAAMuD,cAAe;AACtFnC,qBAAQvI,IAAI,KAAKmH,MAAMuD;AACvB,iBAAK4pD,mBAAmBngD,OAAOlsB,GAAG,CAAlC;AACA,mBAAOsgB;AAAAA,UACV;AAAA,QACJ;AAED,YAAMA,UAAU,KAAKgtD,qBAAqBnlE,GAAGC,GAAGqmB,IAAI+gB,EAApC;AAChBlvB,gBAAQoY,YAAY20C;AACpB,eAAO/sD;AAAAA,MACV;AAAA;;MAED,OAAA,SAAA,qBAAqBA,SAAS;AAC1B,aAAK+rD,mBAAmB1oE,KAAK2c,OAA7B;AAAA,MACH;AAAA;;aAED,SAAsC,2BAAA;AAAA,YAAA,SAAA;AAAbitD,YAAAA,0EAAS;AAI9B,YAAIC,QAAQ,KAAKtuD,MAAMuD,eAAe8qD;AAEjClB,aAAAA,qBAAqB,KAAKA,mBAAmB3rC,OAAO,SAAApgB,SAAW;AAAA,yBAAA,MAAA,MAAA;AAChE,cAAIA,QAAQvI,KAAKy1D,OAAO;AACfhB,iBAAAA,mBAAmBlsD,OAAxB;AACA,mBAAO;AAAA,UACV;AACD,iBAAO;AAAA,QACV,EAND,KAAA,IAAA,CAAA;AAAA,MAOH;AAAA;;MAED,OAAA,SAAA,qBAAqBnY,GAAGC,GAAGqmB,IAAI+gB,IAAI;AAC/B,aAAKqlB,gBAAgBpmC,KAAK+gB,EAA1B;AAEA,YAAMlvB,UAAU,KAAKpB,MAAMkW,SAASq4C,oBAAoBtlE,GAAGC,GAAGqmB,IAAI+gB,EAAlD;AAChBlvB,gBAAQrB,KAAK,KAAKqtD;AAClBhsD,gBAAQvI,IAAI,KAAKmH,MAAMuD;AACvBnC,gBAAQ0wC,KAAK7oD;AACbmY,gBAAQ2wC,KAAK7oD;AACbkY,gBAAQnY,IAAIsmB;AACZnO,gBAAQlY,IAAIonC;AAEZ,eAAOlvB;AAAAA,MACV;AAAA;;MAED,OAAA,SAAA,mBAAmBwE,eAAe;AAC9B,aAAK5F,MAAMkW,SAASs4C,kBAAkB5oD,aAAtC;AACK+vC,aAAAA,gBAAgB,CAAC/vC,cAAc3c,IAAI2c,cAAc1c,CAAtD;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,kBAAkB28C,eAAejgC,eAAe1D,SAAS;AAChDlC,aAAAA,MAAMkW,SAASu4C,kBAAkB5oB,eAAejgC,eAAe1D,OAApE;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,WAAWuC,aAAa;AACpB,aAAK4oD,QAAQ5oE,KAAKggB,WAAlB;AAAA,MACH;AAAA;;;MCjNgBiqD;AACjB,aAAAA,oBAAY1uD,OAAO;AAAA,sBAAA,MAAA0uD,mBAAA;AACV1uD,WAAAA,QAAQA;AACR2uD,WAAAA,kBAAkB;AAClBlmC,WAAAA,sBAAsB3pC,WAAW8vE,kBAAkB,KAAKD,eAAlC;AACtB7mC,WAAAA,QAAQ;AACRQ,WAAAA,WAAW;AACXlB,WAAAA,SAAS;AAAA,IACjB;;;WAED,SAAqB,MAAA;AACjB,eAAO,KAAKunC;AAAAA;MAGhB,KAAA,SAAA52D,KAAmBjY,GAAG;AACb6uE,aAAAA,kBAAkB7uE;AACvB,aAAK2oC,sBAAsB3pC,WAAW8vE,kBAAkB9uE,CAA7B;AAAA,MAC9B;AAAA;;WAED,SAAyB,MAAA;AACrB,eAAO,KAAK2oC;AAAAA,MACf;AAAA;;MAED,OAAA,SAAA,MAAM9iC,UAAU;AACZF,aAAK4T,YAAY,MAAM1T,QAAvB;AAAA,MACH;AAAA;;;AAGL+oE,qBAAmBpqD,UAAU0xB,uBAAuB;MC/B/B64B;AAEjB,aAAAA,mBAAY7uD,OAAO;AAAA,UAAA,QAAA;AAAA,sBAAA,MAAA6uD,kBAAA;AACV7uD,WAAAA,QAAQA;AAEb,WAAKA,MAAMiV,GAAG,cAAc,WAAA;AAAA,uBAAA,MAAA,KAAA;AAAM,eAAA,KAAK65C;MAAX,EAA5B,KAAA,IAAA,CAAA;AAOA,WAAKvtD,SAAS,oBAAIrB;AAElB,WAAK61B,4BAA4B,IAAI24B,mBAAmB,KAAK1uD,KAA5B;AAAA,IACpC;;;aAED,SAAW,WAAA;AAAA,YAAA,SAAA;AACP,YAAI,KAAKuB,OAAOzX,MAAM;AAClB,cAAIs+B,KAAK,KAAKpoB,MAAMooB;AAEhB5G,cAAAA,SAAS;AACb,eAAKjgB,OAAO/c,QAAQ,SAASnF,GAAG;AAC5BA,cAAEyvE,SAAS1mC,EAAX;AACA,gBAAI,CAAC/oC,EAAE0vE,aAAa;AAChBvtC,uBAAS;AAAA,YACZ;AAAA,UACJ,CALD;AAOA,cAAIA,QAAQ;AACR,iBAAKjgB,SAAS,IAAIrB,IAAI,mBAAI,KAAKqB,MAAT,EAAiBigB,OAAO,SAAA7gC,GAAC;AAAA,6BAAA,MAAA,MAAA;AAAKA,qBAAAA,EAAEouE;YAAP,aAAjC;AAAA,UACjB;AAAA,QACJ;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,eAAeppE,UAAU;AACrB,YAAMqpE,qBAAqB,IAAIN;AAC/BjpE,aAAK4T,YAAY21D,oBAAoBrpE,QAArC;AACA,eAAOqpE;AAAAA,MACV;AAAA;;MAED,OAAA,SAAA,UAAUt5B,YAAY;AAClB,aAAKn0B,OAAOR,IAAI20B,UAAhB;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,aAAaA,YAAY;AACrB,aAAKn0B,OAAOP,OAAO00B,UAAnB;AAAA,MACH;AAAA;;;MC7CgBu5B;AAEH,aAAAA,eAAA;AAAA,sBAAA,MAAAA,YAAA;AACV,WAAKC,OAAL;AAAA,IACH;;;aAED,SAAS,SAAA;AACA1nC,aAAAA,KAAK;AACL2nC,aAAAA,MAAM;AACNC,aAAAA,OAAO;AACPC,aAAAA,KAAK;AACLC,aAAAA,KAAK;AACLC,aAAAA,MAAM;AACNl3B,aAAAA,MAAM;AACNm3B,aAAAA,KAAK;AACLC,aAAAA,MAAM;AACNC,aAAAA,OAAO;AACPC,aAAAA,MAAM;AAENC,aAAAA,UAAU;AAAA,MAClB;AAAA;;aAED,SAAMjwE,MAAAA,MAAM8iE,KAAK;AACT3hE,YAAAA,GAAGF;AACP,YAAI,CAAC+B,QAAME,gBAAgB4/D,GAAtB,GAA4B;AAC7BA,gBAAM;AAAA,YAAIA,GAAAA;AAAAA,UAAJ;AAAA,QACT;AAEGoN,YAAAA,oBAAoB;AAEpB5jE,YAAAA,QAAQ,CAAA;AACZ,iBAASyrC,OAAO+qB,KAAK;AACjB,cAAIA,IAAIt/C,eAAeu0B,GAAnB,GAAyB;AACzB,gBAAIz0C,MAAMw/D,IAAI/qB,GAAD;AACb,gBAAI,CAAC/0C,QAAME,gBAAgBI,GAAtB,GAA4B;AAC7BA,oBAAM;AAAA,gBAACnD,GAAGmD;AAAAA,cAAJ;AAAA,YACT;AAED,gBAAIhE,IAAIwD,WAAWi1C,GAAD;AAEdA,gBAAAA,QAAQ,MAAM;AACdm4B,kCAAoB5sE,IAAInD;AAAAA,YAC3B,WAAU,CAAC4C,MAAMzD,CAAD,KAAOA,KAAK,KAAKA,KAAK,GAAG;AACtCgE,kBAAIhE,IAAIA;AAERgE,kBAAI4V,IAAIlW,QAAMmB,WAAWb,IAAInD,CAArB;AACRmD,kBAAI6sE,KAAK7sE,IAAI4V,IAAI5V,IAAInD,EAAE,GAAG,CAAT,IAAcmD,IAAInD;AAEnCmM,oBAAMxH,KAAKxB,GAAX;AAAA,YACH;AAAA,UACJ;AAAA,QACJ;AAGDgJ,gBAAQA,MAAMunB,KAAK,SAASn0B,GAAGD,GAAG;AAAC,iBAAOC,EAAEJ,IAAIG,EAAEH;AAAAA,QAAE,CAA5C;AAER2B,YAAIqL,MAAMpL;AAELC,aAAAA,IAAI,GAAGA,IAAIF,GAAGE,KAAK;AACpB,cAAIivE,OAAQjvE,MAAMF,IAAI;AAClB,cAAA,CAACqL,MAAMnL,CAAD,EAAIqiB,eAAe,IAAxB,GAA+B;AAEhClX,kBAAMnL,CAAD,EAAIkvE,KAAKD,OAAQ9jE,MAAMnL,CAAD,EAAI7B,KAAK,IAAI,IAAI,IAAiCgN,MAAMnL,IAAI,CAAL,EAAQ7B;AAAAA,UAC7F,OAAM;AAEH,gBAAMW,MAAMkB,IAAIF,IAAI,IAAIqL,MAAMnL,IAAI,CAAL,EAAQ7B,IAAI;AACrCgN,gBAAAA,MAAMnL,CAAD,EAAIkvE,KAAKpwE,KAAK;AACnBqM,oBAAMnL,CAAD,EAAIkvE,KAAKpwE;AAAAA,YACjB;AAAA,UACJ;AACD,cAAIqM,MAAMnL,CAAD,EAAIkvE,OAAO/jE,MAAMnL,CAAD,EAAI7B,GAAG;AAC5BgN,kBAAMnL,CAAD,EAAImvE,MAAM;AAAA,UAClB,OAAM;AACHhkE,kBAAMnL,CAAD,EAAImvE,MAAM,KAAKhkE,MAAMnL,CAAD,EAAIkvE,KAAK/jE,MAAMnL,CAAD,EAAI7B;AAAAA,UAC9C;AAAA,QACJ;AAKI6B,aAAAA,IAAI,GAAGA,IAAIF,GAAGE,KAAK;AAChB,cAAA,CAACmL,MAAMnL,CAAD,EAAIqiB,eAAe,IAAxB,GAA+B;AAEhClX,kBAAMnL,CAAD,EAAIovE,KAAKL;AAAAA,UACjB;AACG,cAAA,CAAC5jE,MAAMnL,CAAD,EAAIqiB,eAAe,GAAxB,GAA8B;AAE/B,gBAAIriB,MAAM,KAAKA,MAAMF,IAAI,KAAMqL,MAAMnL,CAAD,EAAI7B,MAAM,GAAuB;AAEjEgN,oBAAMnL,CAAD,EAAIoB,IAAIvC,OAAO,CAAC,GAAG,GAAG,GAAG,CAAV,IAAe;AAAA,YACtC,OAAM;AACH,kBAAMwwE,KAAKlkE,MAAMnL,IAAI,CAAL;AAChB,kBAAMsvE,KAAKnkE,MAAMnL,IAAI,CAAL;AAChB,kBAAIqvE,GAAGlxE,MAAMmxE,GAAGnxE,GAAG;AACfgN,sBAAMnL,CAAD,EAAIoB,IAAIvC,OAAO,CAAC,GAAG,GAAG,GAAG,CAAV,IAAe;AAAA,cACtC,OAAM;AACH,oBAAIA,MAAM;AACA0wE,sBAAAA,KAAKpB,aAAYqB,kBAAkBF,GAAGN,EAAjC;AACLS,sBAAAA,KAAKtB,aAAYqB,kBAAkBH,GAAGL,EAAjC;AACL5uE,sBAAAA,IAAI,KAAKkvE,GAAGnxE,IAAIkxE,GAAGlxE;AACzBgN,wBAAMnL,CAAD,EAAIoB,IAAI,CACThB,KAAKmvE,GAAG,CAAD,IAAME,GAAG,CAAD,IACfrvE,KAAKmvE,GAAG,CAAD,IAAME,GAAG,CAAD,IACfrvE,KAAKmvE,GAAG,CAAD,IAAME,GAAG,CAAD,IACfrvE,KAAKmvE,GAAG,CAAD,IAAME,GAAG,CAAD,EAJN;AAAA,gBAMhB,OAAM;AACHtkE,wBAAMnL,CAAD,EAAIoB,KAAKkuE,GAAGN,KAAKK,GAAGL,OAAOM,GAAGnxE,IAAIkxE,GAAGlxE;AAAAA,gBAC7C;AAAA,cACJ;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AAED,aAAK6B,IAAI,GAAGA,IAAIF,IAAI,GAAGE,KAAK;AAExB,cAAI,CAACmL,MAAMnL,CAAD,EAAI+X,GAAG;AAEb,gBAAIk3D,QAAQjvE,MAAMF,IAAI;AAClB,gBAAA,CAACqL,MAAMnL,CAAD,EAAIqiB,eAAe,IAAxB,GAA+B;AAChClX,oBAAMnL,CAAD,EAAI0vE,KAAKT,QAAO9jE,MAAMnL,CAAD,EAAIgvE,KAAK7jE,MAAMnL,IAAI,CAAL,EAAQgvE;AAAAA,YACnD;AAGGntE,gBAAAA,QAAMkgD,SAAS52C,MAAMnL,CAAD,EAAIhB,CAAxB,KAA8B6C,QAAMkgD,SAAS52C,MAAMnL,CAAD,EAAIgvE,EAAxB,GAA6B;AACvD,kBAAA,CAAC7jE,MAAMnL,CAAD,EAAIqiB,eAAe,KAAxB,GAAgC;AACjClX,sBAAMnL,CAAD,EAAI2vE,MAAMV,QAAOF,oBAAoB5jE,MAAMnL,IAAI,CAAL,EAAQovE;AAAAA,cAC1D;AACG,kBAAA,CAACjkE,MAAMnL,CAAD,EAAIqiB,eAAe,IAAxB,GAA+B;AAChClX,sBAAMnL,CAAD,EAAI4vE,KAAKX,QAAQpwE,OAAO,CAAC,GAAG,GAAG,GAAG,CAAV,IAAe,IAAKsM,MAAMnL,IAAI,CAAL,EAAQoB;AAAAA,cACjE;AAGD,kBAAIvC,MAAM;AACNsM,sBAAMnL,CAAD,EAAIhB,IAAImvE,aAAY0B,2BAA2B1kE,MAAMnL,CAAD,EAAIhB,GAAGmM,MAAMnL,CAAD,EAAI0vE,IAAIvkE,MAAMnL,CAAD,EAAI7B,GAAGgN,MAAMnL,CAAD,EAAIkvE,IAAI/jE,MAAMnL,CAAD,EAAIovE,IAAIjkE,MAAMnL,CAAD,EAAI2vE,KAAKxkE,MAAMnL,CAAD,EAAIoB,GAAG+J,MAAMnL,CAAD,EAAI4vE,EAAzI;AAAA,cAChB,OAAM;AACHzkE,sBAAMnL,CAAD,EAAIhB,IAAImvE,aAAY2B,uBAAuB3kE,MAAMnL,CAAD,EAAIhB,GAAGmM,MAAMnL,CAAD,EAAI0vE,IAAIvkE,MAAMnL,CAAD,EAAI7B,GAAGgN,MAAMnL,CAAD,EAAIkvE,IAAI/jE,MAAMnL,CAAD,EAAIovE,IAAIjkE,MAAMnL,CAAD,EAAI2vE,KAAKxkE,MAAMnL,CAAD,EAAIoB,GAAG+J,MAAMnL,CAAD,EAAI4vE,EAArI;AAAA,cAChB;AAEDzkE,oBAAMnL,CAAD,EAAI+X,IAAI;AAAA,YAChB;AAAA,UACJ;AAAA,QACJ;AAEG,YAAA,KAAKhY,QAAQ;AACb,eAAKquE,OAAL;AAAA,QACH;AAED,aAAKpuE,IAAI,GAAGF,IAAIqL,MAAMpL,QAAQC,IAAIF,GAAGE,KAAK;AACtC,eAAK+vE,KAAK5kE,MAAMnL,CAAD,CAAf;AAAA,QACH;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,KAAK2H,MAAM;AACF++B,aAAAA,GAAG/iC,KAAKgE,KAAKxJ,KAAK,CAAvB;AACKkwE,aAAAA,IAAI1qE,KAAKgE,KAAKunE,MAAM,CAAzB;AACKZ,aAAAA,KAAK3qE,KAAKgE,KAAKwnE,OAAO,CAA3B;AACKZ,aAAAA,GAAG5qE,KAAKgE,KAAKoQ,KAAK,KAAvB;AACA,aAAKy2D,GAAG7qE,KAAKgE,KAAK0a,eAAe,GAApB,IAA2B1a,KAAK3I,IAAI,CAAjD;AACKyvE,aAAAA,IAAI9qE,KAAKgE,KAAKqnE,MAAM,CAAzB;AACKz3B,aAAAA,IAAI5zC,KAAKgE,KAAKynE,MAAM,CAAzB;AACKV,aAAAA,GAAG/qE,KAAKgE,KAAKvG,KAAK,CAAvB;AACKutE,aAAAA,IAAIhrE,KAAKgE,KAAK+nE,MAAM,CAAzB;AACKd,aAAAA,KAAKjrE,KAAKgE,KAAKgoE,OAAO,CAA3B;AACKd,aAAAA,IAAIlrE,KAAKgE,KAAKioE,MAAM,CAAzB;AACA,aAAKd;AAAAA,MACR;AAAA;;MAED,OAAA,SAAA,SAAS3wE,GAAG;AACF2B,YAAAA,IAAI,KAAKgvE;AACX,YAAA,CAAChvE,GAAG;AACJ,iBAAO;AAAA,QACV;AAED,YAAI3B,IAAI,KAAKuoC,GAAG,CAAR,GAAY;AAChB,iBAAO;AAAA,QACV;AAEI,iBAAI1mC,IAAI,GAAGA,IAAIF,GAAGE,KAAK;AACxB,cAAI,KAAK0mC,GAAG1mC,CAAR,KAAc7B,KAAKA,IAAI,KAAKkwE,IAAIruE,CAAT,GAAa;AACpC,mBAAOA;AAAAA,UACV;AAAA,QACJ;AAEMF,eAAAA,IAAI;AAAA,MACd;AAAA;;MAED,OAAA,SAAA,SAAS3B,GAAG;AACR,YAAM6B,IAAI,KAAKgwE,SAAS7xE,CAAd;AACV,YAAI6B,MAAM,IAAI;AACV,iBAAO8Y;AAAAA,QACV,OAAM;AACH,cAAI,KAAKy1D,GAAGvuE,CAAR,GAAY;AACZ,gBAAM6hC,IAAInjC,KAAKK,IAAI,GAAGL,KAAKI,IAAI,IAAIX,IAAI,KAAKuoC,GAAG1mC,CAAR,KAAc,KAAKsuE,KAAKtuE,CAAV,CAA/B,CAAZ;AACV,mBAAO,KAAKwuE,GAAGxuE,CAAR,EAAW6hC,CAAX;AAAA,UACV,OAAM;AACH,mBAAO,KAAK2sC,GAAGxuE,CAAR;AAAA,UACV;AAAA,QACJ;AAAA,MACJ;AAAA;;WAED,SAAa,MAAA;AACT,eAAO,KAAK8uE;AAAAA,MACf;AAAA;;MAED,OAAA,SAAA,kBAAyBlwE,MAAM;AACvBR,YAAAA,KAAMQ,OAAO,QAAS,KAAK;AAC3BP,YAAAA,KAAMO,OAAO,MAAO,KAAK;AAC7B,YAAIN,IAAIM,OAAO;AACf,YAAIL,IAAMK,OAAO,WAAY;AACtB,eAAA,CAACR,GAAGC,GAAGC,GAAGC,CAAV;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,uBAA8BN,IAAIC,IAAI+xE,IAAIC,IAAIvjC,IAAIwjC,IAAIC,IAAIC,IAAI;AAE1D,YAAIC,KAAKJ,KAAKD;AACdG,cAAME;AACND,cAAMC;AAEN,YAAIC,UAAUpC,aAAYqC,iBAAiBvyE,IAAIC,IAAIyuC,IAAIwjC,IAAIC,IAAIC,EAAjD;AACV,YAAA,CAACE,SAAS;AACH,iBAAA,SAAUpyE,GAAG;AAChB,gBAAIA,MAAM;AAAG,qBAAOF;AACpB,gBAAIE,MAAM;AAAG,qBAAOD;AAEbA,mBAAAA,KAAKC,IAAIF,MAAM,IAAIE;AAAAA,UAC7B;AAAA,QACJ,OAAM;AACI,iBAAA,SAAUA,GAAG;AAChB,gBAAIA,MAAM;AAAG,qBAAOF;AACpB,gBAAIE,MAAM;AAAG,qBAAOD;AACpB,mBAAOiwE,aAAYsC,gBAAgBF,SAASpyE,CAArC;AAAA,UACV;AAAA,QACJ;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,2BAAkCF,IAAIC,IAAI+xE,IAAIC,IAAIvjC,IAAIwjC,IAAIC,IAAIC,IAAI;AAE9D,YAAIC,KAAKJ,KAAKD;AACdG,WAAG,CAAD,KAAOE;AACTF,WAAG,CAAD,KAAOE;AACTF,WAAG,CAAD,KAAOE;AACTF,WAAG,CAAD,KAAOE;AACTD,WAAG,CAAD,KAAOC;AACTD,WAAG,CAAD,KAAOC;AACTD,WAAG,CAAD,KAAOC;AACTD,WAAG,CAAD,KAAOC;AAET,YAAII,MAAMvC,aAAYqB,kBAAkBvxE,EAA9B;AACV,YAAI0yE,MAAMxC,aAAYqB,kBAAkBtxE,EAA9B;AAENqyE,YAAAA,UAAU,CACVpC,aAAYqC,iBAAiBE,IAAI,CAAD,GAAKC,IAAI,CAAD,GAAKhkC,IAAIwjC,IAAIC,GAAG,CAAD,GAAKC,GAAG,CAAD,CAA9D,GACAlC,aAAYqC,iBAAiBE,IAAI,CAAD,GAAKC,IAAI,CAAD,GAAKhkC,IAAIwjC,IAAIC,GAAG,CAAD,GAAKC,GAAG,CAAD,CAA9D,GACAlC,aAAYqC,iBAAiBE,IAAI,CAAD,GAAKC,IAAI,CAAD,GAAKhkC,IAAIwjC,IAAIC,GAAG,CAAD,GAAKC,GAAG,CAAD,CAA9D,GACAlC,aAAYqC,iBAAiBE,IAAI,CAAD,GAAKC,IAAI,CAAD,GAAKhkC,IAAIwjC,IAAIC,GAAG,CAAD,GAAKC,GAAG,CAAD,CAA9D,CAJU;AAOd,YAAI,CAACE,QAAQ,CAAD,GAAK;AACN,iBAAA,SAAUpyE,GAAG;AAEhB,gBAAIA,MAAM;AAAG,qBAAOF;AACpB,gBAAIE,MAAM;AAAG,qBAAOD;AAEbiwE,mBAAAA,aAAY53B,YAAYr4C,IAAID,IAAIE,CAAhC;AAAA,UACV;AAAA,QACJ,OAAM;AACI,iBAAA,SAAUA,GAAG;AAChB,gBAAIA,MAAM;AAAG,qBAAOF;AACpB,gBAAIE,MAAM;AAAG,qBAAOD;AAEpB,mBAAOiwE,aAAYyC,cAAc,CAC7BlyE,KAAKK,IAAI,KAAKovE,aAAYsC,gBAAgBF,QAAQ,CAAD,GAAKpyE,CAAxC,CAAd,GACAO,KAAKK,IAAI,KAAKovE,aAAYsC,gBAAgBF,QAAQ,CAAD,GAAKpyE,CAAxC,CAAd,GACAO,KAAKK,IAAI,KAAKovE,aAAYsC,gBAAgBF,QAAQ,CAAD,GAAKpyE,CAAxC,CAAd,GACAO,KAAKK,IAAI,KAAKovE,aAAYsC,gBAAgBF,QAAQ,CAAD,GAAKpyE,CAAxC,CAAd,CAJ6B,CAA1B;AAAA,UAMV;AAAA,QACJ;AAAA,MAEJ;AAAA;;aAoBD,SAAwBF,iBAAAA,IAAIC,IAAIyuC,IAAIwjC,IAAIC,IAAIC,IAAI;AAC5C,YAAI,CAAC1jC,MAAM,CAACwjC,IAAI;AAEZ,iBAAO;AAAA,QACV;AAIGU,YAAAA,MAAMlkC;AACV,YAAImkC,MAAM7yE,KAAKmyE,KAAKzjC;AAChBokC,YAAAA,MAAM,IAAIZ;AACd,YAAIa,MAAM9yE,KAAKmyE,KAAKF;AAEhB5vE,YAAAA,KAAK,IAAIswE,MAAM,IAAIE,MAAM;AACzBzwE,YAAAA,KAAK,KAAKuwE,MAAM,IAAIE;AACpB1wE,YAAAA,KAAK,IAAIwwE;AAETnwE,YAAAA,KAAK,IAAIowE,MAAM,IAAIE,MAAM9yE,KAAKD;AAC9BwC,YAAAA,KAAK,KAAKuwE,MAAM/yE,MAAM,IAAI6yE;AAC9B,YAAItwE,KAAK,KAAKswE,MAAM7yE;AAChBgzE,YAAAA,KAAKhzE;AAET,eAAO,CAACsC,IAAID,IAAID,IAAIK,IAAID,IAAID,IAAIywE,EAAzB;AAAA,MACV;AAAA;;aASD,SAAuBV,gBAAAA,SAASpyE,GAAG;AAC/B,YAAIoC,KAAKgwE,QAAQ,CAAD;AAChB,YAAIjwE,KAAKiwE,QAAQ,CAAD;AAChB,YAAIlwE,KAAKkwE,QAAQ,CAAD;AAChB,YAAI7vE,KAAK6vE,QAAQ,CAAD;AAChB,YAAI9vE,KAAK8vE,QAAQ,CAAD;AAChB,YAAI/vE,KAAK+vE,QAAQ,CAAD;AAChB,YAAIU,KAAKV,QAAQ,CAAD;AAEhB,YAAIhwE,OAAO,MAAMG,OAAO,MAAML,OAAO,KAAKG,OAAO,GAAG;AAEhD,iBAAOrC;AAAAA,QACV;AAGG0B,YAAAA,IAAI,KAAKe,KAAKE;AAEb,iBAAIC,KAAK,GAAGA,KAAK,IAAIA,MAAM;AAE5BH,gBAAMf,KAAKA,KAAKA,IAAIU,KAAKD,MAAMD;AAE/BS,eAAK3C,IAAIyC;AACLE,cAAAA,KAAK,SAASA,KAAK,MAAM;AAEzB,mBAAOjB,KAAKA,KAAKA,IAAIa,KAAKD,MAAMD,MAAMywE;AAAAA,UACzC;AAGD,cAAIpwE,OAAOhB,KAAKA,KAAK,IAAIU,MAAM,IAAID,MAAMD;AAEzC,cAAIQ,OAAO,SAASA,OAAO,OAAO;AAE9B;AAAA,UACH;AAEDhB,eAAKiB,KAAKD;AAAAA,QACb;AAGGG,YAAAA,OAAO;AACPC,YAAAA,OAAO;AACN,iBAAIF,MAAK,GAAGA,MAAK,IAAIA,OAAM;AAC5BlB,cAAI,OAAOmB,OAAOC;AAGlBL,gBAAMf,KAAKA,KAAKA,IAAIU,KAAKD,MAAMD;AAE/BS,eAAK3C,IAAIyC;AACLE,cAAAA,KAAK,SAASA,KAAK,MAAM;AAEzB,mBAAOjB,KAAKA,KAAKA,IAAIa,KAAKD,MAAMD,MAAMywE;AAAAA,UACzC;AAEGnwE,cAAAA,KAAK,GAAG;AACRG,mBAAOpB;AAAAA,UACV,OAAM;AACHmB,mBAAOnB;AAAAA,UACV;AAAA,QACJ;AAED,eAAOA;AAAAA,MACV;AAAA;;MAED,OAAA,SAAA,YAAmBZ,IAAIC,IAAIf,GAAG;AACtBgB,YAAAA,MAAOF,KAAK,QAAS,KAAK;AAC1BG,YAAAA,MAAOH,KAAK,MAAO,KAAK;AAC5B,YAAII,KAAKJ,KAAK;AACd,YAAIK,KAAOL,KAAK,WAAY;AAExBM,YAAAA,MAAOL,KAAK,QAAS,KAAK;AAC1BM,YAAAA,MAAON,KAAK,MAAO,KAAK;AAC5B,YAAIO,KAAKP,KAAK;AACd,YAAIQ,KAAOR,KAAK,WAAY;AAExBd,YAAAA,IAAIe,KAAKhB,IAAIoB,MAAM,IAAIpB;AACvBE,YAAAA,IAAIe,KAAKjB,IAAIqB,MAAM,IAAIrB;AACvBG,YAAAA,IAAIe,KAAKlB,IAAIsB,MAAM,IAAItB;AACvBI,YAAAA,IAAIe,KAAKnB,IAAIuB,MAAM,IAAIvB;AAE3B,eAAOO,KAAKiB,MAAMpB,CAAX,IAAgB,WAAWG,KAAKiB,MAAMvB,CAAX,IAAgB,QAAQM,KAAKiB,MAAMtB,CAAX,IAAgB,MAAMK,KAAKiB,MAAMrB,CAAX;AAAA,MACnF;AAAA;;MAED,OAAA,SAAA,cAAqBO,MAAM;AACvBA,aAAK,CAAD,IAAMH,KAAKI,IAAI,GAAGJ,KAAKK,IAAI,KAAKF,KAAK,CAAD,CAAlB,CAAZ;AACVA,aAAK,CAAD,IAAMH,KAAKI,IAAI,GAAGJ,KAAKK,IAAI,KAAKF,KAAK,CAAD,CAAlB,CAAZ;AACVA,aAAK,CAAD,IAAMH,KAAKI,IAAI,GAAGJ,KAAKK,IAAI,KAAKF,KAAK,CAAD,CAAlB,CAAZ;AACVA,aAAK,CAAD,IAAMH,KAAKI,IAAI,GAAGJ,KAAKK,IAAI,KAAKF,KAAK,CAAD,CAAlB,CAAZ;AACV,YAAIG,MAAMH,KAAK,CAAD,IAAM,MAAM,QAAQA,KAAK,CAAD,IAAM,MAAM,QAAQA,KAAK,CAAD,IAAM,MAAM,MAAMA,KAAK,CAAD,IAAM;AACtFG,YAAAA,IAAI,GAAG;AACPA,cAAI,aAAaA,IAAI;AAAA,QACxB;AACD,eAAOA;AAAAA,MACV;AAAA;;;MC1agBkyE;AAEjB,aAAAA,yBAAYC,mBAAmB;AAAA,sBAAA,MAAAD,wBAAA;AAEtBC,WAAAA,oBAAoBA;AAMpBC,WAAAA,YAAY;AAOjB,WAAKx2D,SAAS,IAAIuzD;AAMbkD,WAAAA,SAAS;AAMTC,WAAAA,eAAe;AAEfC,WAAAA,cAAcz4D;AACd04D,WAAAA,iBAAiB;AAEjBC,WAAAA,oBAAoB34D;AAAAA,IAC5B;;;aAED,SAAgB,gBAAA;AACR,YAAA,KAAK04D,gBAAgB;AACrB,iBAAO,KAAKD;AAAAA,QACf,OAAM;AACH,iBAAO,KAAK32D,OAAO82D,SAAS,CAArB;AAAA,QACV;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,MAAMlxD,SAASriB,GAAGgrE,QAAQ;AACtB,YAAM5oD,WAAW,KAAKoxD,oBAAoBnxD,OAAzB;AAEbxhB,YAAAA,IAAI,KAAK4b,OAAO82D,SAASvzE,CAArB;AAEJa,YAAAA,MAAM8Z,UAAa,CAACyH,SAASxgB,QAAQ;AACrC;AAAA,QACH;AAEGopE,YAAAA,WAAW,GAAG;AAEd,cAAIyI,KAAK,KAAKC;AAEd,cAAIhwE,QAAMkgD,SAAS/iD,CAAf,KAAqB6C,QAAMkgD,SAAS6vB,EAAf,GAAoB;AACrC,gBAAA,KAAKE,oBAAoB;AACzB9yE,kBAAIhB,WAAWu4C,YAAYv3C,GAAG4yE,IAAIzI,MAA9B;AAAA,YACP,OAAM;AACHnqE,kBAAIhB,WAAWw4C,aAAax3C,GAAG4yE,IAAIzI,MAA/B;AAAA,YACP;AAAA,UACJ;AAAA,QACJ;AAGD,YAAMrpE,IAAI,KAAKwxE,aAAavxE;AAE5B,YAAMyyB,IAAIjS,SAASxgB;AACd,iBAAI0yB,IAAI,GAAGA,IAAID,GAAGC,KAAK;AACnB,mBAAIzyB,IAAI,GAAGA,IAAIF,GAAGE,KAAK;AACnBsxE,iBAAAA,aAAatxE,CAAlB,EAAqBugB,SAASkS,CAAD,GAAKzzB,CAAlC;AAAA,UACH;AAAA,QACJ;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,oBAAoBwhB,SAAS;AACzB,eAAOA,QAAQ2wB,OAAO,KAAKigC,SAApB;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,MAAM5wD,SAAS;AACX,YAAMD,WAAW,KAAKoxD,oBAAoBnxD,OAAzB;AAEjB,YAAIxhB,IAAI,KAAK6yE;AAET7yE,YAAAA,MAAM8Z,UAAa,CAACyH,SAASxgB,QAAQ;AACrC;AAAA,QACH;AAGD,YAAMD,IAAI,KAAKwxE,aAAavxE;AAE5B,YAAMyyB,IAAIjS,SAASxgB;AACd,iBAAI0yB,IAAI,GAAGA,IAAID,GAAGC,KAAK;AACnB,mBAAIzyB,IAAI,GAAGA,IAAIF,GAAGE,KAAK;AACnBsxE,iBAAAA,aAAatxE,CAAlB,EAAqBugB,SAASkS,CAAD,GAAKzzB,CAAlC;AAAA,UACH;AAAA,QACJ;AAAA,MACJ;AAAA;;MAED,KAAA,SAAAiY,KAAajY,GAAG;AACPoyE,aAAAA,YAAYpyE;AAAAA,MACpB;AAAA;;MAED,KAAA,SAAAiY,KAAMjY,GAAG;AACA+yE,aAAAA,WAAW/yE;AAAAA,MACnB;AAAA;;WAED,SAAiB,MAAA;AACb,eAAO,KAAKuyE;AAAAA;MAGhB,KAAA,SAAAt6D,KAAejY,GAAG;AACTuyE,aAAAA,cAAcvyE;AACnB,aAAKwyE,iBAAkBxyE,MAAM8Z;AAAAA,MAChC;AAAA;;MAED,KAAA,SAAA7B,KAAOjY,GAAG;AACDgzE,aAAAA,aAAahzE;AAAAA,MACrB;AAAA;;MAED,KAAA,SAAAiY,KAAUjY,GAAG;AACJ4b,aAAAA,OAAO8kB,MAAM,KAAKoyC,iBAAL,GAAyB9yE,CAA3C;AAAA,MACH;AAAA;;MAED,KAAA,SAAAiY,KAAMjY,GAAG;AACA8C,aAAAA,QAAQ9C;AAAAA,MAChB;AAAA;;MAED,KAAA,SAAAiY,KAAejY,GAAG;AAAA,YAAA,QAAA;AACd,YAAI,CAACgD,MAAMC,QAAQjD,CAAd,GAAkB;AACnBA,cAAI,CAACA,CAAD;AAAA,QACP;AAEIqyE,aAAAA,SAAS;AAEdryE,UAAE0E,QAAQ,SAACu7C,MAAS;AAAA,yBAAA,MAAA,KAAA;AAChB,eAAKoyB,OAAO1tE,KAAKs7C,IAAjB;AACKqyB,eAAAA,aAAa3tE,KAAKknC,QAAQzE,UAAU6Y,IAAlB,CAAvB;AAAA,QACH,EAHD,KAAA,IAAA,CAAA;AAAA,MAIH;AAAA;;MAED,KAAA,SAAAhoC,KAAajY,GAAG;AACPyyE,aAAAA,oBAAoB34D;AACpB49B,aAAAA,aAAa13C;AAAAA,MACrB;AAAA;;MAED,KAAA,SAAAiY,KAAMjY,GAAG;AACA03C,aAAAA,aAAa13C;AAAAA,MACrB;AAAA;;MAED,OAAA,SAAA,MAAM6F,UAAU;AACZF,aAAK4T,YAAY,MAAM1T,QAAvB;AAAA,MACH;AAAA;;aAED,SAAmB,mBAAA;AACf,YAAI,KAAK4sE,sBAAsB34D,QAAW;AACtC,eAAK24D,oBAAoB,KAAKJ,OAAOtxE,SAAS8qC,QAAQyL,gBAAgB,KAAK+6B,OAAO,CAAZ,CAAxB,IAA0C;AAAA,QAC3F;AACD,eAAO,KAAKI;AAAAA,MACf;AAAA;;;AAGLP,0BAAwB1tD,UAAUyuD,4BAA4B;MCjKzCC;AACH,aAAAA,qBAAA;AAAA,sBAAA,MAAAA,kBAAA;AAILC,WAAAA,WAAW;AAEXnrC,WAAAA,QAAQ;AACRQ,WAAAA,WAAW;AAEX4qC,WAAAA,SAAS;AACTC,WAAAA,eAAe;AACfC,WAAAA,cAAc;AAEdC,WAAAA,WAAW;AAEhB,WAAKC,aAAaN,mBAAkBO,aAAaC;AAC5CC,WAAAA,sBAAsB;AACtBC,WAAAA,0BAA0B50E,WAAW8vE,kBAAkB,KAAK6E,mBAAlC;AAC1BE,WAAAA,eAAe;AACfC,WAAAA,YAAY;AAAA,IACpB;;;WAED,SAAc,MAAA;AACV,eAAO,KAAKX;AAAAA;MAGhB,KAAA,SAAAl7D,KAAYjY,GAAG;AACNmzE,aAAAA,WAAW;AAChB,iBAASnyE,IAAI,GAAGF,IAAId,EAAEe,QAAQC,IAAIF,GAAGE,KAAK;AACtC,cAAMmjB,IAAInkB,EAAEgB,CAAD;AACX,cAAI,CAACmjB,EAAE8uD,2BAA2B;AAC9B,gBAAMc,MAAM,IAAI7B,wBAAwB,IAA5B;AACZ6B,gBAAI93D,MAAMkI,CAAV;AACA,iBAAKgvD,SAASxuE,KAAKovE,GAAnB;AAAA,UACH,OAAM;AACH,iBAAKZ,SAASxuE,KAAKwf,CAAnB;AAAA,UACH;AAAA,QACJ;AAAA,MACJ;AAAA;;aAQD,SAAM3C,MAAAA,SAASriB,GAAe;AAAZgrE,YAAAA,0EAAS;AACvB,aAAKgJ,SAASzuE,QAAQ,SAASsvE,QAAQ;AACnCA,iBAAOz5B,MAAM/4B,SAASriB,GAAGgrE,MAAzB;AAAA,QACH,CAFD;AAAA,MAGH;AAAA;;MAMD,OAAA,SAAA,MAAM3oD,SAAS;AACX,aAAK2xD,SAASzuE,QAAQ,SAASsvE,QAAQ;AACnCA,iBAAOjsC,MAAMvmB,OAAb;AAAA,QACH,CAFD;AAAA,MAGH;AAAA;;WAED,SAAyB,MAAA;AACrB,eAAO,KAAKmyD;AAAAA;MAGhB,KAAA,SAAA17D,KAAuBjY,GAAG;AACjB2zE,aAAAA,sBAAsB3zE;AAC3B,aAAK4zE,0BAA0B50E,WAAW8vE,kBAAkB9uE,CAA7B;AAAA,MAClC;AAAA;;WAED,SAA6B,MAAA;AACzB,eAAO,KAAK4zE;AAAAA,MACf;AAAA;;MAED,OAAA,SAAA,MAAM/tE,UAAU;AACZF,aAAK4T,YAAY,MAAM1T,QAAvB;AAAA,MACH;AAAA;;;AAILqtE,oBAAkBO,eAAe;AAAA,IAC7BC,MAAM;AAAA,IACNO,SAAS;AAAA,IACTC,SAAS;AAAA,IACTC,WAAW;AAAA,IACXC,UAAU;AAAA,EALmB;MCnFZC;;;AAEjB,aAAAA,WAAYt0D,SAASla,UAAU2b,SAAS;AAAA,UAAA;AAAA,sBAAA,MAAA6yD,UAAA;AACpC,cAAA,OAAA,KAAA,IAAA;AAEKt0D,YAAAA,UAAUA;AAEV6a,YAAAA,YAAY/0B;AAEZ+e,YAAAA,WAAWpD;AAEhB,YAAK02B,SAASm8B,WAAUC,OAAOC;AAE1B7sC,YAAAA,KAAK;AACLC,YAAAA,aAAa;AACb6sC,YAAAA,eAAe;AAEfC,YAAAA,iBAAiB;AACjBC,YAAAA,SAAS;AAhBsB,aAAA;AAAA,IAiBvC;;;aAED,SAAQ,QAAA;AACJ,YAAI,KAAK9vD,YAAY,KAAKA,SAASyjB,UAAU;AACpCX,eAAAA,KAAK;AACV,eAAKC,aAAa,KAAK9hC,SAASmiC;AAChC,eAAKwsC,eAAe,KAAK3uE,SAASutE;AAClC,eAAKl7B,SAASm8B,WAAUC,OAAOK;AAC1B/+C,eAAAA,KAAK,OAAV;AACA,eAAKg/C,YAAL;AAAA,QACH,OAAM;AACHnyE,kBAAQC,KAAK,gEAAb;AAAA,QACH;AAAA,MACJ;AAAA;;aAED,SAAO,OAAA;AACC,YAAA,KAAKw1C,WAAWm8B,WAAUC,OAAOO,QAAQ;AAEzC,eAAK38B,SAASm8B,WAAUC,OAAOK;AAC/B,eAAKC,YAAL;AACKh/C,eAAAA,KAAK,QAAV;AAAA,QAJJ,WAKW,KAAKsiB,UAAUm8B,WAAUC,OAAOQ,YAAY,KAAKjvE,SAAS2tE,cAAcN,kBAAkBO,aAAaQ,SAAS;AAEvH,eAAK/7B,SAASm8B,WAAUC,OAAOK;AAC1B/+C,eAAAA,KAAK,cAAV;AAAA,QAHG,WAII,KAAKsiB,UAAUm8B,WAAUC,OAAOK,WAAW,KAAKz8B,UAAUm8B,WAAUC,OAAOS,UAAU;AAE5F,eAAK1+B,MAAL;AAAA,QACH;AAAA,MACJ;AAAA;;aAED,SAAQ,QAAA;AACA,YAAA,KAAK6B,WAAWm8B,WAAUC,OAAOK,SAAS;AAC1C,eAAKz8B,SAASm8B,WAAUC,OAAOO;AAC1Bj/C,eAAAA,KAAK,OAAV;AAAA,QACH;AAAA,MACJ;AAAA;;aAED,SAAS,SAAA;AACD,YAAA,KAAKsiB,UAAUm8B,WAAUC,OAAOS,UAAU;AAC1C,eAAK1+B,MAAL;AAAA,QACH,OAAM;AACH,eAAK2+B,KAAL;AAAA,QACH;AAAA,MACJ;AAAA;;aAED,SAAY,YAAA;AACHrtC,aAAAA,aAAa;AACb8sC,aAAAA,iBAAiB;AAAA,MACzB;AAAA;;aAED,SAAS,SAAA;AACD,YAAA,KAAKv8B,WAAWm8B,WAAUC,OAAOK,SAAS;AACrChtC,eAAAA,aAAa;AACbD,eAAAA,KAAK;AAAA,QAFd,WAGW,KAAKwQ,WAAWm8B,WAAUC,OAAOQ,UAAU;AAC7CL,eAAAA,iBAAiB;AACjB/sC,eAAAA,KAAK;AAAA,QACb;AAAA,MACJ;AAAA;;aAED,SAAO,OAAA;AACH,YAAI,KAAKwQ,WAAWm8B,WAAUC,OAAOW,WAAW,KAAK/8B,WAAWm8B,WAAUC,OAAOC;AAAM;AAEvF,aAAKE,iBAAiB,KAAK5uE,SAASiuE,aAAa;AAEjD,YAAM,KAAKjuE,SAAS2tE,eAAeN,kBAAkBO,aAAaU,aAAc,CAAC,KAAKM,kBAAmB,KAAK9sC,aAAa,GAAG;AAE1H,eAAKuQ,SAASm8B,WAAUC,OAAOQ;AAC1Bl/C,eAAAA,KAAK,MAAV;AAAA,QACH,OAAM;AACC,cAAA,KAAK/vB,SAAS2tE,eAAeN,kBAAkBO,aAAaC,MAAM;AAC7DgB,iBAAAA,SAAS;AAAA,UACjB;AAED,eAAKx8B,SAASm8B,WAAUC,OAAOQ;AAC1Bl/C,eAAAA,KAAK,MAAV;AAAA,QACH;AAED,aAAKg/C,YAAL;AAAA,MACH;AAAA;;aAED,SAAU,UAAA;AACN,YAAI,KAAK18B,WAAWm8B,WAAUC,OAAOW,WAAW,KAAK/8B,WAAWm8B,WAAUC,OAAOC,MAAM;AACnF,eAAKr8B,SAASm8B,WAAUC,OAAOQ;AAC1BptC,eAAAA,KAAK;AACL9R,eAAAA,KAAK,MAAV;AACA,eAAKmS,MAAL;AACA,eAAKmQ,SAASm8B,WAAUC,OAAOW;AAC1Br/C,eAAAA,KAAK,YAAV;AAAA,QACH;AAAA,MACJ;AAAA;;aAED,SAAW,WAAA;AACP,eAAO,KAAKsiB,WAAWm8B,WAAUC,OAAOO;AAAAA,MAC3C;AAAA;;aAED,SAAY,YAAA;AACR,eAAO,KAAK38B,WAAWm8B,WAAUC,OAAOK;AAAAA,MAC3C;AAAA;;aAED,SAAa,aAAA;AACT,eAAO,KAAKz8B,WAAWm8B,WAAUC,OAAOQ;AAAAA,MAC3C;AAAA;;aAED,SAAa,aAAA;AACT,eAAO,KAAK58B,WAAWm8B,WAAUC,OAAOS;AAAAA,MAC3C;AAAA;;aAED,SAAc,cAAA;AACN,YAAA,KAAKG,YAAY;AACjB,eAAKn1D,QAAQooB,UAAU,IAAvB;AAAA,QACH;AAAA,MACJ;AAAA;;aAED,SAAW,WAAA;AACA,gBAAC,KAAK+P,UAAUm8B,WAAUC,OAAOK,WAAW,KAAKz8B,UAAUm8B,WAAUC,OAAOQ,aAAa,KAAKlwD,YAAY,KAAKA,SAASyjB;AAAAA,MAClI;AAAA;;MAED,OAAA,SAAA,SAASC,IAAI;AACL,YAAA,CAAC,KAAK1jB;AAAU;AACfuwD,aAAAA,UAAU7sC,EAAf;AACA,aAAKiS,MAAL;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,UAAUjS,IAAI;AACN,YAAA,KAAK4P,UAAUm8B,WAAUC,OAAOQ,UAAU;AACrCM,eAAAA,cAAc9sC,EAAnB;AACA;AAAA,QACH;AAEG,YAAA,KAAK4P,UAAUm8B,WAAUC,OAAOK,SAAS;AACzC;AAAA,QACH;AAED,YAAI,KAAKhtC,aAAa,GAAG;AAChBA,eAAAA,cAAcW;AAEnB,cAAI,KAAKX,aAAa,GAAG;AACrBW,iBAAK,CAAC,KAAKX;AACNA,iBAAAA,aAAa;AAEb/R,iBAAAA,KAAK,UAAV;AAAA,UACH,OAAM;AACH;AAAA,UACH;AAAA,QACJ;AAED,YAAI,KAAK/vB,SAAS2iC,aAAa,GAAG;AACzBd,eAAAA,KAAK;AAAA,QADd,WAEW,KAAK7hC,SAAS2iC,WAAW,GAAG;AACnC,eAAKd,MAAMY,KAAK,KAAKziC,SAAS2iC;AAAAA,QACjC;AACD,YAAI,KAAKd,MAAM,GAAG;AAEd,cAAI,KAAK7hC,SAASutE,UAAU,MAAM,KAAKoB,eAAe,GAAG;AACrD,gBAAI,KAAKA,eAAe,GAAG;AACvB,mBAAKA;AAAAA,YACR;AACD,iBAAK9sC,KAAK,KAAK7hC,SAASwtE;AACxB,iBAAKz9C,KAAK,YAAY,KAAK8R,EAA3B;AAEA,gBAAI,KAAK7hC,SAASytE,aAAa;AAC3B,mBAAK3rC,aAAa,KAAK9hC,SAASytE;AAAAA,YACnC;AAED,iBAAK19C,KAAK,UAAU,KAAK4+C,YAAzB;AAAA,UACH,OAAM;AACE9sC,iBAAAA,KAAK;AACV,iBAAK9R,KAAK,YAAY,KAAK8R,EAA3B;AAEA,iBAAKwQ,SAASm8B,WAAUC,OAAOS;AAC1Bn/C,iBAAAA,KAAK,QAAV;AACA,gBAAI,KAAK/vB,SAAS0tE,UAAU;AACxB,mBAAKrrC,KAAL;AAAA,YACH;AAAA,UACJ;AAAA,QACJ,OAAM;AACH,eAAKtS,KAAK,YAAY,KAAK8R,EAA3B;AAAA,QACH;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,cAAcY,IAAI;AACd,YAAIE,WAAW,KAAK6sC;AAEpB,YAAI,KAAKZ,iBAAiB,GAAG;AACpBA,eAAAA,kBAAkBnsC;AAEvB,cAAI,KAAKmsC,iBAAiB,GAAG;AACzBnsC,iBAAK,CAAC,KAAKmsC;AACNA,iBAAAA,iBAAiB;AAEjB7+C,iBAAAA,KAAK,cAAV;AAAA,UACH,OAAM;AACH;AAAA,UACH;AAAA,QACJ;AACG,YAAA,KAAK/vB,SAAS2tE,cAAcN,kBAAkBO,aAAaU,WAAW;AACtE,eAAKj8B,SAASm8B,WAAUC,OAAOW;AAC1Br/C,eAAAA,KAAK,YAAV;AAAA,QACH,WAAU,KAAK/vB,SAAS2tE,cAAcN,kBAAkBO,aAAaQ,SAAS;AACvEzrC,cAAAA,aAAa,GAAG;AACXd,iBAAAA,KAAK;AAAA,UACb,WAAUc,WAAW,GAAG;AACrB,iBAAKd,MAAMY,KAAKE;AAAAA,UACnB;AAED,cAAI,KAAKd,MAAM,GAAG;AACTA,iBAAAA,KAAK;AACV,iBAAKwQ,SAASm8B,WAAUC,OAAOW;AAC1Br/C,iBAAAA,KAAK,YAAV;AAAA,UACH;AAAA,QACJ,WAAU,KAAK/vB,SAAS2tE,cAAcN,kBAAkBO,aAAaC,MAAM;AACnE4B,eAAAA,wBAAwBhtC,EAA7B;AACA,cAAI,KAAKosC,UAAU,GAAG;AACbhtC,iBAAAA,KAAK;AACV,iBAAKwQ,SAASm8B,WAAUC,OAAOW;AAC1Br/C,iBAAAA,KAAK,YAAV;AAAA,UACH;AAAA,QACJ,WAAU,KAAK/vB,SAAS2tE,cAAcN,kBAAkBO,aAAaW,UAAU;AAC5E,cAAI,KAAK1sC,KAAK,GAAG;AACTc,gBAAAA,aAAa,GAAG;AACXd,mBAAAA,KAAK;AAAA,YACb,WAAUc,WAAW,GAAG;AACrB,kBAAI,KAAKd,KAAK,GAAG;AACb,qBAAKA,MAAMY,KAAK,KAAKziC,SAAS2iC;AAAAA,cACjC,OAAM;AACH,qBAAKd,MAAMY,KAAKE;AAAAA,cACnB;AAAA,YACJ;AACD,gBAAI,KAAKd,MAAM,GAAG;AACTA,mBAAAA,KAAK;AACV,mBAAKwQ,SAASm8B,WAAUC,OAAOW;AAC1Br/C,mBAAAA,KAAK,YAAV;AAAA,YACH,OAAM;AACH,mBAAKA,KAAK,YAAY,KAAK8R,EAA3B;AAAA,YACH;AAAA,UACJ;AAAA,QACJ,WAAU,KAAK7hC,SAAS2tE,cAAcN,kBAAkBO,aAAaS,SAAS;AAC3E,cAAI,KAAKxsC,KAAK,GAAG;AACb,gBAAI,KAAK7hC,SAAS2iC,YAAY,GAAG;AACxBd,mBAAAA,KAAK;AAAA,YACb,OAAM;AACH,mBAAKA,MAAMY,KAAK,KAAKziC,SAAS2iC;AAAAA,YACjC;AACD,gBAAI,KAAKd,MAAM,GAAG;AACV,kBAAA,KAAK7hC,SAAS2tE,cAAcN,kBAAkBO,aAAaS,SAAS;AAC/DxsC,qBAAAA,KAAK;AACV,qBAAKwQ,SAASm8B,WAAUC,OAAOW;AAC1Br/C,qBAAAA,KAAK,YAAV;AAAA,cACH,OAAM;AACH,oBAAI,KAAK4+C,eAAe,GAAG;AACvB,uBAAKA;AACA9sC,uBAAAA,KAAK;AACV,uBAAK9R,KAAK,UAAU,KAAK4+C,YAAzB;AAAA,gBACH,OAAM;AACE9sC,uBAAAA,KAAK;AACV,uBAAKwQ,SAASm8B,WAAUC,OAAOW;AAC1Br/C,uBAAAA,KAAK,YAAV;AAAA,gBACH;AAAA,cACJ;AAAA,YACJ,OAAM;AACH,mBAAKA,KAAK,YAAY,KAAK8R,EAA3B;AAAA,YACH;AAAA,UACJ;AAAA,QACJ;AAAA,MAEJ;AAAA;;MAED,OAAA,SAAA,wBAAwBY,IAAI;AACxB,YAAI,KAAKosC,SAAS,GAAG;AACjB,cAAI,KAAKD,iBAAiB,GAAG;AACpBA,iBAAAA,kBAAkBnsC;AAEvB,gBAAI,KAAKmsC,iBAAiB,GAAG;AACzBnsC,mBAAK,CAAC,KAAKmsC;AACNA,mBAAAA,iBAAiB;AAEjB7+C,mBAAAA,KAAK,UAAV;AAAA,YACH,OAAM;AACH;AAAA,YACH;AAAA,UACJ;AAED,cAAM4S,WAAW,KAAK6sC;AAElB7sC,cAAAA,YAAY,GAAG;AACVksC,iBAAAA,SAAS;AAAA,UACjB,OAAM;AACH,iBAAKA,UAAUpsC,KAAKE;AAAAA,UACvB;AACD,cAAI,KAAKksC,UAAU,GAAG;AAEbA,iBAAAA,SAAS;AAAA,UACjB;AAAA,QACJ;AAAA,MACJ;AAAA;;aAED,SAAmB,mBAAA;AACR,eAAA,KAAK7uE,SAASguE,gBAAgB,KAAKhuE,SAAS2iC;AAAAA,MACtD;AAAA;;aAED,SAAQ,QAAA;AACA,YAAA,KAAK0P,WAAWm8B,WAAUC,OAAOW,SAAS;AAC1C,eAAKltC,MAAL;AAAA,QACH,OAAM;AACCoiC,cAAAA,SAAS;AACb,cAAI,KAAKjyB,WAAWm8B,WAAUC,OAAOQ,YAAY,KAAKjvE,SAAS2tE,eAAeN,kBAAkBO,aAAaC,MAAM;AAC/GvJ,qBAAU,IAAI,KAAKtkE,SAAS0vE,uBAAuB,KAAKb,MAA1C;AAAA,UACjB;AACI95C,eAAAA,UAAU2f,MAAM,KAAK31B,UAAU,KAAK8iB,IAAIyiC,MAA7C;AAAA,QACH;AAAA,MACJ;AAAA;;aAED,SAAQ,QAAA;AACJ,aAAKvvC,UAAUmN,MAAM,KAAKnjB,QAA1B;AAAA,MACH;AAAA;;WAED,SAAY,MAAA;AACR,eAAO,KAAKszB;AAAAA,MACf;AAAA;;WAED,SAAQ,MAAA;AACJ,eAAO,KAAKxQ;AAAAA,MACf;AAAA;;WAED,SAAgB,MAAA;AACZ,eAAO,KAAKC;AAAAA,MACf;AAAA;;WAED,SAAc,MAAA;AACV,eAAO,KAAK/iB;AAAAA,MACf;AAAA;;WAED,SAAY,MAAA;AACR,eAAOllB,KAAKiB,MAAM,KAAK+mC,KAAK,KAAK9M,UAAU4N,WAAW,EAA/C;AAAA,MACV;AAAA;;WAED,SAAe,MAAA;AACX,eAAO,KAAK5N;AAAAA,MACf;AAAA;;IAvWkCtG;AA2WvC+/C,YAAUC,SAAS;AAAA,IACfC,MAAM;AAAA,IACNI,SAAS;AAAA,IACTG,UAAU;AAAA,IACVG,SAAS;AAAA,IACTF,UAAU;AAAA,IACVF,QAAQ;AAAA,EANO;MC9WEW;AAEjB,aAAAA,kBAAYt1D,OAAO;AAAA,UAAA,QAAA;AAAA,sBAAA,MAAAs1D,iBAAA;AACVt1D,WAAAA,QAAQA;AAEb,WAAKA,MAAMiV,GAAG,cAAc,WAAA;AAAA,uBAAA,MAAA,KAAA;AAAM,eAAA,KAAK65C;MAAX,EAA5B,KAAA,IAAA,CAAA;AAMA,WAAKvtD,SAAS,oBAAIrB;IACrB;;;aAED,SAAW,WAAA;AAAA,YAAA,SAAA;AACP,YAAI,KAAKqB,OAAOzX,MAAM;AAClB,cAAIs+B,KAAK,KAAKpoB,MAAMooB;AAEhB5G,cAAAA,SAAS;AACb,eAAKjgB,OAAO/c,QAAQ,SAASnF,GAAG;AAC5B,gBAAIA,EAAE21E,YAAY;AACd31E,gBAAEyvE,SAAS1mC,EAAX;AAAA,YACH,OAAM;AACH5G,uBAAS;AAAA,YACZ;AAAA,UACJ,CAND;AAQA,cAAIA,QAAQ;AACR,iBAAKjgB,SAAS,IAAIrB,IAAI,mBAAI,KAAKqB,MAAT,EAAiBigB,OAAO,SAAA7gC,GAAC;AAAA,6BAAA,MAAA,MAAA;AAAIA,qBAAAA,EAAEq0E;YAAN,aAAjC;AAAA,UACjB;AAAA,QACJ;AAAA,MACJ;AAAA;;aAED,SAAgB1zD,gBAAAA,SAAS3b,UAAU;AAC/B,YAAIhD,QAAME,gBAAgB8C,QAAtB,GAAiC;AAEjCA,qBAAW,KAAKuwC,eAAevwC,QAApB;AAAA,QACd;AAEM,eAAA,IAAIwuE,UACP,MACAxuE,UACA2b,OAHG;AAAA,MAKV;AAAA;;MAED,OAAA,SAAA,eAAe3b,UAAU;AACrB,YAAMssE,oBAAoB,IAAIe;AAC9BvtE,aAAK4T,YAAY44D,mBAAmBtsE,QAApC;AACA,eAAOssE;AAAAA,MACV;AAAA;;MAED,OAAA,SAAA,UAAUv8B,YAAY;AAClB,aAAKn0B,OAAOR,IAAI20B,UAAhB;AAAA,MACH;AAAA;;;MCpDgB6/B;;;;;;;;;aAEjB,SAAe,eAAA;AACX,eAAO;AAAA,MACV;AAAA;;aAED,SAAmB,mBAAA;AACR,eAAA,SAASp0D,IAAI;AAChB,cAAIq0D,aAAa,IAAI/V,WAAW,CAAC,KAAK,KAAK,KAAK,GAAhB,CAAf;AACjBt+C,aAAG,MAAM;AAAA,YAACkB,QAAQmzD;AAAAA,YAAYvsE,GAAG;AAAA,YAAGC,GAAG;AAAA,YAAGsX,WAAW;AAAA,UAA5C,CAAP;AAAA,QACL;AAAA,MACJ;AAAA;;aAED,SAAoB,oBAAA;AAChB,eAAO;AAAA,MACV;AAAA;;IAfyC8V;MCWzBy1C;;;AAES,aAAAA,SAAA;AAAA,UAAA;AAAd7pD,UAAAA,2EAAU,CAAA;AAAI,sBAAA,MAAA6pD,MAAA;AACtB,cAAA,OAAA,KAAA,IAAA;AACK0J,YAAAA,YAAYvzD,OAAjB;AAEKizC,YAAAA,cAAc;AACdugB,YAAAA,eAAe;AAGfC,YAAAA,iBAAiB;AACjBC,YAAAA,oBAAoB;AAEzB,UAAMC,eAAe9J,OAAM7xC,WAAW6xC,OAAM7xC,WAAWwnC,eAAejgD,KAAKS,OAApB;AACvD,YAAKgY,WAAW,IAAI27C;AAEpB,UAAI,MAAK37C,SAAShjB,MAAM;AACfgjB,cAAAA,SAAShjB,KAAd,uBAAA,KAAA,CAAA;AAAA,MACH;AAEI4uB,YAAAA,KAAK;AACLixB,YAAAA,MAAM;AAEX,UAAMvd,UAAU,MAAK7pB,UAAU,SAAf;AAChB,UAAI6pB,SAAS;AACLA,YAAAA,QAAQsO,YAAY;AACfhiB,gBAAAA,KAAK0T;AAAAA,QACb,OAAM;AACEud,gBAAAA,MAAMvd;AAAAA,QACd;AAAA,MACJ,OAAM;AACH,YAAI72C,QAAMoC,UAAU,CAACgnE,OAAMC,iBAAP,KAA6B,MAAKr8C,UAAU,UAAf,IAA6B;AAC1E,gBAAKonC,MAAM,MAAK78B,SAAS47C,oBAAoB,MAAKnmD,UAAU,GAAf,GAAqB,MAAKA,UAAU,GAAf,CAAvD;AAAA,QACd,OAAM;AACH,gBAAKmW,KAAK,MAAK5L,SAAS67C,mBAAmB,MAAKpmD,UAAU,GAAf,GAAqB,MAAKA,UAAU,GAAf,CAAtD;AAAA,QACb;AAAA,MACJ;AAEG,UAAA,MAAKmW,IAAI;AAMTwgC,4BAAkBxf,OAAO,MAAKhhB,IAAI,WAAlC;AAAA,MACH;AAED,YAAKkwC,QAAQ,MAAKlwC,KAAK,IAAI;AAGvB,UAAA,MAAK2sB,aAAa;AAClB,YAAI,MAAK9iC,UAAU,kBAAf,MAAuC,GAAG;AAC1C,cAAMsmD,QAAQ,MAAKtmD,UAAU,kBAAf;AAEd,gBAAK8iC,YAAYyjB,MAAMrzD,QAAQ,MAAKszD,SAAS,GAAd,IAAqBF,QAAS;AAC7D,gBAAKxjB,YAAYyjB,MAAMpzD,SAAS,MAAKqzD,SAAS,GAAd,IAAqBF,QAAQ;AAAA,QAChE;AAGD,cAAKE,SAASltE,IAAI,MAAKwpD,UAAL,EAAiB5vC;AACnC,cAAKszD,SAASjtE,IAAI,MAAKupD,UAAL,EAAiB3vC;AAAAA,MACtC;AAED,UAAI,MAAKkzD,UAAU,GAAG;AACdrzE,YAAAA,QAAM0C,SAAS;AACf,gBAAK+wE,YAAY,IAAIte,cAArB,uBAAA,KAAA,CAAA;AAAA,QACH,OAAM;AACH,gBAAKse,YAAY,IAAIznB,cAArB,uBAAA,KAAA,CAAA;AAAA,QACH;AAAA,MACJ,OAAM;AACH,cAAKynB,YAAY,IAAIxf,YAArB,uBAAA,KAAA,CAAA;AAAA,MACH;AAED,YAAKyf,cAAc,MAAK1mD,UAAU,YAAf,CAAnB;AAEKpM,YAAAA,eAAe;AAEpB,YAAKuyB,cAAc,IAAI+4B,kBAAvB,uBAAA,KAAA,CAAA;AACA,YAAKv5B,aAAa,IAAIggC,iBAAtB,uBAAA,KAAA,CAAA;AAEA,YAAK/vD,iBAAiB,IAAI+lD,eAA1B,uBAAA,KAAA,CAAA;AACA,YAAK9oD,mBAAmB,IAAIkqD,iBAA5B,uBAAA,KAAA,CAAA;AAEK4J,YAAAA,YAAY;AACZC,YAAAA,cAAc;AACdnuC,YAAAA,KAAK;AAGV,YAAKsM,mBAAmB,IAAI6gC,iBAA5B,uBAAA,KAAA,CAAA;AACK7gC,YAAAA,iBAAiBjzB;AAGtB,YAAKizB,iBAAiBryB,OAAO7B,YAAY;AAEzC,YAAKoE,MAAM,IAAIooD,YAAf,uBAAA,KAAA,CAAA;AAEA,YAAKwJ,wBAAwB,oBAAIt2D;AA9FX,aAAA;AAAA,IA+FzB;;;WAED,SAAe,MAAA;AACX,eAAO,KAAKk2D;AAAAA,MACf;AAAA;;WAoBD,SAAW,MAAA;AACP,eAAO,KAAKJ;AAAAA,MACf;AAAA;;aAED,SAAU,UAAA;AACC,eAAA,KAAK1vE,SAAS;AAAA,MACxB;AAAA;;aAED,SAAQ,QAAA;AACG,eAAA,KAAKA,SAAS;AAAA,MACxB;AAAA;;MAED,OAAA,SAAA,UAAUZ,MAAM;AACZ,eAAO,KAAKywE,SAASzwE,IAAd;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,YAAYi9B,GAAG;AAAA,YAAA,SAAA;AACNwzC,aAAAA,WAAW;AAEhB,YAAIM,MAAM,SAAAA,KAAC/wE,MAAM+8D,KAAQ;AAAA,yBAAA,MAAA,MAAA;AACrB,cAAI7/D,QAAQ+/B,EAAEj9B,IAAD;AAET9C,cAAAA,UAAUgX,QAAW;AACrB,iBAAKu8D,SAASzwE,IAAd,IAAsB+8D;AAAAA,UACzB,OAAM;AACH,iBAAK0T,SAASzwE,IAAd,IAAsB9C;AAAAA,UACzB;AAAA,QACJ,EARD,KAAA,IAAA;AAUA6zE,YAAI,UAAU,IAAX;AACHA,YAAI,WAAW,IAAZ;AACHA,YAAI,KAAK,IAAN;AACHA,YAAI,KAAK,IAAN;AACHA,YAAI,eAAe,IAAhB;AACHA,YAAI,kBAAkB,IAAnB;AACHA,YAAI,gBAAgB,GAAjB;AACHA,YAAI,yBAAyB,CAA1B;AACHA,YAAI,aAAa;AAAA,UAAEj9C,WAAW;AAAA,UAAcuB,UAAU;AAAA,QAArC,CAAd;AACH07C,YAAI,cAAc,CAAC,GAAG,GAAG,GAAG,CAAV,CAAf;AACHA,YAAI,mBAAmB,YAApB;AACHA,YAAI,WAAW,CAAZ;AACHA,YAAI,kBAAkB,IAAnB;AACHA,YAAI,aAAa,IAAd;AACHA,YAAI,aAAa,CAAd;AACHA,YAAI,YAAY,KAAb;AACHA,YAAI,YAAY,IAAb;AACHA,YAAI,wBAAwB,KAAzB;AACHA,YAAI,oBAAoB,CAArB;AACHA,YAAI,uBAAuB,KAAxB;AACHA,YAAI,gCAAgC,CAAjC;AACHA,YAAI,cAAc,KAAf;AACHA,YAAI,uBAAuB,KAAxB;AACHA,YAAI,sBAAsB,KAAvB;AACHA,YAAI,OAAO,KAAR;AAEH,YAAI9zC,EAAE,kBAAD,KAAwB,QAAQA,EAAE,kBAAD,MAAyB,GAAG;AAC9D,eAAKwzC,SAAS,WAAd,KAA8BxzC,EAAE,kBAAD;AAC/B,eAAKwzC,SAAS,GAAd,KAAsBxzC,EAAE,kBAAD;AACvB,eAAKwzC,SAAS,GAAd,KAAsBxzC,EAAE,kBAAD;AAAA,QAC1B;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,eAAe+zC,KAAK;AACXh3B,aAAAA,cAAcg3B;AAAAA,MACtB;AAAA;;aAED,SAAO,OAAA;AAEC,YAAA,KAAKh3B,YAAY/vB,UAAU,OAA3B,KAAuC,KAAKuK,SAAS2hC,cAAc;AACnEt5D,kBAAQwrE,IAAI,iCAAZ;AAAA,QACH;AAEG,YAAA,KAAKruB,YAAY/vB,UAAU,OAA3B,KAAuC,KAAKonC,KAAK;AACjDx0D,kBAAQwrE,IAAI,qCAAZ;AAAA,QACH;AAEIruB,aAAAA,YAAY3S;AACjB,YAAI,KAAKpd,UAAU,WAAf,GAA6B;AACxBuK,eAAAA,SAASwiC;QACjB;AAAA,MACJ;AAAA;;aAED,SAAU,UAAA;AACDxiC,aAAAA,SAASoiC;AACTpiC,aAAAA,SAASi1B;AACTvqC,aAAAA,IAAIuqC;AACJ5pC,aAAAA,eAAe4pC;AACfinB,aAAAA,UAAUjnB;AAGX,YAAA,KAAKrpB,IAAI;AACJA,eAAAA,GAAGwiB,WAAW,GAAK,GAAK,GAAK,CAAlC;AACA,eAAKxiB,GAAGyiB,MAAM,KAAKziB,GAAG0iB,gBAAtB;AAAA,QACH,WAAU,KAAKuO,KAAK;AACZA,eAAAA,IAAInE,UACL,GAAG,GAAG,KAAKmE,IAAI18B,OAAOxX,OAAO,KAAKk0C,IAAI18B,OAAOvX,MADjD;AAAA,QAGH;AAEIgjB,aAAAA,KAAK;AACLixB,aAAAA,MAAM;AACNnyC,aAAAA,MAAM;AACNuxD,aAAAA,WAAW;AACXj8C,aAAAA,WAAW;AACX3U,aAAAA,iBAAiB;AACjB6wD,aAAAA,YAAY;AAEjB,eAAO,KAAKtwC;AACZ,eAAO,KAAKixB;AACZ,eAAO,KAAKnyC;AACZ,eAAO,KAAKuxD;AACZ,eAAO,KAAKj8C;AACZ,eAAO,KAAK3U;AACZ,eAAO,KAAK6wD;AAAAA,MACf;AAAA;;aAED,SAAO,OAAA;AACEl8C,aAAAA,SAASoiC;MACjB;AAAA;;aAED,SAAS,SAAA;AACApiC,aAAAA,SAASwiC;MACjB;AAAA;;WAED,SAAW,MAAA;AACP,eAAO,KAAKhd;AAAAA,MACf;AAAA;;aAED,SAAY,YAAA;AACD,eAAA,KAAKs2B,QAAQ,KAAKjf,IAAI18B,SAAS,KAAKyL,GAAGzL;AAAAA,MACjD;AAAA;;aAED,SAAqB,qBAAA;AACV,eAAA,KAAK87C,SAAS38C;AAAAA,MACxB;AAAA;;MAMD,OAAA,SAAA,uBAAuBpY,SAAS;AACxB,YAAA,KAAKu1D,gBAAgB;AAErBv1D,kBAAQ4V,qBAAR;AAAA,QACH,OAAM;AACH,eAAKw/C,sBAAsBz1D,IAAIK,OAA/B;AAAA,QACH;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,0BAA0BA,SAAS;AAC3B,YAAA,KAAKo1D,uBAAuB;AAC5B,eAAKA,sBAAsBx1D,OAAOI,OAAlC;AAAA,QACH;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,uBAAuBA,SAAS;AACpB,eAAA,KAAKo1D,yBAAyB,KAAKA,sBAAsB11D,IAAIM,OAA/B;AAAA,MACzC;AAAA;;aAGD,SAAuB,uBAAA;AAAA,YAAA,SAAA;AACnB,YAAI,KAAKo1D,sBAAsB1sE,MAAM;AACjC,eAAK0sE,sBAAsBhyE,QAAQ,SAAA4c,SAAW;AAAA,2BAAA,MAAA,MAAA;AAC1CA,oBAAQ4V,qBAAR;AAAA,UACH,EAFD,KAAA,IAAA,CAAA;AAGA,eAAKw/C,wBAAwB,oBAAIt2D;QACpC;AAAA,MACJ;AAAA;;aAED,SAAe,eAAA;AACNo2D,aAAAA,YAAY,KAAKC;AACtB,aAAKA,cAAc,KAAKr8C,SAAS08C,UAAd;AAEnB,YAAI,KAAKT,SAASU,SAAS;AACvB,eAAKzuC,KAAK,KAAK+tC,SAASU;AAAAA,QAC3B,OAAM;AACH,eAAKzuC,KAAM,CAAC,KAAKkuC,YAAa,OAAM,QAAQ,KAAKC,cAAc,KAAKD;AAAAA,QACvE;AAAA,MACJ;AAAA;;aAED,SAAc,cAAA;AACV,aAAKQ,aAAL;AACKphD,aAAAA,KAAK,YAAV;AACA,aAAKsB,qBAAL;AACKtB,aAAAA,KAAK,QAAV;AAAA,MACH;AAAA;;aAED,SAAY,YAAA;AACHlT,aAAAA,iBAAiBu0D;AACjBrhD,aAAAA,KAAK,UAAV;AACA,aAAKnS;AAAAA,MACR;AAAA;;aAED,SAAc,cAAA;AACV,YAAMs9C,UAAU,KAAKj8C,IAAImN,iBAAT;AAIXvP,aAAAA,iBAAiBu0D;AAEtB,YAAIlW,SAAS;AACJ8V,eAAAA,iBAAiB;AACjB/xD,eAAAA,IAAItB;AACJsB,eAAAA,IAAIuF;AACJwsD,eAAAA,iBAAiB;AAAA,QACzB;AAED,aAAKz8C,SAAS88C,UAAUnW,OAAxB;AAEKnrC,aAAAA,KAAK,UAAV;AAEA,aAAKnS;AAAAA,MACR;AAAA;;aAED,SAAkB,kBAAA;AACd,eAAO,KAAKozD;AAAAA,MACf;AAAA;;aAED,SAAY,YAAA;AAKR,aAAKna,YAAL;AACA,aAAKK,YAAL;AAAA,MACH;AAAA;;aAED,SAAoB,oBAAA;AAEZ,YAAA,KAAKjvC,MAAM;AACNA,eAAAA,KAAK9H,KAAKpJ,QAAQ2I,oBAAoB,CAA3C;AAAA,QACH;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,cAAcijC,YAAY;AACtB,aAAK7kC,kBAAL;AACI6kC,YAAAA,eAAe,MAAM;AAEhB8gB,eAAAA,cAAc;AAAA,QAFvB,WAGWtmE,MAAMC,QAAQulD,UAAd,GAA2B;AAC7B8gB,eAAAA,cAAc9gB;AAAAA,QACtB,OAAM;AACH,eAAK8gB,cAActqE,WAAWm4E,4BAA4B3uB,UAAvC;AAAA,QACtB;AAAA,MACJ;AAAA;;aAED,SAAgB,gBAAA;AACZ,eAAO,KAAK8gB;AAAAA,MACf;AAAA;;MAED,OAAA,SAAA,cAAczjE,UAAU;AACpB,YAAIA,UAAU;AACV,iBAAO,KAAK2b,QAAQ3b,QAAb;AAAA,QACV,OAAM;AACH,iBAAO,IAAIgmC,QAAQ,IAAZ;AAAA,QACV;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,aAAahmC,UAAU;AACnB,eAAOkwB,OAAOmf,OAAO,MAAMrvC,QAApB;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,QAAQA,UAAU;AACd,YAAIA,SAAS+lC;AAAW,iBAAO/lC;AAE/B,YAAI2b;AACA3b,YAAAA,SAASpC,MAAM;AACf+d,UAAAA,WAAU,IAAI3b,SAASpC,KAAK,IAAlB;AAAA,QACb,OAAM;AACH+d,UAAAA,WAAU,IAAIqqB,QAAQ,IAAZ;AAAA,QACb;AAEDrqB,QAAAA,SAAQvF,MAAMpW,QAAd;AAEA,eAAO2b;AAAAA,MACV;AAAA;;MAED,OAAA,SAAA,EAAE3b,UAAU;AACR,eAAO,KAAK2b,QAAQ3b,QAAb;AAAA,MACV;AAAA;;WAED,SAAQ,MAAA;AACG,eAAA,KAAKwwE,SAASltE;AAAAA,MACxB;AAAA;;WAED,SAAQ,MAAA;AACG,eAAA,KAAKktE,SAASjtE;AAAAA,MACxB;AAAA;;WAED,SAAkB,MAAA;AACd,eAAO,KAAKD,IAAI,KAAKktE,SAAS38C;AAAAA,MACjC;AAAA;;WAED,SAAmB,MAAA;AACf,eAAO,KAAKtwB,IAAI,KAAKitE,SAAS38C;AAAAA,MACjC;AAAA;;MAED,OAAA,SAAA,eAAe67B,OAAO;AACbF,aAAAA,eAAeE;AACpB,YAAI,KAAKqgB,iBAAiB,KAAKnyD,cAAc;AACrC,cAAA,KAAK4xC,cAAc,KAAKxlC,UAAU,gBAAf,GAAkC;AAChD0b,iBAAAA,GAAG,KAAR;AACI,gBAAA,KAAK8pB,cAAc,KAAKxlC,UAAU,gBAAf,IAAmC,KAAK;AAEtD0b,mBAAAA,GAAG,IAAR;AAAA,YACH;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA;;WAED,SAAiB,MAAA;AACb,eAAO,KAAK8pB;AAAAA,MACf;AAAA;;aAED,SAAaE,aAAAA,OAAOt0D,OAAO;AACvB,YAAIA,OAAO;AACF40E,eAAAA,kBAAkBtgB;AAAAA,QAC1B,OACI;AACIugB,eAAAA,qBAAqBvgB;AAAAA,QAC7B;AAAA,MACJ;AAAA;;WAED,SAAoB,MAAA;AAChB,eAAO,KAAKsgB;AAAAA,MACf;AAAA;;WAED,SAAuB,MAAA;AACnB,eAAO,KAAKC;AAAAA,MACf;AAAA;;WAED,SAAe,MAAA;AACX,eAAO,KAAKD,iBAAiB,KAAKC;AAAAA,MACrC;AAAA;;MAED,OAAA,SAAA,GAAGvnB,YAAY;AACX,YAAI,KAAKqnB,iBAAiB,KAAKnyD,cAAc;AACpCmyD,eAAAA,eAAe,KAAKnyD;AACnB2zD,cAAAA,oBAAoB,KAAK/hB;AAC1BgiB,eAAAA,gBAAgB9oB,UAArB;AACK+oB,eAAAA,sBAAsB/oB,UAA3B;AACA,eAAKn4B,SAASmV,GAAGgjB,UAAjB;AAEA,cAAI,KAAK3O,YAAY/vB,UAAU,OAA3B,GAAqC;AACrCptB,oBAAQwrE,IAAqB1f,iBAAAA,OAAAA,aAAa,iBAAiB,IAA3D,UAAA,EAAA,OAAwE,KAAKqnB,cAA7E,SAAA,EAAA,SAAqGwB,oBAAoB,KAAK/hB,eAAe,KAAK51D,QAAQ,CAAvD,GAA2F,iCAAA,EAAA,QAAC,KAAK41D,cAAc,KAAK51D,QAAQ,CAAjC,GAA9L,IAAA,CAAA;AACA,gBAAMytD,QAAQ,KAAKmI,cAAc,KAAK5vC,eAAe8xD,aAAa,KAAKzyD,IAAIyyD;AAC3E90E,oBAAQwrE,IAA6B,yBAAA,QAAC,KAAKxoD,eAAe8xD,aAAa,KAAK93E,QAAQ,CAA/C,oCAA0E,KAAKqlB,IAAIyyD,aAAa,KAAK93E,QAAQ,CAApC,GAA8D,uBAAA,EAAA,QAACytD,QAAQ,KAAKztD,QAAQ,CAAtB,GAA5K,IAAA,CAAA;AAAA,UACH;AAAA,QACJ;AAAA,MACJ;AAAA;;aAED,SAAoC,kBAAA;AAApB8uD,YAAAA,8EAAa;AACrBA,YAAAA,cAAc,KAAKzpC,IAAIgJ,KAAK9P,SAAS;AAErC,eAAK8G,IAAIgJ,KAAK9P,UAAU;AACnByH,eAAAA,eAAe8lB;AACpB,eAAKzmB,IAAIgJ,KAAK9P,UAAU;AAAA,QAC3B,OAAM;AACEyH,eAAAA,eAAe8lB;QACvB;AAAA,MACJ;AAAA;;aAED,SAA0C,wBAAA;AAApBgjB,YAAAA,8EAAa;AAC/B,YAAIA,cAAc,KAAKzgC,KAAK9P,SAAS;AAEjC,eAAK8P,KAAK9P,UAAU;AACpB,eAAK8G,IAAI0yD,yBAAyB,CAAlC;AACA,eAAK1pD,KAAK9P,UAAU;AAAA,QACvB,OAAM;AACH,eAAK8G,IAAI0yD,yBAAyB,CAAlC;AAAA,QACH;AAAA,MACJ;AAAA;;aAED,SAAmB,mBAAA;AACf,eAAO,KAAKp9C,SAAS6L;MACxB;AAAA;;aAED,SAAS,SAAA;AACAnhB,aAAAA,IAAItB;MACZ;AAAA;;MAED,OAAA,SAAA,mBAAmBi0D,iBAAiB;AAC5B50E,YAAAA,QAAM0C,SAAS;AACf,eAAK60B,SAASs9C,mBAAmBD,eAAjC;AAAA,QACH;AAAA,MACJ;AAAA;;aAED,SAAsB5tE,sBAAAA,GAAGC,GAAG;AAClByS,YAAAA,WAAW,CAAA;AACjB,aAAKuR,KAAK9H,KAAKxC;AACVsK,aAAAA,KAAK9H,KAAKgO,eAAenqB,GAAGC,GAAGyS,QAApC;AAEA,eAAOA;AAAAA,MACV;AAAA;;aA3ZD,SAA0B,mBAAA;AAClB1Z,YAAAA,QAAM2C,QAAQ;AACd,iBAAO;AAAA,QACV;AAEG,YAAA;AACA,iBAAO,CAAC,CAACN,OAAO0gE;AAAAA,QADpB,SAESzhD,GAAP;AACE,iBAAO;AAAA,QACV;AAAA,MACJ;AAAA;;IAjH8BmQ;MCVdqjD;;;AAEqB,aAAAA,eAAA;AAAA,UAAA,SAAA;AAAA,UAAA;AAA1Bv1D,UAAAA,2EAAU,CAAA;AAAgB,UAAZs1B,aAAY,UAAA,SAAA,IAAA,UAAA,CAAA,IAAA;AAAA,sBAAA,MAAAigC,YAAA;AAElCA,MAAAA,aAAYC,gBAAgBx1D;AAG5Bu1D,MAAAA,aAAYE,UAAU;AAChB33D,UAAAA,QAAQ,IAAI+rD,MAAM7pD,QAAQlC,KAAlB;AACRA,cAAAA,OAAAA,KAAAA,MAAAA,OAAOw3B,UAAb;AACAigC,MAAAA,aAAYE,UAAU;AAEjBC,YAAAA,uBAAuB;AAC5B,YAAKC,mBAAmB,oBAAI7mC;AACvB8mC,YAAAA,iBAAiB;AAIjB93D,YAAAA,MAAM9I;AAGX,YAAK6gE,oBAAL;AAEA,YAAKC,WAAW,MAAKroD,UAAU,MAAf;AAEZ,UAAA,MAAKqoD,UAAU;AACVh4D,cAAAA,MAAMka,SAAS+9C,uBAAuB,SAACh0D,GAAM;AAAA,yBAAA,MAAA,MAAA;AACzCi0D,gBAAAA,gBAAgBj0D,CAArB;AAAA,QACH,EAFD,KAAA,IAAA,CAAA;AAIKjE,cAAAA,MAAMka,SAASi+C,qBAAqB,SAACl0D,GAAM;AAAA,yBAAA,MAAA,MAAA;AACvCm0D,gBAAAA,cAAcn0D,CAAnB;AAAA,QACH,EAFD,KAAA,IAAA,CAAA;AAAA,MAGH;AAED,UAAI,MAAK0L,UAAU,eAAf,GAAiC;AAC5B3P,cAAAA,MAAMka,SAASm+C,qBAAqB,SAACp0D,GAAM;AAAA,yBAAA,MAAA,MAAA;AACvCq0D,gBAAAA,cAAcr0D,CAAnB;AAAA,QACH,EAFD,KAAA,IAAA,CAAA;AAIKjE,cAAAA,MAAMka,SAASq+C,qBAAqB,SAACt0D,GAAM;AAAA,yBAAA,MAAA,MAAA;AACvCu0D,gBAAAA,cAAcv0D,CAAnB;AAAA,QACH,EAFD,KAAA,IAAA,CAAA;AAIKjE,cAAAA,MAAMka,SAASonC,2BAA2B,SAACr9C,GAAM;AAAA,yBAAA,MAAA,MAAA;AAC7Cw0D,gBAAAA,oBAAoBx0D,CAAzB;AAAA,QACH,EAFD,KAAA,IAAA,CAAA;AAIKs+B,cAAAA,SAAS;AAAA,MACjB;AA/CiC,aAAA;AAAA,IAgDrC;;;MAED,OAAA,SAAA,UAAU78C,MAAM;AACZ,eAAO,KAAKgzE,UAAUhzE,IAAf;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,YAAYi9B,GAAG;AAAA,YAAA,SAAA;AACN+1C,aAAAA,YAAY;AAEjB,YAAIjC,MAAM,SAAAA,KAAC/wE,MAAM+8D,KAAQ;AAAA,yBAAA,MAAA,MAAA;AACrB,cAAI7/D,QAAQ+/B,EAAEj9B,IAAD;AAET9C,cAAAA,UAAUgX,QAAW;AACrB,iBAAK8+D,UAAUhzE,IAAf,IAAuB+8D;AAAAA,UAC1B,OAAM;AACH,iBAAKiW,UAAUhzE,IAAf,IAAuB9C;AAAAA,UAC1B;AAAA,QACJ,EARD,KAAA,IAAA;AAUA6zE,YAAI,SAAS,KAAV;AACHA,YAAI,QAAQ;AAAA,UACR,IAAI;AAAA,UACJ,IAAI;AAAA,UACJ,IAAI;AAAA,UACJ,IAAI;AAAA,UACJ,IAAI;AAAA,UACJ,GAAG;AAAA,UACC,IAAA;AAAA,QAPI,CAAT;AASHA,YAAI,iBAAiB,KAAlB;AAAA,MACN;AAAA;;aAED,SAAc,cAAA;AACV,aAAKz2D,MAAM24D,eAAe,IAA1B;AAEA,aAAKlD,YAAYgC,aAAYC,aAA7B;AACOD,eAAAA,aAAYC;AAEnB,aAAA,gBAAAD,aAAA,SAAA,GAAA,eAAA,IAAA,EAAA,KAAA,IAAA;AAAA,MACH;AAAA;;aAED,SAAS,SAAA;AACL,aAAA,gBAAAA,aAAA,SAAA,GAAA,UAAA,IAAA,EAAA,KAAA,IAAA;AACA,aAAKmB,cAAL;AAAA,MACH;AAAA;;aAED,SAAkB,kBAAA;AACd,aAAKA,cAAL;AAAA,MACH;AAAA;;aAED,SAAgB,gBAAA;AACZ,YAAMC,gBAAgB,KAAKC;AAE3B,YAAI,CAACrB,aAAYE,WAAWkB,eAAe;AACvC,eAAKd,oBAAL;AAAA,QACH;AAAA,MACJ;AAAA;;aAED,SAAmB,mBAAA;AACf,YAAMgB,gBAAgB,EAAE,KAAKnB;AACxBoB,aAAAA,kBAAkBD;AAEvB,YAAME,eAAe,KAAKC;AACpBC,YAAAA,sBAAsBF,aAAaA,aAAap4E,SAAS,CAAvB;AACxC,YAAMu4E,uBAAuB,KAAKp4B,aAAa,KAAKA,WAAW,KAAKA,WAAWngD,SAAS,CAAzC,IAA8C+Y;AAEzF,YAAA,CAACw/D,sBAAsB;AAElBp4B,eAAAA,aAAa;AAClB,mBAASlgD,IAAI,GAAGF,IAAIq4E,aAAap4E,QAAQC,IAAIF,GAAGE,KAAK;AACjD,iBAAKkgD,WAAWv8C,KAAKw0E,aAAan4E,CAAD,CAAjC;AACKkgD,iBAAAA,WAAWlgD,CAAhB,EAAmBu4E,OAAOF,qBAAqBv/D,MAA/C;AACA,gBAAM0/D,kBAAmB,KAAKN,oBAAoBD;AAClD,gBAAIO,iBAAiB;AACjB,qBAAO;AAAA,YACV;AAAA,UACJ;AACD,iBAAO;AAAA,QACV,OAAM;AACH,cAAIhmD,IAAI9zB,KAAKK,IAAI,KAAKmhD,WAAWngD,QAAQo4E,aAAap4E,MAA9C;AACR,cAAI4C;AACCA,eAAAA,QAAQ,GAAGA,QAAQ6vB,GAAG7vB,SAAS;AAC5B,gBAAA,KAAKu9C,WAAWv9C,KAAhB,MAA2Bw1E,aAAax1E,KAAD,GAAS;AAChD;AAAA,YACH;AAAA,UACJ;AAED,cAAI,KAAKu9C,WAAWngD,WAAWo4E,aAAap4E,UAAU4C,UAAUw1E,aAAap4E,QAAQ;AAEjF,gBAAI,KAAK8uB,UAAU,OAAf,GAAyB;AACzBptB,sBAAQwrE,IAAI,gCAAgCoL,oBAAoBxmC,kBAAhE,CAAA;AAAA,YACH;AAGD,qBAAS7xC,KAAI,KAAKkgD,WAAWngD,SAAS,GAAGC,MAAK2C,OAAO3C,MAAK;AACtD,kBAAMy4E,mBAAmB,KAAKv4B,WAAW1f,IAAhB;AACzBi4C,+BAAiBC,SAASL,qBAAqBC,oBAA/C;AACA,kBAAME,mBAAmB,KAAKN,oBAAoBD;AAClD,kBAAIO,kBAAiB;AACjB,uBAAO;AAAA,cACV;AAAA,YACJ;AAGD,qBAASx4E,MAAI2C,OAAO7C,KAAIq4E,aAAap4E,QAAQC,MAAIF,IAAGE,OAAK;AACrD,mBAAKkgD,WAAWv8C,KAAKw0E,aAAan4E,GAAD,CAAjC;AACKkgD,mBAAAA,WAAWlgD,GAAhB,EAAmBu4E,OAAOF,qBAAqBC,oBAA/C;AACA,kBAAME,oBAAmB,KAAKN,oBAAoBD;AAClD,kBAAIO,mBAAiB;AACjB,uBAAO;AAAA,cACV;AAAA,YACJ;AAGI,qBAAIx4E,MAAI,GAAGA,MAAI2C,OAAO3C,OAAK;AACvBkgD,mBAAAA,WAAWlgD,GAAhB,EAAmB24E,aAAaN,qBAAqBC,oBAArD;AAAA,YACH;AAAA,UACJ;AAAA,QACJ;AAED,eAAO;AAAA,MACV;AAAA;;aAED,SAAsB,sBAAA;AACZM,YAAAA,mBAAmB,KAAK14B,WAAW,KAAKA,WAAWngD,SAAS,CAAzC;AAInB84E,YAAAA,gBAAgB,CAAA;AACtB,YAAMC,0BAA0B96B,UAAUx6B,UAAUu1D;AACpD,iBAAS/4E,IAAI,GAAGF,IAAI,KAAKogD,WAAWngD,QAAQC,IAAIF,GAAGE,KAAK;AAChD,cAAA,KAAKkgD,WAAWlgD,CAAhB,EAAmB+4E,sBAAsBD,yBAAyB;AAClE,iBAAK54B,WAAWlgD,CAAhB,EAAmB+4E,kBAAkBF,aAArC;AAAA,UACH;AAAA,QACJ;AAED,YAAMG,6BAA6Bh7B,UAAUx6B,UAAUy1D;AACvD,iBAASj5E,MAAI,GAAGF,MAAI,KAAKogD,WAAWngD,QAAQC,MAAIF,KAAGE,OAAK;AAChD,cAAA,KAAKkgD,WAAWlgD,GAAhB,EAAmBi5E,yBAAyBD,4BAA4B;AACnE94B,iBAAAA,WAAWlgD,GAAhB,EAAmBi5E,qBAAqBJ,eAAe,KAAKK,qBAAqBN,gBAAjF;AAAA,UACH;AAAA,QACJ;AAEIM,aAAAA,sBAAsBL;AAAAA,MAC9B;AAAA;;aAED,SAAqBh0E,qBAAAA,UAAUs0E,cAAcC,SAASC,aAAa;AAAA,MAElE;AAAA;;aAED,SAAiB,iBAAA;AACb,YAAMnoC,OAAO,CAAC,IAAD;AACTvd,YAAAA,UAAU;AACX,WAAA;AACC,cAAM2lD,YAAY3lD,QAAQ4lD;AAC1B,cAAI,CAACD,aAAcA,cAAc3lD,SAAU;AAEvC;AAAA,UACH;AAGD,cAAIpB,MAAM+mD,UAAUn5B;AAChB5tB,cAAAA,QAAQoB,SAAS;AACjBud,iBAAKvtC,KAAK21E,SAAV;AAAA,UACH,OAAM;AAEH,gBAAME,WAAW,CAACF,SAAD;AACd,eAAA;AACK,kBAAA,CAAC/mD,KAAK;AACNoB,wBAAQiY,YAAY,oFAAoF0tC,UAAUznC,kBAAV,IAAgC,GAAxI;AAAA,cACH;AACD2nC,uBAAS71E,KAAK4uB,GAAd;AACAA,oBAAMA,IAAI4tB;AAAAA,YACb,SAAQ5tB,QAAQoB;AAGjB,qBAAS3zB,IAAI,GAAGF,IAAI05E,SAASz5E,QAAQC,IAAIF,GAAGE,KAAK;AAC7CkxC,mBAAKvtC,KAAK61E,SAAS15E,IAAIE,IAAI,CAAT,CAAlB;AAAA,YACH;AAAA,UACJ;AAED2zB,oBAAU2lD;AAAAA,QA5Bd,SA6BS;AAET,eAAOpoC;AAAAA,MACV;AAAA;;WAED,SAAgB,MAAA;AACZ,eAAO,KAAKgP;AAAAA,MACf;AAAA;;MAKD,OAAA,SAAA,kBAAkBu5B,QAAiB;AACzBvoC,YAAAA,OAAO,KAAKwoC;AAClB,YAAM55E,IAAIoxC,KAAKnxC;AAFgB,iBAAA,OAAA,UAAA,QAAN+kC,OAAM,IAAA,MAAA,OAAA,IAAA,OAAA,IAAA,CAAA,GAAA,OAAA,GAAA,OAAA,MAAA,QAAA;AAANA,eAAM,OAAA,CAAA,IAAA,UAAA,IAAA;AAAA,QAAA;AAK1B,iBAAI9kC,IAAI,GAAGA,IAAIF,GAAGE,KAAK;AAClBg3C,cAAAA,QAAQ9F,KAAKlxC,CAAD,EAAI25E,8BAA8BF,MAAtC;AACVziC,cAAAA,UAAUl+B,QAAW;AAAA,gBAAA;AACf8gE,gBAAAA,eAAc,UAAA1oC,KAAKlxC,CAAD,GAAIg3C,KAAR,EAAkBlS,MAAAA,SAAAA,IAAlB;AAChB80C,gBAAAA,gBAAgB,OAAO;AACvB,qBAAO;AAAA,YACV;AAAA,UACJ;AAAA,QACJ;AAED,eAAO;AAAA,MACV;AAAA;;MAKD,OAAA,SAAA,mBAAmBH,QAAiB;AAC1BvoC,YAAAA,OAAO,KAAKwoC;AAClB,YAAM55E,IAAIoxC,KAAKnxC;AAFiB,iBAAA,QAAA,UAAA,QAAN+kC,OAAM,IAAA,MAAA,QAAA,IAAA,QAAA,IAAA,CAAA,GAAA,QAAA,GAAA,QAAA,OAAA,SAAA;AAANA,eAAM,QAAA,CAAA,IAAA,UAAA,KAAA;AAAA,QAAA;AAKhC,iBAAS9kC,IAAIF,IAAI,GAAGE,KAAK,GAAGA,KAAK;AACvBg3C,cAAAA,QAAQ9F,KAAKlxC,CAAD,EAAI25E,8BAA8BF,MAAtC;AACVziC,cAAAA,UAAUl+B,QAAW;AAAA,gBAAA;AACf8gE,gBAAAA,eAAc,WAAA1oC,KAAKlxC,CAAD,GAAIg3C,KAAR,EAAkBlS,MAAAA,UAAAA,IAAlB;AAChB80C,gBAAAA,gBAAgB,OAAO;AACvB,qBAAO;AAAA,YACV;AAAA,UACJ;AAAA,QACJ;AAED,eAAO;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,gBAAgBz2D,GAAG;AACThhB,YAAAA,MAAMghB;AACNyzB,YAAAA,MAAM,KAAKsgC,SAAS/zD,EAAE02D,OAAhB;AACN3oC,YAAAA,OAAO,KAAKwoC;AAElB,YAAIt3E;AACJ,YAAIw0C,KAAK;AACLx0C,iBAAOJ,MAAMC,QAAQ20C,GAAd,IAAqBA,MAAM,CAACA,GAAD;AAAA,QACrC;AAED,YAAIx0C,MAAM;AACN,mBAASpC,IAAI,GAAGF,IAAIsC,KAAKrC,QAAQC,IAAIF,GAAGE,KAAK;AACnC85E,gBAAAA,WAAW,KAAK/C,iBAAiB/2D,IAAI5d,KAAKpC,CAAD,CAA9B;AAEjB,gBAAIkxC,KAAKA,KAAKnxC,SAAS,CAAf,EAAkBg6E,aAAaD,UAAU;AAC7C;AAAA,YACH;AAED,gBAAI,CAAC,KAAK56D,MAAM0/B,YAAYo7B,kBAAkB,CAAA,WAAA,OAAY53E,KAAKpC,CAAD,CAAhB,GAAuB,aAAvB,GAAuCmC,GAAhF,GAAsF;AACvF,mBAAK+c,MAAM0/B,YAAYq7B,mBAAmB,CAAA,UAAA,OAAW73E,KAAKpC,CAAD,CAAf,GAAsB,YAAtB,GAAqCmC,GAA/E;AAAA,YACH;AAAA,UACJ;AAAA,QACJ,OAAM;AACH,cAAI,CAAC,KAAK+c,MAAM0/B,YAAYo7B,kBAAkB,CAAC,aAAD,GAAiB73E,GAA1D,GAAgE;AAC5D+c,iBAAAA,MAAM0/B,YAAYq7B,mBAAmB,CAAC,YAAD,GAAgB93E,GAA1D;AAAA,UACH;AAAA,QACJ;AAED,aAAK08C,gBAAL;AAEMq7B,YAAAA,WAAWhpC,KAAKA,KAAKnxC,SAAS,CAAf;AAErB,YAAIqC,QAAQ83E,SAASH,WAAW;AAC5B,mBAAS/5E,MAAI,GAAGF,MAAIsC,KAAKrC,QAAQC,MAAIF,KAAGE,OAAK;AACzC,iBAAKm6E,qBAAqB/3E,KAAKpC,GAAD,GAAKk6E,QAAnC;AAAA,UACH;AAAA,QACJ;AAAA,MACJ;AAAA;;MAUD,OAAA,SAAA,cAAc/2D,GAAG;AACPhhB,YAAAA,MAAMghB;AACNyzB,YAAAA,MAAM,KAAKsgC,SAAS/zD,EAAE02D,OAAhB;AAEZ,YAAIz3E;AACJ,YAAIw0C,KAAK;AACLx0C,iBAAOJ,MAAMC,QAAQ20C,GAAd,IAAqBA,MAAM,CAACA,GAAD;AAAA,QACrC;AAED,YAAIx0C,MAAM;AACN,mBAASpC,IAAI,GAAGF,IAAIsC,KAAKrC,QAAQC,IAAIF,GAAGE,KAAK;AACzC,gBAAI,CAAC,KAAKkf,MAAM0/B,YAAYo7B,kBAAkB,CAAA,WAAA,OAAY53E,KAAKpC,CAAD,GAAc,SAAA,GAAA,oBAA9B,GAAqDmC,GAA9F,GAAoG;AACrG,mBAAK+c,MAAM0/B,YAAYq7B,mBAAmB,CAAA,UAAA,OAAW73E,KAAKpC,CAAD,GAAf,SAAA,GAA6B,mBAA7B,GAAmDmC,GAA7F;AAAA,YACH;AAAA,UACJ;AAAA,QACJ,OAAM;AACH,cAAI,CAAC,KAAK+c,MAAM0/B,YAAYo7B,kBAAkB,CAAC,oBAAD,GAAwB73E,GAAjE,GAAuE;AACnE+c,iBAAAA,MAAM0/B,YAAYq7B,mBAAmB,CAAC,mBAAD,GAAuB93E,GAAjE;AAAA,UACH;AAAA,QACJ;AAED,aAAK08C,gBAAL;AAEA,YAAIz8C,MAAM;AACN,mBAASpC,MAAI,GAAGF,MAAIsC,KAAKrC,QAAQC,MAAIF,KAAGE,OAAK;AACrC,gBAAA,KAAK+2E,iBAAiB/2D,IAAI5d,KAAKpC,GAAD,CAA9B,GAAoC;AAEpCo6E,2BAAa,KAAKrD,iBAAiBhtC,IAAI3nC,KAAKpC,GAAD,CAA9B,CAAD;AAEZ,mBAAK+2E,iBAAiB72D,OAAO9d,KAAKpC,GAAD,CAAjC;AAAA,YACH;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA;;aAwBD,SAAqB42C,qBAAAA,KAAKp2B,SAAS;AAAA,YAAA,SAAA;AAC/B,YAAM23C,SAAS33C,QAAQu5D;AACvB,YAAMM,SAASzjC,IAAIP;AAEnB,YAAI8hB,OAAOkiB,MAAD,GAAU;AAChB,cAAMC,UAAUniB,OAAOkiB,MAAD;AACtB,cAAI,CAACx4E,QAAMkgD,SAASu4B,OAAf,GAAyB;AAC1B95D,oBAAQorB,YAAY,6CAApB;AAAA,UACH,OAAM;AACEmrC,iBAAAA,iBAAiB9/D,IAAI2/B,KAAK2jC,WAAW,WAAM;AAAA,6BAAA,MAAA,MAAA;AAC5C,kBAAI,CAAC,KAAKr7D,MAAM0/B,YAAYo7B,kBAAkB,CAAYpjC,WAAAA,OAAAA,cAAW,aAAvB,GAAuC,CAAhF,CAAA,GAAqF;AACtF,qBAAK13B,MAAM0/B,YAAYq7B,mBAAmB,CAAWrjC,UAAAA,OAAAA,KAAW,MAAA,GAAA,YAAtB,GAAqC,CAA/E,CAAA;AAAA,cACH;AAED,mBAAKmgC,iBAAiB72D,OAAO02B,GAA7B;AAAA,YALqC,EAMtC0jC,KAAAA,IAAAA,GAAAA,WAAW,GAN2B,CAAzC;AAAA,UAOH;AAAA,QACJ;AACD;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,oBAAoBn3D,GAAG;AACbhhB,YAAAA,MAAMghB;AACZ,YAAQq3D,UAAqBr4E,IAArBq4E,SAASC,UAAYt4E,IAAZs4E;AAEjB,YAAID,WAAW,KAAKt7D,MAAM/W,KAAKsyE,WAAW,KAAKv7D,MAAM9W,GAAG;AAChD,cAAA,CAAC,KAAKsyE,8BAA8B,kBAAkBv4E,GAArD,GAA2D;AAC5D,iBAAKw4E,+BAA+B,iBAAiBx4E,GAArD;AAAA,UACH;AAAA,QACJ;AAAA,MACJ;AAAA;;aAED,SAA8B60C,8BAAAA,OAAO70C,KAAK;AACtC,YAAIoZ,WAAW,KAAK2D,MAAM0/B,YAAYrjC;AAClCq/D,YAAAA,WAAW,KAAKC,cAAc,CAAnB,GAAuBt/D,QAAvB,EAAiC29B;AAChD,YAAIp5C,IAAI86E,SAAS76E;AAEVD,eAAAA,KAAK;AACR,cAAM2b,QAAQm/D,SAAS96E,CAAD;AACtB,cAAI2b,SAASA,MAAMu7B,KAAD,GAAS;AACvBv7B,kBAAMq/D,eAAe34E,GAArB;AACA,mBAAO;AAAA,UACV;AAAA,QACJ;AACD,eAAO;AAAA,MACV;AAAA;;aAED,SAA+B60C,+BAAAA,OAAO70C,KAAK;AACvC,YAAQq4E,UAAqBr4E,IAArBq4E,SAASC,UAAYt4E,IAAZs4E;AACX5yE,YAAAA,SAAS,KAAKkzE,gBAAgBP,SAASC,OAA9B;AACXh/D,YAAAA,QAAQ5T;AAGL4T,eAAAA,UAAU,MAAM;AACnB,cAAIA,SAASA,MAAMu7B,KAAD,GAAS;AACvBv7B,kBAAMu/D,cAAc74E,GAApB;AACA,mBAAO;AAAA,UACV;AACDsZ,kBAAQA,MAAM3T;AAAAA,QACjB;AACD,eAAO;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,cAAcqb,GAAG;AACPhhB,YAAAA,MAAMghB;AACZ,YAAQq3D,UAAqBr4E,IAArBq4E,SAASC,UAAYt4E,IAAZs4E;AAEjB,YAAID,WAAW,KAAKt7D,MAAM/W,KAAKsyE,WAAW,KAAKv7D,MAAM9W,GAAG;AACpD,eAAK8W,MAAM0/B,YAAYq8B,yBAAyB94E,GAAhD;AAAA,QACH;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,yBAAyBA,KAAK;AAC1B,YAAQq4E,UAAqBr4E,IAArBq4E,SAASC,UAAYt4E,IAAZs4E;AACX5yE,YAAAA,SAAS,KAAKkzE,gBAAgBP,SAASC,OAA9B;AACf,YAAM/hD,YAAY,KAAKxZ,MAAMqmB,mBAAX,IAAkC,KAAKrmB,MAAM2P,UAAU,kBAArB;AAChDpT,YAAAA,QAAQ5T;AAGL4T,eAAAA,UAAU,MAAM;AACnB,cAAIA,SAASA,MAAM,cAAD,GAAkB;AAChC,gBAAA,wBAAmBA,MAAMuJ,KAAKQ,eAAtBsF,2BAAAA,IAAIE,2BAAAA;AACZ,gBAAM2lC,KAAK7lC,KAAK4N;AAChB,gBAAMk4B,KAAK5lC,KAAK0N;AAEhB,gBAAMwiD,cAAc;AAAA,cAChBryE,GAAG2xE,UAAU7pB;AAAAA,cACb7nD,GAAG2xE,UAAU7pB;AAAAA,YAFG;AAKdgpB,gBAAAA,cAAcn+D,MAAM0/D,aAAatzE,QAAQqzE,WAA3B;AAChBtB,gBAAAA,gBAAgB,OAAO;AACvB;AAAA,YACH;AAAA,UACJ;AACDn+D,kBAAQA,MAAM3T;AAAAA,QACjB;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,cAAcqb,GAAG;AACPhhB,YAAAA,MAAMghB;AACZ,YAAQq3D,UAAqBr4E,IAArBq4E,SAASC,UAAYt4E,IAAZs4E;AAEjB,YAAID,WAAW,KAAKt7D,MAAM/W,KAAKsyE,WAAW,KAAKv7D,MAAM9W,GAAG;AACpD,eAAK8W,MAAM0/B,YAAYw8B,yBAAyBj5E,GAAhD;AAAA,QACH;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,yBAAyBA,KAAK;AAAA,YAAA,SAAA;AAC1B,YAAQq4E,UAAqBr4E,IAArBq4E,SAASC,UAAYt4E,IAAZs4E;AACX5yE,YAAAA,SAAS,KAAKkzE,gBAAgBP,SAASC,OAA9B;AAGf,YAAI5yE,WAAW,KAAKmvE,gBAAgB;AAAA,WAAA,WAAA;AAAA,gBAAA,SAAA;AAEhC,gBAAIqE,gBAAgB,oBAAIj8D;AACxB,gBAAIk8D,mBAAmB,oBAAIl8D;AAE3B,gBAAIvX,QAAQ;AACRyzE,iCAAmB,IAAIl8D,IAAIvX,OAAO0zE,aAAf,CAAA;AAAA,YACtB;AAEG,gBAAA,OAAKvE,gBAAgB;AACrBqE,8BAAgB,IAAIj8D,IAAI,OAAK43D,eAAeuE,aAA5B,CAAA;AADK,kBAAA,YAAA,2BAEF,mBAAIF,aAAJ,EAAmB36C,OAAO,SAACvd,GAAD;AAAA,+BAAA,MAAA,MAAA;AAAA,uBAAO,CAACm4D,iBAAiBt7D,IAAImD,CAArB;AAAA,cAAR,EAFxB,KAAA,IAAA,CAAA,CAAA,GAAA;AAAA,kBAAA;AAE0D,qBAAA,UAAA,EAAA,GAAA,EAAA,QAAA,UAAA,EAAA,GAAA,QAAA;AAAA,sBAApEq4D,OAAoE,MAAA;AAC3E,sBAAM57E,IAAIo+C,UAAUkE,aAAas5B,IAAvB;AACV,sBAAI57E,EAAE,gBAAD,GAAoB;AACrBA,sBAAE67E,eAAeD,IAAjB;AAAA,kBACH;AACGA,sBAAAA,KAAK1zE,UAAU0zE,KAAK1zE,OAAO25C,QAAQ;AACnC,2BAAKviC,MAAMyyC,YAAYyjB,MAAM3zB,SAAS+5B,KAAK1zE,OAAO25C;AAAAA,kBACrD;AAAA,gBACJ;AAAA,cAVoB,SAAA,KAAA;AAAA,0BAAA,EAAA,GAAA;AAAA,cAAA,UAAA;AAAA,0BAAA,EAAA;AAAA,cAAA;AAAA,YAWxB;AAED,mBAAKu1B,iBAAiBnvE;AAEhB6zE,gBAAAA,aAAa,mBAAIJ,gBAAJ,EAAsB56C,OAAO,SAACvd,GAAD;AAAA,6BAAA,MAAA,MAAA;AAAA,qBAAO,CAACk4D,cAAcr7D,IAAImD,CAAlB;AAAA,YAAR,EAAhD,KAAA,IAAA,CAAA;AAxBgC,gBAAA,aAAA,2BAyBbu4D,UAzBa,GAAA;AAAA,gBAAA;AAyBD,mBAAA,WAAA,EAAA,GAAA,EAAA,SAAA,WAAA,EAAA,GAAA,QAAA;AAAA,oBAApBF,QAAoB,OAAA;AAC3B,oBAAM57E,MAAIo+C,UAAUkE,aAAas5B,KAAvB;AACV,oBAAI57E,IAAE,cAAD,GAAkB;AACnBA,sBAAE+7E,aAAaH,KAAf;AAAA,gBACH;AAAA,cACJ;AAAA,YA9B+B,SAAA,KAAA;AAAA,yBAAA,EAAA,GAAA;AAAA,YAAA,UAAA;AAAA,yBAAA,EAAA;AAAA,YAAA;AAiChC,gBAAMI,cAAcF,WAAW,CAAD;AAC9B,gBAAIE,eAAeA,YAAYn6B,QAAQ;AACnC,qBAAKviC,MAAMyyC,UAAX,EAAuByjB,MAAM3zB,SAASm6B,YAAYn6B;AAAAA,YACrD;AAID,gBAAIi6B,WAAW37E,WAAW,KAAK8H,QAAQ;AACnC,kBAAMjI,KAAIo+C,UAAUkE,aAAar6C,MAAvB;AACV,kBAAIjI,GAAE,cAAD,GAAkB;AACnBA,mBAAE+7E,aAAa9zE,MAAf;AAAA,cACH;AAAA,YACJ;AAAA,UA7C+B;QA8CnC;AAAA,MACJ;AAAA;;aAED,SAAgB2yE,gBAAAA,SAASC,SAAS;AAAA,YAAA,SAAA;AAC9B,YAAIl/D,WAAW,KAAK2D,MAAM0/B,YAAYrjC;AAClCq/D,YAAAA,WAAW,KAAKC,cAAc,CAAnB,GAAuBt/D,QAAvB;AACXsgE,YAAAA,oBAAoB,KAAKC,sBAAsBlB,UAAUJ,SAASC,OAA9C;AAExBoB,0BAAkBnpD,KAAK,SAACn0B,GAAGD,GAAM;AAAA,yBAAA,MAAA,MAAA;AAE7B,cAAIC,EAAE8uB,SAAS/uB,EAAE+uB,QAAQ;AACrB,mBAAO;AAAA,UADX,WAEW9uB,EAAE8uB,SAAS/uB,EAAE+uB,QAAQ;AAC5B,mBAAO;AAAA,UACV,OAAM;AACI9uB,mBAAAA,EAAE0gB,KAAK3gB,EAAE2gB,KAAK,IAAI;AAAA,UAC5B;AAAA,QACJ,EATD,KAAA,IAAA,CAAA;AAWI48D,YAAAA,kBAAkB97E,QAAQ;AAEnB87E,iBAAAA,kBAAkBjuD,MAAM,EAAxB,EAA4B,CAA5B;AAAA,QACV,OAAM;AACH,iBAAO;AAAA,QACV;AAAA,MACJ;AAAA;;aAED,SAAcmuD,cAAAA,QAAQxgE,UAAU;AAC5B,YAAIzb,IAAIyb,SAASxb;AACVD,eAAAA,KAAK;AACR,cAAM2b,QAAQF,SAASzb,CAAD;AAEtB,cAAI2b,MAAM2vB,YAAY3vB,MAAMg4B,WAAW;AACnC,gBAAIh4B,MAAMg4B,cAAc,MAAM;AAC1BsoC,qBAAOp4E,KAAK8X,KAAZ;AAAA,YACH;AACD,gBAAIA,MAAM85B,eAAe;AACrB,mBAAKslC,cAAckB,QAAQtgE,MAAMF,QAAjC;AAAA,YACH;AAAA,UACJ;AAAA,QACJ;AACD,eAAOwgE;AAAAA,MACV;AAAA;;MAED,OAAA,SAAA,sBAAsBC,kBAAkBC,SAASC,SAAS;AAAA,YAAA,SAAA;AACtD,YAAIp8E,IAAIk8E,iBAAiBj8E;AACnBo8E,YAAAA,aAAa,CAAA;AAFmC,YAAA,QAAA,SAAAnsC,SAAA;AAAA,cAAA,SAAA;AAOlD,cAAMv0B,QAAQugE,iBAAiBl8E,CAAD;AAC9B,cAAM44B,YAAY,OAAKxZ,MAAMqmB,mBAAX,IAAkC,OAAKrmB,MAAM2P,UAAU,kBAArB;AACpD,cAAM/K,MAAMrI,MAAMuJ,KAAKQ;AAEvB,cAAMmrC,KAAK7sC,IAAIgH,KAAK4N;AACpB,cAAMk4B,KAAK9sC,IAAIkH,KAAK0N;AACd0jD,cAAAA,KAAK3gE,MAAM4gE,SAASv4D,IAAIgL,KAAK4J;AAC7B4jD,cAAAA,KAAK7gE,MAAM8gE,SAASz4D,IAAIiL,KAAK2J;AAEnC,cAAIi4B,KAAK,OAAKzxC,MAAM/W,KAAKyoD,KAAK,OAAK1xC,MAAM9W,GAAG;AACxC,mBAAA;AAAA,UACH;AAED,cAAIqT,MAAM3T,OAAOkd,KAAK8B,UAAU;AAC5B,gBAAMm8B,UAAUxnC,MAAM3T,OAAOkd,KAAK8B,SAASwN,IAAI,SAACt1B,GAAD;AAAA,6BAAA,MAAA,MAAA;AAAOA,qBAAAA,IAAI05B;AAAAA,YAAX,EAA/C,KAAA,IAAA,CAAA;AACA,gBAAI,CAAC,OAAK8jD,eAAL,MAAA,QAAoBP,CAAAA,SAASC,OAAzB,EAAqCj5B,OAAAA,mBAAAA,OAArC;AACL,qBAAA;AAAA,UACP;AAED,cAAI,OAAKu5B,eAAeP,SAASC,SAASvrB,IAAIC,IAAIwrB,IAAIE,EAAlD,GAAuD;AACvDH,uBAAWx4E,KAAK8X,KAAhB;AAAA,UACH;AAAA,QA5BiD;AAM/C3b,eAAAA,KAAK;AAAA,cAAA,OAAA;AAiBA,cAAA,SAAA;AAAA;AAAA,QAMX;AACD,eAAOq8E;AAAAA,MACV;AAAA;;aAED,SAAerxD,eAAAA,IAAIE,IAAI2lC,IAAIC,IAAIwrB,IAAIE,IAAI;AACnC,YAAIxxD,MAAM6lC,MACN7lC,MAAM6lC,KAAKyrB,MACXpxD,MAAM4lC,MACN5lC,MAAM4lC,KAAK0rB,IAAI;AACf,iBAAO;AAAA,QACV;AACD,eAAO;AAAA,MACV;AAAA;;aAED,SAAU,UAAA;AACF,YAAA,CAAC,KAAKG,YAAY;AAClB,eAAKC,SAAL;AACKx9D,eAAAA,MAAMmvC;AACNouB,eAAAA,aAAa;AAAA,QACrB;AAAA,MACJ;AAAA;;aAED,SAAW,WAAA;AAEP,aAAKv9D,MAAM24D,eAAe/+D,MAA1B;AACA,aAAKozB,oBAAL;AACA,aAAK9hB,mBAAL;AAEA,YAAI,KAAK2sD,iBAAiB/tE,MAAM;AAAA,cAAA,aAAA,2BACR,KAAK+tE,iBAAiBnmC,OAAtB,CADQ,GAAA;AAAA,cAAA;AACwB,iBAAA,WAAA,EAAA,GAAA,EAAA,SAAA,WAAA,EAAA,GAAA,QAAA;AAAA,kBAAzC+rC,QAAyC,OAAA;AAChDvC,2BAAauC,KAAD;AAAA,YACf;AAAA,UAH2B,SAAA,KAAA;AAAA,uBAAA,EAAA,GAAA;AAAA,UAAA,UAAA;AAAA,uBAAA,EAAA;AAAA,UAAA;AAKvB5F,eAAAA,iBAAiBtvB;QACzB;AAAA,MACJ;AAAA;;aAED,SAAY,YAAA;AACR,eAAO,KAAKvoC,MAAMyyC;MACrB;AAAA;;IAlpBoC3T;MCDpB4+B;;;AAEjB,aAAAA,qBAAY19D,OAAO;AAAA,UAAA;AAAA,sBAAA,MAAA09D,oBAAA;AACf,cAAA,OAAA,KAAA,MAAM19D,KAAN;AACK29D,YAAAA,WAAW/jE;AACXgkE,YAAAA,YAAYhkE;AAHF,aAAA;AAAA,IAIlB;;;WAED,SAA6C7B,KAAA,MAAA;AAAhC8lE,YAAAA,eAAAA,SAAgC,gBAAA,KAAvBz9D,UAAAA,sCAAWxG,SAAY;AACpC+jE,aAAAA,WAAWE;AACXD,aAAAA,YAAYx9D;AACjB,aAAK9F,SAAL;AAAA,MACH;AAAA;;aAED,SAAc,cAAA;AACH,eAAA,CAAC,CAAC,KAAKqjE;AAAAA,MACjB;AAAA;;aAED,SAAe,eAAA;AACX,eAAO,KAAKC;AAAAA,MACf;AAAA;;aAED,SAAmB,mBAAA;AAAA,YAAA,SAAA;AACT/kE,YAAAA,IAAI,KAAK8kE;AACR,eAAA,SAACx8D,IAAO;AAAA,cAAA,SAAA;AAAA,yBAAA,MAAA,MAAA;AACX,iBAAOtI,EAAE,SAACoJ,KAAKoY,QAAW;AAAA,2BAAA,MAAA,MAAA;AACtB,gBAAIpY,KAAK;AACEd,qBAAAA,GAAGc,GAAD;AAAA,YACZ;AACDd,eAAG,MAAM,KAAKnB,MAAMka,SAASuM,kCAAkCpM,MAAtD,CAAP;AAAA,UAJE,EAAA,KAAA,IAAA,GAKL,KAAKra,KALA;AAAA,QAMX,EAPD,KAAA,IAAA;AAAA,MAQH;AAAA;;IAhC4CsW;MCE5BwnD;;;;;;aAEjB,SAAwBC,iBAAAA,eAAe39D,UAAU;AACtC,eAAA;AAAA,UAAC7c,MAAMm6E;AAAAA,UAAqBM,SAAS;AAAA,YAACH,SAASE;AAAAA,YAAe39D;AAAAA,UAAzB;AAAA,QAArC;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,aAAoBnX,GAAGC,GAAG+0E,QAAQC,aAAaC,aAAajrB,MAAMkrB,WAAW;AAAA,YAAA,QAAA;AACzE,YAAI,CAACt7E,MAAMC,QAAQk7E,MAAd,GAAsB;AAEvBA,mBAAS,CAACA,QAAQA,QAAQA,QAAQA,MAAzB;AAAA,QACZ;AAED,YAAIJ,UAAU,SAAAA,SAAC18D,IAAInB,OAAU;AAAA,yBAAA,MAAA,KAAA;AACrBrd,cAAAA,QAAM0C,SAAS;AACf2a,kBAAMka,SAASmkD,gBAAgBl9D,IAAInB,OAAO/W,GAAGC,GAAG+0E,QAAQC,aAAaC,aAAajrB,MAAMkrB,SAAxF;AAAA,UACH,OAAM;AACHj9D,eAAG,MAAM,KAAKk9D,gBAAgBr+D,OAAO/W,GAAGC,GAAG+0E,QAAQC,aAAaC,aAAajrB,MAAMkrB,SAA1E,CAAP;AAAA,UACL;AAAA,QACJ,EAND,KAAA,IAAA;AAOIr+D,YAAAA,KAAK,SAAS,CAAC9W,GAAGC,GAAGg1E,aAAaC,aAAajrB,OAAO,IAAI,GAAGkrB,SAA/C,EAA0Dx9C,OAAOq9C,MAAjE,EAAyEhlE,KAAK,GAA9E;AAClB,eAAO6kE,OAAMQ,iBAAiBT,SAAS99D,EAAhC;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,gBAAuBC,OAAO/W,GAAGC,GAAG+0E,QAAQC,aAAaC,aAAajrB,MAAMkrB,WAAW;AACnF,YAAIlrB,SAASt5C;AAAWs5C,iBAAO;AAC/B,YAAIgrB,gBAAgBtkE;AAAWskE,wBAAc;AAE7C,YAAI7jD,SAASra,MAAMka,SAAS6L,iBAAf;AACb,YAAInhB,MAAMyV,OAAOI,WAAW,IAAlB;AACV7V,YAAI25D,wBAAwB;AAE5BlkD,eAAOxX,QAAQ5Z,IAAIi1E,cAAc;AACjC7jD,eAAOvX,SAAS5Z,IAAIg1E,cAAc;AAElCt5D,YAAImuC,UAAJ;AACA,YAAIppD,IAAI,MAAMu0E,cAAc,GAAGt0E,IAAI,MAAMs0E,cAAc;AAEvDt5D,YAAI45D,OAAO70E,IAAIs0E,OAAO,CAAD,GAAKr0E,CAA1B;AACAgb,YAAI65D,OAAO90E,IAAIV,IAAIg1E,OAAO,CAAD,GAAKr0E,CAA9B;AACAgb,YAAI85D,MAAM/0E,IAAIV,GAAGW,GAAGD,IAAIV,GAAGW,IAAIq0E,OAAO,CAAD,GAAKA,OAAO,CAAD,CAAhD;AACAr5D,YAAI65D,OAAO90E,IAAIV,GAAGW,IAAIV,IAAI+0E,OAAO,CAAD,CAAhC;AACAr5D,YAAI85D,MAAM/0E,IAAIV,GAAGW,IAAIV,GAAGS,IAAIV,IAAIg1E,OAAO,CAAD,GAAKr0E,IAAIV,GAAG+0E,OAAO,CAAD,CAAxD;AACAr5D,YAAI65D,OAAO90E,IAAIs0E,OAAO,CAAD,GAAKr0E,IAAIV,CAA9B;AACA0b,YAAI85D,MAAM/0E,GAAGC,IAAIV,GAAGS,GAAGC,IAAIV,IAAI+0E,OAAO,CAAD,GAAKA,OAAO,CAAD,CAAhD;AACAr5D,YAAI65D,OAAO90E,GAAGC,IAAIq0E,OAAO,CAAD,CAAxB;AACAr5D,YAAI85D,MAAM/0E,GAAGC,GAAGD,IAAIs0E,OAAO,CAAD,GAAKr0E,GAAGq0E,OAAO,CAAD,CAAxC;AACAr5D,YAAIquC,UAAJ;AAEA,YAAIC,MAAM;AACN,cAAIvwD,QAAMkgD,SAASu7B,SAAf,GAA2B;AAC3Bx5D,gBAAIia,YAAY//B,WAAWggC,cAAcs/C,SAAzB;AAAA,UACnB,OAAM;AACHx5D,gBAAIia,YAAY;AAAA,UACnB;AACDja,cAAIsuC,KAAJ;AAAA,QACH;AAED,YAAIgrB,aAAa;AACb,cAAIv7E,QAAMkgD,SAASs7B,WAAf,GAA6B;AAC7Bv5D,gBAAI+5D,cAAc7/E,WAAWggC,cAAcq/C,WAAzB;AAAA,UACrB,OAAM;AACHv5D,gBAAI+5D,cAAc;AAAA,UACrB;AACD/5D,cAAI6Y,YAAYygD;AAChBt5D,cAAIg6D,OAAJ;AAAA,QACH;AAED,eAAOvkD;AAAAA,MACV;AAAA;;aAED,SAAqBpxB,cAAAA,GAAGC,GAA4C;AAAA,YAAA,SAAA;AAAzC+0E,YAAAA,0EAAS;AAAGY,YAAAA,wEAAO;AAAsB,YAAnBC,SAAmB,UAAA,SAAA,KAAA,UAAA,CAAA,MAAA,SAAA,UAAA,CAAA,IAAVD,OAAO;AAC7D,YAAI,CAAC/7E,MAAMC,QAAQk7E,MAAd,GAAsB;AAEvBA,mBAAS,CAACA,QAAQA,QAAQA,QAAQA,MAAzB;AAAA,QACZ;AAED,YAAIJ,UAAU,SAAAA,SAAC18D,IAAInB,OAAU;AAAA,yBAAA,MAAA,MAAA;AACrBrd,cAAAA,QAAM0C,SAAS;AACf2a,kBAAMka,SAAS6kD,iBAAiB59D,IAAInB,OAAO/W,GAAGC,GAAG+0E,QAAQY,MAAMC,MAA/D;AAAA,UACH,OAAM;AACH39D,eAAG,MAAM,KAAK49D,iBAAiB/+D,OAAO/W,GAAGC,GAAG+0E,QAAQY,MAAMC,MAAjD,CAAP;AAAA,UACL;AAAA,QACJ,EAND,KAAA,IAAA;AAOA,YAAI/+D,KAAK,WAAW,CAAC9W,GAAGC,GAAG21E,MAAMC,MAAb,EAAqBl+C,OAAOq9C,MAA5B,EAAoChlE,KAAK,GAAzC;AACpB,eAAO6kE,OAAMQ,iBAAiBT,SAAS99D,EAAhC;AAAA,MACV;AAAA;;aAED,SAAwBC,iBAAAA,OAAO/W,GAAGC,GAAG+0E,QAAQY,MAAMC,QAAQ;AACvD,YAAIzkD,SAASra,MAAMka,SAAS6L,iBAAf;AACb,YAAInhB,MAAMyV,OAAOI,WAAW,IAAlB;AACV7V,YAAI25D,wBAAwB;AAE5BlkD,eAAOxX,QAAQ5Z,IAAI61E,SAAS;AAC5BzkD,eAAOvX,SAAS5Z,IAAI41E,SAAS;AAG7Bl6D,YAAIiZ,cAAc;AAClBjZ,YAAIkZ,SAAS,GAAG,GAAG,MAAM,IAAzB;AACAlZ,YAAIiZ,cAAc;AAElBjZ,YAAIsa,cAAcpgC,WAAWggC,cAAc,UAAzB;AAClBla,YAAIia,YAAY//B,WAAWggC,cAAc,UAAzB;AAChBla,YAAIya,aAAaw/C;AACjBj6D,YAAIua,gBAAiBl2B,IAAI,KAAM61E;AAC/Bl6D,YAAIwa,gBAAgB0/C;AAEpBl6D,YAAImuC,UAAJ;AACA,YAAMppD,IAAI,EAAEV,IAAI;AACVW,YAAAA,IAAI;AAEVgb,YAAI45D,OAAO70E,IAAIs0E,OAAO,CAAD,GAAKr0E,CAA1B;AACAgb,YAAI65D,OAAO90E,IAAIV,IAAIg1E,OAAO,CAAD,GAAKr0E,CAA9B;AACAgb,YAAI85D,MAAM/0E,IAAIV,GAAGW,GAAGD,IAAIV,GAAGW,IAAIq0E,OAAO,CAAD,GAAKA,OAAO,CAAD,CAAhD;AACAr5D,YAAI65D,OAAO90E,IAAIV,GAAGW,IAAIV,IAAI+0E,OAAO,CAAD,CAAhC;AACAr5D,YAAI85D,MAAM/0E,IAAIV,GAAGW,IAAIV,GAAGS,IAAIV,IAAIg1E,OAAO,CAAD,GAAKr0E,IAAIV,GAAG+0E,OAAO,CAAD,CAAxD;AACAr5D,YAAI65D,OAAO90E,IAAIs0E,OAAO,CAAD,GAAKr0E,IAAIV,CAA9B;AACA0b,YAAI85D,MAAM/0E,GAAGC,IAAIV,GAAGS,GAAGC,IAAIV,IAAI+0E,OAAO,CAAD,GAAKA,OAAO,CAAD,CAAhD;AACAr5D,YAAI65D,OAAO90E,GAAGC,IAAIq0E,OAAO,CAAD,CAAxB;AACAr5D,YAAI85D,MAAM/0E,GAAGC,GAAGD,IAAIs0E,OAAO,CAAD,GAAKr0E,GAAGq0E,OAAO,CAAD,CAAxC;AACAr5D,YAAIquC,UAAJ;AACAruC,YAAIsuC,KAAJ;AAEA,eAAO74B;AAAAA,MACV;AAAA;;MAED,OAAA,SAAA,cAAqB2kD,KAAK/1E,GAAGC,GAAG;AAAA,YAAA,SAAA;AAC5B,YAAI20E,UAAU,SAAAA,SAAC18D,IAAInB,OAAU;AAAA,yBAAA,MAAA,MAAA;AACrBrd,cAAAA,QAAM0C,SAAS;AACf2a,kBAAMka,SAAS+kD,UAAU99D,IAAInB,OAAOg/D,KAAK/1E,GAAGC,CAA5C;AAAA,UACH,OAAM;AACE+1E,iBAAAA,UAAU99D,IAAInB,OAAOg/D,KAAK/1E,GAAGC,CAAlC;AAAA,UACH;AAAA,QACJ,EAND,KAAA,IAAA;AAOA,YAAI6W,KAAK,QAAQ,CAAC9W,GAAGC,GAAG81E,GAAP,EAAY/lE,KAAK,GAAjB;AACjB,eAAO6kE,OAAMQ,iBAAiBT,SAAS99D,EAAhC;AAAA,MACV;AAAA;;aAED,SAAiBoB,UAAAA,IAAInB,OAAOg/D,KAAK/1E,GAAGC,GAAG;AAAA,YAAA,SAAA;AACnC,YAAImxB,SAASra,MAAMka,SAAS6L,iBAAf;AACb,YAAInhB,MAAMyV,OAAOI,WAAW,IAAlB;AACV7V,YAAI25D,wBAAwB;AAE5B,YAAIW,MAAM,IAAI/e;AACd+e,YAAIpkB,SAAS,WAAM;AAAA,yBAAA,MAAA,MAAA;AACfzgC,iBAAOxX,QAAQ5Z;AACfoxB,iBAAOvX,SAAS5Z;AAChB0b,cAAIgwC,UAAUsqB,KAAK,GAAG,GAAG7kD,OAAOxX,OAAOwX,OAAOvX,MAA9C;AACA3B,aAAG,MAAMkZ,MAAP;AAAA,QACL,EALD,KAAA,IAAA;AAMA6kD,YAAItkB,UAAU,SAAC34C,KAAQ;AAAA,yBAAA,MAAA,MAAA;AACnBd,aAAGc,GAAD;AAAA,QACL,EAFD,KAAA,IAAA;AAMA,YAAI,CAACtf,QAAM4C,OAAO;AACd25E,cAAI9e,cAAc;AAAA,QACrB;AAED8e,YAAInlD,MAAMilD;AAAAA,MACb;AAAA;;;MClKgBG;;;;;;MAEjB,OAAA,SAAA,KAAYtmE,GAAG;AACJlW,eAAAA,QAAMmB,WAAW+U,CAAjB,KAAuBA,EAAEumE;AAAAA,MACnC;AAAA;;MAED,OAAA,SAAA,GAAUvmE,GAAG;AAETA,UAAEumE,OAAO;AACT,eAAOvmE;AAAAA,MACV;AAAA;;aAED,SAAaxZ,MAAAA,GAAGD,GAAG;AACf,YAAMigF,MAAMl8E,OAAOD,KAAK7D,CAAZ;AACZ,YAAMigF,MAAMn8E,OAAOD,KAAK9D,CAAZ;AAEZ,YAAI,CAACkgF,IAAIz+E,QAAQ;AACb,iBAAOxB;AAAAA,QACV;AAGKkgF,YAAAA,KAAK,CAAA;AACLC,YAAAA,KAAK,CAAA;AACX,iBAAS1+E,IAAI,GAAGF,IAAI0+E,IAAIz+E,QAAQC,IAAIF,GAAGE,KAAK;AACxC,cAAM42C,MAAM4nC,IAAIx+E,CAAD;AACfy+E,aAAG7nC,GAAD,IAAQ;AACV8nC,aAAG9nC,GAAD,IAAQ52C;AAAAA,QACb;AACD,iBAASA,KAAI,GAAGF,KAAIy+E,IAAIx+E,QAAQC,KAAIF,IAAGE,MAAK;AACxC,cAAM42C,OAAM2nC,IAAIv+E,EAAD;AACfy+E,aAAG7nC,IAAD,IAAQ52C;AACV,cAAI0+E,GAAG9nC,IAAD,MAAU99B,QAAW;AACvB4lE,eAAG9nC,IAAD,IAAQ;AAAA,UACb;AAAA,QACJ;AAED,YAAM+nC,OAAOJ,IAAIx+E;AAEX0D,YAAAA,SAAS,CAAA;AACf,iBAASzD,MAAI,GAAGF,MAAI0+E,IAAIz+E,QAAQC,MAAIF,KAAGE,OAAK;AACxC,cAAM42C,QAAM4nC,IAAIx+E,GAAD;AAGf,cAAM4+E,SAASH,GAAG7nC,KAAD;AACbioC,cAAAA,YAAWD;AACf,iBAAM,EAAEC,aAAY,GAAG;AACnB,gBAAMC,OAAOP,IAAIM,SAAD;AAChB,gBAAIH,GAAGI,IAAD,MAAW,IAAI;AAGjB;AAAA,YACH;AAAA,UACJ;AACD,iBAAM,EAAED,YAAWD,QAAQ;AACvB,gBAAME,QAAOP,IAAIM,SAAD;AAChBp7E,mBAAOq7E,KAAD,IAASvgF,EAAEugF,KAAD;AAAA,UACnB;AAED,cAAMC,KAAKzgF,EAAEs4C,KAAD;AACZ,cAAMooC,KAAKzgF,EAAEq4C,KAAD;AACZ,cAAIx4C,IAAJ;AACA,cAAI,KAAK6gF,KAAKF,EAAV,GAAe;AACf3gF,gBAAI2gF,GAAGC,EAAD;AAAA,UACT,OAAM;AACH,gBAAI,CAACn9E,QAAME,gBAAgBi9E,EAAtB,KAA6B,CAACn9E,QAAME,gBAAgBg9E,EAAtB,GAA2B;AAC1D3gF,kBAAI2gF;AAAAA,YACP,OAAM;AACH3gF,kBAAIigF,WAAUa,MAAMF,IAAID,EAApB;AAAA,YACP;AAAA,UACJ;AAGG3gF,cAAAA,MAAM0a,QAAW;AACjBrV,mBAAOmzC,KAAD,IAAQx4C;AAAAA,UACjB;AAAA,QACJ;AAGGygF,YAAAA,WAAWF;AACf,eAAM,EAAEE,YAAY,GAAG;AACnB,cAAMC,SAAOP,IAAIM,QAAD;AAChB,cAAIH,GAAGI,MAAD,MAAW,IAAI;AACjB;AAAA,UACH;AAAA,QACJ;AACD,eAAM,EAAED,WAAWF,MAAM;AACrB,cAAMG,SAAOP,IAAIM,QAAD;AAChBp7E,iBAAOq7E,MAAD,IAASvgF,EAAEugF,MAAD;AAAA,QACnB;AAED,eAAOr7E;AAAAA,MACV;AAAA;;;MCvFgB07E;;;AAEjB,aAAAA,iBAAYt3E,QAAQ;AAAA,UAAA;AAAA,sBAAA,MAAAs3E,gBAAA;AAChB,cAAA,OAAA,KAAA,IAAA;AACK9kE,YAAAA,UAAUxS;AAFC,aAAA;AAAA,IAGnB;;;aAED,SAAMF,MAAAA,MAAMhF,OAAO;AACf,aAAK0X,QAAQ2tB,MAAMrgC,MAAMhF,KAAzB;AAAA,MACH;AAAA;;aAED,SAASgF,SAAAA,MAAMhF,OAAO;AAClB,aAAK0X,QAAQwuB,SAASlmC,KAAtB;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,OAAOwpB,SAASC,OAAOC,OAAO;AAC1B,aAAKhS,QAAQ6uB,YAAY7c,KAAzB;AAAA,MACH;AAAA;;aAED,SAAM1kB,MAAAA,MAAMhF,OAAO;AACf,aAAK0X,QAAQ8tB,MAAMxgC,MAAMhF,KAAzB;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,OAAOgF,MAAM2kB,WAAWC,SAAS;AAC7B,aAAKlS,QAAQ8tB,MAAMxgC,MAAM4kB,OAAzB;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,WAAWgI,QAAQ;AACf,eAAO,KAAKla,QAAQ6tB,WAAW3T,MAAxB;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,OAAOA,QAAQ;AACX,eAAO,KAAKla,QAAQ2uB,OAAOzU,MAApB;AAAA,MACV;AAAA;;IAjCwCuT;MCAxBs3C;;;AAELv3E,aAAAA,mBAAAA,QAAQqJ,MAAM;AAAA,UAAA;AAAA,sBAAA,MAAAkuE,kBAAA;AACtB,cAAA,OAAA,KAAA,MAAMv3E,MAAN;AACKwP,YAAAA,QAAQnG;AAFS,aAAA;AAAA,IAGzB;;;MAED,OAAA,SAAA,KAAKvJ,MAAM;AACP,YAAIksB,UAAU,KAAKxc,MAAM1P,IAAX;AACdA,aAAK03E,WAAWxrD;AAChB,eAAOA;AAAAA,MACV;AAAA;;aAED,SAAMlsB,MAAAA,MAAMhF,OAAO;AACfgF,eAAO,KAAKuJ,KAAKvJ,IAAV;AACKA,aAAAA,gBAAAA,mBAAAA,SAAAA,GAAAA,SAAAA,IAAAA,EAAAA,KAAAA,MAAAA,MAAMhF,KAAlB;AAAA,MACH;AAAA;;aAED,SAASgF,SAAAA,MAAMhF,OAAO;AACHgF,aAAAA,gBAAAA,mBAAAA,SAAAA,GAAAA,YAAAA,IAAAA,EAAAA,KAAAA,MAAAA,MAAMhF,KAArB;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,OAAOwpB,SAASC,OAAOC,OAAO;AAAA,YAAA,SAAA;AAC1BD,cAAM1oB,QAAQ,SAAAnF,GAAC;AAAA,yBAAA,MAAA,MAAA;AAAA,iBAAI,KAAK2S,KAAK3S,CAAV;AAAA,QAAJ,EAAf,KAAA,IAAA,CAAA;AACA8tB,gBAAQA,MAAMiI,IAAI,SAAA/1B,GAAC;AAAA,yBAAA,MAAA,MAAA;AAAIA,iBAAAA,EAAE8gF;AAAAA,QAAN,EAAnB,KAAA,IAAA,CAAA;AACA,aAAA,gBAAAD,mBAAA,SAAA,GAAA,UAAA,IAAA,EAAA,KAAA,MAAajzD,SAASC,OAAOC,KAA7B;AAAA,MACH;AAAA;;aAED,SAAM1kB,MAAAA,MAAMhF,OAAO;AACfgF,eAAO,KAAKuJ,KAAKvJ,IAAV;AACKA,aAAAA,gBAAAA,mBAAAA,SAAAA,GAAAA,SAAAA,IAAAA,EAAAA,KAAAA,MAAAA,MAAMhF,KAAlB;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,OAAOgF,MAAM2kB,WAAWC,SAAS;AAC7B,aAAA,gBAAA6yD,mBAAA,SAAA,GAAA,UAAA,IAAA,EAAA,KAAA,MAAaz3E,MAAM2kB,WAAWC,OAA9B;AAAA,MACH;AAAA;;IAnC0C4yD;MCJ1BG;;;;;;;;;aAEjB,SAAe,eAAA;AACX,eAAO;AAAA,MACV;AAAA;;aAED,SAAmB,mBAAA;AACf,YAAMt6C,KAAK,KAAK9lB,MAAM8lB;AACf,eAAA,SAAS3kB,IAAI;AACVk/D,cAAAA,QAAQ,IAAI5gB,WAAW,MAAM,MAAM,CAA3B;AACd,mBAAS3+D,IAAI,GAAGA,IAAI,MAAM,MAAM,GAAGA,KAAG,GAAG;AAC/BhB,gBAAAA,IAAIN,KAAKC,MAAMD,KAAK8gF,OAAL,IAAgB,GAA3B;AACVD,kBAAMv/E,CAAD,IAAMhB;AACXugF,kBAAMv/E,IAAE,CAAH,IAAQhB;AACbugF,kBAAMv/E,IAAE,CAAH,IAAQhB;AACbugF,kBAAMv/E,IAAE,CAAH,IAAQ;AAAA,UAChB;AACKmlC,cAAAA,YAAY,CAAA;AAElB,cAAIH,IAAI;AACJG,sBAAUH,GAAG6pB,cAAJ,IAAsB7pB,GAAGy6C;AAClCt6C,sBAAUH,GAAG+pB,cAAJ,IAAsB/pB,GAAGy6C;AAClCt6C,sBAAUH,GAAG4pB,kBAAJ,IAA0B5pB,GAAGS;AACtCN,sBAAUH,GAAGQ,kBAAJ,IAA0BR,GAAGS;AAAAA,UACzC;AAEDplB,aAAG,MAAM;AAAA,YAACkB,QAAQg+D;AAAAA,YAAOp3E,GAAG;AAAA,YAAKC,GAAG;AAAA,YAAK+8B;AAAAA,UAAhC,CAAP;AAAA,QACL;AAAA,MACJ;AAAA;;IA5BqC3P;MCArBkqD;;;AAEjB,aAAAA,aAAYxgE,OAAO;AAAA,UAAA;AAAA,sBAAA,MAAAwgE,YAAA;AACf,cAAA,OAAA,KAAA,MAAMxgE,KAAN;AACKygE,YAAAA,eAAe7mE;AACf8mE,YAAAA,SAAS;AAHC,aAAA;AAAA,IAIlB;;;WAOD,SAAkB,MAAA;AACd,eAAO,KAAKD;AAAAA;MANhB,KAAA,SAAA1oE,KAAgBjY,GAAG;AACV2gF,aAAAA,eAAe3gF;AACpB,aAAKwa,SAAL;AAAA,MACH;AAAA;;WAWD,SAAY,MAAA;AACR,eAAO,KAAKomE;AAAAA;MANhB,KAAA,SAAA3oE,KAAUjY,GAAG;AACJ4gF,aAAAA,SAAS5gF;AACd,aAAKwa,SAAL;AAAA,MACH;AAAA;;WAgBD,SAAW,MAAA;AACA,eAAA,KAAKmmE,aAAaE;AAAAA;MAX7B,KAAA,SAAA5oE,KAASjY,GAAG;AACJ,YAAA,CAACA,GAAG;AACC8gF,eAAAA,cAAchnE;AAAAA,QACtB,OAAM;AACH,cAAM1Y,IAAIi6B,SAASsQ,cAAc,KAAvB;AACVvqC,YAAEy/E,YAAY,UAAU7gF,IAAI;AAC5B,eAAK8gF,cAAc1/E,EAAE2/E;AAAAA,QACxB;AAAA,MACJ;AAAA;;aAMD,SAAc,cAAA;AACV,eAAO,KAAKD;AAAAA,MACf;AAAA;;aAED,SAAe,eAAA;AACJ,eAAA,KAAKF,SAAS,MAAM,KAAKD,aAAaE;AAAAA,MAChD;AAAA;;aAED,SAAmB,mBAAA;AACTC,YAAAA,cAAc,KAAKH;AACnB1nD,YAAAA,QAAQ,KAAK2nD;AACZ,eAAA,SAASv/D,IAAI;AAAA,cAAA,SAAA;AAChB,cAAI,CAACnc,OAAO87E,aAAa;AACrB,mBAAO3/D,GAAG,IAAIra,MAAM,+DAAV,CAAD;AAAA,UACZ;AAED,cAAMiqB,OAAOyvD,aAAYO;AACzBhwD,eAAKiwD,YAAYJ,WAAjB;AAEAE,sBAAYF,aAAa;AAAA,YAACK,iBAAiB;AAAA,YAAMloD;AAAAA,UAAxB,CAAd,EAAqD0C,KAAK,SAASpB,QAAQ;AAClFtJ,iBAAKmwD,YAAYN,WAAjB;AACA,gBAAIvmD,OAAOvX,WAAW,GAAG;AACrB,qBAAO3B,GAAG,IAAIra,MAAM,oBAAV,CAAD;AAAA,YACZ;AACDqa,eAAG,MAAM;AAAA,cAACkB,QAAQgY;AAAAA,cAAQxX,OAAOwX,OAAOxX;AAAAA,cAAOC,QAAQuX,OAAOvX;AAAAA,YAArD,CAAP;AAAA,UACL,CAND,EAMG0Y,MAAM,SAAAvX,GAAK;AAAA,2BAAA,MAAA,MAAA;AACV1hB,oBAAQqD,MAAM,eAAeqe,CAA7B;AAAA,UACH,EARD,KAAA,IAAA,CAAA;AAAA,QASH;AAAA,MACJ;AAAA;;aAED,SAAwB,iBAAA;AAChB,YAAA,CAAC,KAAKk9D,cAAc;AAEpB,eAAKA,eAAehmD,SAASsQ,cAAc,KAAvB;AACpB,cAAI,KAAK01C,aAAaC,cAAc;AAE3BD,iBAAAA,aAAaC,aAAa;AAAA,cAAC96E,MAAM;AAAA,YAAP,CAA/B;AAAA,UACH;AACD,eAAK66E,aAAajL,MAAMmL,UAAU;AAClC,eAAKF,aAAajL,MAAMoL,gBAAgB;AACxC,eAAKH,aAAajL,MAAMplE,WAAW;AACnC,eAAKqwE,aAAajL,MAAMqL,UAAU;AAClC,eAAKJ,aAAajL,MAAMsL,MAAM;AAC9B,eAAKL,aAAajL,MAAMuL,WAAW;AACnCtmD,mBAASumD,KAAKV,YAAY,KAAKG,YAA/B;AAAA,QACH;AACD,eAAO,KAAKA;AAAAA,MACf;AAAA;;IAxFoC7qD;MCApBqrD;;;AAEL3hE,aAAAA,eAAAA,OAAOkC,SAAS;AAAA,UAAA;AAAA,sBAAA,MAAAy/D,cAAA;AACxB,cAAA,OAAA,KAAA,MAAM3hE,KAAN;AAEKm2D,YAAAA,WAAWj0D;AAHQ,aAAA;AAAA,IAI3B;;;WASD,SAAc,MAAA;AACV,eAAO,KAAKi0D;AAAAA;MARhB,KAAA,SAAAp+D,KAAYjY,GAAG;AACX,YAAI,KAAKq2E,aAAar2E,GAAG;AAChBq2E,eAAAA,WAAWr2E;AAChB,eAAKwa,SAAL;AAAA,QACH;AAAA,MACJ;AAAA;;aAMD,SAAc,cAAA;AACH,eAAA,CAAC,CAAC,KAAK67D;AAAAA,MACjB;AAAA;;aAED,SAAmB,mBAAA;AAAA,YAAA,SAAA;AACR,eAAA,SAACh1D,IAAO;AAAA,yBAAA,MAAA,MAAA;AACXA,aAAG,MAAM,KAAKg1D,QAAZ;AAAA,QACL,EAFD,KAAA,IAAA;AAAA,MAGH;AAAA;;IA3BsC7/C;MCAtBsrD;;;AAEjB,aAAAA,eAAY5hE,OAAO;AAAA,UAAA,YAAA;AAAA,sBAAA,MAAA4hE,cAAA;AACf,cAAA,OAAA,KAAA,MAAM5hE,KAAN;AAEA,YAAKmgE,WAAW,MAAA,aAAA,uBAAA,KAAA,GAAA,gBAAAyB,eAAA,SAAA,IAAA,aAAA,UAAA,EAAgBviF,EAAE,CAAA,CAAlB;AAEXwiF,YAAAA,yBAAyB;AAE9B,YAAKC,gBAAgB,oBAAI5hE;AAEpB6hE,YAAAA,SAAS;AAETC,YAAAA,WAAW;AAMXC,YAAAA,4BAA4B,MAAKjiE,MAAM81B,YAAYI,eAAe,CAAA,CAAtC;AAK5BgsC,YAAAA,YAAY;AAEZC,YAAAA,wBAAwB;AAExBC,YAAAA,oBAAoB;AAKpBC,YAAAA,QAAQ;AAKRC,YAAAA,WAAW;AAKXC,YAAAA,WAAW;AAMXC,YAAAA,qBAAqB;AAOrBC,YAAAA,mBAAmB;AAOnB53E,YAAAA,cAAc;AAEnB,YAAK63E,WAAW,IAAIC,UAApB,uBAAA,KAAA,CAAA;AA/De,aAAA;AAAA,IAgElB;;;aAED,SAAuB,uBAAA;AACnB,eAAO;AAAA,MACV;AAAA;;WAED,SAAY,MAAA;AACR,eAAO,KAAKD,SAAS73C;;MAGzB,KAAA,SAAA9yB,KAAUsE,UAAU;AAChB,aAAKqmE,SAAS3mE,MAAMM,QAApB;AAAA,MACH;AAAA;;aAED,SAAQ,QAAA;AAAA,YAAA,SAAA;AACC8jE,aAAAA,SAASzqC,WAAW,KAAK5O,UAAU,KAAKm7C,yBAA7C;AACKW,aAAAA,oBAAoB,KAAKzC,SAASzqC,WAAW,KAAK5O,QAA9B;AACzB,aAAK87C,kBAAkB3tD,GAAG,YAAY,SAAAh2B,GAAC;AAAA,yBAAA,MAAA,MAAA;AAAI,iBAAA,KAAKqkB;QAAT,EAAvC,KAAA,IAAA,CAAA;AAEA,aAAKu/D,SAAS,GAAG,MAAM,IAAvB;AAEKb,aAAAA,WAAW;AAEhB,aAAK1+D,OAAL;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,SAAS7f,OAA2C;AAApCq/E,YAAAA,6EAAY;AAAOC,YAAAA,2EAAU;AACrCC,YAAAA,YAAY,KAAKniF;AACjB,YAAA,CAACmiF;AAAW;AAEhB,aAAKttD,KAAK,WAAW,KAAKyuB,WAAW,KAAK8+B,SAArB,GAAiC,KAAKlB,QAAQ,KAAKkB,SAAxE;AAEA,YAAIF,SAAS;AAELz0E,cAAAA,SAAS3L,QAAMgB,eAAeF,OAAOu/E,SAA5B;AACTrgD,cAAAA,IAAIhgC,QAAMgB,eAAe,KAAKF,OAAOu/E,SAAjC;AACR,cAAIE,OAAO50E,SAASq0B;AACpB,cAAIugD,OAAO,MAAMF,WAAW;AACxBE,oBAAQF;AAAAA,UADZ,WAEWE,OAAO,OAAOF,WAAW;AAChCE,oBAAQF;AAAAA,UACX;AACIjB,eAAAA,UAAUmB;AAAAA,QAClB,OAAM;AACEnB,eAAAA,SAASt+E;AAAAA,QACjB;AAEG,YAAA,KAAK4+E,SAAU,KAAKc,eAAe,KAAKjB,YAAYc,WAAY;AAC3DjB,eAAAA,SAASp/E,QAAMgB,eAAe,KAAKo+E,QAAQiB,SAAlC;AAAA,QACjB;AAEGlqE,YAAAA,YAAa,KAAKjO,cAAc,KAAK43E,mBAAmB,KAAK;AAC7D7/E,YAAAA,QAAQkW,YAAY,KAAKipE,SAAS,KAAKG;AAEvC,YAAA,KAAKG,OAAO;AACZ,cAAIxiF,KAAKD,KAAKwjF;AACVtqE,cAAAA,aAAa,GAAG;AAChBlZ,mBAAOojF,YAAY,KAAK,KAAKd;AAC7BkB,0BAAc,KAAKjB,wBAAwB,KAAKgB,eAAe,KAAKf,oBAAoB,KAAKF;AAE7FtiF,mBAAOwjF;AAEPvjF,kBAAM,KAAKsjF,gBAAgB,KAAKjB,YAAYkB;AAE5C,gBAAI,KAAKd;AAAUziF,qBAAO,KAAKyiF;AAC/B,gBAAI,KAAKC;AAAU3iF,qBAAO,KAAK2iF;AAE/B3/E,oBAAQpD,KAAKI,IAAIJ,KAAKK,IAAI+C,OAAOhD,GAAhB,GAAsBC,GAA/B;AAAA,UACX,OAAM;AACHD,kBAAOojF,YAAY,KAAKd,YAAY,KAAKiB;AACzCC,0BAAc,KAAKjB,wBAAwB,KAAKgB,eAAe,KAAKf,oBAAoB,KAAKF;AAE7FtiF,mBAAOwjF;AAEHvjF,gBAAAA,OAAMujF;AAEV,gBAAI,KAAKd;AAAUziF,sBAAO,KAAKyiF;AAC/B,gBAAI,KAAKC;AAAU3iF,qBAAO,KAAK2iF;AAE/B3/E,oBAAQpD,KAAKK,IAAIL,KAAKI,IAAI,CAACA,KAAKgD,KAAf,GAAuB,CAAC/C,IAAjC;AAAA,UACX;AAAA,QACJ;AAED,aAAK+iF,kBAAkBzsC,MAAMvzC,KAA7B;AAEA,YAAIkgF,WAAW;AACNF,eAAAA,kBAAkB/sC;QAC1B;AAED,aAAKngB,KAAK,SAAS,KAAKyuB,WAAW,KAAK8+B,SAArB,GAAiC,KAAKlB,QAAQ,KAAKkB,SAAtE;AAAA,MACH;AAAA;;aAED,SAAkB,kBAAA;AACd,YAAIt6E,SAAS,CAAC,KAAKi6E,kBAAkBr7C;AAEjCzuB,YAAAA,YAAa,KAAKjO,cAAc,KAAK43E,mBAAmB,KAAK;AAC7D7/E,YAAAA,QAAQ,CAACkW,YAAY,KAAKipE,SAAS,KAAKG;AAErC,eAAA,KAAKC,wBAAwB,KAAKgB,gBAAgBvgF,QAAQ+F;AAAAA,MACpE;AAAA;;aAED,SAAS,SAAA;AACD,YAAA,CAAC,KAAKq5E;AAAU;AAEhBgB,YAAAA,YAAY,KAAKniF;AACjB,YAAA,CAACmiF;AAAW;AAEZlqE,YAAAA,YAAa,KAAKjO,cAAc,KAAK43E,mBAAmB,KAAK;AAGjE,YAAI3iF,IAAK,KAAK+K,cAAc,KAAKs1E,SAASx2E,IAAI,KAAKw2E,SAASv2E;AAExDu5E,YAAAA,eAAe,KAAKA;AACpBC,YAAAA,cAAc,KAAKjB,wBAAwBgB,eAAe,KAAKf,oBAAoB,KAAKF;AAC5FpiF,aAAKsjF;AAEL,YAAIlhF,GAAG+hB,GAAGo/D,IAAIrT;AACd,YAAIl3D,aAAa,IAAI;AACjB5W,cAAI1C,KAAKC,MAAM,CAACK,IAAI,KAAKoiF,SAArB;AACJmB,eAAK,KAAM,CAACvjF,IAAI,KAAKoiF,YAAahgF;AAClC+hB,cAAIzkB,KAAKC,OAAO0jF,eAAerjF,KAAK,KAAKoiF,SAArC;AACJlS,gBAAQmT,eAAerjF,KAAK,KAAKoiF,YAAaj+D;AAAAA,QACjD,OAAM;AACH/hB,cAAI1C,KAAKqE,KAAK/D,IAAI,KAAKoiF,SAAnB;AACJmB,eAAK,IAAKvjF,IAAI,KAAKoiF,YAAahgF;AAChC+hB,cAAIzkB,KAAKqE,MAAM/D,IAAIqjF,gBAAgB,KAAKjB,SAApC;AACJlS,eAAK/rD,KAAMnkB,IAAIqjF,gBAAgB,KAAKjB;AAAAA,QACvC;AACG,YAAA,KAAKG,SAAUc,eAAe,KAAKjB,YAAYc,WAAY;AAEvD/+D,cAAAA,KAAK++D,WAAW;AAChB/+D,gBAAI++D,YAAY;AAChBhT,iBAAK;AAAA,UACR;AACG9tE,cAAAA,KAAK8gF,WAAW;AAChB9gF,gBAAI8gF,YAAY;AAChBK,iBAAK;AAAA,UACR;AACD,cAAIp/D,KAAK,IAAI;AACTA,gBAAI;AACJ+rD,iBAAK;AAAA,UACR;AACD,cAAI9tE,KAAK,IAAI;AACTA,gBAAI;AACJmhF,iBAAK;AAAA,UACR;AAAA,QACJ;AAEG/0E,YAAAA,SAAS,CAACwK,YAAY5W,IAAI,KAAKggF;AAEnC,YAAIz5E;AACJ,iBAAShF,QAAQvB,GAAI4W,aAAa,KAAKrV,SAASwgB,IAAIxgB,SAASwgB,GAAKnL,aAAa,KAAKrV,UAAUA,SAAU;AAChGw/E,cAAAA,YAAYtgF,QAAMgB,eAAeF,OAAOu/E,SAA5B;AAEhB,cAAI1hE,UAAU,KAAK6iC,WAAW8+B,SAAhB;AACdx6E,iBAAO6Y,QAAQ1Y;AACf,eAAKk5E,cAAc9gE,OAAOvY,IAA1B;AACI,cAAA,KAAKoC,aAAa;AAClBpC,iBAAKkB,IAAI2E,SAAS80E;AAAAA,UACrB,OAAM;AACH36E,iBAAKmB,IAAI0E,SAAS80E;AAAAA,UACrB;AAED,cAAIE,aAAa76E,KAAKqV;AACtBrV,eAAKqV,UAAU;AAEf,cAAI,CAACwlE,cAAc,KAAKzB,wBAAwB;AAE5C,iBAAKnsD,KAAK,WAAWjyB,OAAOw/E,SAA5B;AAAA,UACH;AAIG,cAAA,KAAKT,oBAAoB;AACrBvjF,gBAAAA,IAAI;AACJwE,gBAAAA,SAASvB,GAAG;AACZjD,kBAAIokF;AAAAA,YACP,WAAU5/E,SAASwgB,GAAG;AACnBhlB,kBAAI+wE;AAAAA,YACP;AAGD,iBAAKwS,mBAAmBnoC,MAAM/4B,SAASriB,CAAvC;AAAA,UACH;AAEDqP,oBAAU,KAAK4zE;AAAAA,QAClB;AAGG/oD,YAAAA,QAAO;AACX,aAAK2oD,cAAct9E,QAAQ,SAAS++E,eAAe;AAC/CA,wBAAczlE,UAAU;AACxBqb,UAAAA,MAAK2oD,cAAc9gE,OAAOuiE,aAA1B;AAAA,QACH,CAHD;AAKA,iBAAS9/E,SAAQvB,GAAI4W,aAAa,KAAKrV,UAASwgB,IAAIxgB,UAASwgB,GAAKnL,aAAa,KAAKrV,WAAUA,UAAU;AAChGw/E,cAAAA,aAAYtgF,QAAMgB,eAAeF,QAAOu/E,SAA5B;AACXlB,eAAAA,cAAc/gE,IAAI,KAAKyiE,WAAWP,UAAhB,CAAvB;AAAA,QACH;AAEIpB,aAAAA,yBAAyB;AAAA,MACjC;AAAA;;aAED,SAAc,cAAA;AACV,aAAKgB,SAAS,KAAKd,SAAS,CAA5B;AAAA,MACH;AAAA;;aAED,SAAU,UAAA;AACN,aAAKc,SAAS,KAAKd,SAAS,CAA5B;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,WAAWt+E,OAAO;AACd,eAAO,KAAK08E,SAAS9jE,SAAS5Y,KAAvB;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,WAAWA,OAAO;AACVwgB,YAAAA,IAAI,KAAKk8D,SAAS9jE,SAAS5Y,KAAvB;AACDwgB,eAAAA,IAAIA,EAAE5H,SAAS,CAAX,IAAgB;AAAA,MAC9B;AAAA;;aAED,SAAS,SAAA;AACAwlE,aAAAA,yBAAyB;AAC9B,aAAKv+D,OAAL;AAAA,MACH;AAAA;;WAED,SAAc,MAAA;AACNW,YAAAA,IAAI,KAAKk8D,SAAS9jE,SAAS,KAAK4mE,SAA5B;AACDh/D,eAAAA,IAAIA,EAAE5H,SAAS,CAAX,IAAgB;AAAA,MAC9B;AAAA;;WAED,SAAa,MAAA;AACT,eAAO,KAAK8jE,SAAS9jE,SAASxb;AAAAA,MACjC;AAAA;;WAED,SAAe,MAAA;AACX,eAAO,KAAKgK,cAAc,MAAM;AAAA,MACnC;AAAA;;WAED,SAAmB,MAAA;AACf,eAAO,KAAKA,cAAc,KAAK5B,IAAI,KAAKC;AAAAA,MAC3C;AAAA;;WAED,SAAY,MAAA;AACR,eAAO,KAAK64E;AAAAA,MACf;AAAA;;WAED,SAAgB,MAAA;AACLp/E,eAAAA,QAAMgB,eAAe,KAAKo+E,QAAQ,KAAKlhF,MAAvC;AAAA,MACV;AAAA;;WAED,SAAe,MAAA;AACX,eAAO,KAAKqhF;AAAAA;MAGhB,KAAA,SAAAnqE,KAAajY,GAAG;AACPoiF,aAAAA,YAAYpiF;AACjB,aAAKwjB,OAAL;AAAA,MACH;AAAA;;WAED,SAA2B,MAAA;AACvB,eAAO,KAAK6+D;AAAAA;MAGhB,KAAA,SAAApqE,KAAyBjY,GAAG;AACnBqiF,aAAAA,wBAAwBriF;AAC7B,aAAKwjB,OAAL;AAAA,MACH;AAAA;;WAED,SAAuB,MAAA;AACnB,eAAO,KAAK8+D;AAAAA;MAGhB,KAAA,SAAArqE,KAAqBjY,GAAG;AACfsiF,aAAAA,oBAAoBtiF;AACzB,aAAKwjB,OAAL;AAAA,MACH;AAAA;;WAED,SAA+B,MAAA;AAC3B,eAAO,KAAK2+D;AAAAA;MAGhB,KAAA,SAAAlqE,KAA6BjY,GAAG;AAC5B,aAAKmiF,0BAA0BlmE,MAAMjc,CAArC;AAAA,MACH;AAAA;;WAMD,SAAuB,MAAA;AACnB,eAAO,KAAK8iF;AAAAA;MALhB,KAAA,SAAA7qE,KAAqBjY,GAAG;AACpB,aAAKmiF,0BAA0BlmE,MAAMjc,CAArC;AAAA,MACH;AAAA;;WAMD,SAAwB,MAAA;AACpB,eAAO,KAAK0iF;AAAAA;MAGhB,KAAA,SAAAzqE,KAAsBjY,GAAG;AACrB,YAAI6C,QAAME,gBAAgB/C,CAAtB,GAA0B;AACrB0iF,eAAAA,qBAAqB,KAAKxiE,MAAMs1B,WAAWY,eAAep2C,CAArC;AAAA,QAC7B,OAAM;AACE0iF,eAAAA,qBAAqB1iF;AAAAA,QAC7B;AACD,aAAKwjB,OAAL;AAAA,MACH;AAAA;;WAED,SAAW,MAAA;AACP,eAAO,KAAK++D;AAAAA;MAGhB,KAAA,SAAAtqE,KAASjY,GAAG;AACHuiF,aAAAA,QAAQviF;AACb,aAAKwjB,OAAL;AAAA,MACH;AAAA;;WAED,SAAc,MAAA;AACV,eAAO,KAAKg/D;AAAAA;MAGhB,KAAA,SAAAvqE,KAAYjY,GAAG;AACNwiF,aAAAA,WAAWxiF;AAChB,aAAKwjB,OAAL;AAAA,MACH;AAAA;;WAED,SAAc,MAAA;AACV,eAAO,KAAKi/D;AAAAA;MAGhB,KAAA,SAAAxqE,KAAYjY,GAAG;AACNyiF,aAAAA,WAAWziF;AAChB,aAAKwjB,OAAL;AAAA,MACH;AAAA;;WAED,SAAsB,MAAA;AAClB,eAAO,KAAKm/D;AAAAA;MAGhB,KAAA,SAAA1qE,KAAoBjY,GAAG;AACf,YAAA,CAAC,KAAKkiF,UAAU;AACXS,eAAAA,mBAAmB3iF;AAAAA,QAC3B;AAAA,MACJ;AAAA;;WAED,SAAiB,MAAA;AACb,eAAO,KAAK+K;AAAAA;MAGhB,KAAA,SAAAkN,KAAejY,GAAG;AACd,YAAIA,MAAM,KAAK+K,aAAa;AACpB,cAAA,CAAC,KAAKm3E,UAAU;AACXn3E,iBAAAA,cAAc/K;AAAAA,UACtB;AAAA,QACJ;AAAA,MACJ;AAAA;;IAnasCg/C;MAwarC6jC;;;AACF,aAAAA,WAAYnxC,MAAM;AAAA,UAAA,SAAA;AAAA,UAAA;AAAA,sBAAA,MAAAmxC,UAAA;AACd,UAAI3wE,OAAQ,SAAAvJ,MAAAA,MAAQ;AAAA,uBAAA,MAAA,MAAA;AAChB,YAAIG,SAASH,KAAKuX,MAAMyrB,cAAX;AACb7iC,eAAOmY,IAAItY,IAAX;AACAG,eAAOkV,UAAU;AACjB,eAAOlV;AAAAA,MACV,EALD,KAAA,IAAA;AAOA,eAAA,QAAA,KAAA,MAAM4oC,KAAK2uC,SAAS7jE,WAAWtK,IAA/B;AACKw/B,aAAAA,OAAOA;AATE,aAAA;AAAA,IAUjB;;;aAED,SAAM/oC,MAAAA,MAAMhF,OAAO;AACHgF,aAAAA,gBAAAA,WAAAA,SAAAA,GAAAA,SAAAA,IAAAA,EAAAA,KAAAA,MAAAA,MAAMhF,KAAlB;AACKggF,aAAAA,aAAahgF,KAAlB;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,aAAaA,OAAO;AAChB,aAAK+tC,KAAKqwC,yBAAyB;AACnC,YAAI,CAAC,KAAKrwC,KAAKwwC,UAAU;AAChBxwC,eAAAA,KAAK2E;QACb,OAAM;AACH,cAAI,KAAK3E,KAAK3wC,WAAW,GAAG;AACnB2wC,iBAAAA,KAAKqxC,SAAS,GAAG,MAAM,IAA5B;AAAA,UACH,OAAM;AACC,gBAAA,KAAKrxC,KAAKuwC,UAAU,KAAKvwC,KAAK3wC,QAAQ;AACtC,mBAAK2wC,KAAKqxC,SAAS,CAAnB;AAAA,YACH;AAAA,UACJ;AACIrxC,eAAAA,KAAKluB;QACb;AAAA,MACJ;AAAA;;aAED,SAAS7a,SAAAA,MAAMhF,OAAO;AACHgF,aAAAA,gBAAAA,WAAAA,SAAAA,GAAAA,YAAAA,IAAAA,EAAAA,KAAAA,MAAAA,MAAMhF,KAArB;AACA,YAAIigF,KAAK,KAAKlyC,KAAKyxC;AACfS,YAAAA,OAAOjgF,OAAO;AACd,cAAIigF,OAAO,KAAKlyC,KAAK3wC,QAAQ;AACzB6iF;AAAAA,UACH;AACGA,cAAAA,MAAM,GAAG;AACT,iBAAKlyC,KAAKqxC,SAASa,EAAnB;AAAA,UACH;AAAA,QACJ,WAAUA,KAAKjgF,OAAO;AACnB,eAAK+tC,KAAKqxC,SAASa,KAAK,CAAxB;AAAA,QACH;AAED,aAAKlyC,KAAKqwC,yBAAyB;AAAA,MACtC;AAAA;;aAED,SAAMp5E,MAAAA,MAAMhF,OAAO;AACHgF,aAAAA,gBAAAA,WAAAA,SAAAA,GAAAA,SAAAA,IAAAA,EAAAA,KAAAA,MAAAA,MAAMhF,KAAlB;AACKggF,aAAAA,aAAahgF,KAAlB;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,OAAOwpB,SAASC,OAAOC,OAAO;AAC1B,aAAA,gBAAAw1D,WAAA,SAAA,GAAA,UAAA,IAAA,EAAA,KAAA,MAAa11D,SAASC,OAAOC,KAA7B;AACKs2D,aAAAA,aAAa,CAAlB;AAAA,MACH;AAAA;;WAED,SAAmB,MAAA;AACf,eAAO;AAAA,MACV;AAAA;;IA/DmBvD;MCxaHyD;;;AAEjB,aAAAA,kBAAYnqC,SAAS;AAAA,UAAA;AAAA,sBAAA,MAAAmqC,iBAAA;AACjB,cAAA,OAAA,KAAA,MAAMnqC,OAAN;AAEKoqC,YAAAA,aAAa,IAAIlgC,aAAa,CAAC,GAAG,CAAJ,CAAjB;AACbmgC,YAAAA,gBAAgB;AAJJ,aAAA;AAAA,IAKpB;;;WAED,SAAQ,MAAA;AACJ,eAAO,KAAKD,WAAW,CAAhB;AAAA;MAGX,KAAA,SAAA7rE,KAAMjY,GAAG;AACL,aAAK8jF,WAAW,CAAhB,IAAqB9jF;AACrB,aAAKgkF,OAAL;AAAA,MACH;AAAA;;WAED,SAAQ,MAAA;AACJ,eAAO,KAAKF,WAAW,CAAhB;AAAA;MAGX,KAAA,SAAA7rE,KAAMjY,GAAG;AACL,aAAK8jF,WAAW,CAAhB,IAAqB9jF;AACrB,aAAKgkF,OAAL;AAAA,MACH;AAAA;;WAED,SAAmB,MAAA;AACf,eAAO,KAAKD;AAAAA;MAGhB,KAAA,SAAA9rE,KAAiBjY,GAAG;AACX+jF,aAAAA,gBAAgB/jF;AACrB,aAAKgkF,OAAL;AAAA,MACH;AAAA;;aAGD,SAAa,aAAA;AACD,eAAA,KAAKD,kBAAkB;AAAA,MAClC;AAAA;;MAED,OAAA,SAAA,cAAcn8B,WAAW;AACrB,aAAA,gBAAAi8B,kBAAA,SAAA,GAAA,iBAAA,IAAA,EAAA,KAAA,MAAoBj8B,SAApB;AACKiG,aAAAA,YAAY,aAAa,KAAKi2B,YAAY,KAAK99C,GAAG8nB,UAAvD;AACKD,aAAAA,YAAY,gBAAgB,KAAKk2B,eAAe,KAAK/9C,GAAGi+C,SAA7D;AAEA,YAAM96E,IAAIy+C,UAAUhuB;AACpB,YAAMxwB,IAAIw+C,UAAU/tB;AACpB,aAAKg0B,YAAY,cAAc,IAAIjK,aAAa,CAACz6C,GAAGC,CAAJ,CAAjB,GAA0B,KAAK48B,GAAG8nB,UAAjE;AAAA,MACH;AAAA;;IAjDyCR;AAoD9Cu2B,mBAAiB15B,uBAAjB;MCjDqB+5B;;;;;;;;;MAEjB,OAAA,SAAA,cAAct8B,WAAW;AACrB,aAAA,gBAAAs8B,eAAA,SAAA,GAAA,iBAAA,IAAA,EAAA,KAAA,MAAoBt8B,SAApB;AACM9lD,YAAAA,KAAK,IAAM8lD,UAAUpD,gBAAgB,CAA1B;AACXv4B,YAAAA,KAAK,IAAM27B,UAAUnD,iBAAiB,CAA3B;AACjB,aAAKoJ,YAAY,oBAAoB,IAAIjK,aAAa,CAAC9hD,IAAImqB,EAAL,CAAjB,GAA4B,KAAK+Z,GAAG8nB,UAAzE;AAAA,MACH;AAAA;;IAPsCR;AAW3C42B,gBAAch6B,qBAAd;AA6BAg6B,gBAAc/5B,uBAAd;MC3CqBg6B;;;AAEjB,aAAAA,YAAYzqC,SAAS;AAAA,UAAA;AAAA,sBAAA,MAAAyqC,WAAA;AACjB,cAAA,OAAA,KAAA,MAAMzqC,OAAN;AACKqqC,YAAAA,gBAAgB;AAFJ,aAAA;AAAA,IAGpB;;;WAED,SAAmB,MAAA;AACf,eAAO,KAAKA;AAAAA;MAGhB,KAAA,SAAA9rE,KAAiBjY,GAAG;AACX+jF,aAAAA,gBAAgB/jF;AACrB,aAAKgkF,OAAL;AAAA,MACH;AAAA;;aAED,SAAa,aAAA;AACF,eAAA,KAAKI,YAAY;AAAA,MAC3B;AAAA;;aAED,SAAwB,cAAA,MAAA;AAATv7E,YAAAA,cAAAA;AACXA,eAAOic,IAAI4c,SAAS,UAAU,KAAKqiD,gBAAgB;AAAA,MACtD;AAAA;;aAED,SAAuB,aAAA,OAAA;AAATl7E,YAAAA,eAAAA;AACVA,eAAOic,IAAI4c,SAAS;AAAA,MACvB;AAAA;;IA1BmC4rB;MCMnB+2B;;;;;;;;;WAKjB,SAAW,MAAA;AACP,eAAO,KAAK1zC,IAAI,MAAT;AAAA,MACV;AAAA;;WAMD,SAAc,MAAA;AACH,eAAA,KAAKz+B,KAAKgsE;AAAAA;MALrB,KAAA,SAAAjmE,KAAYjY,GAAG;AACX,eAAO,KAAKkS,KAAKgsE,UAAUl+E;AAAAA,MAC9B;AAAA;;MAMD,KAAA,SAAAiY,KAAYjY,GAAG;AACX,aAAKkS,KAAKoyE,YAAYtkF;AACtB,aAAKkS,KAAKqyE,YAAYvkF;AACjBkS,aAAAA,KAAKsyE;MACb;AAAA;;MAED,KAAA,SAAAvsE,KAAajY,GAAG;AACZ,aAAKkS,KAAKoyE,YAAYtkF;AACjBkS,aAAAA,KAAKsyE;MACb;AAAA;;MAED,KAAA,SAAAvsE,KAAajY,GAAG;AACZ,aAAKkS,KAAKqyE,YAAYvkF;AACjBkS,aAAAA,KAAKsyE;MACb;AAAA;;WAMD,SAAa,MAAA;AACF,eAAA,KAAKtyE,KAAKlG;AAAAA;MALrB,KAAA,SAAAiM,KAAWjY,GAAG;AACV,eAAO,KAAKkS,KAAKlG,SAAShM;AAAAA,MAC7B;AAAA;;aAMD,SAAY,YAAA;AACR,aAAKkS,KAAK/I,IAAI,KAAKm7C;AACnB,aAAKpyC,KAAK9I,IAAI,KAAKm7C;AAAAA,MACtB;AAAA;;WAED,SAAmB,MAAA;AACf,eAAO;AAAA,MACV;AAAA;;aAED,SAAS,SAAA;AACL,aAAKtoC,MAAM;AAAA,UACPwoE,MAAM;AAAA,YAAChhF,MAAM,KAAKyc,MAAM8lB,KAAK0+C,yBAAyBC;AAAAA,UAAhD;AAAA,QADC,CAAX;AAAA,MAGH;AAAA;;aArDD,SAAmB,YAAA;AACf,eAAO;MACV;AAAA;;IAH0C3lC;MA2DzC2lC;;;AAUF,aAAAA,sBAAYzkE,OAAO;AAAA,UAAA;AAAA,sBAAA,MAAAykE,qBAAA;AACf,cAAA,QAAA,KAAA,MAAMzkE,KAAN;AACA,YAAK0kE,YAAY,MAAKC,IAAI,UAAT;AACjB,YAAKxE,WAAW,MAAKwE,IAAI,kBAAT;AAEXT,YAAAA,UAAU;AACVE,YAAAA,YAAY;AACZC,YAAAA,YAAY;AAPF,aAAA;AAAA,IASlB;;;WAUD,SAAc,MAAA;AACV,eAAO,KAAKM,IAAI,kBAAT;AAAA;MAGX,KAAA,SAAA5sE,KAAYjY,GAAG;AACN6kF,aAAAA,IAAI,kBAAT,EAA6B5oE,MAAMjc,GAAG,IAAtC;AAAA,MACH;AAAA;;MAED,KAAA,SAAAiY,KAAYjY,GAAG;AACNskF,aAAAA,YAAYtkF;AACZukF,aAAAA,YAAYvkF;AACjB,aAAKwkF,gBAAL;AAAA,MACH;AAAA;;MAED,KAAA,SAAAvsE,KAAajY,GAAG;AACPskF,aAAAA,YAAYtkF;AACjB,aAAKwkF,gBAAL;AAAA,MACH;AAAA;;MAED,KAAA,SAAAvsE,KAAajY,GAAG;AACPukF,aAAAA,YAAYvkF;AACjB,aAAKwkF,gBAAL;AAAA,MACH;AAAA;;aAED,SAAkB,kBAAA;AACVr7E,YAAAA,IAAI,KAAKm7C;AACTl7C,YAAAA,IAAI,KAAKm7C;AAETugC,YAAAA,WAAW,KAAKR;AAChBS,YAAAA,WAAW,KAAKR;AAEpB,aAAKlE,SAASx2E,IAAIi7E;AAClB,aAAKF,UAAU/6E,IAAI,CAACi7E;AAEpB,aAAKzE,SAASv2E,IAAIi7E;AAClB,aAAKH,UAAU96E,IAAI,CAACi7E;AAEfH,aAAAA,UAAUz7E,IAAIA,IAAI27E,WAAW;AAC7BF,aAAAA,UAAUx7E,IAAIA,IAAI27E,WAAW;AAAA,MACrC;AAAA;;WAED,SAAa,MAAA;AACT,eAAO,KAAKX;AAAAA;MAQhB,KAAA,SAAAnsE,KAAWjY,GAAG;AACLokF,aAAAA,UAAUpkF;AACV4kF,aAAAA,UAAU91D,OAAOk2D,eAAeL,sBAAqBM,sBAAsBjlF,CAA3C;AAAA,MACxC;AAAA;;WAMD,SAAmB,MAAA;AACf,eAAO;AAAA,MACV;AAAA;;aAxFD,SAAmB,YAAA;AACR,eAAA;AAAA,UACH8zC,oBAAoB;AAAA,UACpBqB,KAAK;AAAA,UACL+vC,UAAU;AAAA,YAACp2D,QAAQ;AAAA,cAACrrB,MAAM0hF;AAAAA,YAAhB;AAAA,YAAgCC,SAAS,CAAA;AAAA,UAAzC;AAAA,QAHP;AAAA,MAKV;AAAA;;aAaD,SAAmB,YAAA;AACX,YAAA,CAAC,KAAKC,cAAc;AACpB,eAAKA,eAAe,IAAIlW;AACxB,eAAKkW,aAAa3kD,MAAM,OAAO;AAAA,YAAC,GAAG;AAAA,YAAG,MAAM;AAAA,YAAK,KAAK;AAAA,YAAK,MAAM;AAAA,YAAO,GAAA;AAAA,UAAzC,CAA/B;AAAA,QACH;AACD,eAAO,KAAK2kD;AAAAA,MACf;AAAA;;MAyDD,OAAA,SAAA,sBAA6BrlF,GAAG;AAC5B,eAAO2kF,sBAAqBW,UAAY5S,EAAAA,SAAShzE,KAAKK,IAAI,GAAGC,IAAI,IAAhB,CAA1C;AAAA,MACV;AAAA;;IAtF8Bg/C;MA8F7B0lC;;;AAgCF,aAAAA,wBAAYxkE,OAAO;AAAA,UAAA;AAAA,sBAAA,MAAAwkE,uBAAA;AACf,eAAA,QAAA,KAAA,MAAMxkE,KAAN;AACA,aAAK0kE,YAAY,OAAKC,IAAI,UAAT;AACjB,aAAKxE,WAAW,OAAKwE,IAAI,kBAAT;AAChB,aAAKU,UAAU,OAAKV,IAAI,QAAT;AACf,aAAKW,UAAU,OAAKX,IAAI,QAAT;AAEVT,aAAAA,UAAU;AACVE,aAAAA,YAAY;AACZC,aAAAA,YAAY;AATF,aAAA;AAAA,IAUlB;;;WAdD,SAAmB,MAAA;AACf,eAAO;AAAA,MACV;AAAA;;aAcD,SAAe,eAAA;AAAA,YAAA,SAAA;AACLkB,YAAAA,uBAAuB,CAAC;AAAA,UAAC57E,GAAE;AAAA,UAAEC,GAAE;AAAA,UAAEk7E,cAAa;AAAA,QAAtB,GAAyB;AAAA,UAACn7E,GAAE;AAAA,UAAEC,GAAE;AAAA,UAAEk7E,cAAa;AAAA,QAAtB,GAAyB;AAAA,UAACn7E,GAAE;AAAA,UAAIC,GAAE;AAAA,UAAEk7E,cAAa;AAAA,QAAxB,GAA2B;AAAA,UAACn7E,GAAE;AAAA,UAAEC,GAAE;AAAA,UAAIk7E,cAAa;AAAA,QAAxB,CAA9E;AACvBU,YAAAA,gBAAgBD,qBAAqBnwD,IAAI,SAAAlzB,GAAK;AAAA,yBAAA,MAAA,MAAA;AAChD,cAAM0sB,SAASiH,OAAOmf,OAAO,KAAKh1B,OAAO7c,OAAOqjC,OAAO;AAAA,YAACjjC,MAAMogF;AAAAA,UAAP,GAA0BzhF,CAAxC,CAA1B;AACf,iBAAO0sB;AAAAA,QACV,EAHD,KAAA,IAAA,CAAA;AAKA,aAAK62D,iBAAiB,KAAKC,iBAAiB,CAAtB,GAA0B,KAAKhB,UAAUzgC,cAAc,CAAA,CAA7E;AACKwhC,aAAAA,iBAAiB,KAAKC,iBAAiB,CAAtB,GAA0B,KAAKC,SAAS,CAAd,EAAiB1hC,WAAjB,GAA+B,CAACuhC,cAAc,CAAD,GAAKA,cAAc,CAAD,CAAhC,CAA/E;AAGA,aAAKC,iBAAiB,KAAKC,iBAAiB,CAAtB,GAA0B,KAAKC,SAAS,CAAd,EAAiB1hC,WAAjE,GAA+E,CAACuhC,cAAc,CAAD,GAAKA,cAAc,CAAD,GAAKA,cAAc,CAAD,GAAKA,cAAc,CAAD,CAApE,CAA/E;AACA,aAAKC,iBAAiB,KAAKC,iBAAiB,CAAtB,GAA0B,KAAKC,SAAS,CAAd,EAAiB1hC,WAAjE,GAA+E,CAACuhC,cAAc,CAAD,GAAKA,cAAc,CAAD,GAAKA,cAAc,CAAD,GAAKA,cAAc,CAAD,CAApE,CAA/E;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,iBAAiBlkE,SAASF,SAASwkE,OAAO;AACtC,YAAI,CAACA,MAAM/kF,QAAQ;AACfygB,kBAAQF,UAAUA;AAAAA,QACrB,OAAM;AACH,cAAMykE,OAAOD,MAAMtkD;AACnB,cAAM/kB,QAAQ+E,QAAQtB,MAAMtf,EAAE;AAAA,YAACu0C,KAAK;AAAA,YAAMrmB,QAAQi3D;AAAAA,UAApB,CAAhB;AAGd,eAAKJ,iBAAiBlpE,OAAO6E,SAASwkE,KAAtC;AAEAtkE,kBAAQ0pB,UAAUjqB,IAAIxE,KAAtB;AAAA,QACH;AACD,eAAO+E;AAAAA,MACV;AAAA;;WAED,SAAc,MAAA;AACV,eAAO,KAAKqjE,IAAI,kBAAT;AAAA;MAGX,KAAA,SAAA5sE,KAAYjY,GAAG;AACN6kF,aAAAA,IAAI,kBAAT,EAA6B5oE,MAAMjc,GAAG,IAAtC;AAAA,MACH;AAAA;;MAED,KAAA,SAAAiY,KAAYjY,GAAG;AACNskF,aAAAA,YAAYtkF;AACZukF,aAAAA,YAAYvkF;AACjB,aAAKwkF,gBAAL;AAAA,MACH;AAAA;;MAED,KAAA,SAAAvsE,KAAajY,GAAG;AACPskF,aAAAA,YAAYtkF;AACjB,aAAKwkF,gBAAL;AAAA,MACH;AAAA;;MAED,KAAA,SAAAvsE,KAAajY,GAAG;AACPukF,aAAAA,YAAYvkF;AACjB,aAAKwkF,gBAAL;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,SAASxjF,GAAG;AACR,eAAO,KAAKukF,QAAQV,IAAI,MAAM7jF,CAAvB;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,iBAAiBA,GAAG;AACT,eAAA,KAAK6kF,SAAS7kF,CAAd,EAAiB6jF,IAAI,SAArB;AAAA,MACV;AAAA;;aAED,SAAY,YAAA;AACR,aAAKL,gBAAL;AAAA,MACH;AAAA;;aAED,SAAkB,kBAAA;AACVr7E,YAAAA,IAAI,KAAKm7C;AACTl7C,YAAAA,IAAI,KAAKm7C;AAETugC,YAAAA,WAAW,KAAKR;AAChBS,YAAAA,WAAW,KAAKR;AAEpB,YAAIyB,KAAK78E,IAAI27E,WAAW;AACxB,YAAImB,KAAK78E,IAAI27E,WAAW;AACxB,aAAKH,UAAUz7E,IAAI68E;AACnB,aAAK3F,SAASx2E,IAAIi7E;AAClB,aAAKe,SAAS,CAAd,EAAiB18E,IAAI,KAAKy8E,iBAAiB,CAAtB,EAAyBz8E,IAAI68E,KAAK;AACvD,aAAKH,SAAS,CAAd,EAAiB18E,IAAI,KAAKy8E,iBAAiB,CAAtB,EAAyBz8E,IAAI68E,KAAK;AACvD,aAAKH,SAAS,CAAd,EAAiB18E,IAAI,KAAKy8E,iBAAiB,CAAtB,EAAyBz8E,IAAI68E,KAAK;AACvD,aAAKH,SAAS,CAAd,EAAiB18E,IAAI,KAAKy8E,iBAAiB,CAAtB,EAAyBz8E,IAAI68E,KAAK;AACvD,aAAKR,QAAQ37E,IAAI,CAACi7E;AAClB,aAAKF,UAAU/6E,IAAI,CAACi7E;AACpB,aAAKU,QAAQr8E,IAAI68E;AAEjB,aAAKpB,UAAUx7E,IAAI68E;AACnB,aAAK5F,SAASv2E,IAAIi7E;AAClB,aAAKc,SAAS,CAAd,EAAiBz8E,IAAI,KAAKw8E,iBAAiB,CAAtB,EAAyBx8E,IAAI68E,KAAK;AACvD,aAAKJ,SAAS,CAAd,EAAiBz8E,IAAI,KAAKw8E,iBAAiB,CAAtB,EAAyBx8E,IAAI68E,KAAK;AACvD,aAAKJ,SAAS,CAAd,EAAiBz8E,IAAI,KAAKw8E,iBAAiB,CAAtB,EAAyBx8E,IAAI68E,KAAK;AACvD,aAAKJ,SAAS,CAAd,EAAiBz8E,IAAI,KAAKw8E,iBAAiB,CAAtB,EAAyBx8E,IAAI68E,KAAK;AACvD,aAAKT,QAAQ17E,IAAI,CAACi7E;AAClB,aAAKH,UAAU96E,IAAI,CAACi7E;AACpB,aAAKS,QAAQp8E,IAAI68E;AAEZ98E,aAAAA,IAAIA;AACJC,aAAAA,IAAIA;AAAAA,MACZ;AAAA;;WAYD,SAAa,MAAA;AACT,eAAO,KAAKg7E;AAAAA;MANhB,KAAA,SAAAnsE,KAAWjY,GAAG;AACLokF,aAAAA,UAAUpkF;AACf,aAAK0tE,QAAL;AAAA,MACH;AAAA;;aAMD,SAAU,UAAA;AACN,YAAI1tE,IAAIN,KAAKK,IAAI,GAAGL,KAAKI,IAAI,GAAG,KAAKskF,OAAjB,CAAZ;AACJpkF,YAAAA,MAAM,GAAG;AACT,eAAK4kF,UAAU3wC,kBAAkB;AACjC,eAAKuxC,QAAQ12D,OAAOo3D,qBAAqB;AACzC,eAAKV,QAAQxnE,UAAU;AAAA,QAC1B,OAAM;AACH,eAAK4mE,UAAU3wC,kBAAkB;AACjC,eAAKuxC,QAAQxnE,UAAU;AAElB6nE,eAAAA,SAAS,CAAd,EAAiB7nE,UAAWhe,IAAI;AAC3B6lF,eAAAA,SAAS,CAAd,EAAiB7nE,UAAWhe,IAAI;AAC3B6lF,eAAAA,SAAS,CAAd,EAAiB7nE,UAAWhe,IAAI;AAC3B6lF,eAAAA,SAAS,CAAd,EAAiB7nE,UAAWhe,IAAI;AAE5BA,cAAAA,KAAK,GAAG;AACHwlF,iBAAAA,QAAQlkE,UAAU,KAAKsjE,UAAUzgC,WAAf;AACvB,iBAAKqhC,QAAQ12D,OAAOo3D,qBAAqB,KAAKL,SAAS,CAAd,EAAiB1hC;AAC1D,iBAAKqhC,QAAQ12D,OAAOvvB,IAAIS;AAAAA,UAC3B,WAAUA,KAAK,GAAG;AACVwlF,iBAAAA,QAAQlkE,UAAU,KAAKukE,SAAS,CAAd,EAAiB1hC;AACxC,iBAAKqhC,QAAQ12D,OAAOo3D,qBAAqB,KAAKL,SAAS,CAAd,EAAiB1hC;AACrDqhC,iBAAAA,QAAQ12D,OAAOvvB,IAAIS,IAAI;AAAA,UAC/B,WAAUA,KAAK,GAAG;AACVwlF,iBAAAA,QAAQlkE,UAAU,KAAKukE,SAAS,CAAd,EAAiB1hC;AACxC,iBAAKqhC,QAAQ12D,OAAOo3D,qBAAqB,KAAKL,SAAS,CAAd,EAAiB1hC;AACrDqhC,iBAAAA,QAAQ12D,OAAOvvB,IAAIS,IAAI;AAAA,UAC/B,WAAUA,KAAK,GAAG;AACVwlF,iBAAAA,QAAQlkE,UAAU,KAAKukE,SAAS,CAAd,EAAiB1hC;AACxC,iBAAKqhC,QAAQ12D,OAAOo3D,qBAAqB,KAAKL,SAAS,CAAd,EAAiB1hC;AACrDqhC,iBAAAA,QAAQ12D,OAAOvvB,IAAIS,IAAI;AAAA,UAC/B;AAAA,QACJ;AAAA,MACJ;AAAA;;MAED,KAAA,SAAAiY,KAAW7V,GAAG;AACV,aAAA,gBAAAsiF,wBAAA,SAAA,GAAA,UAAetiF,GAAf,MAAA,IAAA;AACI,YAAA,CAAC,KAAK6xC,iBAAiB;AACvBxxC,kBAAQC,KAAK,iEAAb;AAAA,QACH;AAAA,MACJ;AAAA;;aAED,SAAe,eAAA;AACX,aAAKyjF,aAAL;AAAA,MACH;AAAA;;aAvMD,SAAmB,YAAA;AACTpxC,YAAAA,WAAW,SAAXA,UAAoBvzB,SAASmD,aAAa;AAC5C,cAAKA,YAAYtP,UAAW,IAAI,KAAO;AACnC,gBAAMlM,IAAIwb,YAAYxb;AACtB,gBAAMC,IAAIub,YAAYvb;AAClBwxC,gBAAAA,MAAMj2B;AACP,eAAA;AACCi2B,oBAAMA,IAAIp+B,UAAU,CAAd;AACNo+B,kBAAIh2B,SAASzb,IAAIA;AACjByxC,kBAAIh2B,SAASxb,IAAIA;AAAAA,YACpB,SAAOwxC,IAAIp+B;AAAAA,UACf;AAAA,QACJ;AAEM,eAAA;AAAA,UACH0oE,UAAU;AAAA,YAAC/vC,KAAK;AAAA,YAAMrB,oBAAoB;AAAA,YAAMxiB,iBAAiB;AAAA,YAAM8zD,SAAS,CAAA;AAAA,UAD7E;AAAA,UAEHgB,QAAQ;AAAA,YACJC,IAAI;AAAA,cAAClxC,KAAK;AAAA,cAAMJ;AAAAA,cAAoBzjB,iBAAiB;AAAA,cAAMtT,SAAS;AAAA,cAAOonE,SAAS;AAAA,gBAACt2D,QAAQ;AAAA,kBAACrrB,MAAMygF;AAAAA,gBAAP;AAAA,cAAT;AAAA,YADhF;AAAA,YAEJoC,IAAI;AAAA,cAACnxC,KAAK;AAAA,cAAMJ;AAAAA,cAAoBzjB,iBAAiB;AAAA,cAAMtT,SAAS;AAAA,cAAOonE,SAAS;AAAA,gBAACt2D,QAAQ;AAAA,kBAACrrB,MAAMygF;AAAAA,gBAAP;AAAA,cAAT;AAAA,YAFhF;AAAA,YAGJqC,IAAI;AAAA,cAACpxC,KAAK;AAAA,cAAMJ;AAAAA,cAAoBzjB,iBAAiB;AAAA,cAAMtT,SAAS;AAAA,cAAOonE,SAAS;AAAA,gBAACt2D,QAAQ;AAAA,kBAACrrB,MAAMygF;AAAAA,gBAAP;AAAA,cAAT;AAAA,YAHhF;AAAA,YAIJsC,IAAI;AAAA,cAACrxC,KAAK;AAAA,cAAMJ;AAAAA,cAAoBzjB,iBAAiB;AAAA,cAAMtT,SAAS;AAAA,cAAOonE,SAAS;AAAA,gBAACt2D,QAAQ;AAAA,kBAACrrB,MAAMygF;AAAAA,gBAAP;AAAA,cAAT;AAAA,YAAhF;AAAA,UANL;AAAA,UAQHuC,QAAQ;AAAA,YAAC33D,QAAQ;AAAA,cAACrrB,MAAMijF;AAAAA,YAAhB;AAAA,YAAuC1oE,SAAS;AAAA,UAAhD;AAAA,QARL;AAAA,MAUV;AAAA;;IA1BgCghC;MAgN/B0nC;;;AAEF,aAAAA,sBAAY5hE,KAAK;AAAA,UAAA;AAAA,sBAAA,MAAA4hE,qBAAA;AACb,eAAA,QAAA,KAAA,MAAM5hE,GAAN;AAEK6hE,aAAAA,KAAK;AACLC,aAAAA,sBAAsB;AAJd,aAAA;AAAA,IAKhB;;;WAED,SAAQ,MAAA;AACJ,eAAO,KAAKD;AAAAA;MAGhB,KAAA,SAAA1uE,KAAMjY,GAAG;AACA2mF,aAAAA,KAAK3mF;AACV,aAAKgkF,OAAL;AAAA,MACH;AAAA;;MAED,KAAA,SAAA/rE,KAAuBjY,GAAG;AACjB4mF,aAAAA,sBAAsB5mF;AAC3B,aAAKgkF,OAAL;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,cAAcp8B,WAAW;AACrB,aAAA,gBAAA8+B,sBAAA,SAAA,GAAA,iBAAA,IAAA,EAAA,KAAA,MAAoB9+B,SAApB;AACKiG,aAAAA,YAAY,KAAK,KAAK84B,IAAI,KAAK3gD,GAAG6gD,SAAvC;AACKh5B,aAAAA,YAAY,aAAa,GAAG,KAAK7nB,GAAGi+C,SAAzC;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,WAAWr8B,WAAW;AACdmG,YAAAA,YAAY,KAAK64B,sBAAsB,KAAKA,oBAAoB9gE,gBAAgB;AAEhFkgB,YAAAA,KAAK,KAAKA;AACdA,WAAGq+B,cAAcr+B,GAAG8gD,QAApB;AACA9gD,WAAGgoB,YAAYhoB,GAAGioB,YAAYF,SAA9B;AACA/nB,WAAGq+B,cAAcr+B,GAAGu8B,QAApB;AAAA,MACH;AAAA;;IApC8BjV;AAuCnCo5B,uBAAqBv8B,uBAArB;MCnZqB48B;;;AAmCjB,aAAAA,gBAAY7mE,OAAO;AAAA,UAAA;AAAA,sBAAA,MAAA6mE,eAAA;AACf,cAAA,OAAA,KAAA,MAAM7mE,KAAN;AACA,YAAK0kE,YAAY,MAAKC,IAAI,UAAT;AACjB,YAAKxE,WAAW,MAAKwE,IAAI,kBAAT;AAChB,YAAKU,UAAU,MAAKV,IAAI,QAAT;AAEVT,YAAAA,UAAU;AACVE,YAAAA,YAAY;AACZC,YAAAA,YAAY;AARF,aAAA;AAAA,IASlB;;;WAbD,SAAmB,MAAA;AACf,eAAO;AAAA,MACV;AAAA;;aAaD,SAAS,SAAA;AAAA,YAAA,SAAA;AACCkB,YAAAA,uBAAuB,CAAC;AAAA,UAAC57E,GAAE;AAAA,UAAEC,GAAE;AAAA,UAAEk7E,cAAa;AAAA,QAAtB,GAAyB;AAAA,UAACn7E,GAAE;AAAA,UAAEC,GAAE;AAAA,UAAEk7E,cAAa;AAAA,QAAtB,GAAyB;AAAA,UAACn7E,GAAE;AAAA,UAAIC,GAAE;AAAA,UAAEk7E,cAAa;AAAA,QAAxB,GAA2B;AAAA,UAACn7E,GAAE;AAAA,UAAEC,GAAE;AAAA,UAAIk7E,cAAa;AAAA,QAAxB,CAA9E;AACvBU,YAAAA,gBAAgBD,qBAAqBnwD,IAAI,SAAAlzB,GAAK;AAAA,yBAAA,MAAA,MAAA;AAC1C0sB,cAAAA,SAAS,KAAK5O,MAAMmW,aAAahzB,OAAOqjC,OAAO;AAAA,YAACjjC,MAAMogF;AAAAA,UAAP,GAA0BzhF,CAAxC,CAAxB;AACf,iBAAO0sB;AAAAA,QACV,EAHD,KAAA,IAAA,CAAA;AAKA,aAAK62D,iBAAiB,KAAKC,iBAAiB,CAAtB,GAA0B,KAAKhB,UAAUzgC,cAAc,CAAA,CAA7E;AACKwhC,aAAAA,iBAAiB,KAAKC,iBAAiB,CAAtB,GAA0B,KAAKC,SAAS,CAAd,EAAiB1hC,WAAjB,GAA+B,CAACuhC,cAAc,CAAD,GAAKA,cAAc,CAAD,CAAhC,CAA/E;AAGA,aAAKC,iBAAiB,KAAKC,iBAAiB,CAAtB,GAA0B,KAAKC,SAAS,CAAd,EAAiB1hC,WAAjE,GAA+E,CAACuhC,cAAc,CAAD,GAAKA,cAAc,CAAD,GAAKA,cAAc,CAAD,GAAKA,cAAc,CAAD,CAApE,CAA/E;AACA,aAAKC,iBAAiB,KAAKC,iBAAiB,CAAtB,GAA0B,KAAKC,SAAS,CAAd,EAAiB1hC,WAAjE,GAA+E,CAACuhC,cAAc,CAAD,GAAKA,cAAc,CAAD,GAAKA,cAAc,CAAD,GAAKA,cAAc,CAAD,CAApE,CAA/E;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,iBAAiBlkE,SAASF,SAASwkE,OAAO;AACtC,YAAI,CAACA,MAAM/kF,QAAQ;AACfygB,kBAAQF,UAAUA;AAAAA,QACrB,OAAM;AACH,cAAMykE,OAAOD,MAAMtkD;AACnB,cAAM/kB,QAAQ+E,QAAQtB,MAAMtf,EAAE;AAAA,YAACu0C,KAAK;AAAA,YAAMrmB,QAAQi3D;AAAAA,UAApB,CAAhB;AAGd,eAAKJ,iBAAiBlpE,OAAO6E,SAASwkE,KAAtC;AAEAtkE,kBAAQ0pB,UAAUjqB,IAAIxE,KAAtB;AAAA,QACH;AACD,eAAO+E;AAAAA,MACV;AAAA;;WAED,SAAc,MAAA;AACV,eAAO,KAAKqjE,IAAI,kBAAT;AAAA;MAGX,KAAA,SAAA5sE,KAAYjY,GAAG;AACX,aAAK6kF,IAAI,kBAAT,EAA6B5oE,MAAMjc,CAAnC;AAAA,MACH;AAAA;;MAED,KAAA,SAAAiY,KAAYjY,GAAG;AACNskF,aAAAA,YAAYtkF;AACZukF,aAAAA,YAAYvkF;AACjB,aAAKwkF,gBAAL;AAAA,MACH;AAAA;;MAED,KAAA,SAAAvsE,KAAajY,GAAG;AACPskF,aAAAA,YAAYtkF;AACjB,aAAKwkF,gBAAL;AAAA,MACH;AAAA;;MAED,KAAA,SAAAvsE,KAAajY,GAAG;AACPukF,aAAAA,YAAYvkF;AACjB,aAAKwkF,gBAAL;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,SAASxjF,GAAG;AACR,eAAO,KAAKukF,QAAQV,IAAI,MAAM7jF,CAAvB;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,iBAAiBA,GAAG;AACT,eAAA,KAAK6kF,SAAS7kF,CAAd,EAAiB6jF,IAAI,SAArB;AAAA,MACV;AAAA;;aAED,SAAY,YAAA;AACR,aAAKL,gBAAL;AAAA,MACH;AAAA;;aAED,SAAkB,kBAAA;AACVr7E,YAAAA,IAAI,KAAKm7C;AACTl7C,YAAAA,IAAI,KAAKm7C;AAETugC,YAAAA,WAAW,KAAKR;AAChBS,YAAAA,WAAW,KAAKR;AAEpB,YAAIyB,KAAK78E,IAAI27E,WAAW;AACxB,YAAImB,KAAK78E,IAAI27E,WAAW;AACxB,aAAKH,UAAUz7E,IAAI68E;AACnB,aAAK3F,SAASx2E,IAAIi7E;AAClB,aAAKe,SAAS,CAAd,EAAiB18E,IAAI,KAAKy8E,iBAAiB,CAAtB,EAAyBz8E,IAAI68E,KAAK;AACvD,aAAKH,SAAS,CAAd,EAAiB18E,IAAI,KAAKy8E,iBAAiB,CAAtB,EAAyBz8E,IAAI68E,KAAK;AACvD,aAAKH,SAAS,CAAd,EAAiB18E,IAAI,KAAKy8E,iBAAiB,CAAtB,EAAyBz8E,IAAI68E,KAAK;AACvD,aAAKH,SAAS,CAAd,EAAiB18E,IAAI,KAAKy8E,iBAAiB,CAAtB,EAAyBz8E,IAAI68E,KAAK;AACvD,aAAKpB,UAAU/6E,IAAI,CAACi7E;AAEpB,aAAKF,UAAUx7E,IAAI68E;AACnB,aAAK5F,SAASv2E,IAAIi7E;AAClB,aAAKc,SAAS,CAAd,EAAiBz8E,IAAI,KAAKw8E,iBAAiB,CAAtB,EAAyBx8E,IAAI68E,KAAK;AACvD,aAAKJ,SAAS,CAAd,EAAiBz8E,IAAI,KAAKw8E,iBAAiB,CAAtB,EAAyBx8E,IAAI68E,KAAK;AACvD,aAAKJ,SAAS,CAAd,EAAiBz8E,IAAI,KAAKw8E,iBAAiB,CAAtB,EAAyBx8E,IAAI68E,KAAK;AACvD,aAAKJ,SAAS,CAAd,EAAiBz8E,IAAI,KAAKw8E,iBAAiB,CAAtB,EAAyBx8E,IAAI68E,KAAK;AACvD,aAAKrB,UAAU96E,IAAI,CAACi7E;AAEf57E,aAAAA,IAAIA;AACJC,aAAAA,IAAIA;AAAAA,MACZ;AAAA;;WAYD,SAAa,MAAA;AACT,eAAO,KAAKg7E;AAAAA;MANhB,KAAA,SAAAnsE,KAAWjY,GAAG;AACLokF,aAAAA,UAAUpkF;AACf,aAAK0tE,QAAL;AAAA,MACH;AAAA;;aAMD,SAAU,UAAA;AACN,YAAI1tE,IAAIN,KAAKK,IAAI,GAAGL,KAAKI,IAAI,GAAG,KAAKskF,OAAjB,CAAZ;AACJpkF,YAAAA,IAAI,GAAG;AACF6lF,eAAAA,SAAS,CAAd,EAAiB7nE,UAAWhe,IAAI;AAC3B6lF,eAAAA,SAAS,CAAd,EAAiB7nE,UAAWhe,IAAI;AAC3B6lF,eAAAA,SAAS,CAAd,EAAiB7nE,UAAWhe,IAAI;AAC3B6lF,eAAAA,SAAS,CAAd,EAAiB7nE,UAAWhe,IAAI;AAAA,QACnC;AAAA,MACJ;AAAA;;MAED,KAAA,SAAAiY,KAAW7V,GAAG;AACV,aAAA,gBAAA2kF,gBAAA,SAAA,GAAA,UAAe3kF,GAAf,MAAA,IAAA;AACI,YAAA,CAAC,KAAK6xC,iBAAiB;AACvBxxC,kBAAQC,KAAK,iEAAb;AAAA,QACH;AAAA,MACJ;AAAA;;aAED,SAAe,eAAA;AACX,aAAK+8C,OAAL;AAAA,MACH;AAAA;;aA5KD,SAAmB,YAAA;AACT1K,YAAAA,WAAW,SAAXA,UAAoBvzB,SAASmD,aAAa;AAC5C,cAAKA,YAAYtP,UAAW,IAAI,KAAO;AACnC,gBAAMlM,IAAIwb,YAAYxb;AACtB,gBAAMC,IAAIub,YAAYvb;AAClBwxC,gBAAAA,MAAMj2B;AACP,eAAA;AACCi2B,oBAAMA,IAAIp+B,UAAU,CAAd;AACNo+B,kBAAIh2B,SAASzb,IAAIA;AACjByxC,kBAAIh2B,SAASxb,IAAIA;AAAAA,YACpB,SAAOwxC,IAAIp+B;AAAAA,UACf;AAAA,QACJ;AAEM,eAAA;AAAA,UACH0oE,UAAU;AAAA,YAAC/vC,KAAK;AAAA,YAAMrB,oBAAoB;AAAA,YAAMxiB,iBAAiB;AAAA,YAC7D01D,WAAW;AAAA,cAACl4D,QAAQ;AAAA,gBAACrrB,MAAMwjF;AAAAA,cAAhB;AAAA,cACP7B,SAAS,CAAA;AAAA,YADF;AAAA,UAFZ;AAAA,UAMHgB,QAAQ;AAAA,YACJC,IAAI;AAAA,cAAClxC,KAAK;AAAA,cAAMJ;AAAAA,cAAoB9b,OAAO;AAAA,cAAGoa,OAAO;AAAA,cAAGr1B,SAAS;AAAA,cAAOonE,SAAS;AAAA,gBAACt2D,QAAQ;AAAA,kBAACrrB,MAAMygF;AAAAA,gBAAP;AAAA,cAAT;AAAA,YAD7E;AAAA,YAEJoC,IAAI;AAAA,cAACnxC,KAAK;AAAA,cAAMJ;AAAAA,cAAoB9b,OAAO;AAAA,cAAGoa,OAAO;AAAA,cAAGr1B,SAAS;AAAA,cAAOonE,SAAS;AAAA,gBAACt2D,QAAQ;AAAA,kBAACrrB,MAAMygF;AAAAA,gBAAP;AAAA,cAAT;AAAA,YAF7E;AAAA,YAGJqC,IAAI;AAAA,cAACpxC,KAAK;AAAA,cAAMJ;AAAAA,cAAoB9b,OAAO;AAAA,cAAGoa,OAAO;AAAA,cAAGr1B,SAAS;AAAA,cAAOonE,SAAS;AAAA,gBAACt2D,QAAQ;AAAA,kBAACrrB,MAAMygF;AAAAA,gBAAP;AAAA,cAAT;AAAA,YAH7E;AAAA,YAIJsC,IAAI;AAAA,cAACrxC,KAAK;AAAA,cAAMJ;AAAAA,cAAoB9b,OAAO;AAAA,cAAIoa,OAAO;AAAA,cAAGr1B,SAAS;AAAA,cAAOonE,SAAS;AAAA,gBAACt2D,QAAQ;AAAA,kBAACrrB,MAAMygF;AAAAA,gBAAP;AAAA,cAAT;AAAA,YAA9E;AAAA,UAJA;AAAA,QANL;AAAA,MAaV;AAAA;;IA7BuCllC;MAkLtCioC;;;;;;;;IAAwB35B;AAG9B25B,kBAAgB98B,uBAAhB;MCxLqB+8B;;;AAWjB,aAAAA,sBAAYhnE,OAAO;AAAA,UAAA;AAAA,sBAAA,MAAAgnE,qBAAA;AACf,cAAA,OAAA,KAAA,MAAMhnE,KAAN;AAEKinE,YAAAA,eAAe;AACfC,YAAAA,cAAc;AAJJ,aAAA;AAAA,IAKlB;;;WAED,SAAc,MAAA;AACV,eAAO,KAAKz2C,IAAI,SAAT;AAAA;MAGX,KAAA,SAAA14B,KAAYjY,GAAG;AACN2wC,aAAAA,IAAI,SAAT,EAAoB10B,MAAMjc,GAAG,IAA7B;AAAA,MACH;AAAA;;WAED,SAAkB,MAAA;AACd,eAAO,KAAKmnF;AAAAA;MAGhB,KAAA,SAAAlvE,KAAgBjY,GAAG;AACf,YAAI,KAAKmnF,iBAAiBnnF,GAAG;AACrBqnF,cAAAA,MAAM;AACV,iBAAMrnF,IAAI,OAAOqnF,MAAM,IAAI;AACvBA;AACArnF,gBAAIA,IAAI;AAAA,UACX;AAEIi5B,eAAAA,QAAQj5B;AACRsnF,eAAAA,eAAeD,GAApB;AAEKF,eAAAA,eAAennF;AAAAA,QACvB;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,eAAeqnF,KAAK;AAChB,YAAI,KAAKD,gBAAgBC,KAAK;AAC1B,cAAME,UAAU,KAAK1C,IAAI,OAAT,EAAkB35C;AAClC,cAAMgzC,UAAU,KAAK2G,IAAI,aAAT;AAChB,iBAAO0C,QAAQxmF,SAASsmF,KAAK;AACzB,gBAAMG,QAAQD,QAAQxmF,WAAW;AACjC,gBAAMugB,UAAWkmE,QAAQtJ,QAAQ/5B,WAAX,IAA0BojC,QAAQtX,KAAK9rB;AAC7DojC,oBAAQhoF,EAAE;AAAA,cAAC41C,KAAK;AAAA,cAAM7jB,iBAAiB;AAAA,cAAMhQ;AAAAA,YAAnC,CAAV;AAAA,UACH;AAED4lE,UAAAA,sBAAqBhjE,kBAAkB,KAAKysB,IAAI,aAAT,GAAyB,IAAhE;AAEA,cAAM82C,aAAcJ,MAAM;AAC1B,eAAKprE,MAAM;AAAA,YACPyrE,aAAa;AAAA,cAACzzC,iBAAiBwzC;AAAAA,YADxB;AAAA,YAEPE,OAAO;AAAA,cAAC3pE,SAASypE;AAAAA,YAAV;AAAA,UAFA,CAAX;AAKA,mBAASzmF,IAAI,GAAGF,IAAIymF,QAAQxmF,QAAQC,IAAIF,GAAGE,KAAK;AAC5CumF,oBAAQ9vC,MAAMz2C,CAAd,EAAiBib,MAAM;AAAA,cACnB+B,SAAShd,IAAIqmF;AAAAA,cACb/1D,iBAAiBtwB,MAAMqmF,MAAM;AAAA,YAFV,CAAvB;AAAA,UAIH;AACID,eAAAA,cAAcC;AAAAA,QACtB;AAAA,MACJ;AAAA;;WAoBD,SAAmB,MAAA;AACf,eAAO;AAAA,MACV;AAAA;;aA3FD,SAAmB,YAAA;AACR,eAAA;AAAA,UACHK,aAAa;AAAA,YAACp2D,iBAAiB;AAAA,YAAMwiB,oBAAoB;AAAA,YAAMmB,eAAeiyC,sBAAqBhjE;AAAAA,YAC/FkhE,SAAS,CAAA;AAAA,UAFV;AAAA,UAIHuC,OAAO;AAAA,YAAC3pE,SAAS;AAAA,UAAV;AAAA,QAJJ;AAAA,MAMV;AAAA;;aAgED,SAAyB4pE,kBAAAA,aAAa56D,OAAO;AACzC,YAAMkxD,UAAU0J,YAAYrrE,SAAS,CAArB;AAChB,YAAIpT,IAAI+0E,QAAQ55B;AAChB,YAAIl7C,IAAI80E,QAAQ35B;AAChB,YAAIp7C,MAAMy+E,YAAYz+E,KAAKC,MAAMw+E,YAAYx+E,KAAK4jB,OAAO;AACrD46D,sBAAYz+E,IAAIA;AAChBy+E,sBAAYx+E,IAAIA;AAEVm+E,cAAAA,UAAUK,YAAY9+E,OAAO6nC,IAAI,OAAvB,EAAgCp0B;AAChD,mBAASvb,IAAI,GAAGF,IAAIymF,QAAQxmF,QAAQC,IAAIF,GAAGE,KAAK;AAC5CmI,gBAAIA,IAAI;AACRC,gBAAIA,IAAI;AACRm+E,oBAAQvmF,CAAD,EAAImI,IAAIA;AACfo+E,oBAAQvmF,CAAD,EAAIoI,IAAIA;AAAAA,UAClB;AAAA,QACJ;AAAA,MACJ;AAAA;;IAzF6C41C;MCA7B6oC;;;AAkBjB,aAAAA,iBAAY3nE,OAAO;AAAA,UAAA;AAAA,sBAAA,MAAA2nE,gBAAA;AACf,cAAA,OAAA,KAAA,MAAM3nE,KAAN;AAEA,YAAK4nE,aAAa,MAAKn3C,IAAI,KAAT;AAClB,YAAKo3C,eAAe,MAAKp3C,IAAI,OAAT;AACpB,YAAKq3C,gBAAgB,MAAKr3C,IAAI,QAAT;AACrB,YAAKs3C,cAAc,MAAKt3C,IAAI,MAAT;AAEnB,YAAKsE,gBAAgB,SAAUzzB,SAAS;AACpC,YAAM08D,UAAU18D,QAAQ0pB,UAAUs8C;AAC9Br+E,YAAAA,IAAIqY,QAAQwE,KAAK7c,KAAK+0E,QAAQ55B;AAC9Bl7C,YAAAA,IAAIoY,QAAQwE,KAAK5c,KAAK80E,QAAQ35B;AAClC/iC,gBAAQsmE,WAAW3+E,IAAIA;AACvBqY,gBAAQwmE,cAAcl+E,IAAIV;AAC1BoY,gBAAQwmE,cAAc7+E,IAAIA;AAC1BqY,gBAAQymE,YAAY7+E,IAAIA,IAAIoY,QAAQsmE,WAAW1+E,IAAIoY,QAAQwmE,cAAc5+E;AACzEoY,gBAAQymE,YAAYn+E,IAAI,CAAC0X,QAAQsmE,WAAW1+E;AAC5CoY,gBAAQumE,aAAal+E,IAAIV;AACzBqY,gBAAQumE,aAAa3+E,IAAIA,IAAIoY,QAAQsmE,WAAW1+E,IAAIoY,QAAQwmE,cAAc5+E;AAC1EoY,gBAAQumE,aAAaj+E,IAAI,CAAC0X,QAAQsmE,WAAW1+E;AAAAA,MAChD;AAEI8+E,YAAAA,cAAc;AAtBJ,aAAA;AAAA,IAuBlB;;;WA3BD,SAAmB,MAAA;AACf,eAAO;AAAA,MACV;AAAA;;WA2BD,SAAc,MAAA;AACV,eAAO,KAAKrD,IAAI,SAAT;AAAA;MAGX,KAAA,SAAA5sE,KAAYjY,GAAG;AACN6kF,aAAAA,IAAI,SAAT,EAAoB5oE,MAAMjc,GAAG,IAA7B;AAAA,MACH;AAAA;;WAED,SAAkB,MAAA;AACd,eAAO,KAAKmoF;AAAAA;MAmBhB,KAAA,SAAAlwE,KAAgBjY,GAAG;AACVmoF,aAAAA,iBAAiBnoF;AACjBooF,aAAAA,mBAAmBpoF;AACnBqoF,aAAAA,oBAAoBroF;AACpBsoF,aAAAA,kBAAkBtoF;AAAAA,MAC1B;AAAA;;WArBD,SAAqB,MAAA;AACV,eAAA,KAAK8nF,WAAW1+E;AAAAA;MAsB3B,KAAA,SAAA6O,KAAmBjY,GAAG;AAClB,aAAK8nF,WAAW1+E,IAAIpJ;AACpB,aAAK8nF,WAAW9pE,UAAWhe,IAAI;AAAA,MAClC;AAAA;;WAtBD,SAAuB,MAAA;AACZ,eAAA,KAAK+nF,aAAa5+E;AAAAA;MAuB7B,KAAA,SAAA8O,KAAqBjY,GAAG;AACpB,aAAK+nF,aAAa5+E,IAAInJ;AACtB,aAAK+nF,aAAa/pE,UAAWhe,IAAI;AAAA,MACpC;AAAA;;WAvBD,SAAwB,MAAA;AACb,eAAA,KAAKgoF,cAAc5+E;AAAAA;MAwB9B,KAAA,SAAA6O,KAAsBjY,GAAG;AACrB,aAAKgoF,cAAc5+E,IAAIpJ;AACvB,aAAKgoF,cAAchqE,UAAWhe,IAAI;AAAA,MACrC;AAAA;;WAxBD,SAAsB,MAAA;AACX,eAAA,KAAKioF,YAAY9+E;AAAAA;MAyB5B,KAAA,SAAA8O,KAAoBjY,GAAG;AACnB,aAAKioF,YAAY9+E,IAAInJ;AACrB,aAAKioF,YAAYjqE,UAAWhe,IAAI;AAAA,MACnC;AAAA;;WAED,SAAkB,MAAA;AACd,eAAO,KAAKuoF;AAAAA;MAmBhB,KAAA,SAAAtwE,KAAgBjY,GAAG;AACVuoF,aAAAA,iBAAiBvoF;AACjBwoF,aAAAA,mBAAmBxoF;AACnByoF,aAAAA,oBAAoBzoF;AACpB0oF,aAAAA,kBAAkB1oF;AAAAA,MAC1B;AAAA;;WArBD,SAAqB,MAAA;AACV,eAAA,KAAK8nF,WAAWtoF;AAAAA;MAsB3B,KAAA,SAAAyY,KAAmBjY,GAAG;AAClB,aAAK8nF,WAAWtoF,QAAQQ;AAAAA,MAC3B;AAAA;;WArBD,SAAuB,MAAA;AACZ,eAAA,KAAK+nF,aAAavoF;AAAAA;MAsB7B,KAAA,SAAAyY,KAAqBjY,GAAG;AACpB,aAAK+nF,aAAavoF,QAAQQ;AAAAA,MAC7B;AAAA;;WArBD,SAAwB,MAAA;AACb,eAAA,KAAKgoF,cAAcxoF;AAAAA;MAsB9B,KAAA,SAAAyY,KAAsBjY,GAAG;AACrB,aAAKgoF,cAAcxoF,QAAQQ;AAAAA,MAC9B;AAAA;;WArBD,SAAsB,MAAA;AACX,eAAA,KAAKioF,YAAYzoF;AAAAA;MAsB5B,KAAA,SAAAyY,KAAoBjY,GAAG;AACnB,aAAKioF,YAAYzoF,QAAQQ;AAAAA,MAC5B;AAAA;;WAED,SAAgB,MAAA;AACZ,eAAO,KAAK8nF;AAAAA;MAGhB,KAAA,SAAA7vE,KAAcpS,UAAU;AACpB,aAAK8iF,UAAU1sE,MAAMpW,QAArB;AAAA,MACH;AAAA;;WAED,SAAkB,MAAA;AACd,eAAO,KAAKkiF;AAAAA;MAGhB,KAAA,SAAA9vE,KAAgBpS,UAAU;AACtB,aAAK+iF,YAAY3sE,MAAMpW,QAAvB;AAAA,MACH;AAAA;;WAED,SAAmB,MAAA;AACf,eAAO,KAAKmiF;AAAAA;MAGhB,KAAA,SAAA/vE,KAAiBpS,UAAU;AACvB,aAAKgjF,aAAa5sE,MAAMpW,QAAxB;AAAA,MACH;AAAA;;WAED,SAAiB,MAAA;AACb,eAAO,KAAKoiF;AAAAA;MAGhB,KAAA,SAAAhwE,KAAepS,UAAU;AACrB,aAAKijF,WAAW7sE,MAAMpW,QAAtB;AAAA,MACH;AAAA;;MAED,KAAA,SAAAoS,KAAYpS,UAAU;AACb8iF,aAAAA,YAAY9iF;AACZijF,aAAAA,aAAajjF;AACbgjF,aAAAA,eAAehjF;AACf+iF,aAAAA,cAAc/iF;AAAAA,MACtB;AAAA;;aAhLD,SAAmB,YAAA;AACR,eAAA;AAAA,UACHu/E,SAAS,CADN;AAAA,UAEH2D,SAAS;AAAA,YACLC,KAAK;AAAA,cAAC91B,MAAM;AAAA,cAAMl1C,SAAS;AAAA,cAAOu1B,QAAQ;AAAA,YADrC;AAAA,YAEL01C,OAAO;AAAA,cAAC/1B,MAAM;AAAA,cAAMl1C,SAAS;AAAA,YAFxB;AAAA,YAGLkrE,QAAQ;AAAA,cAACh2B,MAAM;AAAA,cAAMl1C,SAAS;AAAA,YAHzB;AAAA,YAILmrE,MAAM;AAAA,cAACj2B,MAAM;AAAA,cAAMl1C,SAAS;AAAA,cAAOs1B,QAAQ;AAAA,YAArC;AAAA,UAJD;AAAA,QAFN;AAAA,MASV;AAAA;;IAZwC0L;ACC7C,MAAaoqC,uBAAb,yBAAA,qBAAA;AAAA,cAAAA,uBAAA,mBAAA;AAAA,QAAA,SAAA,aAAAA,qBAAA;AAEI,aAAAA,sBAAY1vC,SAAS;AAAA,UAAA;AAAA,sBAAA,MAAA0vC,qBAAA;AACjB,cAAA,OAAA,KAAA,MAAM1vC,OAAN;AACK0qC,YAAAA,UAAU;AAFE,aAAA;AAAA,IAGpB;AALL,iBAAAgF,uBAAA,CAAA;AAAA,MAAA,KAAA;AAAA,MAAA,KAiBI,SAAa,MAAA;AACT,eAAO,KAAKhF;AAAAA,MAlBpB;AAAA,MAYI,KAAA,SAAAnsE,KAAWjY,GAAG;AACLokF,aAAAA,UAAUpkF;AACf,aAAKgkF,OAAL;AAAA,MACH;AAAA,IAfL,GAAA;AAAA,MAAA,KAAA;AAAA,MAAA,OAqBI,SAAa,aAAA;AACF,eAAA,KAAKI,YAAY;AAAA,MAC3B;AAAA,IAvBL,GAAA;AAAA,MAAA,KAAA;AAAA,MAyBI,OAAA,SAAA,cAAcx8B,WAAW;AACrB,aAAA,gBAAAwhC,sBAAA,SAAA,GAAA,iBAAA,IAAA,EAAA,KAAA,MAAoBxhC,SAApB;AACKiG,aAAAA,YAAY,UAAU,KAAKu2B,SAAS,KAAKp+C,GAAG6gD,SAAjD;AAAA,MACH;AAAA,IA5BL,CAAA,GAAA,CAAA;AAAA,MAAA,KAAA;AAAA,MAAA,OAOI,SAAgB,SAAA;AACZ,eAAOwC;AAAAA,MACV;AAAA,IATL,CAAA,CAAA;AAAA,WAAAD;AAAA,EAAA,EAA0CE,eAA1C;AAgCAF,uBAAqBj/B,uBAArB;AAmBA,MAAak/B,qBAAb,yBAAA,mBAAA;AAAA,cAAAA,qBAAA,iBAAA;AAAA,QAAA,UAAA,aAAAA,mBAAA;AAEI,aAAAA,oBAAY3vC,SAAS;AAAA,UAAA;AAAA,sBAAA,MAAA2vC,mBAAA;AACjB,eAAA,QAAA,KAAA,MAAM3vC,OAAN;AACK0qC,aAAAA,UAAU;AAFE,aAAA;AAAA,IAGpB;AALL,iBAAAiF,qBAAA,CAAA;AAAA,MAAA,KAAA;AAAA,MAAA,KAiBI,SAAa,MAAA;AACT,eAAO,KAAKjF;AAAAA,MAlBpB;AAAA,MAYI,KAAA,SAAAnsE,KAAWjY,GAAG;AACLokF,aAAAA,UAAUpkF;AACf,aAAKgkF,OAAL;AAAA,MACH;AAAA,IAfL,GAAA;AAAA,MAAA,KAAA;AAAA,MAAA,OAqBI,SAAa,aAAA;AACF,eAAA,KAAKI,YAAY;AAAA,MAC3B;AAAA,IAvBL,GAAA;AAAA,MAAA,KAAA;AAAA,MAAA,OAyBI,SAAwB,cAAA,MAAA;AAATv7E,YAAAA,cAAAA;AACXA,eAAOic,IAAI4c,SAAS,eAAe,KAAK0iD,UAAU;AAAA,MACrD;AAAA,IA3BL,GAAA;AAAA,MAAA,KAAA;AAAA,MAAA,OA6BI,SAAuB,aAAA,OAAA;AAATv7E,YAAAA,eAAAA;AACVA,eAAOic,IAAI4c,SAAS;AAAA,MACvB;AAAA,IA/BL,CAAA,GAAA,CAAA;AAAA,MAAA,KAAA;AAAA,MAAA,OAOI,SAAkB,WAAA;AACd,eAAO0nD;AAAAA,MACV;AAAA,IATL,CAAA,CAAA;AAAA,WAAAC;AAAA,EAAA,EAAwCE,aAAxC;MChDqBC;;;AAEjB,aAAAA,iBAAY1kE,KAAK;AAAA,UAAA;AAAA,sBAAA,MAAA0kE,gBAAA;AACb,cAAA,OAAA,KAAA,MAAM1kE,GAAN;AAEK2kE,YAAAA,gBAAgB,IAAInJ,aAAax7D,IAAI5E,KAArB;AAEhBwpE,YAAAA,YAAY,IAAE;AAEdC,YAAAA,UAAU;AAPF,aAAA;AAAA,IAQhB;;;MAED,KAAA,SAAA1xE,KAAajY,GAAG;AACP0pF,aAAAA,YAAY1pF;AACjB,aAAKgkF,OAAL;AAAA,MACH;AAAA;;MAED,KAAA,SAAA/rE,KAAWjY,GAAG;AACL2pF,aAAAA,UAAU3pF;AACf,aAAKgkF,OAAL;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,wBAAwBp8B,WAAW;AAE1B6hC,aAAAA,cAAc9nE;AAEnB,YAAInT,SAASo5C,UAAUjD,6BAA6B;AACpD,YAAIhB,SAASiE,UAAU1D,MAAMP;AAE7B,YAAI5iD,SAAS6mD,UAAU7mD;AAElB,iBAAIC,IAAI,GAAGA,IAAID,QAAQC,KAAK;AAG7B,cAAI2sB,MAAMi6B,UAAUgiC,gBAAgB5oF,CAA1B,IAA+B,KAAKyoF,cAAc7vD;AAC5D,cAAIhM,MAAMg6B,UAAUiiC,iBAAiB7oF,CAA3B,IAAgC,KAAKyoF,cAAc5vD;AAEzDpM,cAAAA,MAAM;AACNC,cAAAA,MAAM;AACN,cAAA,KAAKi8D,SAAS;AACdl8D,kBAAM/tB,KAAK8gF;AACX9yD,kBAAMhuB,KAAK8gF;AAEX7yD,mBAAOF;AACPG,mBAAOF;AAEP,gBAAIhuB,KAAK8gF,OAAL,IAAgB,KAAK;AAEf3/E,kBAAAA,IAAI4sB;AACVA,oBAAME;AACNA,oBAAM9sB;AAAAA,YACT;AAED,gBAAInB,KAAK8gF,OAAL,IAAgB,KAAK;AAEf3/E,kBAAAA,KAAI6sB;AACVA,oBAAME;AACNA,oBAAM/sB;AAAAA,YACT;AAAA,UACJ;AAGD8iD,iBAAOn1C,MAAD,IAAWif;AACjBk2B,iBAAOn1C,SAAS,CAAV,IAAekf;AAErBi2B,iBAAOn1C,SAAS,CAAV,IAAemf;AACrBg2B,iBAAOn1C,SAAS,CAAV,IAAekf;AAErBi2B,iBAAOn1C,SAAS,CAAV,IAAemf;AACrBg2B,iBAAOn1C,SAAS,CAAV,IAAeof;AAErB+1B,iBAAOn1C,SAAS,CAAV,IAAeif;AACrBk2B,iBAAOn1C,SAAS,CAAV,IAAeof;AAErBpf,oBAAU;AAAA,QACb;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,WAAWo5C,WAAW;AACd5hB,YAAAA,KAAK,KAAKA;AACdA,WAAGunB,oBAAoB,KAAKC,QAAQ,oBAAb,GAAoC,GAAGxnB,GAAGynB,OAAO,OAAO,GAAG,KAAKq8B,6BAA6BliC,SAAlC,CAAlF;AAEA,YAAImG,YAAY,KAAK07B,cAAclnE,OAAOuD;AAC1CkgB,WAAGq+B,cAAcr+B,GAAG8gD,QAApB;AACA9gD,WAAGgoB,YAAYhoB,GAAGioB,YAAYF,SAA9B;AACA/nB,WAAGq+B,cAAcr+B,GAAGu8B,QAApB;AAAA,MACH;AAAA;;aAED,SAA+B,+BAAA;AAC3B,eAAO;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,cAAc3a,WAAW;AACrB,aAAA,gBAAA4hC,iBAAA,SAAA,GAAA,iBAAA,IAAA,EAAA,KAAA,MAAoB5hC,SAApB;AACKiG,aAAAA,YAAY,iBAAiB,GAAG,KAAK7nB,GAAGi+C,SAA7C;AACKp2B,aAAAA,YAAY,YAAY,IAAI,KAAK67B,WAAW,KAAK1jD,GAAG6gD,SAAzD;AAAA,MACH;AAAA;;aAED,SAAgB,gBAAA;AACZ,aAAA,gBAAA2C,iBAAA,SAAA,GAAA,iBAAA,IAAA,EAAA,KAAA,IAAA;AACIxjD,YAAAA,KAAK,KAAKA;AACdA,WAAG0nB,wBAAwB,KAAKF,QAAQ,oBAAb,CAA3B;AAAA,MACH;AAAA;;aAED,SAAiB,iBAAA;AACb,aAAA,gBAAAg8B,iBAAA,SAAA,GAAA,kBAAA,IAAA,EAAA,KAAA,IAAA;AACIxjD,YAAAA,KAAK,KAAKA;AACdA,WAAG4nB,yBAAyB,KAAKJ,QAAQ,oBAAb,CAA5B;AAAA,MACH;AAAA;;aAED,SAAa,aAAA;AACF,eAAA,KAAKk8B,cAAc;AAAA,MAC7B;AAAA;;MAED,OAAA,SAAA,UAAU9hC,WAAW;AACb,YAAA,KAAK+hC,SAAS;AACd,eAAK3F,OAAL;AAAA,QACH;AAAA,MACJ;AAAA;;IAtHwC12B;AA0H7Ck8B,kBAAgBt/B,qBAAhB;AAyBAs/B,kBAAgBr/B,uBAAhB;MCtJqB4/B;;;AAEjB,aAAAA,oBAAYjlE,KAAK;AAAA,UAAA;AAAA,sBAAA,MAAAilE,mBAAA;AACb,cAAA,OAAA,KAAA,MAAMjlE,GAAN;AAEKklE,YAAAA,cAAc;AAEdC,YAAAA,iBAAiB;AAEjBC,YAAAA,mBAAmB;AAGnBC,YAAAA,UAAU;AAEV/F,YAAAA,UAAU;AAEVgG,YAAAA,eAAe;AAEfC,YAAAA,WAAW;AAEX/lD,YAAAA,WAAW;AAEXgmD,YAAAA,UAAU;AApBF,aAAA;AAAA,IAqBhB;;;WAED,SAAkB,MAAA;AACd,eAAO,KAAKF;AAAAA;MAGhB,KAAA,SAAAnyE,KAAgBjY,GAAG;AACVoqF,aAAAA,eAAepqF;AACpB,aAAKgkF,OAAL;AAAA,MACH;AAAA;;WAED,SAAc,MAAA;AACV,eAAO,KAAKqG;AAAAA;MAGhB,KAAA,SAAApyE,KAAYjY,GAAG;AACNqqF,aAAAA,WAAWrqF;AAChB,aAAKgkF,OAAL;AAAA,MACH;AAAA;;WAED,SAAc,MAAA;AACV,eAAO,KAAK1/C;AAAAA;MAGhB,KAAA,SAAArsB,KAAYjY,GAAG;AACNskC,aAAAA,WAAWtkC;AAChB,aAAKgkF,OAAL;AAAA,MACH;AAAA;;WAOD,SAAa,MAAA;AACT,eAAO,KAAKI;AAAAA;MANhB,KAAA,SAAAnsE,KAAWjY,GAAG;AACLokF,aAAAA,UAAUpkF;AACf,aAAKgkF,OAAL;AAAA,MACH;AAAA;;WAUD,SAAiB,MAAA;AACb,eAAO,KAAKgG;AAAAA;MALhB,KAAA,SAAA/xE,KAAejY,GAAG;AACTgqF,aAAAA,cAAchqF;AAAAA,MACtB;AAAA;;WAUD,SAAoB,MAAA;AAChB,eAAO,KAAKiqF;AAAAA;MALhB,KAAA,SAAAhyE,KAAkBjY,GAAG;AACZiqF,aAAAA,iBAAiBjqF;AAAAA,MACzB;AAAA;;WAqBD,SAAc,MAAA;AACV,eAAO,KAAKuqF;AAAAA;MAhBhB,KAAA,SAAAtyE,KAAYjY,GAAG;AACPA,YAAAA,IAAI,KAAK;AACTyC,kBAAQC,KAAK,0DAAb;AACA1C,cAAI;AAAA,QACP;AAGIuqF,aAAAA,WAAWvqF;AAGXwqF,aAAAA,UAAU,IAAI7qB,WAAW,KAAK8qB,WAAWzqF,CAAhB,CAAf;AAEf,aAAKgkF,OAAL;AAAA,MACH;AAAA;;MAMD,OAAA,SAAA,WAAWljF,GAAG;AACJd,YAAAA,IAAI,CAAA;AACL,iBAAIgB,IAAI,GAAGA,IAAIF,GAAGE,KAAK;AACxBhB,YAAE2E,KAAK,KAAKqlF,WAAZ;AAAA,QACH;AACD,eAAOhqF;AAAAA,MACV;AAAA;;MAOD,OAAA,SAAA,SAAS6iC,GAAG;AACR,aAAKsnD,WAAWtnD,IAAI,KAAK0nD;AACnBG,YAAAA,OAAOhrF,KAAKC,MAAM,KAAKwqF,OAAhB;AACRA,aAAAA,WAAWO;AACXC,aAAAA,cAAcD,IAAnB;AACA,aAAK1G,OAAL;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,cAAcljF,GAAG;AACb,iBAASE,IAAI,KAAKupF,WAAW,GAAGvpF,KAAK,GAAGA,KAAK;AACzC,cAAMoiE,cAAcpiE,IAAIF;AACpBsiE,cAAAA,cAAc,GAAG;AACZ8mB,iBAAAA,mBAAmBxqF,KAAKK,IAAI,KAAKmqF,mBAAmB,KAAKD,gBAAgBvqF,KAAKI,IAAI,KAAKoqF,mBAAmB,KAAKD,gBAAgB,KAAKD,WAA3D,CAAtD;AACxB,iBAAKQ,QAAQxpF,CAAb,IAAkB,MAAM,KAAKkpF;AAAAA,UAChC,OAAM;AACEM,iBAAAA,QAAQxpF,CAAb,IAAkB,KAAKwpF,QAAQpnB,WAAb;AAAA,UACrB;AAAA,QACJ;AAAA,MACJ;AAAA;;MAED,KAAA,SAAAnrD,KAAWjY,GAAG;AACLmqF,aAAAA,UAAUnqF;AACf,aAAKgkF,OAAL;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,cAAcp8B,WAAW;AACrB,aAAA,gBAAAmiC,oBAAA,SAAA,GAAA,iBAAA,IAAA,EAAA,KAAA,MAAoBniC,SAApB;AACKiG,aAAAA,YAAY,eAAe,KAAKu8B,cAAc,KAAKpkD,GAAG6gD,SAA3D;AACKh5B,aAAAA,YAAY,WAAW,KAAKw8B,UAAU,KAAKrkD,GAAG6gD,SAAnD;AACKh5B,aAAAA,YAAY,WAAW,KAAKvpB,UAAU,KAAK0B,GAAG6gD,SAAnD;AACKh5B,aAAAA,YAAY,UAAU,KAAKu2B,SAAS,KAAKp+C,GAAG6gD,SAAjD;AACKh5B,aAAAA,YAAY,UAAU,KAAKs8B,SAAS,KAAKnkD,GAAG6gD,SAAjD;AACKh5B,aAAAA,YAAY,WAAW,KAAK08B,UAAU,KAAKvkD,GAAG6gD,SAAnD;AACKh5B,aAAAA,YAAY,iBAAiB,GAAG,KAAK7nB,GAAGi+C,SAA7C;AAAA,MACH;AAAA;;aAED,SAAa,aAAA;AACF,eAAA,KAAKG,YAAY;AAAA,MAC3B;AAAA;;MAED,OAAA,SAAA,WAAWx8B,WAAW;AACZ5hB,YAAAA,KAAK,KAAKA;AAChBA,WAAGq+B,cAAcr+B,GAAG8gD,QAApB;AACI,YAAA,CAAC,KAAK8D,gBAAgB;AACtB,eAAKA,iBAAiB5kD,GAAGupB;AACzBvpB,aAAGgoB,YAAYhoB,GAAGioB,YAAY,KAAK28B,cAAnC;AACA5kD,aAAG0pB,cAAc1pB,GAAGioB,YAAYjoB,GAAGQ,oBAAoBR,GAAG2pB,MAA1D;AACA3pB,aAAG0pB,cAAc1pB,GAAGioB,YAAYjoB,GAAG4pB,oBAAoB5pB,GAAG2pB,MAA1D;AACA3pB,aAAG0pB,cAAc1pB,GAAGioB,YAAYjoB,GAAG6pB,gBAAgB7pB,GAAG8pB,aAAtD;AACA9pB,aAAG0pB,cAAc1pB,GAAGioB,YAAYjoB,GAAG+pB,gBAAgB/pB,GAAG8pB,aAAtD;AACIjtD,cAAAA,QAAM2C,QAAQ;AACdwgC,eAAGirB,YAAYjrB,GAAGmrB,sBAAsB,KAAxC;AAAA,UACH;AACDnrB,aAAGirB,YAAYjrB,GAAGkrB,gCAAgC,KAAlD;AAAA,QACH,OAAM;AACHlrB,aAAGgoB,YAAYhoB,GAAGioB,YAAY,KAAK28B,cAAnC;AAAA,QACH;AAGD5kD,WAAGwpB,WAAWxpB,GAAGioB,YAAY,GAAGjoB,GAAG6kD,OAAO,KAAKN,UAAU,GAAG,GAAGvkD,GAAG6kD,OAAO7kD,GAAG2nB,eAAe,KAAK68B,OAAhG;AACAxkD,WAAGq+B,cAAcr+B,GAAGu8B,QAApB;AAAA,MACH;AAAA;;aAED,SAAU,UAAA;AACF,YAAA,KAAKqoB,gBAAgB;AACrB,eAAK5kD,GAAGuqB,cAAc,KAAKq6B,cAA3B;AAAA,QACH;AAAA,MACJ;AAAA;;IAhL2Ct9B;AAqLhDy8B,qBAAmB7/B,qBAAnB;AA8BA6/B,qBAAmB5/B,uBAAnB;MCpNqB2gC;;;AAEjB,aAAAA,iBAAYpxC,SAAS;AAAA,UAAA;AAAA,sBAAA,MAAAoxC,gBAAA;AACjB,cAAA,OAAA,KAAA,MAAMpxC,OAAN;AACK0qC,YAAAA,UAAU;AAFE,aAAA;AAAA,IAGpB;;;WAOD,SAAa,MAAA;AACT,eAAO,KAAKA;AAAAA;MANhB,KAAA,SAAAnsE,KAAWjY,GAAG;AACLokF,aAAAA,UAAUpkF;AACf,aAAKgkF,OAAL;AAAA,MACH;AAAA;;aAMD,SAAa,aAAA;AACF,eAAA,KAAKI,YAAY;AAAA,MAC3B;AAAA;;MAED,OAAA,SAAA,cAAcx8B,WAAW;AACrB,aAAA,gBAAAkjC,iBAAA,SAAA,GAAA,iBAAA,IAAA,EAAA,KAAA,MAAoBljC,SAApB;AACKiG,aAAAA,YAAY,UAAU,KAAKu2B,SAAS,KAAKp+C,GAAG6gD,SAAjD;AAAA,MACH;AAAA;;IAvBwCv5B;AA2B7Cw9B,kBAAgB3gC,uBAAhB;MC1BqB4gC;;;AAEjB,aAAAA,eAAYjmE,KAAK;AAAA,UAAA;AAAA,sBAAA,MAAAimE,cAAA;AACb,cAAA,OAAA,KAAA,MAAMjmE,GAAN;AACKkmE,YAAAA,SAAS;AACTC,YAAAA,OAAO;AACPC,YAAAA,SAAS,CAAC,GAAE,GAAE,GAAE,CAAP;AAJD,aAAA;AAAA,IAKhB;;;MAED,KAAA,SAAAjzE,KAAUjY,GAAG;AACJgrF,aAAAA,SAAShrF;AACd,aAAKgkF,OAAL;AAAA,MACH;AAAA;;WAED,SAAY,MAAA;AACR,eAAO,KAAKiH;AAAAA;MAGhB,KAAA,SAAAhzE,KAAUjY,GAAG;AACT,YAAI,KAAKirF,SAASjrF,GAAG;AACjB,cAAMq2D,MAAMr3D,WAAWm4E,4BAA4Bn3E,CAAvC;AACZq2D,cAAI,CAAD,IAAMA,IAAI,CAAD,IAAMA,IAAI,CAAD;AACrBA,cAAI,CAAD,IAAMA,IAAI,CAAD,IAAMA,IAAI,CAAD;AACrBA,cAAI,CAAD,IAAMA,IAAI,CAAD,IAAMA,IAAI,CAAD;AAEhB60B,eAAAA,SAAS70B;AAEd,eAAK2tB,OAAL;AAEKiH,eAAAA,OAAOjrF;AAAAA,QACf;AAAA,MACJ;AAAA;;aAED,SAAa,aAAA;AACD,eAAA,KAAKgrF,WAAW,KAAK,KAAKC,KAAK,CAAV,MAAiB;AAAA,MACjD;AAAA;;MAED,OAAA,SAAA,cAAcrjC,WAAW;AACrB,aAAA,gBAAAmjC,eAAA,SAAA,GAAA,iBAAA,IAAA,EAAA,KAAA,MAAoBnjC,SAApB;AACI5hB,YAAAA,KAAK,KAAKA;AACd,aAAK6nB,YAAY,SAAS,IAAIjK,aAAa,KAAKsnC,MAAtB,GAA+BllD,GAAGmlD,UAA5D;AAAA,MACH;AAAA;;aAED,SAAgB,gBAAA;AACZ,aAAA,gBAAAJ,eAAA,SAAA,GAAA,iBAAA,IAAA,EAAA,KAAA,IAAA;AACK/kD,aAAAA,GAAG0nB,wBAAwB,KAAKF,QAAQ,SAAb,CAAhC;AAAA,MACH;AAAA;;aAED,SAAiB,iBAAA;AACb,aAAA,gBAAAu9B,eAAA,SAAA,GAAA,kBAAA,IAAA,EAAA,KAAA,IAAA;AACK/kD,aAAAA,GAAG4nB,yBAAyB,KAAKJ,QAAQ,SAAb,CAAjC;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,wBAAwB5F,WAAW;AAC/B,YAAIp5C,SAASo5C,UAAUjD,6BAA6B;AACpD,YAAIhB,SAASiE,UAAU1D,MAAMP;AAE7B,YAAI5iD,SAAS6mD,UAAU7mD;AAElB,iBAAIC,IAAI,GAAGA,IAAID,QAAQC,KAAK;AAE7B,cAAM2jB,cAAcijC,UAAUxD,eAAepjD,CAAzB;AAGpB,cAAMoqF,MAAM,KAAKJ,SAASrmE,YAAYxb;AACtC,cAAMkiF,KAAKD,OAAO,IAAI,IAAIA;AAC1B,cAAME,MAAM,KAAKN,SAASrmE,YAAYvb;AACtC,cAAMmiF,KAAKD,OAAO,IAAI,IAAIA;AAG1B3nC,iBAAOn1C,MAAD,IAAW,CAAC68E;AAClB1nC,iBAAOn1C,SAAS,CAAV,IAAe,CAAC+8E;AAEtB5nC,iBAAOn1C,SAAS,CAAV,IAAe,IAAI68E;AACzB1nC,iBAAOn1C,SAAS,CAAV,IAAe,CAAC+8E;AAEtB5nC,iBAAOn1C,SAAS,CAAV,IAAe,IAAI68E;AACzB1nC,iBAAOn1C,SAAS,CAAV,IAAe,IAAI+8E;AAEzB5nC,iBAAOn1C,SAAS,CAAV,IAAe,CAAC68E;AACtB1nC,iBAAOn1C,SAAS,CAAV,IAAe,IAAI+8E;AAEzB/8E,oBAAU;AAAA,QACb;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,WAAWo5C,WAAW;AACd5hB,YAAAA,KAAK,KAAKA;AACdA,WAAGunB,oBAAoB,KAAKC,QAAQ,SAAb,GAAyB,GAAGxnB,GAAGynB,OAAO,OAAO,GAAG,KAAKq8B,6BAA6BliC,SAAlC,CAAvE;AAAA,MACH;AAAA;;aAED,SAA+B,+BAAA;AAC3B,eAAO;AAAA,MACV;AAAA;;IA7FsC0F;AAiG3Cy9B,gBAAc7gC,qBAAd;AAyBA6gC,gBAAc5gC,uBAAd;MCxHqBqhC;;;AAEjB,aAAAA,gBAAY1mE,KAAK;AAAA,UAAA;AAAA,sBAAA,MAAA0mE,eAAA;AACb,cAAA,OAAA,KAAA,MAAM1mE,GAAN;AAEK2mE,YAAAA,QAAQ,IAAI7nC,aAAa,CAAC,GAAG,CAAJ,CAAjB;AAHA,aAAA;AAAA,IAIhB;;;WAED,SAAQ,MAAA;AACJ,eAAO,KAAK6nC,MAAM,CAAX;AAAA;MAGX,KAAA,SAAAxzE,KAAMjY,GAAG;AACL,aAAKyrF,MAAM,CAAX,IAAgBzrF;AAChB,aAAKgkF,OAAL;AAAA,MACH;AAAA;;WAED,SAAQ,MAAA;AACJ,eAAO,KAAKyH,MAAM,CAAX;AAAA;MAGX,KAAA,SAAAxzE,KAAMjY,GAAG;AACL,aAAKyrF,MAAM,CAAX,IAAgBzrF;AAChB,aAAKgkF,OAAL;AAAA,MACH;AAAA;;WAED,SAAW,MAAA;AACP,eAAO,KAAKyH,MAAM,CAAX;AAAA;MAGX,KAAA,SAAAxzE,KAASjY,GAAG;AACR,aAAKyrF,MAAM,CAAX,IAAgBzrF;AAChB,aAAKyrF,MAAM,CAAX,IAAgBzrF;AAChB,aAAKgkF,OAAL;AAAA,MACH;AAAA;;aAED,SAAa,aAAA;AACT,eAAS,KAAKyH,MAAM,CAAX,MAAkB,KAAO,KAAKA,MAAM,CAAX,MAAkB;AAAA,MACvD;AAAA;;MAMD,OAAA,SAAA,cAAc7jC,WAAW;AACrB,aAAA,gBAAA4jC,gBAAA,SAAA,GAAA,iBAAA,IAAA,EAAA,KAAA,MAAoB5jC,SAApB;AACI5hB,YAAAA,KAAK,KAAKA;AACd,aAAK6nB,YAAY,QAAQ,IAAIjK,aAAa,KAAK6nC,KAAtB,GAA8BzlD,GAAG8nB,UAA1D;AAAA,MACH;AAAA;;aAED,SAA+B,+BAAA;AAC3B,eAAO;AAAA,MACV;AAAA;;aAED,SAAgB,gBAAA;AACZ,aAAA,gBAAA09B,gBAAA,SAAA,GAAA,iBAAA,IAAA,EAAA,KAAA,IAAA;AACKxlD,aAAAA,GAAG0nB,wBAAwB,KAAKF,QAAQ,aAAb,CAAhC;AAAA,MACH;AAAA;;aAED,SAAiB,iBAAA;AACb,aAAA,gBAAAg+B,gBAAA,SAAA,GAAA,kBAAA,IAAA,EAAA,KAAA,IAAA;AACKxlD,aAAAA,GAAG4nB,yBAAyB,KAAKJ,QAAQ,aAAb,CAAjC;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,wBAAwB5F,WAAW;AAC/B,YAAIp5C,SAASo5C,UAAUjD,6BAA6B;AACpD,YAAIhB,SAASiE,UAAU1D,MAAMP;AAE7B,YAAI5iD,SAAS6mD,UAAU7mD;AAClB,iBAAIC,IAAI,GAAGA,IAAID,QAAQC,KAAK;AAC7B,cAAImI,IAAIy+C,UAAU1D,MAAMM,gBAAgBoD,UAAUjkD,QAAQ3C,CAAlD;AACR,cAAIoI,IAAIw+C,UAAU1D,MAAMO,iBAAiBmD,UAAUjkD,QAAQ3C,CAAnD;AAER2iD,iBAAOn1C,MAAD,IAAWrF;AACjBw6C,iBAAOn1C,SAAS,CAAV,IAAepF;AACrBu6C,iBAAOn1C,SAAS,CAAV,IAAerF;AACrBw6C,iBAAOn1C,SAAS,CAAV,IAAepF;AACrBu6C,iBAAOn1C,SAAS,CAAV,IAAerF;AACrBw6C,iBAAOn1C,SAAS,CAAV,IAAepF;AACrBu6C,iBAAOn1C,SAAS,CAAV,IAAerF;AACrBw6C,iBAAOn1C,SAAS,CAAV,IAAepF;AAErBoF,oBAAU;AAAA,QACb;AAAA,MACJ;AAAA;;MAED,OAAA,SAAA,WAAWo5C,WAAW;AACd5hB,YAAAA,KAAK,KAAKA;AACdA,WAAGunB,oBAAoB,KAAKC,QAAQ,aAAb,GAA6B,GAAGxnB,GAAGynB,OAAO,OAAO,KAAKN,6BAA7E,GAA6G,KAAK28B,6BAA6BliC,SAAlC,CAA7G;AAAA,MACH;AAAA;;aAjDD,SAAsB,eAAA;AAClB,eAAO8jC;AAAAA,MACV;AAAA;;IA1CuCp+B;AA4F5Ck+B,iBAAethC,qBAAf;AAyBAshC,iBAAerhC,uBAAf;MCxHqBwhC;;;AACjB,aAAAA,oBAAYjyC,SAAS;AAAA,UAAA;AAAA,sBAAA,MAAAiyC,mBAAA;AACjB,cAAA,OAAA,KAAA,MAAMjyC,OAAN;AACKkyC,YAAAA,UAAU;AACVC,YAAAA,UAAU;AAHE,aAAA;AAAA,IAIpB;;;WAOD,SAAa,MAAA;AACT,eAAO,KAAKD;AAAAA;MANhB,KAAA,SAAA3zE,KAAWjY,GAAG;AACL4rF,aAAAA,UAAU5rF;AACf,aAAKgkF,OAAL;AAAA,MACH;AAAA;;WAWD,SAAa,MAAA;AACT,eAAO,KAAK6H;AAAAA;MANhB,KAAA,SAAA5zE,KAAWjY,GAAG;AACL6rF,aAAAA,UAAU7rF;AACf,aAAKgkF,OAAL;AAAA,MACH;AAAA;;aAMD,SAAa,aAAA;AACF,eAAA,KAAK4H,YAAY;AAAA,MAC3B;AAAA;;MAED,OAAA,SAAA,cAAchkC,WAAW;AACrB,aAAA,gBAAA+jC,oBAAA,SAAA,GAAA,iBAAA,IAAA,EAAA,KAAA,MAAoB/jC,SAApB;AAEA,aAAKiG,YAAY,UAAU,KAAK,KAAK+9B,UAAU,OAAOhkC,UAAUhuB,eAAhE,GAAkF,KAAKoM,GAAG6gD,SAA1F;AACA,aAAKh5B,YAAY,UAAU,MAAMjG,UAAUhuB,mBAAmB,KAAKiyD,SAAS,KAAK7lD,GAAG6gD,SAApF;AAAA,MACH;AAAA;;IAlC2Cv5B;AAsChDq+B,qBAAmBzhC,qBAAnB;AAwBAyhC,qBAAmBxhC,uBAAnB;MC7DqB2hC;;;AACjB,aAAAA,wBAAYpyC,SAAS;AAAA,UAAA;AAAA,sBAAA,MAAAoyC,uBAAA;AACjB,cAAA,OAAA,KAAA,MAAMpyC,OAAN;AACKqyC,YAAAA,SAAS;AACTH,YAAAA,UAAU,CAAC,GAAG,GAAG,GAAG,CAAV;AACVI,YAAAA,UAAU;AACVC,YAAAA,MAAM;AACX,YAAKC,aAAa,MAAKC,oBAAoB,UAAzB;AAClB,YAAKC,eAAe,MAAKD,oBAAoB,QAAzB;AAPH,aAAA;AAAA,IAQpB;;;MAED,KAAA,SAAAl0E,KAAU9Y,GAAG;AACT,aAAK4sF,SAASrsF,KAAKK,IAAIL,KAAKI,IAAIX,GAAG,CAAZ,GAAgB,CAAzB;AAAA,MACjB;AAAA;;WAuBD,SAAa,MAAA;AACT,eAAO,KAAKysF;AAAAA;MAtBhB,KAAA,SAAA3zE,KAAWjY,GAAG;AACV,YAAGgD,MAAMC,QAAQjD,CAAd,GAAkB;AACjB,cAAGA,EAAEe,WAAW,GAAG;AACV6qF,iBAAAA,UAAU,CAAC5rF,EAAE,CAAD,GAAKA,EAAE,CAAD,GAAKA,EAAE,CAAD,GAAKA,EAAE,CAAD,CAApB;AAAA,UAClB,WACOA,EAAEe,WAAW,GAAG;AACf6qF,iBAAAA,UAAU,CAAC5rF,EAAE,CAAD,GAAKA,EAAE,CAAD,GAAKA,EAAE,CAAD,GAAK,KAAK4rF,QAAQ,CAAb,CAAnB;AAAA,UAClB,WACQ5rF,EAAEe,WAAW,GAAG;AAChB6qF,iBAAAA,UAAU5rF;AAAAA,UAClB,OACI;AACI4rF,iBAAAA,UAAU,CAAC5rF,EAAE,CAAD,GAAKA,EAAE,CAAD,GAAKA,EAAE,CAAD,GAAKA,EAAE,CAAD,CAApB;AAAA,UAClB;AAAA,QACJ,OACI;AACI4rF,eAAAA,UAAU,CAAC5rF,GAAGA,GAAGA,GAAGA,CAAV;AAAA,QAClB;AACD,aAAKgkF,OAAL;AAAA,MACH;AAAA;;WAWD,SAAc,MAAA;AACV,eAAO,KAAK4H,QAAQ,CAAb;AAAA;MANX,KAAA,SAAA3zE,KAAYo0E,KAAK;AACb,aAAKT,QAAQ,CAAb,IAAkBS;AAClB,aAAKrI,OAAL;AAAA,MACH;AAAA;;WAWD,SAAe,MAAA;AACX,eAAO,KAAK4H,QAAQ,CAAb;AAAA;MANX,KAAA,SAAA3zE,KAAao0E,KAAK;AACd,aAAKT,QAAQ,CAAb,IAAkBS;AAClB,aAAKrI,OAAL;AAAA,MACH;AAAA;;WAWD,SAAkB,MAAA;AACd,eAAO,KAAK4H,QAAQ,CAAb;AAAA;MANX,KAAA,SAAA3zE,KAAgBo0E,KAAK;AACjB,aAAKT,QAAQ,CAAb,IAAkBS;AAClB,aAAKrI,OAAL;AAAA,MACH;AAAA;;WAWD,SAAiB,MAAA;AACb,eAAO,KAAK4H,QAAQ,CAAb;AAAA;MANX,KAAA,SAAA3zE,KAAeo0E,KAAK;AAChB,aAAKT,QAAQ,CAAb,IAAkBS;AAClB,aAAKrI,OAAL;AAAA,MACH;AAAA;;WAYD,SAAkB,MAAA;AACd,eAAO,KAAKsI;AAAAA;MAPhB,KAAA,SAAAr0E,KAAgBrY,MAAM;AACb0sF,aAAAA,MAAM1sF;AACX,aAAKwsF,eAAe,KAAKD,oBAAoBvsF,IAAzB;AACpB,aAAKokF,OAAL;AAAA,MACH;AAAA;;WAYD,SAAgB,MAAA;AACZ,eAAO,KAAKiI;AAAAA;MAPhB,KAAA,SAAAh0E,KAAcrY,MAAM;AACXqsF,aAAAA,MAAMrsF;AACX,aAAKssF,aAAa,KAAKC,oBAAoBvsF,IAAzB;AAClB,aAAKokF,OAAL;AAAA,MACH;AAAA;;WAWD,SAAa,MAAA;AACT,eAAO,KAAKgI;AAAAA;MANhB,KAAA,SAAA/zE,KAAWo0E,KAAK;AACPL,aAAAA,UAAUK;AACf,aAAKrI,OAAL;AAAA,MACH;AAAA;;MAMD,OAAA,SAAA,oBAAoBxkF,OAAO;AACvB,YAAM62D,MAAMr3D,WAAWm4E,4BAA4B33E,KAAvC;AACZ62D,YAAI,CAAD,KAAOA,IAAI,CAAD;AACbA,YAAI,CAAD,KAAOA,IAAI,CAAD;AACbA,YAAI,CAAD,KAAOA,IAAI,CAAD;AACb,eAAO,IAAIzS,aAAayS,GAAjB;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,cAAczO,WAAW;AAAA,YAAA,SAAA;AACrB,aAAA,gBAAAkkC,wBAAA,SAAA,GAAA,iBAAA,IAAA,EAAA,KAAA,MAAoBlkC,SAApB;AACA,YAAM0B,QAAQ1B,UAAU5D;AAClBuoC,YAAAA,kBAAkB,KAAKznE,IAAI5E,MAAMqmB,mBAAf;AAClBqlD,YAAAA,UAAU,KAAKA,QAAQt2D,IAAI,SAACl2B,GAAD;AAAA,yBAAA,MAAA,MAAA;AAAA,kBAAQA,IAAI,OAAOmtF;AAAAA,QAAnB,EAAjC,KAAA,IAAA,CAAA;AACA,aAAK1+B,YAAY,UAAU,IAAIjK,aAAagoC,OAAjB,GAA2B,KAAK5lD,GAAGmlD,UAA9D;AACA,aAAKt9B,YAAY,SAASjG,UAAUxD,eAAe,CAAzB,EAA4BooC,cAAcvrF,OAAO,KAAK+kC,GAAG6gD,SAAnF;AACKh5B,aAAAA,YAAY,SAAS,KAAKk+B,QAAQ,KAAK/lD,GAAG6gD,SAA/C;AACKh5B,aAAAA,YAAY,eAAe,KAAKu+B,cAAc,KAAKpmD,GAAGmlD,UAA3D;AACKt9B,aAAAA,YAAY,aAAa,KAAKq+B,YAAY,KAAKlmD,GAAGmlD,UAAvD;AACA,aAAKt9B,YAAY,UAAW,KAAKm+B,UAAUO,iBAAiB,KAAKvmD,GAAG6gD,SAApE;AACKh5B,aAAAA,YAAY,cAAc,IAAIjK,aAAa,CAAC0F,MAAM7rC,KAAK8uE,iBAAiBjjC,MAAM5rC,KAAK6uE,eAAxC,CAAjB,GAA4E,KAAKvmD,GAAG8nB,UAAnH;AAAA,MACH;AAAA;;IA7H+CR;AAgIpDw+B,yBAAuB5hC,qBAAvB;AAwBA4hC,yBAAuB3hC,uBAAvB;MCzJqBsiC;;;AACjB,aAAAA,eAAY/yC,SAAS;AAAA,UAAA;AAAA,sBAAA,MAAA+yC,cAAA;AACjB,cAAA,OAAA,KAAA,MAAM/yC,OAAN;AACKgzC,YAAAA,QAAQ,CAAC,GAAG,GAAG,GAAG,CAAV;AAFI,aAAA;AAAA,IAGpB;;;WAOD,SAAU,MAAA;AACN,eAAO,KAAKA,MAAM,CAAX;AAAA;MANX,KAAA,SAAAz0E,KAAQo0E,KAAK;AACT,aAAKK,MAAM,CAAX,IAAgBL;AAChB,aAAKrI,OAAL;AAAA,MACH;AAAA;;WAWD,SAAY,MAAA;AACR,eAAO,KAAK0I,MAAM,CAAX;AAAA;MANX,KAAA,SAAAz0E,KAAUo0E,KAAK;AACX,aAAKK,MAAM,CAAX,IAAgBL;AAChB,aAAKrI,OAAL;AAAA,MACH;AAAA;;WAWD,SAAa,MAAA;AACT,eAAO,KAAK0I,MAAM,CAAX;AAAA;MANX,KAAA,SAAAz0E,KAAWo0E,KAAK;AACZ,aAAKK,MAAM,CAAX,IAAgBL;AAChB,aAAKrI,OAAL;AAAA,MACH;AAAA;;WAWD,SAAW,MAAA;AACP,eAAO,KAAK0I,MAAM,CAAX;AAAA;MANX,KAAA,SAAAz0E,KAASo0E,KAAK;AACV,aAAKK,MAAM,CAAX,IAAgBL;AAChB,aAAKrI,OAAL;AAAA,MACH;AAAA;;WA2BD,SAAW,MAAA;AACP,eAAO,KAAK0I;AAAAA;MAtBhB,KAAA,SAAAz0E,KAASjY,GAAG;AACR,YAAGgD,MAAMC,QAAQjD,CAAd,GAAkB;AACjB,cAAGA,EAAEe,WAAW,GAAG;AACV2rF,iBAAAA,QAAQ,CAAC1sF,EAAE,CAAD,GAAKA,EAAE,CAAD,GAAKA,EAAE,CAAD,GAAKA,EAAE,CAAD,CAApB;AAAA,UAChB,WACOA,EAAEe,WAAW,GAAG;AACf2rF,iBAAAA,QAAQ,CAAC1sF,EAAE,CAAD,GAAKA,EAAE,CAAD,GAAKA,EAAE,CAAD,GAAK,KAAK0sF,MAAM,CAAX,CAAnB;AAAA,UAChB,WACQ1sF,EAAEe,WAAW,GAAG;AAChB2rF,iBAAAA,QAAQ1sF;AAAAA,UAChB,OACI;AACI0sF,iBAAAA,QAAQ,CAAC1sF,EAAE,CAAD,GAAKA,EAAE,CAAD,GAAKA,EAAE,CAAD,GAAKA,EAAE,CAAD,CAApB;AAAA,UAChB;AAAA,QACJ,OACI;AACI0sF,eAAAA,QAAQ,CAAC1sF,GAAGA,GAAGA,GAAGA,CAAV;AAAA,QAChB;AACD,aAAKgkF,OAAL;AAAA,MACH;AAAA;;MAMD,OAAA,SAAA,cAAcp8B,WAAW;AAAA,YAAA,SAAA;AACrB,aAAA,gBAAA6kC,eAAA,SAAA,GAAA,iBAAA,IAAA,EAAA,KAAA,MAAoB7kC,SAApB;AACA,YAAM0B,QAAQ1B,UAAU5D;AAElBuoC,YAAAA,kBAAkB,KAAKznE,IAAI5E,MAAMqmB,mBAAf;AAClBomD,YAAAA,OAAO,KAAKD,MAAMp3D,IAAI,SAACvc,GAAD;AAAA,yBAAA,MAAA,MAAA;AAAOA,iBAAAA,IAAIwzE;AAAAA,QAAX,EAA5B,KAAA,IAAA,CAAA;AACA,aAAK1+B,YAAY,QAAS,IAAIjK,aAAa+oC,IAAjB,GAAwB,KAAK3mD,GAAGmlD,UAA1D;AACKt9B,aAAAA,YAAY,cAAc,IAAIjK,aAAa,CAAC0F,MAAM7rC,KAAK8uE,iBAAiBjjC,MAAM5rC,KAAK6uE,eAAxC,CAAjB,GAA4E,KAAKvmD,GAAG8nB,UAAnH;AAAA,MACH;AAAA;;IA3EsCR;AA8E3Cm/B,gBAActiC,uBAAd;MC9EqByiC;;;AACjB,aAAAA,gBAAYlzC,SAAS;AAAA,UAAA;AAAA,sBAAA,MAAAkzC,eAAA;AACjB,cAAA,OAAA,KAAA,MAAMlzC,OAAN;AACKmzC,YAAAA,aAAa;AACbC,YAAAA,aAAa;AAClB,YAAKC,SAAS,CAAC,KAAK,GAAN;AAJG,aAAA;AAAA,IAKpB;;;MAED,OAAA,SAAA,cAAcnlC,WAAW;AACrB,aAAA,gBAAAglC,gBAAA,SAAA,GAAA,iBAAA,IAAA,EAAA,KAAA,MAAoBhlC,SAApB;AAEKiG,aAAAA,YAAY,aAAa,KAAKg/B,YAAa,KAAK7mD,GAAG6gD,SAAxD;AACKh5B,aAAAA,YAAY,aAAa,KAAKi/B,YAAY,KAAK9mD,GAAG6gD,SAAvD;AACA,aAAKh5B,YAAY,SAAS,IAAIjK,aAAa,KAAKmpC,MAAtB,GAA+B,KAAK/mD,GAAG8nB,UAAjE;AACA,aAAKk2B,OAAL;AAAA,MACH;AAAA;;MAED,KAAA,SAAA/rE,KAAUjY,GAAG;AACT,YAAGgD,MAAMC,QAAQjD,CAAd,GAAkB;AACZ+sF,eAAAA,SAAS/sF;AAAAA,QACjB,OACI;AACD,eAAK+sF,SAAS,CAAC/sF,GAAGA,CAAJ;AAAA,QACjB;AACD,aAAKgkF,OAAL;AAAA,MACH;AAAA;;WAED,SAAa,MAAA;AACT,eAAO,KAAK+I,OAAO,CAAZ;AAAA;MAGX,KAAA,SAAA90E,KAAWjY,GAAG;AACV,aAAK+sF,OAAO,CAAZ,IAAiB/sF;AACjB,aAAKgkF,OAAL;AAAA,MACH;AAAA;;WAED,SAAa,MAAA;AACT,eAAO,KAAK+I,OAAO,CAAZ;AAAA;MAGX,KAAA,SAAA90E,KAAWjY,GAAG;AACV,aAAK+sF,OAAO,CAAZ,IAAiB/sF;AACjB,aAAKgkF,OAAL;AAAA,MACH;AAAA;;WAED,SAAgB,MAAA;AACZ,eAAO,KAAK8I;AAAAA;MAGhB,KAAA,SAAA70E,KAAcjY,GAAG;AACR8sF,aAAAA,aAAa9sF;AAClB,aAAKgkF,OAAL;AAAA,MACH;AAAA;;WAED,SAAgB,MAAA;AACZ,eAAO,KAAK6I;AAAAA;MAIhB,KAAA,SAAA50E,KAAcjY,GAAG;AACR6sF,aAAAA,aAAa7sF;AAClB,aAAKgkF,OAAL;AAAA,MACH;AAAA;;IA9DuC12B;AAiE5Cs/B,iBAAe1iC,qBAAqBoD,gBAAcpD;AAElD0iC,iBAAeziC,uBAAf;MClEqB6iC;;;AAEjB,aAAAA,eAAYloE,KAAK;AAAA,UAAA;AAAA,sBAAA,MAAAkoE,cAAA;AACb,cAAA,OAAA,KAAA,MAAMloE,GAAN;AACK8mE,YAAAA,UAAU;AACVZ,YAAAA,SAAS;AACTiC,YAAAA,UAAU;AACVC,YAAAA,SAAS;AACTC,YAAAA,UAAU;AACVjC,YAAAA,SAAS;AACTkC,YAAAA,mBAAmB;AACxB,YAAKC,QAAQprE,KAAK6+C;AATL,aAAA;AAAA,IAUhB;;;MAED,KAAA,SAAA7oD,KAAWjY,GAAG;AACL4rF,aAAAA,UAAU5rF;AACf,aAAKgkF,OAAL;AAAA,MACH;AAAA;;MAED,KAAA,SAAA/rE,KAAUjY,GAAG;AACJgrF,aAAAA,SAAShrF;AACd,aAAKgkF,OAAL;AAAA,MACH;AAAA;;MAED,KAAA,SAAA/rE,KAAWjY,GAAG;AACLitF,aAAAA,UAAUjtF;AACf,aAAKgkF,OAAL;AAAA,MACH;AAAA;;MAED,KAAA,SAAA/rE,KAAUjY,GAAG;AACJktF,aAAAA,SAASltF;AACd,aAAKgkF,OAAL;AAAA,MACH;AAAA;;MAED,KAAA,SAAA/rE,KAAWjY,GAAG;AACLmtF,aAAAA,UAAUntF;AACf,aAAKgkF,OAAL;AAAA,MACH;AAAA;;MAED,KAAA,SAAA/rE,KAAUjY,GAAG;AACJkrF,aAAAA,SAASlrF;AACd,aAAKgkF,OAAL;AAAA,MACH;AAAA;;MAED,KAAA,SAAA/rE,KAAoBjY,GAAG;AACdotF,aAAAA,mBAAmBptF;AACxB,aAAKgkF,OAAL;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,cAAcp8B,WAAW;AACrB,aAAA,gBAAAolC,eAAA,SAAA,GAAA,iBAAA,IAAA,EAAA,KAAA,MAAoBplC,SAApB;AACA,YAAM0B,QAAQ1B,UAAU5D;AAExB,aAAK6J,YAAY,SAAS5rC,KAAK6+C,IAAL,IAAa,KAAKusB,OAAO,KAAKrnD,GAAG6gD,SAA3D;AAEM0F,YAAAA,kBAAkB,KAAKznE,IAAI5E,MAAMqmB,mBAAf;AACxB,aAAKsnB,YAAY,UAAU,KAAK+9B,UAAUW,iBAAiB,KAAKvmD,GAAG6gD,SAAnE;AACA,aAAKh5B,YAAY,SAAS,KAAKm9B,SAASuB,iBAAiB,KAAKvmD,GAAG6gD,SAAjE;AACKh5B,aAAAA,YAAY,UAAU,KAAKo/B,SAAS,KAAKjnD,GAAG6gD,SAAjD;AACKh5B,aAAAA,YAAY,SAAS,KAAKq/B,QAAQ,KAAKlnD,GAAG6gD,SAA/C;AACKh5B,aAAAA,YAAY,UAAU,KAAKs/B,SAAS,KAAKnnD,GAAG6gD,SAAjD;AACA,aAAKh5B,YAAY,SAAS,IAAIjK,aAAa5kD,WAAWm4E,4BAA4B,KAAK+T,MAA5C,CAAjB,GAAuE,KAAKllD,GAAGmlD,UAAzG;AACA,aAAKt9B,YAAY,mBAAmB,IAAIjK,aAAa5kD,WAAWm4E,4BAA4B,KAAKiW,gBAA5C,CAAjB,GAAiF,KAAKpnD,GAAGmlD,UAA7H;AACKt9B,aAAAA,YAAY,cAAc,IAAIjK,aAAa,CAAC0F,MAAM7rC,KAAK8uE,iBAAiBjjC,MAAM5rC,KAAK6uE,eAAxC,CAAjB,GAA4E,KAAKvmD,GAAG8nB,UAAnH;AAEA,aAAKk2B,OAAL;AAAA,MACH;AAAA;;IAlEsC12B;AAqE3C0/B,gBAAc9iC,qBAAqBoD,gBAAcpD;AAEjD8iC,gBAAc7iC,uBAAd;MCxEqBmjC;;;AAEjB,aAAAA,YAAY5zC,SAAS;AAAA,UAAA;AAAA,sBAAA,MAAA4zC,WAAA;AACjB,cAAA,OAAA,KAAA,MAAM5zC,OAAN;AACKn8B,YAAAA,KAAK;AACLC,YAAAA,KAAK;AACLC,YAAAA,KAAK;AACLC,YAAAA,KAAK;AACLkuE,YAAAA,UAAU;AANE,aAAA;AAAA,IAOpB;;;WAED,SAAQ,MAAA;AACJ,eAAO,KAAKruE;AAAAA;MAGhB,KAAA,SAAAtF,KAAMjY,GAAG;AACAud,aAAAA,KAAKvd;AACV,aAAKgkF,OAAL;AAAA,MACH;AAAA;;WAED,SAAQ,MAAA;AACJ,eAAO,KAAKxmE;AAAAA;MAGhB,KAAA,SAAAvF,KAAMjY,GAAG;AACAwd,aAAAA,KAAKxd;AACV,aAAKgkF,OAAL;AAAA,MACH;AAAA;;WAED,SAAQ,MAAA;AACJ,eAAO,KAAKvmE;AAAAA;MAGhB,KAAA,SAAAxF,KAAMjY,GAAG;AACAyd,aAAAA,KAAKzd;AACV,aAAKgkF,OAAL;AAAA,MACH;AAAA;;WAED,SAAQ,MAAA;AACJ,eAAO,KAAKtmE;AAAAA;MAGhB,KAAA,SAAAzF,KAAMjY,GAAG;AACA0d,aAAAA,KAAK1d;AACV,aAAKgkF,OAAL;AAAA,MACH;AAAA;;WAED,SAAa,MAAA;AACT,eAAO,KAAK4H;AAAAA;MAGhB,KAAA,SAAA3zE,KAAWjY,GAAG;AACL4rF,aAAAA,UAAU5rF;AACf,aAAKgkF,OAAL;AAAA,MACH;AAAA;;MAED,OAAA,SAAA,cAAcp8B,WAAW;AACrB,aAAA,gBAAA0lC,YAAA,SAAA,GAAA,iBAAA,IAAA,EAAA,KAAA,MAAoB1lC,SAApB;AAEA,YAAM0B,QAAQ1B,UAAU5D;AAClBuoC,YAAAA,kBAAkB,KAAKznE,IAAI5E,MAAMqmB,mBAAf;AAExB,aAAKsnB,YAAY,KAAK,KAAKtwC,KAAKgvE,iBAAiB,KAAKvmD,GAAG6gD,SAAzD;AACA,aAAKh5B,YAAY,KAAK,KAAKrwC,KAAK+uE,iBAAiB,KAAKvmD,GAAG6gD,SAAzD;AACA,aAAKh5B,YAAY,KAAK,KAAKpwC,KAAK8uE,iBAAiB,KAAKvmD,GAAG6gD,SAAzD;AACA,aAAKh5B,YAAY,KAAK,KAAKnwC,KAAK6uE,iBAAiB,KAAKvmD,GAAG6gD,SAAzD;AACA,aAAKh5B,YAAY,WAAY,KAAK+9B,UAAU,OAAMW,iBAAiB,KAAKvmD,GAAG6gD,SAA3E;AACKh5B,aAAAA,YAAY,cAAc,IAAIjK,aAAa,CAAC0F,MAAM7rC,KAAK8uE,iBAAiBjjC,MAAM5rC,KAAK6uE,eAAxC,CAAjB,GAA4E,KAAKvmD,GAAG8nB,UAAnH;AAAA,MACH;AAAA;;aAED,SAAa,aAAA;AACT,eAAQ,KAAKvwC,OAAO,KAAK,KAAKC,OAAO,KAAK,KAAKC,OAAO,KAAK,KAAKC,OAAO;AAAA,MAC1E;AAAA;;IAxEmC4vC;AA2ExCggC,aAAWpjC,qBAAqBoD,gBAAcpD;AAE9CojC,aAAWnjC,uBAAX;MC5EqBojC;;;AACjB,aAAAA,sBAAY7zC,SAAS;AAAA,UAAA;AAAA,sBAAA,MAAA6zC,qBAAA;AACjB,cAAA,OAAA,KAAA,MAAM7zC,OAAN;AACA,YAAKqzC,SAAS,CAAC,GAAG,CAAJ;AACTS,YAAAA,MAAM;AACX,YAAKC,gBAAgB,MAAKtB,oBAAoB,MAAKqB,GAA9B;AAChBE,YAAAA,MAAM;AACX,YAAKC,gBAAgB,MAAKxB,oBAAoB,MAAKuB,GAA9B;AAChB9B,YAAAA,UAAU;AAPE,aAAA;AAAA,IAQpB;;;WAMD,SAAc,MAAA;AACV,eAAO,KAAKA;AAAAA;MALhB,KAAA,SAAA3zE,KAAYjY,GAAG;AACNm+E,aAAAA,SAASn+E;AAAAA,MACjB;AAAA;;WAWD,SAAc,MAAA;AACV,eAAO,KAAK4tF;AAAAA;MANhB,KAAA,SAAA31E,KAAYjY,GAAG;AACN4tF,aAAAA,WAAW5tF;AAChB,aAAKgkF,OAAL;AAAA,MACH;AAAA;;MAMD,KAAA,SAAA/rE,KAAWjY,GAAG;AACL4rF,aAAAA,UAAU5rF;AACf,aAAKgkF,OAAL;AAAA,MACH;AAAA;;WAQD,SAAiB,MAAA;AACb,eAAO,KAAKwJ;AAAAA;MAPhB,KAAA,SAAAv1E,KAAerY,MAAM;AACZ4tF,aAAAA,MAAM5tF;AACX,aAAK6tF,gBAAgB,KAAKtB,oBAAoBvsF,IAAzB;AACrB,aAAKokF,OAAL;AAAA,MACH;AAAA;;WAoBD,SAAiB,MAAA;AACb,eAAO,KAAKwJ;AAAAA;MAfhB,KAAA,SAAAv1E,KAAerY,MAAM;AACZ8tF,aAAAA,MAAM9tF;AACX,aAAK+tF,gBAAgB,KAAKxB,oBAAoBvsF,IAAzB;AACrB,aAAKokF,OAAL;AAAA,MACH;AAAA;;WAMD,SAAY,MAAA;AACR,eAAO,KAAK6J;AAAAA;MALhB,KAAA,SAAA51E,KAAUrY,MAAM;AACPiuF,aAAAA,aAAajuF;AAAAA,MACrB;AAAA;;MAUD,KAAA,SAAAqY,KAAMc,GAAG;AACAwE,aAAAA,KAAKxE;AACV,aAAKirE,OAAL;AAAA,MACH;AAAA;;MAED,KAAA,SAAA/rE,KAAMc,GAAG;AACAyE,aAAAA,KAAKzE;AACV,aAAKirE,OAAL;AAAA,MACH;AAAA;;WAeD,SAAY,MAAA;AACR,eAAO,KAAK+I,OAAO,CAAZ;AAAA;MAdX,KAAA,SAAA90E,KAAUjY,GAAG;AACNgD,YAAAA,MAAMC,QAAQjD,CAAd,KAAoBA,EAAEe,WAAW,GAAG;AAC9BgsF,eAAAA,SAAS/sF;AAAAA,QADlB,WAGQgD,MAAMC,QAAQjD,CAAd,GAAkB;AACtB,eAAK+sF,SAAS,CAAC/sF,EAAE,CAAD,GAAKA,EAAE,CAAD,KAAOA,EAAE,CAAD,CAAhB;AAAA,QACjB,OACI;AACD,eAAK+sF,SAAS,CAAC/sF,GAAGA,CAAJ;AAAA,QACjB;AACD,aAAKgkF,OAAL;AAAA,MACH;AAAA;;WAWD,SAAa,MAAA;AACT,eAAO,KAAK+I,OAAO,CAAZ;AAAA;MANX,KAAA,SAAA90E,KAAWc,GAAG;AACV,aAAKg0E,OAAO,CAAZ,IAAiBh0E;AACjB,aAAKirE,OAAL;AAAA,MACH;AAAA;;WAWD,SAAa,MAAA;AACT,eAAO,KAAK+I,OAAO,CAAZ;AAAA;MANX,KAAA,SAAA90E,KAAWc,GAAG;AACV,aAAKg0E,OAAO,CAAZ,IAAiBh0E;AACjB,aAAKirE,OAAL;AAAA,MACH;AAAA;;MAMD,OAAA,SAAA,oBAAoBxkF,OAAO;AACvB,YAAM62D,MAAMr3D,WAAWm4E,4BAA4B33E,KAAvC;AACZ62D,YAAI,CAAD,KAAOA,IAAI,CAAD;AACbA,YAAI,CAAD,KAAOA,IAAI,CAAD;AACbA,YAAI,CAAD,KAAOA,IAAI,CAAD;AACb,eAAO,IAAIzS,aAAayS,GAAjB;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,cAAczO,WAAW;AACrB,aAAA,gBAAA2lC,sBAAA,SAAA,GAAA,iBAAA,IAAA,EAAA,KAAA,MAAoB3lC,SAApB;AACA,YAAM0B,QAAQ1B,UAAU5D;AAErB,YAAA,KAAKzmC,IAAI;AACHwvE,eAAAA,OAAO,CAAZ,IAAiB,KAAKxvE,KAAK+rC,MAAMngD;AAAAA,QACpC;AACE,YAAA,KAAKqU,IAAI;AACHuvE,eAAAA,OAAO,CAAZ,IAAiB,KAAKvvE,KAAK8rC,MAAMlgD;AAAAA,QACpC;AAED,YAAG,KAAKwiF,YAAY,GAAG;AACnB,eAAKA,UAAUtiC,MAAMngD,IAAI;AAAA,QAC5B;AAEI0kD,aAAAA,YAAY,cAAc,KAAK4/B,eAAe,KAAKznD,GAAGmlD,UAA3D;AACA,aAAKt9B,YAAY,QAAQ7uD,WAAWm4E,4BAA4B,KAAKuW,GAA5C,EAAiD,CAAjD,GAAqD,KAAK1nD,GAAG6gD,SAAtF;AACKh5B,aAAAA,YAAY,cAAc,KAAK8/B,eAAe,KAAK3nD,GAAGmlD,UAA3D;AACA,aAAKt9B,YAAY,SAAS,IAAIjK,aAAa,KAAKmpC,MAAtB,GAAgC,KAAK/mD,GAAG8nB,UAAlE;AACKD,aAAAA,YAAY,cAAc,IAAIjK,aAAa,CAAC0F,MAAM7rC,IAAI6rC,MAAM5rC,EAAjB,CAAjB,GAAyC,KAAKsoB,GAAG8nB,UAAhF;AACA,aAAKD,YAAY,SAASjG,UAAUxD,eAAe,CAAzB,EAA4BooC,cAAcvrF,OAAO,KAAK+kC,GAAG6gD,SAAnF;AACKh5B,aAAAA,YAAY,UAAW,KAAK+9B,SAAS,KAAK5lD,GAAG6gD,SAAlD;AACA,aAAKh5B,YAAY,WAAa,KAAK+/B,YAAY,KAAKhC,SAAU,KAAK5lD,GAAG6gD,SAAtE;AAAA,MACH;AAAA;;IAzI6Cv5B;AA4IlDigC,uBAAqBpjC,uBAArB;MC7IqB2jC;;;AAEjB,aAAAA,eAAYhpE,KAAK;AAAA,UAAA;AAAA,sBAAA,MAAAgpE,cAAA;AACb,cAAA,OAAA,KAAA,MAAMhpE,GAAN;AAEKipE,YAAAA,YAAY;AACZC,YAAAA,WAAW;AACXC,YAAAA,SAAS;AAETC,YAAAA,MAAM;AACNC,YAAAA,MAAM;AAENC,YAAAA,KAAK;AACLxlE,YAAAA,UAAUylE;AACVxlE,YAAAA,UAAUwlE;AACVC,YAAAA,UAAU;AAEVC,YAAAA,UAAU;AACVC,YAAAA,UAAU;AAhBF,aAAA;AAAA,IAiBhB;;;MAED,OAAA,SAAA,cAAc5mC,WAAW;AACrB,aAAA,gBAAAkmC,eAAA,SAAA,GAAA,iBAAA,IAAA,EAAA,KAAA,MAAoBlmC,SAApB;AAEA,YAAI6mC,KAAK7mC,UAAU5D;AACnB,YAAIxiC,UAAUitE,GAAGjtE;AAEjB,YAAI2xB,SAASvwC,MAAM,KAAKgmB,OAAN,IAAiBpH,QAAQ2xB,SAASs7C,GAAGtlF,IAAI,KAAKyf;AAChE,YAAIwqB,SAASxwC,MAAM,KAAKimB,OAAN,IAAiBrH,QAAQ4xB,SAASq7C,GAAGrlF,IAAI,KAAKyf;AAC5Dg8B,YAAAA,SAAS4pC,GAAG3pC,uBAAuB3R,QAAQC,MAAlC;AAIb,YAAIs7C,KAAK,CAAChvF,KAAKivF,MAAMF,GAAG7mE,eAAeqI,IAAIw+D,GAAG7mE,eAAekI,EAAnD;AAENkW,YAAAA,KAAK,KAAKA;AACT6nB,aAAAA,YAAY,SAAS,IAAIjK,aAAa,CAACiB,OAAO,CAAD,GAAKA,OAAO,CAAD,GAAK,KAAKypC,OAA5B,CAAjB,GAAwDtoD,GAAG4oD,UAArF;AACK/gC,aAAAA,YAAY,OAAO,IAAIjK,aAAa,CAAC,KAAKsqC,KAAK,KAAKC,KAAKO,EAArB,CAAjB,GAA4C1oD,GAAG4oD,UAAvE;AAEK/gC,aAAAA,YAAY,KAAK,KAAKugC,IAAIpoD,GAAG6gD,SAAlC;AACKh5B,aAAAA,YAAY,UAAU,KAAKghC,QAAQ7oD,GAAG6gD,SAA3C;AACKh5B,aAAAA,YAAY,UAAU,KAAKihC,QAAQ9oD,GAAG6gD,SAA3C;AACKh5B,aAAAA,YAAY,YAAY,KAAKkgC,WAAW/nD,GAAG6gD,SAAhD;AACKh5B,aAAAA,YAAY,WAAW,KAAKmgC,UAAUhoD,GAAG6gD,SAA9C;AACKh5B,aAAAA,YAAY,SAAS,KAAKogC,QAAQjoD,GAAG6gD,SAA1C;AAAA,MACH;AAAA;;WAOD,SAAe,MAAA;AACX,eAAO,KAAKkH;AAAAA;MANhB,KAAA,SAAA91E,KAAajY,GAAG;AACP+tF,aAAAA,YAAY/tF;AACjB,aAAKgkF,OAAL;AAAA,MACH;AAAA;;WAWD,SAAc,MAAA;AACV,eAAO,KAAKgK;AAAAA;MANhB,KAAA,SAAA/1E,KAAYjY,GAAG;AACNguF,aAAAA,WAAWhuF;AAChB,aAAKgkF,OAAL;AAAA,MACH;AAAA;;WAWD,SAAY,MAAA;AACR,eAAO,KAAKiK;AAAAA;MANhB,KAAA,SAAAh2E,KAAUjY,GAAG;AACJiuF,aAAAA,SAASjuF;AACd,aAAKgkF,OAAL;AAAA,MACH;AAAA;;WAMD,SAAS,MAAA;AACL,eAAO,KAAKkK;AAAAA;MAGhB,KAAA,SAAAj2E,KAAOjY,GAAG;AACDkuF,aAAAA,MAAMluF;AACX,aAAKgkF,OAAL;AAAA,MACH;AAAA;;WAED,SAAS,MAAA;AACL,eAAO,KAAKmK;AAAAA;MAGhB,KAAA,SAAAl2E,KAAOjY,GAAG;AACDmuF,aAAAA,MAAMnuF;AACX,aAAKgkF,OAAL;AAAA,MACH;AAAA;;WAED,SAAQ,MAAA;AACJ,eAAO,KAAKoK;AAAAA;MAGhB,KAAA,SAAAn2E,KAAMjY,GAAG;AACAouF,aAAAA,KAAKpuF;AACV,aAAKgkF,OAAL;AAAA,MACH;AAAA;;WAED,SAAa,MAAA;AACT,eAAO,KAAKp7D;AAAAA;MAGhB,KAAA,SAAA3Q,KAAWjY,GAAG;AACV,aAAK4oB,UAAU5oB,IAAI;AACnB,aAAKgkF,OAAL;AAAA,MACH;AAAA;;WAED,SAAa,MAAA;AACT,eAAO,KAAKn7D;AAAAA;MAGhB,KAAA,SAAA5Q,KAAWjY,GAAG;AACV,aAAK6oB,UAAU7oB,IAAI;AACnB,aAAKgkF,OAAL;AAAA,MACH;AAAA;;WAED,SAAa,MAAA;AACT,eAAO,KAAKuK;AAAAA;MAGhB,KAAA,SAAAt2E,KAAWjY,GAAG;AACLuuF,aAAAA,UAAUvuF;AACf,aAAKgkF,OAAL;AAAA,MACH;AAAA;;WAED,SAAa,MAAA;AACT,eAAO,KAAKsK;AAAAA;MAGhB,KAAA,SAAAr2E,KAAWjY,GAAG;AACLsuF,aAAAA,UAAUtuF;AACf,aAAKgkF,OAAL;AAAA,MACH;AAAA;;WAED,SAAa,MAAA;AACT,eAAO,KAAKwK;AAAAA;MAGhB,KAAA,SAAAv2E,KAAWjY,GAAG;AACLwuF,aAAAA,UAAUxuF;AACf,aAAKgkF,OAAL;AAAA,MACH;AAAA;;aAED,SAAa,aAAA;AACD,eAAA,KAAKkK,QAAQ,KAAK,KAAKC,QAAQ,KAAK,KAAKC,OAAO,KAAK,KAAKL,cAAc,KAAK,KAAKC,aAAa;AAAA,MAC1G;AAAA;;IApJsC1gC;AAwJ3CwgC,gBAAc5jC,qBAAd;AAyEA4jC,gBAAc3jC,uBAAd;MCjOqB4kC;;;AAEjB,aAAAA,mBAAYjqE,KAAK;AAAA,UAAA;AAAA,sBAAA,MAAAiqE,kBAAA;AACb,cAAA,OAAA,KAAA,MAAMjqE,GAAN;AAEKmpE,YAAAA,SAAS;AACTC,YAAAA,MAAM;AACNC,YAAAA,MAAM;AACNC,YAAAA,KAAK;AANG,aAAA;AAAA,IAOhB;;;MAED,OAAA,SAAA,cAAcxmC,WAAW;AACrB,aAAA,gBAAAmnC,mBAAA,SAAA,GAAA,iBAAA,IAAA,EAAA,KAAA,MAAoBnnC,SAApB;AAEA,YAAM6mC,KAAK7mC,UAAU5D;AACrB,YAAMxiC,UAAUitE,GAAGjtE;AAEb2xB,YAAAA,SAAS3xB,QAAQ2xB,SAASs7C,GAAGtlF;AAC7BiqC,YAAAA,SAAS5xB,QAAQ4xB,SAASq7C,GAAGrlF;AAC7By7C,YAAAA,SAAS4pC,GAAG3pC,uBAAuB3R,QAAQC,MAAlC;AAGf,YAAMs7C,KAAK,CAAChvF,KAAKivF,MAAMF,GAAG7mE,eAAeqI,IAAIw+D,GAAG7mE,eAAekI,EAAnD;AAENkW,YAAAA,KAAK,KAAKA;AACX6nB,aAAAA,YAAY,SAAS,IAAIjK,aAAa,CAACiB,OAAO,CAAD,GAAKA,OAAO,CAAD,GAAK,CAAvB,CAAjB,GAA6C7e,GAAG4oD,UAA1E;AACK/gC,aAAAA,YAAY,OAAO,IAAIjK,aAAa,CAAC,KAAKsqC,KAAK,KAAKC,KAAKO,EAArB,CAAjB,GAA4C1oD,GAAG4oD,UAAvE;AACK/gC,aAAAA,YAAY,KAAK,KAAKugC,IAAIpoD,GAAG6gD,SAAlC;AACKh5B,aAAAA,YAAY,SAAS,KAAKogC,QAAQjoD,GAAG6gD,SAA1C;AAAA,MACH;AAAA;;WAOD,SAAY,MAAA;AACR,eAAO,KAAKoH;AAAAA;MANhB,KAAA,SAAAh2E,KAAUjY,GAAG;AACJiuF,aAAAA,SAASjuF;AACd,aAAKgkF,OAAL;AAAA,MACH;AAAA;;WAMD,SAAS,MAAA;AACL,eAAO,KAAKkK;AAAAA;MAGhB,KAAA,SAAAj2E,KAAOjY,GAAG;AACDkuF,aAAAA,MAAMluF;AACX,aAAKgkF,OAAL;AAAA,MACH;AAAA;;WAED,SAAS,MAAA;AACL,eAAO,KAAKmK;AAAAA;MAGhB,KAAA,SAAAl2E,KAAOjY,GAAG;AACDmuF,aAAAA,MAAMnuF;AACX,aAAKgkF,OAAL;AAAA,MACH;AAAA;;WAED,SAAQ,MAAA;AACJ,eAAO,KAAKoK;AAAAA;MAGhB,KAAA,SAAAn2E,KAAMjY,GAAG;AACAouF,aAAAA,KAAKpuF;AACV,aAAKgkF,OAAL;AAAA,MACH;AAAA;;aAED,SAAa,aAAA;AACT,eAAQ,KAAKkK,QAAQ,KAAK,KAAKC,QAAQ,KAAK,KAAKC,OAAO;AAAA,MAC3D;AAAA;;IArE0C9gC;AAyE/CyhC,oBAAkB7kC,qBAAlB;AA4DA6kC,oBAAkB5kC,uBAAlB;MCrIqB6kC;;;AACpB,aAAAA,iBAAYt1C,SAAS;AAAA,UAAA;AAAA,sBAAA,MAAAs1C,gBAAA;AACnB,cAAA,OAAA,KAAA,MAAMt1C,OAAN;AACKn8B,YAAAA,KAAK;AACLC,YAAAA,KAAK;AACLC,YAAAA,KAAK;AACLC,YAAAA,KAAK;AACLkuE,YAAAA,UAAU;AACVqD,YAAAA,iBAAiB;AAPH,aAAA;AAAA,IAQpB;;;WAED,SAAQ,MAAA;AACN,eAAO,KAAK1xE;AAAAA;MAGd,KAAA,SAAAtF,KAAMjY,GAAG;AACFud,aAAAA,KAAKvd;AACV,aAAKgkF,OAAL;AAAA,MACD;AAAA;;WAED,SAAQ,MAAA;AACN,eAAO,KAAKxmE;AAAAA;MAGd,KAAA,SAAAvF,KAAMjY,GAAG;AACFwd,aAAAA,KAAKxd;AACV,aAAKgkF,OAAL;AAAA,MACD;AAAA;;WAED,SAAQ,MAAA;AACN,eAAO,KAAKvmE;AAAAA;MAGd,KAAA,SAAAxF,KAAMjY,GAAG;AACFyd,aAAAA,KAAKzd;AACV,aAAKgkF,OAAL;AAAA,MACD;AAAA;;WAED,SAAQ,MAAA;AACN,eAAO,KAAKtmE;AAAAA;MAGd,KAAA,SAAAzF,KAAMjY,GAAG;AACF0d,aAAAA,KAAK1d;AACV,aAAKgkF,OAAL;AAAA,MACD;AAAA;;WAED,SAAoB,MAAA;AAClB,eAAO,KAAKiL;AAAAA;MAGd,KAAA,SAAAh3E,KAAkBjY,GAAG;AACdivF,aAAAA,iBAAiBjvF;AACtB,aAAKgkF,OAAL;AAAA,MACD;AAAA;;WAED,SAAa,MAAA;AACX,eAAO,KAAK4H;AAAAA;MAGd,KAAA,SAAA3zE,KAAWjY,GAAG;AACP4rF,aAAAA,UAAU5rF;AACf,aAAKgkF,OAAL;AAAA,MACD;AAAA;;MAED,OAAA,SAAA,cAAcp8B,WAAW;AACvB,aAAA,gBAAAonC,iBAAA,SAAA,GAAA,iBAAA,IAAA,EAAA,KAAA,MAAoBpnC,SAApB;AAEA,YAAM0B,QAAQ1B,UAAU5D;AAClBuoC,YAAAA,kBAAkB,KAAKznE,IAAI5E,MAAMqmB,mBAAf;AACxB,aAAKsnB,YAAY,KAAK,KAAKtwC,KAAKgvE,iBAAiB,KAAKvmD,GAAG6gD,SAAzD;AACA,aAAKh5B,YAAY,KAAK,KAAKrwC,KAAK+uE,iBAAiB,KAAKvmD,GAAG6gD,SAAzD;AACA,aAAKh5B,YAAY,KAAK,KAAKpwC,KAAK8uE,iBAAiB,KAAKvmD,GAAG6gD,SAAzD;AACA,aAAKh5B,YAAY,KAAK,KAAKnwC,KAAK6uE,iBAAiB,KAAKvmD,GAAG6gD,SAAzD;AACKh5B,aAAAA,YAAY,iBAAiB,KAAKohC,gBAAgB,KAAKjpD,GAAG6gD,SAA/D;AACA,aAAKh5B,YACN,WACC,KAAK+9B,UAAU,OAAOW,iBACvB,KAAKvmD,GAAG6gD,SAHP;AAKKh5B,aAAAA,YACN,cACA,IAAIjK,aAAa,CACf0F,MAAM7rC,KAAK8uE,iBACXjjC,MAAM5rC,KAAK6uE,eAFI,CAAjB,GAIA,KAAKvmD,GAAG8nB,UANP;AAAA,MAQD;AAAA;;aAED,SAAa,aAAA;AACJ,eAAA,KAAKrwC,OAAO,KAAK,KAAKC,OAAO;AAAA,MACrC;AAAA;;IA5F2C4vC;AA+F3C0hC,kBAAgB9kC,qBAAqBoD,gBAAcpD;AAEnD8kC,kBAAgB7kC,uBAAhB;MChGmB+kC;;;AACjB,aAAAA,gBAAYx1C,SAAS;AAAA,UAAA;AAAA,sBAAA,MAAAw1C,eAAA;AACjB,cAAA,OAAA,KAAA,MAAMx1C,OAAN;AACKuzC,YAAAA,UAAU;AACVjB,YAAAA,UAAU;AACVmD,YAAAA,WAAW;AACXC,YAAAA,aAAa;AACbC,YAAAA,MAAM;AACX,YAAKC,gBAAgB,MAAKnD,oBAAoB,MAAKkD,GAA9B;AAChBE,YAAAA,KAAK;AACV,YAAKC,eAAe,MAAKrD,oBAAoB,MAAKoD,EAA9B;AATH,aAAA;AAAA,IAUpB;;;MAED,KAAA,SAAAt3E,KAAWjY,GAAG;AACPA,YAAAA,MAAM,GAAG;AACRA,cAAI;AAAA,QACP;AACI4rF,aAAAA,UAAU5rF;AAAAA,MAClB;AAAA;;WAMD,SAAa,MAAA;AACT,eAAO,KAAKgsF;AAAAA;MALhB,KAAA,SAAA/zE,KAAWnV,OAAO;AACd,aAAKkpF,UAAUtsF,KAAKqN,IAAIjK,KAAT;AAAA,MAClB;AAAA;;WAWD,SAAY,MAAA;AACR,eAAO,KAAKysF;AAAAA;MANhB,KAAA,SAAAt3E,KAAUrY,MAAM;AACP2vF,aAAAA,KAAK3vF;AACV,aAAK4vF,eAAe,KAAKrD,oBAAoBvsF,IAAzB;AAAA,MACvB;AAAA;;WAWD,SAAsB,MAAA;AAClB,eAAO,KAAK0sF;AAAAA;MANhB,KAAA,SAAAr0E,KAAoBrY,MAAM;AACjByvF,aAAAA,MAAMzvF;AACX,aAAK0vF,gBAAgB,KAAKnD,oBAAoBvsF,IAAzB;AAAA,MACxB;AAAA;;WAUD,SAAc,MAAA;AACV,eAAO,KAAKuvF;AAAAA;MALhB,KAAA,SAAAl3E,KAAYw3E,MAAM;AACTN,aAAAA,WAAWM;AAAAA,MACnB;AAAA;;WAUD,SAAgB,MAAA;AACZ,eAAO,KAAKL;AAAAA;MALhB,KAAA,SAAAn3E,KAAcw3E,MAAM;AACXL,aAAAA,aAAaK;AAAAA,MACrB;AAAA;;WAUD,SAAa,MAAA;AACT,eAAO,KAAKxC;AAAAA;MALhB,KAAA,SAAAh1E,KAAWjY,GAAG;AACLitF,aAAAA,UAAUjtF;AAAAA,MAClB;AAAA;;MAMD,OAAA,SAAA,oBAAoBR,OAAO;AACvB,YAAM62D,MAAMr3D,WAAWm4E,4BAA4B33E,KAAvC;AACZ62D,YAAI,CAAD,KAAOA,IAAI,CAAD;AACbA,YAAI,CAAD,KAAOA,IAAI,CAAD;AACbA,YAAI,CAAD,KAAOA,IAAI,CAAD;AACb,eAAO,IAAIzS,aAAayS,GAAjB;AAAA,MACV;AAAA;;MAED,OAAA,SAAA,cAAczO,WAAW;AACrB,aAAA,gBAAAsnC,gBAAA,SAAA,GAAA,iBAAA,IAAA,EAAA,KAAA,MAAoBtnC,SAApB;AACA,YAAM0B,QAAQ1B,UAAU5D;AAClBm6B,YAAAA,SAAS,KAAKyN,WAAYtiC,MAAM7rC,KAAK;AAE3C,YAAG,KAAKuuE,YAAY,GAAG;AACnB,eAAKA,UAAU7N,SAAS;AAAA,QAC3B;AAEItwB,aAAAA,YAAY,cAAc,IAAIjK,aAAa,CAAC0F,MAAM7rC,IAAI6rC,MAAM5rC,EAAjB,CAAjB,GAAyC,KAAKsoB,GAAG8nB,UAAhF;AACKD,aAAAA,YAAY,SAAS,KAAK2hC,cAAc,KAAKxpD,GAAGmlD,UAArD;AACKt9B,aAAAA,YAAY,mBAAmB,KAAKyhC,eAAe,KAAKtpD,GAAGmlD,UAAhE;AACKt9B,aAAAA,YAAY,UAAW,KAAKm+B,SAAS,KAAKhmD,GAAG6gD,SAAlD;AACKh5B,aAAAA,YAAY,UAAWswB,QAAQ,KAAKn4C,GAAG6gD,SAA5C;AACA,aAAKh5B,YAAY,aAAc,KAAKuhC,aAAa,KAAK,GAAG,KAAKppD,GAAG6gD,SAAjE;AACA,aAAKh5B,YAAY,WAAW,CAAC,CAAC,KAAKshC,UAAU,KAAKnpD,GAAG6gD,SAArD;AACA,aAAKh5B,YAAY,QAAQ5rC,KAAK6+C,IAAL,IAAaouB,gBAAeQ,UAAU,KAAK1pD,GAAG6gD,SAAvE;AACKh5B,aAAAA,YAAY,UAAU,KAAKo/B,SAAS,KAAKjnD,GAAG6gD,SAAjD;AACA,aAAKh5B,YAAY,SAASjG,UAAUxD,eAAe,CAAzB,EAA4BooC,cAAcvrF,OAAO,KAAK+kC,GAAG6gD,SAAnF;AAEA,YAAG,KAAKyF,QAAQ,KAAK+C,OAAO,KAAKrD,YAAY7N,SAAS,KAAK;AACvD,eAAK6F,OAAL;AAAA,QACH;AAAA,MACJ;AAAA;;IArGuC12B;AAwG5C4hC,iBAAeQ,WAAWztE,KAAK6+C;AAE/BouB,iBAAe/kC,uBAAf;ACjDA,MAAMwlC,YAAY;AAAA,IACdhY;AAAAA,IACA34B;AAAAA,IACAr5C;AAAAA,IACA9C,OAAAA;AAAAA,IACA7D;AAAAA,IACA6sC;AAAAA,IACAmyC;AAAAA,IACA/R;AAAAA,IACA5lD;AAAAA,IACA3B;AAAAA,IACA8R;AAAAA,IACAlC;AAAAA,IACAs7D,SAAS;AAAA,MACLC,WAAWzG;AAAAA,MACX0G,SAAS5L;AAAAA,MACT6L,WAAWvG;AAAAA,MACXwG,cAAcjG;AAAAA,MACdkG,WAAWnF;AAAAA,MACXoF,YAAYrM;AAAAA,MACZsM,SAASpF;AAAAA,MACTqF,UAAU5E;AAAAA,MACV6E,cAAc1E;AAAAA,MACd2E,kBAAkBxE;AAAAA,MAClByE,UAAUrB;AAAAA,MACVsB,SAAS/D;AAAAA,MACTgE,MAAMnD;AAAAA,MACNoD,UAAU9D;AAAAA,MACV+D,SAAS3D;AAAAA,MACT4D,gBAAgBrD;AAAAA,MAChBsD,SAAS/C;AAAAA,MACTgD,aAAa/B;AAAAA,MACbgC,WAAW/B;AAAAA,MACXxiC;AAAAA,MACA88B,oBAAAA;AAAAA,MACA51B;AAAAA,MACA61B,kBAAAA;AAAAA,MACAtyB,KAAK;AAAA,QACD44B,WAAWxG;AAAAA,QACX2H,MAAM7L;AAAAA,MAFL;AAAA,IArCK;AAAA,IA0CdhlE,UAAU;AAAA,MACNs1D;AAAAA,MACA6K;AAAAA,MACA/8C;AAAAA,MACAxJ;AAAAA,MACA2mD;AAAAA,MACAmB;AAAAA,MACAjE;AAAAA,MACA/2C;AAAAA,IAlDU;AAAA,IAoDdoqD,YAAY;AAAA,MACR5M;AAAAA,MACA0C;AAAAA,MACAG;AAAAA,MACAW;AAAAA,MACA/F;AAAAA,IAzDU;AAAA,IA2DdoP,OAAO;AAAA,MACH7R;AAAAA,MACAc;AAAAA,MACAC;AAAAA,IAHG;AAAA,EA3DO;AAkElB,MAAIv9E,QAAMoC,OAAO;AACbC,WAAOisF,MAAMxB;AAAAA,EAChB;;;"}